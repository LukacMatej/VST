
cv06_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006314  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  080064d4  080064d4  000074d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800662c  0800662c  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  0800662c  0800662c  0000762c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006634  08006634  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006634  08006634  00007634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006638  08006638  00007638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20040000  0800663c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000924  2004005c  08006698  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20040980  08006698  00008980  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122b3  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002756  00000000  00000000  0001a33f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  0001ca98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac2  00000000  00000000  0001d898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029fe5  00000000  00000000  0001e35a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011960  00000000  00000000  0004833f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff8bc  00000000  00000000  00059c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015955b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f10  00000000  00000000  001595a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0015d4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2004005c 	.word	0x2004005c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080064bc 	.word	0x080064bc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20040060 	.word	0x20040060
 80001fc:	080064bc 	.word	0x080064bc

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fd3e 	bl	8001026 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f8cd 	bl	8000748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 fa17 	bl	80009e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b2:	f000 f9e3 	bl	800097c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005b6:	f000 f91b 	bl	80007f0 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 80005ba:	f000 f965 	bl	8000888 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005be:	f000 f9af 	bl	8000920 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  sprintf(str,"xkdmqwejzvbyluscfhotgnpraxmbtgfwcyzodslkejhvnupqairtmgxocdbzyvwnlkseqjfhurapxodcmgzytbnvkewsljqphurfa");
 80005c2:	4951      	ldr	r1, [pc, #324]	@ (8000708 <main+0x168>)
 80005c4:	4851      	ldr	r0, [pc, #324]	@ (800070c <main+0x16c>)
 80005c6:	f005 fad9 	bl	8005b7c <siprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (write_time) {
 80005ca:	4b51      	ldr	r3, [pc, #324]	@ (8000710 <main+0x170>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d008      	beq.n	80005e4 <main+0x44>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80005d2:	2180      	movs	r1, #128	@ 0x80
 80005d4:	484f      	ldr	r0, [pc, #316]	@ (8000714 <main+0x174>)
 80005d6:	f001 fba9 	bl	8001d2c <HAL_GPIO_TogglePin>
		  counter += 1;
 80005da:	4b4f      	ldr	r3, [pc, #316]	@ (8000718 <main+0x178>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	3301      	adds	r3, #1
 80005e0:	4a4d      	ldr	r2, [pc, #308]	@ (8000718 <main+0x178>)
 80005e2:	6013      	str	r3, [r2, #0]
	  }

	  if (!write_time) {
 80005e4:	4b4a      	ldr	r3, [pc, #296]	@ (8000710 <main+0x170>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	f083 0301 	eor.w	r3, r3, #1
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d053      	beq.n	800069a <main+0xfa>
		  start_time = HAL_GetTick();
 80005f2:	f000 fd81 	bl	80010f8 <HAL_GetTick>
 80005f6:	4603      	mov	r3, r0
 80005f8:	4a48      	ldr	r2, [pc, #288]	@ (800071c <main+0x17c>)
 80005fa:	6013      	str	r3, [r2, #0]
	      write_time = true;
 80005fc:	4b44      	ldr	r3, [pc, #272]	@ (8000710 <main+0x170>)
 80005fe:	2201      	movs	r2, #1
 8000600:	701a      	strb	r2, [r3, #0]

	      switch (state) {
 8000602:	4b47      	ldr	r3, [pc, #284]	@ (8000720 <main+0x180>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2b02      	cmp	r3, #2
 8000608:	d02f      	beq.n	800066a <main+0xca>
 800060a:	2b02      	cmp	r3, #2
 800060c:	d83f      	bhi.n	800068e <main+0xee>
 800060e:	2b00      	cmp	r3, #0
 8000610:	d002      	beq.n	8000618 <main+0x78>
 8000612:	2b01      	cmp	r3, #1
 8000614:	d015      	beq.n	8000642 <main+0xa2>
 8000616:	e03a      	b.n	800068e <main+0xee>
	       	   case 0: // Blokující přenos
	       		   err = HAL_UART_Transmit(&hlpuart1, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000618:	483c      	ldr	r0, [pc, #240]	@ (800070c <main+0x16c>)
 800061a:	f7ff fdf1 	bl	8000200 <strlen>
 800061e:	4603      	mov	r3, r0
 8000620:	b29a      	uxth	r2, r3
 8000622:	f04f 33ff 	mov.w	r3, #4294967295
 8000626:	4939      	ldr	r1, [pc, #228]	@ (800070c <main+0x16c>)
 8000628:	483e      	ldr	r0, [pc, #248]	@ (8000724 <main+0x184>)
 800062a:	f003 f9f1 	bl	8003a10 <HAL_UART_Transmit>
 800062e:	4603      	mov	r3, r0
 8000630:	461a      	mov	r2, r3
 8000632:	4b3d      	ldr	r3, [pc, #244]	@ (8000728 <main+0x188>)
 8000634:	701a      	strb	r2, [r3, #0]
	               strcpy(type_of_transmit, "BLOCKING");
 8000636:	4b3d      	ldr	r3, [pc, #244]	@ (800072c <main+0x18c>)
 8000638:	4a3d      	ldr	r2, [pc, #244]	@ (8000730 <main+0x190>)
 800063a:	ca07      	ldmia	r2, {r0, r1, r2}
 800063c:	c303      	stmia	r3!, {r0, r1}
 800063e:	701a      	strb	r2, [r3, #0]
	               break;
 8000640:	e025      	b.n	800068e <main+0xee>

	           case 1: // Přenos s přerušením
	               err = HAL_UART_Transmit_IT(&hlpuart1, (uint8_t *)str, strlen(str));
 8000642:	4832      	ldr	r0, [pc, #200]	@ (800070c <main+0x16c>)
 8000644:	f7ff fddc 	bl	8000200 <strlen>
 8000648:	4603      	mov	r3, r0
 800064a:	b29b      	uxth	r3, r3
 800064c:	461a      	mov	r2, r3
 800064e:	492f      	ldr	r1, [pc, #188]	@ (800070c <main+0x16c>)
 8000650:	4834      	ldr	r0, [pc, #208]	@ (8000724 <main+0x184>)
 8000652:	f003 fa6b 	bl	8003b2c <HAL_UART_Transmit_IT>
 8000656:	4603      	mov	r3, r0
 8000658:	461a      	mov	r2, r3
 800065a:	4b33      	ldr	r3, [pc, #204]	@ (8000728 <main+0x188>)
 800065c:	701a      	strb	r2, [r3, #0]
	               strcpy(type_of_transmit, "INTERRUPT");
 800065e:	4b33      	ldr	r3, [pc, #204]	@ (800072c <main+0x18c>)
 8000660:	4a34      	ldr	r2, [pc, #208]	@ (8000734 <main+0x194>)
 8000662:	ca07      	ldmia	r2, {r0, r1, r2}
 8000664:	c303      	stmia	r3!, {r0, r1}
 8000666:	801a      	strh	r2, [r3, #0]
	               break;
 8000668:	e011      	b.n	800068e <main+0xee>

	           case 2: // Přenos pomocí DMA
	               err = HAL_UART_Transmit_DMA(&hlpuart1, (uint8_t *)str, strlen(str));
 800066a:	4828      	ldr	r0, [pc, #160]	@ (800070c <main+0x16c>)
 800066c:	f7ff fdc8 	bl	8000200 <strlen>
 8000670:	4603      	mov	r3, r0
 8000672:	b29b      	uxth	r3, r3
 8000674:	461a      	mov	r2, r3
 8000676:	4925      	ldr	r1, [pc, #148]	@ (800070c <main+0x16c>)
 8000678:	482a      	ldr	r0, [pc, #168]	@ (8000724 <main+0x184>)
 800067a:	f003 faeb 	bl	8003c54 <HAL_UART_Transmit_DMA>
 800067e:	4603      	mov	r3, r0
 8000680:	461a      	mov	r2, r3
 8000682:	4b29      	ldr	r3, [pc, #164]	@ (8000728 <main+0x188>)
 8000684:	701a      	strb	r2, [r3, #0]
	               strcpy(type_of_transmit, "DMA");
 8000686:	4b29      	ldr	r3, [pc, #164]	@ (800072c <main+0x18c>)
 8000688:	4a2b      	ldr	r2, [pc, #172]	@ (8000738 <main+0x198>)
 800068a:	601a      	str	r2, [r3, #0]
	               break;
 800068c:	bf00      	nop
	      }

	      if (err != HAL_OK) {
 800068e:	4b26      	ldr	r3, [pc, #152]	@ (8000728 <main+0x188>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <main+0xfa>
	          Error_Handler();
 8000696:	f000 fa47 	bl	8000b28 <Error_Handler>
	      }
	  }



	  uint32_t duration = HAL_GetTick() - start_time;
 800069a:	f000 fd2d 	bl	80010f8 <HAL_GetTick>
 800069e:	4602      	mov	r2, r0
 80006a0:	4b1e      	ldr	r3, [pc, #120]	@ (800071c <main+0x17c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	607b      	str	r3, [r7, #4]
	  sprintf(message, "%s: Start: %lu ms, Duration: %lu ms, Blinks: %lu\r\n", type_of_transmit, start_time, duration, counter);
 80006a8:	4b1c      	ldr	r3, [pc, #112]	@ (800071c <main+0x17c>)
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000718 <main+0x178>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	4613      	mov	r3, r2
 80006b8:	4a1c      	ldr	r2, [pc, #112]	@ (800072c <main+0x18c>)
 80006ba:	4920      	ldr	r1, [pc, #128]	@ (800073c <main+0x19c>)
 80006bc:	4820      	ldr	r0, [pc, #128]	@ (8000740 <main+0x1a0>)
 80006be:	f005 fa5d 	bl	8005b7c <siprintf>

	  HAL_UART_Transmit(&hlpuart1, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80006c2:	481f      	ldr	r0, [pc, #124]	@ (8000740 <main+0x1a0>)
 80006c4:	f7ff fd9c 	bl	8000200 <strlen>
 80006c8:	4603      	mov	r3, r0
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	f04f 33ff 	mov.w	r3, #4294967295
 80006d0:	491b      	ldr	r1, [pc, #108]	@ (8000740 <main+0x1a0>)
 80006d2:	4814      	ldr	r0, [pc, #80]	@ (8000724 <main+0x184>)
 80006d4:	f003 f99c 	bl	8003a10 <HAL_UART_Transmit>
	  counter = 0;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <main+0x178>)
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
	  write_time = false;
 80006de:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <main+0x170>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
	  state = (state + 1) % 3;
 80006e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <main+0x180>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	1c59      	adds	r1, r3, #1
 80006ea:	4b16      	ldr	r3, [pc, #88]	@ (8000744 <main+0x1a4>)
 80006ec:	fba3 2301 	umull	r2, r3, r3, r1
 80006f0:	085a      	lsrs	r2, r3, #1
 80006f2:	4613      	mov	r3, r2
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	4413      	add	r3, r2
 80006f8:	1aca      	subs	r2, r1, r3
 80006fa:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <main+0x180>)
 80006fc:	601a      	str	r2, [r3, #0]
	  HAL_Delay(500);
 80006fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000702:	f000 fd05 	bl	8001110 <HAL_Delay>
  {
 8000706:	e760      	b.n	80005ca <main+0x2a>
 8000708:	080064d4 	.word	0x080064d4
 800070c:	2004007c 	.word	0x2004007c
 8000710:	2004082c 	.word	0x2004082c
 8000714:	48000400 	.word	0x48000400
 8000718:	20040154 	.word	0x20040154
 800071c:	20040158 	.word	0x20040158
 8000720:	2004015c 	.word	0x2004015c
 8000724:	20040160 	.word	0x20040160
 8000728:	20040078 	.word	0x20040078
 800072c:	20040144 	.word	0x20040144
 8000730:	0800653c 	.word	0x0800653c
 8000734:	08006548 	.word	0x08006548
 8000738:	00414d44 	.word	0x00414d44
 800073c:	08006554 	.word	0x08006554
 8000740:	200400e0 	.word	0x200400e0
 8000744:	aaaaaaab 	.word	0xaaaaaaab

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b096      	sub	sp, #88	@ 0x58
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	2244      	movs	r2, #68	@ 0x44
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f005 fa30 	bl	8005bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	463b      	mov	r3, r7
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800076a:	2000      	movs	r0, #0
 800076c:	f001 fc4c 	bl	8002008 <HAL_PWREx_ControlVoltageScaling>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000776:	f000 f9d7 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800077a:	2322      	movs	r3, #34	@ 0x22
 800077c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000782:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000784:	2301      	movs	r3, #1
 8000786:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000788:	2340      	movs	r3, #64	@ 0x40
 800078a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078c:	2302      	movs	r3, #2
 800078e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000790:	2302      	movs	r3, #2
 8000792:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000794:	2302      	movs	r3, #2
 8000796:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000798:	231e      	movs	r3, #30
 800079a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800079c:	2302      	movs	r3, #2
 800079e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 fcef 	bl	8002190 <HAL_RCC_OscConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80007b8:	f000 f9b6 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007bc:	230f      	movs	r3, #15
 80007be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c0:	2303      	movs	r3, #3
 80007c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007d2:	463b      	mov	r3, r7
 80007d4:	2105      	movs	r1, #5
 80007d6:	4618      	mov	r0, r3
 80007d8:	f002 f8f4 	bl	80029c4 <HAL_RCC_ClockConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007e2:	f000 f9a1 	bl	8000b28 <Error_Handler>
  }
}
 80007e6:	bf00      	nop
 80007e8:	3758      	adds	r7, #88	@ 0x58
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007f4:	4b22      	ldr	r3, [pc, #136]	@ (8000880 <MX_LPUART1_UART_Init+0x90>)
 80007f6:	4a23      	ldr	r2, [pc, #140]	@ (8000884 <MX_LPUART1_UART_Init+0x94>)
 80007f8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80007fa:	4b21      	ldr	r3, [pc, #132]	@ (8000880 <MX_LPUART1_UART_Init+0x90>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000800:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b1f      	ldr	r3, [pc, #124]	@ (8000880 <MX_LPUART1_UART_Init+0x90>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b1d      	ldr	r3, [pc, #116]	@ (8000880 <MX_LPUART1_UART_Init+0x90>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800080e:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <MX_LPUART1_UART_Init+0x90>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b1a      	ldr	r3, [pc, #104]	@ (8000880 <MX_LPUART1_UART_Init+0x90>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <MX_LPUART1_UART_Init+0x90>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000820:	4b17      	ldr	r3, [pc, #92]	@ (8000880 <MX_LPUART1_UART_Init+0x90>)
 8000822:	2200      	movs	r2, #0
 8000824:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000826:	4b16      	ldr	r3, [pc, #88]	@ (8000880 <MX_LPUART1_UART_Init+0x90>)
 8000828:	2200      	movs	r2, #0
 800082a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800082c:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <MX_LPUART1_UART_Init+0x90>)
 800082e:	2200      	movs	r2, #0
 8000830:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000832:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <MX_LPUART1_UART_Init+0x90>)
 8000834:	2200      	movs	r2, #0
 8000836:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000838:	4811      	ldr	r0, [pc, #68]	@ (8000880 <MX_LPUART1_UART_Init+0x90>)
 800083a:	f003 f899 	bl	8003970 <HAL_UART_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000844:	f000 f970 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000848:	2100      	movs	r1, #0
 800084a:	480d      	ldr	r0, [pc, #52]	@ (8000880 <MX_LPUART1_UART_Init+0x90>)
 800084c:	f004 fe1f 	bl	800548e <HAL_UARTEx_SetTxFifoThreshold>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000856:	f000 f967 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800085a:	2100      	movs	r1, #0
 800085c:	4808      	ldr	r0, [pc, #32]	@ (8000880 <MX_LPUART1_UART_Init+0x90>)
 800085e:	f004 fe54 	bl	800550a <HAL_UARTEx_SetRxFifoThreshold>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000868:	f000 f95e 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800086c:	4804      	ldr	r0, [pc, #16]	@ (8000880 <MX_LPUART1_UART_Init+0x90>)
 800086e:	f004 fdd5 	bl	800541c <HAL_UARTEx_DisableFifoMode>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000878:	f000 f956 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20040160 	.word	0x20040160
 8000884:	40008000 	.word	0x40008000

08000888 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800088c:	4b22      	ldr	r3, [pc, #136]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 800088e:	4a23      	ldr	r2, [pc, #140]	@ (800091c <MX_USART3_UART_Init+0x94>)
 8000890:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000892:	4b21      	ldr	r3, [pc, #132]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 8000894:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000898:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800089a:	4b1f      	ldr	r3, [pc, #124]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 80008ae:	220c      	movs	r2, #12
 80008b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008b2:	4b19      	ldr	r3, [pc, #100]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b8:	4b17      	ldr	r3, [pc, #92]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008be:	4b16      	ldr	r3, [pc, #88]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c4:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ca:	4b13      	ldr	r3, [pc, #76]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008d0:	4811      	ldr	r0, [pc, #68]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 80008d2:	f003 f84d 	bl	8003970 <HAL_UART_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008dc:	f000 f924 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e0:	2100      	movs	r1, #0
 80008e2:	480d      	ldr	r0, [pc, #52]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 80008e4:	f004 fdd3 	bl	800548e <HAL_UARTEx_SetTxFifoThreshold>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008ee:	f000 f91b 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f2:	2100      	movs	r1, #0
 80008f4:	4808      	ldr	r0, [pc, #32]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 80008f6:	f004 fe08 	bl	800550a <HAL_UARTEx_SetRxFifoThreshold>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000900:	f000 f912 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000904:	4804      	ldr	r0, [pc, #16]	@ (8000918 <MX_USART3_UART_Init+0x90>)
 8000906:	f004 fd89 	bl	800541c <HAL_UARTEx_DisableFifoMode>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000910:	f000 f90a 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	200401f4 	.word	0x200401f4
 800091c:	40004800 	.word	0x40004800

08000920 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000924:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000926:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800092a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800092c:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092e:	2206      	movs	r2, #6
 8000930:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000932:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000934:	2202      	movs	r2, #2
 8000936:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000938:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093a:	2202      	movs	r2, #2
 800093c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800093e:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000940:	2201      	movs	r2, #1
 8000942:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000944:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800094a:	4b0b      	ldr	r3, [pc, #44]	@ (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000950:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000952:	2201      	movs	r2, #1
 8000954:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000956:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095e:	2201      	movs	r2, #1
 8000960:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000962:	4805      	ldr	r0, [pc, #20]	@ (8000978 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000964:	f001 f9fc 	bl	8001d60 <HAL_PCD_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800096e:	f000 f8db 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20040348 	.word	0x20040348

0800097c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000982:	4b16      	ldr	r3, [pc, #88]	@ (80009dc <MX_DMA_Init+0x60>)
 8000984:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000986:	4a15      	ldr	r2, [pc, #84]	@ (80009dc <MX_DMA_Init+0x60>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6493      	str	r3, [r2, #72]	@ 0x48
 800098e:	4b13      	ldr	r3, [pc, #76]	@ (80009dc <MX_DMA_Init+0x60>)
 8000990:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800099a:	4b10      	ldr	r3, [pc, #64]	@ (80009dc <MX_DMA_Init+0x60>)
 800099c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800099e:	4a0f      	ldr	r2, [pc, #60]	@ (80009dc <MX_DMA_Init+0x60>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6493      	str	r3, [r2, #72]	@ 0x48
 80009a6:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <MX_DMA_Init+0x60>)
 80009a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	200b      	movs	r0, #11
 80009b8:	f000 fca9 	bl	800130e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009bc:	200b      	movs	r0, #11
 80009be:	f000 fcc2 	bl	8001346 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	200c      	movs	r0, #12
 80009c8:	f000 fca1 	bl	800130e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80009cc:	200c      	movs	r0, #12
 80009ce:	f000 fcba 	bl	8001346 <HAL_NVIC_EnableIRQ>

}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40021000 	.word	0x40021000

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08c      	sub	sp, #48	@ 0x30
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	4b48      	ldr	r3, [pc, #288]	@ (8000b18 <MX_GPIO_Init+0x138>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fa:	4a47      	ldr	r2, [pc, #284]	@ (8000b18 <MX_GPIO_Init+0x138>)
 80009fc:	f043 0304 	orr.w	r3, r3, #4
 8000a00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a02:	4b45      	ldr	r3, [pc, #276]	@ (8000b18 <MX_GPIO_Init+0x138>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a06:	f003 0304 	and.w	r3, r3, #4
 8000a0a:	61bb      	str	r3, [r7, #24]
 8000a0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a0e:	4b42      	ldr	r3, [pc, #264]	@ (8000b18 <MX_GPIO_Init+0x138>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a12:	4a41      	ldr	r2, [pc, #260]	@ (8000b18 <MX_GPIO_Init+0x138>)
 8000a14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a1a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b18 <MX_GPIO_Init+0x138>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	4b3c      	ldr	r3, [pc, #240]	@ (8000b18 <MX_GPIO_Init+0x138>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2a:	4a3b      	ldr	r2, [pc, #236]	@ (8000b18 <MX_GPIO_Init+0x138>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a32:	4b39      	ldr	r3, [pc, #228]	@ (8000b18 <MX_GPIO_Init+0x138>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3e:	4b36      	ldr	r3, [pc, #216]	@ (8000b18 <MX_GPIO_Init+0x138>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a42:	4a35      	ldr	r2, [pc, #212]	@ (8000b18 <MX_GPIO_Init+0x138>)
 8000a44:	f043 0308 	orr.w	r3, r3, #8
 8000a48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a4a:	4b33      	ldr	r3, [pc, #204]	@ (8000b18 <MX_GPIO_Init+0x138>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4e:	f003 0308 	and.w	r3, r3, #8
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a56:	4b30      	ldr	r3, [pc, #192]	@ (8000b18 <MX_GPIO_Init+0x138>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5a:	4a2f      	ldr	r2, [pc, #188]	@ (8000b18 <MX_GPIO_Init+0x138>)
 8000a5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a62:	4b2d      	ldr	r3, [pc, #180]	@ (8000b18 <MX_GPIO_Init+0x138>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000a6e:	f001 fb7f 	bl	8002170 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b29      	ldr	r3, [pc, #164]	@ (8000b18 <MX_GPIO_Init+0x138>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a76:	4a28      	ldr	r2, [pc, #160]	@ (8000b18 <MX_GPIO_Init+0x138>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a7e:	4b26      	ldr	r3, [pc, #152]	@ (8000b18 <MX_GPIO_Init+0x138>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000a90:	4822      	ldr	r0, [pc, #136]	@ (8000b1c <MX_GPIO_Init+0x13c>)
 8000a92:	f001 f933 	bl	8001cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2140      	movs	r1, #64	@ 0x40
 8000a9a:	4821      	ldr	r0, [pc, #132]	@ (8000b20 <MX_GPIO_Init+0x140>)
 8000a9c:	f001 f92e 	bl	8001cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aa0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	481b      	ldr	r0, [pc, #108]	@ (8000b24 <MX_GPIO_Init+0x144>)
 8000ab8:	f000 ff8e 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000abc:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ace:	f107 031c 	add.w	r3, r7, #28
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4811      	ldr	r0, [pc, #68]	@ (8000b1c <MX_GPIO_Init+0x13c>)
 8000ad6:	f000 ff7f 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ada:	2320      	movs	r3, #32
 8000adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	4619      	mov	r1, r3
 8000aec:	480c      	ldr	r0, [pc, #48]	@ (8000b20 <MX_GPIO_Init+0x140>)
 8000aee:	f000 ff73 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000af2:	2340      	movs	r3, #64	@ 0x40
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <MX_GPIO_Init+0x140>)
 8000b0a:	f000 ff65 	bl	80019d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b0e:	bf00      	nop
 8000b10:	3730      	adds	r7, #48	@ 0x30
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	48000400 	.word	0x48000400
 8000b20:	48001800 	.word	0x48001800
 8000b24:	48000800 	.word	0x48000800

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <Error_Handler+0x8>

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b78 <HAL_MspInit+0x44>)
 8000b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b78 <HAL_MspInit+0x44>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b46:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <HAL_MspInit+0x44>)
 8000b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <HAL_MspInit+0x44>)
 8000b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b56:	4a08      	ldr	r2, [pc, #32]	@ (8000b78 <HAL_MspInit+0x44>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b5e:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <HAL_MspInit+0x44>)
 8000b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000

08000b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b0b0      	sub	sp, #192	@ 0xc0
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b94:	f107 0318 	add.w	r3, r7, #24
 8000b98:	2294      	movs	r2, #148	@ 0x94
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f005 f80d 	bl	8005bbc <memset>
  if(huart->Instance==LPUART1)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a71      	ldr	r2, [pc, #452]	@ (8000d6c <HAL_UART_MspInit+0x1f0>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	f040 809a 	bne.w	8000ce2 <HAL_UART_MspInit+0x166>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000bae:	2320      	movs	r3, #32
 8000bb0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb6:	f107 0318 	add.w	r3, r7, #24
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f002 f9c0 	bl	8002f40 <HAL_RCCEx_PeriphCLKConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bc6:	f7ff ffaf 	bl	8000b28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bca:	4b69      	ldr	r3, [pc, #420]	@ (8000d70 <HAL_UART_MspInit+0x1f4>)
 8000bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000bce:	4a68      	ldr	r2, [pc, #416]	@ (8000d70 <HAL_UART_MspInit+0x1f4>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000bd6:	4b66      	ldr	r3, [pc, #408]	@ (8000d70 <HAL_UART_MspInit+0x1f4>)
 8000bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000be2:	4b63      	ldr	r3, [pc, #396]	@ (8000d70 <HAL_UART_MspInit+0x1f4>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be6:	4a62      	ldr	r2, [pc, #392]	@ (8000d70 <HAL_UART_MspInit+0x1f4>)
 8000be8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bee:	4b60      	ldr	r3, [pc, #384]	@ (8000d70 <HAL_UART_MspInit+0x1f4>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000bfa:	f001 fab9 	bl	8002170 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000bfe:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000c02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c12:	2303      	movs	r3, #3
 8000c14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000c18:	2308      	movs	r3, #8
 8000c1a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c1e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c22:	4619      	mov	r1, r3
 8000c24:	4853      	ldr	r0, [pc, #332]	@ (8000d74 <HAL_UART_MspInit+0x1f8>)
 8000c26:	f000 fed7 	bl	80019d8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000c2a:	4b53      	ldr	r3, [pc, #332]	@ (8000d78 <HAL_UART_MspInit+0x1fc>)
 8000c2c:	4a53      	ldr	r2, [pc, #332]	@ (8000d7c <HAL_UART_MspInit+0x200>)
 8000c2e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000c30:	4b51      	ldr	r3, [pc, #324]	@ (8000d78 <HAL_UART_MspInit+0x1fc>)
 8000c32:	2222      	movs	r2, #34	@ 0x22
 8000c34:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c36:	4b50      	ldr	r3, [pc, #320]	@ (8000d78 <HAL_UART_MspInit+0x1fc>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c3c:	4b4e      	ldr	r3, [pc, #312]	@ (8000d78 <HAL_UART_MspInit+0x1fc>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c42:	4b4d      	ldr	r3, [pc, #308]	@ (8000d78 <HAL_UART_MspInit+0x1fc>)
 8000c44:	2280      	movs	r2, #128	@ 0x80
 8000c46:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c48:	4b4b      	ldr	r3, [pc, #300]	@ (8000d78 <HAL_UART_MspInit+0x1fc>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c4e:	4b4a      	ldr	r3, [pc, #296]	@ (8000d78 <HAL_UART_MspInit+0x1fc>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000c54:	4b48      	ldr	r3, [pc, #288]	@ (8000d78 <HAL_UART_MspInit+0x1fc>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c5a:	4b47      	ldr	r3, [pc, #284]	@ (8000d78 <HAL_UART_MspInit+0x1fc>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000c60:	4845      	ldr	r0, [pc, #276]	@ (8000d78 <HAL_UART_MspInit+0x1fc>)
 8000c62:	f000 fb8b 	bl	800137c <HAL_DMA_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8000c6c:	f7ff ff5c 	bl	8000b28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a41      	ldr	r2, [pc, #260]	@ (8000d78 <HAL_UART_MspInit+0x1fc>)
 8000c74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000c78:	4a3f      	ldr	r2, [pc, #252]	@ (8000d78 <HAL_UART_MspInit+0x1fc>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000c7e:	4b40      	ldr	r3, [pc, #256]	@ (8000d80 <HAL_UART_MspInit+0x204>)
 8000c80:	4a40      	ldr	r2, [pc, #256]	@ (8000d84 <HAL_UART_MspInit+0x208>)
 8000c82:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000c84:	4b3e      	ldr	r3, [pc, #248]	@ (8000d80 <HAL_UART_MspInit+0x204>)
 8000c86:	2223      	movs	r2, #35	@ 0x23
 8000c88:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c8a:	4b3d      	ldr	r3, [pc, #244]	@ (8000d80 <HAL_UART_MspInit+0x204>)
 8000c8c:	2210      	movs	r2, #16
 8000c8e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c90:	4b3b      	ldr	r3, [pc, #236]	@ (8000d80 <HAL_UART_MspInit+0x204>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c96:	4b3a      	ldr	r3, [pc, #232]	@ (8000d80 <HAL_UART_MspInit+0x204>)
 8000c98:	2280      	movs	r2, #128	@ 0x80
 8000c9a:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c9c:	4b38      	ldr	r3, [pc, #224]	@ (8000d80 <HAL_UART_MspInit+0x204>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ca2:	4b37      	ldr	r3, [pc, #220]	@ (8000d80 <HAL_UART_MspInit+0x204>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000ca8:	4b35      	ldr	r3, [pc, #212]	@ (8000d80 <HAL_UART_MspInit+0x204>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cae:	4b34      	ldr	r3, [pc, #208]	@ (8000d80 <HAL_UART_MspInit+0x204>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000cb4:	4832      	ldr	r0, [pc, #200]	@ (8000d80 <HAL_UART_MspInit+0x204>)
 8000cb6:	f000 fb61 	bl	800137c <HAL_DMA_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <HAL_UART_MspInit+0x148>
    {
      Error_Handler();
 8000cc0:	f7ff ff32 	bl	8000b28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a2e      	ldr	r2, [pc, #184]	@ (8000d80 <HAL_UART_MspInit+0x204>)
 8000cc8:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000cca:	4a2d      	ldr	r2, [pc, #180]	@ (8000d80 <HAL_UART_MspInit+0x204>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2046      	movs	r0, #70	@ 0x46
 8000cd6:	f000 fb1a 	bl	800130e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000cda:	2046      	movs	r0, #70	@ 0x46
 8000cdc:	f000 fb33 	bl	8001346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ce0:	e040      	b.n	8000d64 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a28      	ldr	r2, [pc, #160]	@ (8000d88 <HAL_UART_MspInit+0x20c>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d13b      	bne.n	8000d64 <HAL_UART_MspInit+0x1e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cec:	2304      	movs	r3, #4
 8000cee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf4:	f107 0318 	add.w	r3, r7, #24
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f002 f921 	bl	8002f40 <HAL_RCCEx_PeriphCLKConfig>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8000d04:	f7ff ff10 	bl	8000b28 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d08:	4b19      	ldr	r3, [pc, #100]	@ (8000d70 <HAL_UART_MspInit+0x1f4>)
 8000d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d0c:	4a18      	ldr	r2, [pc, #96]	@ (8000d70 <HAL_UART_MspInit+0x1f4>)
 8000d0e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d12:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d14:	4b16      	ldr	r3, [pc, #88]	@ (8000d70 <HAL_UART_MspInit+0x1f4>)
 8000d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d20:	4b13      	ldr	r3, [pc, #76]	@ (8000d70 <HAL_UART_MspInit+0x1f4>)
 8000d22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d24:	4a12      	ldr	r2, [pc, #72]	@ (8000d70 <HAL_UART_MspInit+0x1f4>)
 8000d26:	f043 0308 	orr.w	r3, r3, #8
 8000d2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d2c:	4b10      	ldr	r3, [pc, #64]	@ (8000d70 <HAL_UART_MspInit+0x1f4>)
 8000d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d30:	f003 0308 	and.w	r3, r3, #8
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d38:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d52:	2307      	movs	r3, #7
 8000d54:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d58:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	480b      	ldr	r0, [pc, #44]	@ (8000d8c <HAL_UART_MspInit+0x210>)
 8000d60:	f000 fe3a 	bl	80019d8 <HAL_GPIO_Init>
}
 8000d64:	bf00      	nop
 8000d66:	37c0      	adds	r7, #192	@ 0xc0
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40008000 	.word	0x40008000
 8000d70:	40021000 	.word	0x40021000
 8000d74:	48001800 	.word	0x48001800
 8000d78:	20040288 	.word	0x20040288
 8000d7c:	40020008 	.word	0x40020008
 8000d80:	200402e8 	.word	0x200402e8
 8000d84:	4002001c 	.word	0x4002001c
 8000d88:	40004800 	.word	0x40004800
 8000d8c:	48000c00 	.word	0x48000c00

08000d90 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b0b0      	sub	sp, #192	@ 0xc0
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da8:	f107 0318 	add.w	r3, r7, #24
 8000dac:	2294      	movs	r2, #148	@ 0x94
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f004 ff03 	bl	8005bbc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000dbe:	d16c      	bne.n	8000e9a <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000dc0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dc4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dcc:	f107 0318 	add.w	r3, r7, #24
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f002 f8b5 	bl	8002f40 <HAL_RCCEx_PeriphCLKConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ddc:	f7ff fea4 	bl	8000b28 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	4b30      	ldr	r3, [pc, #192]	@ (8000ea4 <HAL_PCD_MspInit+0x114>)
 8000de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de4:	4a2f      	ldr	r2, [pc, #188]	@ (8000ea4 <HAL_PCD_MspInit+0x114>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dec:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea4 <HAL_PCD_MspInit+0x114>)
 8000dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000df8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000dfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e12:	230a      	movs	r3, #10
 8000e14:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e18:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e22:	f000 fdd9 	bl	80019d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e44:	f000 fdc8 	bl	80019d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e48:	4b16      	ldr	r3, [pc, #88]	@ (8000ea4 <HAL_PCD_MspInit+0x114>)
 8000e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4c:	4a15      	ldr	r2, [pc, #84]	@ (8000ea4 <HAL_PCD_MspInit+0x114>)
 8000e4e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e54:	4b13      	ldr	r3, [pc, #76]	@ (8000ea4 <HAL_PCD_MspInit+0x114>)
 8000e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e60:	4b10      	ldr	r3, [pc, #64]	@ (8000ea4 <HAL_PCD_MspInit+0x114>)
 8000e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d114      	bne.n	8000e96 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea4 <HAL_PCD_MspInit+0x114>)
 8000e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e70:	4a0c      	ldr	r2, [pc, #48]	@ (8000ea4 <HAL_PCD_MspInit+0x114>)
 8000e72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e76:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <HAL_PCD_MspInit+0x114>)
 8000e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000e84:	f001 f964 	bl	8002150 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e88:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <HAL_PCD_MspInit+0x114>)
 8000e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e8c:	4a05      	ldr	r2, [pc, #20]	@ (8000ea4 <HAL_PCD_MspInit+0x114>)
 8000e8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000e92:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000e94:	e001      	b.n	8000e9a <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 8000e96:	f001 f95b 	bl	8002150 <HAL_PWREx_EnableVddUSB>
}
 8000e9a:	bf00      	nop
 8000e9c:	37c0      	adds	r7, #192	@ 0xc0
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <NMI_Handler+0x4>

08000eb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <HardFault_Handler+0x4>

08000eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <MemManage_Handler+0x4>

08000ec0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <BusFault_Handler+0x4>

08000ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <UsageFault_Handler+0x4>

08000ed0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efe:	f000 f8e7 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000f0c:	4802      	ldr	r0, [pc, #8]	@ (8000f18 <DMA1_Channel1_IRQHandler+0x10>)
 8000f0e:	f000 fc13 	bl	8001738 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20040288 	.word	0x20040288

08000f1c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000f20:	4802      	ldr	r0, [pc, #8]	@ (8000f2c <DMA1_Channel2_IRQHandler+0x10>)
 8000f22:	f000 fc09 	bl	8001738 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200402e8 	.word	0x200402e8

08000f30 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000f34:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <LPUART1_IRQHandler+0x10>)
 8000f36:	f002 ff0d 	bl	8003d54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20040160 	.word	0x20040160

08000f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f4c:	4a14      	ldr	r2, [pc, #80]	@ (8000fa0 <_sbrk+0x5c>)
 8000f4e:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <_sbrk+0x60>)
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f58:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f60:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <_sbrk+0x64>)
 8000f62:	4a12      	ldr	r2, [pc, #72]	@ (8000fac <_sbrk+0x68>)
 8000f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f66:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <_sbrk+0x64>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d207      	bcs.n	8000f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f74:	f004 fe2a 	bl	8005bcc <__errno>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	e009      	b.n	8000f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f84:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f8a:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <_sbrk+0x64>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	4a05      	ldr	r2, [pc, #20]	@ (8000fa8 <_sbrk+0x64>)
 8000f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f96:	68fb      	ldr	r3, [r7, #12]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200a0000 	.word	0x200a0000
 8000fa4:	00000400 	.word	0x00000400
 8000fa8:	20040830 	.word	0x20040830
 8000fac:	20040980 	.word	0x20040980

08000fb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fb4:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <SystemInit+0x20>)
 8000fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fba:	4a05      	ldr	r2, [pc, #20]	@ (8000fd0 <SystemInit+0x20>)
 8000fbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800100c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fd8:	f7ff ffea 	bl	8000fb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fdc:	480c      	ldr	r0, [pc, #48]	@ (8001010 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fde:	490d      	ldr	r1, [pc, #52]	@ (8001014 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8001018 <LoopForever+0xe>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe4:	e002      	b.n	8000fec <LoopCopyDataInit>

08000fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fea:	3304      	adds	r3, #4

08000fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff0:	d3f9      	bcc.n	8000fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800101c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ff4:	4c0a      	ldr	r4, [pc, #40]	@ (8001020 <LoopForever+0x16>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff8:	e001      	b.n	8000ffe <LoopFillZerobss>

08000ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ffc:	3204      	adds	r2, #4

08000ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001000:	d3fb      	bcc.n	8000ffa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001002:	f004 fde9 	bl	8005bd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001006:	f7ff facb 	bl	80005a0 <main>

0800100a <LoopForever>:

LoopForever:
    b LoopForever
 800100a:	e7fe      	b.n	800100a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800100c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001010:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8001014:	2004005c 	.word	0x2004005c
  ldr r2, =_sidata
 8001018:	0800663c 	.word	0x0800663c
  ldr r2, =_sbss
 800101c:	2004005c 	.word	0x2004005c
  ldr r4, =_ebss
 8001020:	20040980 	.word	0x20040980

08001024 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001024:	e7fe      	b.n	8001024 <ADC1_IRQHandler>

08001026 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001030:	2003      	movs	r0, #3
 8001032:	f000 f961 	bl	80012f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001036:	2000      	movs	r0, #0
 8001038:	f000 f80e 	bl	8001058 <HAL_InitTick>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d002      	beq.n	8001048 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	71fb      	strb	r3, [r7, #7]
 8001046:	e001      	b.n	800104c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001048:	f7ff fd74 	bl	8000b34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800104c:	79fb      	ldrb	r3, [r7, #7]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001064:	4b17      	ldr	r3, [pc, #92]	@ (80010c4 <HAL_InitTick+0x6c>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d023      	beq.n	80010b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800106c:	4b16      	ldr	r3, [pc, #88]	@ (80010c8 <HAL_InitTick+0x70>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b14      	ldr	r3, [pc, #80]	@ (80010c4 <HAL_InitTick+0x6c>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4619      	mov	r1, r3
 8001076:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800107a:	fbb3 f3f1 	udiv	r3, r3, r1
 800107e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f96d 	bl	8001362 <HAL_SYSTICK_Config>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10f      	bne.n	80010ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b0f      	cmp	r3, #15
 8001092:	d809      	bhi.n	80010a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001094:	2200      	movs	r2, #0
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	f04f 30ff 	mov.w	r0, #4294967295
 800109c:	f000 f937 	bl	800130e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010a0:	4a0a      	ldr	r2, [pc, #40]	@ (80010cc <HAL_InitTick+0x74>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	e007      	b.n	80010b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	e004      	b.n	80010b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	73fb      	strb	r3, [r7, #15]
 80010b2:	e001      	b.n	80010b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20040008 	.word	0x20040008
 80010c8:	20040000 	.word	0x20040000
 80010cc:	20040004 	.word	0x20040004

080010d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010d4:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <HAL_IncTick+0x20>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <HAL_IncTick+0x24>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a04      	ldr	r2, [pc, #16]	@ (80010f4 <HAL_IncTick+0x24>)
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20040008 	.word	0x20040008
 80010f4:	20040834 	.word	0x20040834

080010f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;
 80010fc:	4b03      	ldr	r3, [pc, #12]	@ (800110c <HAL_GetTick+0x14>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	20040834 	.word	0x20040834

08001110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001118:	f7ff ffee 	bl	80010f8 <HAL_GetTick>
 800111c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001128:	d005      	beq.n	8001136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800112a:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <HAL_Delay+0x44>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4413      	add	r3, r2
 8001134:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001136:	bf00      	nop
 8001138:	f7ff ffde 	bl	80010f8 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	429a      	cmp	r2, r3
 8001146:	d8f7      	bhi.n	8001138 <HAL_Delay+0x28>
  {
  }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20040008 	.word	0x20040008

08001158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001168:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001174:	4013      	ands	r3, r2
 8001176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001180:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001184:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118a:	4a04      	ldr	r2, [pc, #16]	@ (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	60d3      	str	r3, [r2, #12]
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a4:	4b04      	ldr	r3, [pc, #16]	@ (80011b8 <__NVIC_GetPriorityGrouping+0x18>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	f003 0307 	and.w	r3, r3, #7
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	db0b      	blt.n	80011e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	f003 021f 	and.w	r2, r3, #31
 80011d4:	4907      	ldr	r1, [pc, #28]	@ (80011f4 <__NVIC_EnableIRQ+0x38>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	095b      	lsrs	r3, r3, #5
 80011dc:	2001      	movs	r0, #1
 80011de:	fa00 f202 	lsl.w	r2, r0, r2
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000e100 	.word	0xe000e100

080011f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	6039      	str	r1, [r7, #0]
 8001202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	2b00      	cmp	r3, #0
 800120a:	db0a      	blt.n	8001222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	b2da      	uxtb	r2, r3
 8001210:	490c      	ldr	r1, [pc, #48]	@ (8001244 <__NVIC_SetPriority+0x4c>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	0112      	lsls	r2, r2, #4
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	440b      	add	r3, r1
 800121c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001220:	e00a      	b.n	8001238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4908      	ldr	r1, [pc, #32]	@ (8001248 <__NVIC_SetPriority+0x50>)
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	3b04      	subs	r3, #4
 8001230:	0112      	lsls	r2, r2, #4
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	440b      	add	r3, r1
 8001236:	761a      	strb	r2, [r3, #24]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000e100 	.word	0xe000e100
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	@ 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f1c3 0307 	rsb	r3, r3, #7
 8001266:	2b04      	cmp	r3, #4
 8001268:	bf28      	it	cs
 800126a:	2304      	movcs	r3, #4
 800126c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3304      	adds	r3, #4
 8001272:	2b06      	cmp	r3, #6
 8001274:	d902      	bls.n	800127c <NVIC_EncodePriority+0x30>
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3b03      	subs	r3, #3
 800127a:	e000      	b.n	800127e <NVIC_EncodePriority+0x32>
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	f04f 32ff 	mov.w	r2, #4294967295
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43da      	mvns	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	401a      	ands	r2, r3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001294:	f04f 31ff 	mov.w	r1, #4294967295
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	43d9      	mvns	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	4313      	orrs	r3, r2
         );
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3724      	adds	r7, #36	@ 0x24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012c4:	d301      	bcc.n	80012ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00f      	b.n	80012ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ca:	4a0a      	ldr	r2, [pc, #40]	@ (80012f4 <SysTick_Config+0x40>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d2:	210f      	movs	r1, #15
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	f7ff ff8e 	bl	80011f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012dc:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <SysTick_Config+0x40>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e2:	4b04      	ldr	r3, [pc, #16]	@ (80012f4 <SysTick_Config+0x40>)
 80012e4:	2207      	movs	r2, #7
 80012e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	e000e010 	.word	0xe000e010

080012f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff ff29 	bl	8001158 <__NVIC_SetPriorityGrouping>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001320:	f7ff ff3e 	bl	80011a0 <__NVIC_GetPriorityGrouping>
 8001324:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	68b9      	ldr	r1, [r7, #8]
 800132a:	6978      	ldr	r0, [r7, #20]
 800132c:	f7ff ff8e 	bl	800124c <NVIC_EncodePriority>
 8001330:	4602      	mov	r2, r0
 8001332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001336:	4611      	mov	r1, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff5d 	bl	80011f8 <__NVIC_SetPriority>
}
 800133e:	bf00      	nop
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff31 	bl	80011bc <__NVIC_EnableIRQ>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ffa2 	bl	80012b4 <SysTick_Config>
 8001370:	4603      	mov	r3, r0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e08d      	b.n	80014aa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	4b47      	ldr	r3, [pc, #284]	@ (80014b4 <HAL_DMA_Init+0x138>)
 8001396:	429a      	cmp	r2, r3
 8001398:	d80f      	bhi.n	80013ba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	4b45      	ldr	r3, [pc, #276]	@ (80014b8 <HAL_DMA_Init+0x13c>)
 80013a2:	4413      	add	r3, r2
 80013a4:	4a45      	ldr	r2, [pc, #276]	@ (80014bc <HAL_DMA_Init+0x140>)
 80013a6:	fba2 2303 	umull	r2, r3, r2, r3
 80013aa:	091b      	lsrs	r3, r3, #4
 80013ac:	009a      	lsls	r2, r3, #2
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a42      	ldr	r2, [pc, #264]	@ (80014c0 <HAL_DMA_Init+0x144>)
 80013b6:	641a      	str	r2, [r3, #64]	@ 0x40
 80013b8:	e00e      	b.n	80013d8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	4b40      	ldr	r3, [pc, #256]	@ (80014c4 <HAL_DMA_Init+0x148>)
 80013c2:	4413      	add	r3, r2
 80013c4:	4a3d      	ldr	r2, [pc, #244]	@ (80014bc <HAL_DMA_Init+0x140>)
 80013c6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ca:	091b      	lsrs	r3, r3, #4
 80013cc:	009a      	lsls	r2, r3, #2
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a3c      	ldr	r2, [pc, #240]	@ (80014c8 <HAL_DMA_Init+0x14c>)
 80013d6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2202      	movs	r2, #2
 80013dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80013ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80013f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80013fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001408:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001414:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a1b      	ldr	r3, [r3, #32]
 800141a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	4313      	orrs	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 fa72 	bl	8001914 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001438:	d102      	bne.n	8001440 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001454:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d010      	beq.n	8001480 <HAL_DMA_Init+0x104>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b04      	cmp	r3, #4
 8001464:	d80c      	bhi.n	8001480 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 fa92 	bl	8001990 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	e008      	b.n	8001492 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40020407 	.word	0x40020407
 80014b8:	bffdfff8 	.word	0xbffdfff8
 80014bc:	cccccccd 	.word	0xcccccccd
 80014c0:	40020000 	.word	0x40020000
 80014c4:	bffdfbf8 	.word	0xbffdfbf8
 80014c8:	40020400 	.word	0x40020400

080014cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
 80014d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d101      	bne.n	80014ec <HAL_DMA_Start_IT+0x20>
 80014e8:	2302      	movs	r3, #2
 80014ea:	e066      	b.n	80015ba <HAL_DMA_Start_IT+0xee>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d155      	bne.n	80015ac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2202      	movs	r2, #2
 8001504:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2200      	movs	r2, #0
 800150c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 0201 	bic.w	r2, r2, #1
 800151c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	68b9      	ldr	r1, [r7, #8]
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f000 f9b6 	bl	8001896 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	2b00      	cmp	r3, #0
 8001530:	d008      	beq.n	8001544 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f042 020e 	orr.w	r2, r2, #14
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	e00f      	b.n	8001564 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0204 	bic.w	r2, r2, #4
 8001552:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 020a 	orr.w	r2, r2, #10
 8001562:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d007      	beq.n	8001582 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800157c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001580:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001586:	2b00      	cmp	r3, #0
 8001588:	d007      	beq.n	800159a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001594:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001598:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f042 0201 	orr.w	r2, r2, #1
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	e005      	b.n	80015b8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80015b4:	2302      	movs	r3, #2
 80015b6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80015b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b085      	sub	sp, #20
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d008      	beq.n	80015ec <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2204      	movs	r2, #4
 80015de:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e040      	b.n	800166e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 020e 	bic.w	r2, r2, #14
 80015fa:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001606:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800160a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0201 	bic.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001620:	f003 021c 	and.w	r2, r3, #28
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001628:	2101      	movs	r1, #1
 800162a:	fa01 f202 	lsl.w	r2, r1, r2
 800162e:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001638:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00c      	beq.n	800165c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800164c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001650:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800165a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800166c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800166e:	4618      	mov	r0, r3
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b084      	sub	sp, #16
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d005      	beq.n	800169e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2204      	movs	r2, #4
 8001696:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	73fb      	strb	r3, [r7, #15]
 800169c:	e047      	b.n	800172e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 020e 	bic.w	r2, r2, #14
 80016ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0201 	bic.w	r2, r2, #1
 80016bc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d2:	f003 021c 	and.w	r2, r3, #28
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	2101      	movs	r1, #1
 80016dc:	fa01 f202 	lsl.w	r2, r1, r2
 80016e0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80016ea:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00c      	beq.n	800170e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001702:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800170c:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	4798      	blx	r3
    }
  }
  return status;
 800172e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001754:	f003 031c 	and.w	r3, r3, #28
 8001758:	2204      	movs	r2, #4
 800175a:	409a      	lsls	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4013      	ands	r3, r2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d026      	beq.n	80017b2 <HAL_DMA_IRQHandler+0x7a>
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	2b00      	cmp	r3, #0
 800176c:	d021      	beq.n	80017b2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0320 	and.w	r3, r3, #32
 8001778:	2b00      	cmp	r3, #0
 800177a:	d107      	bne.n	800178c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f022 0204 	bic.w	r2, r2, #4
 800178a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001790:	f003 021c 	and.w	r2, r3, #28
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001798:	2104      	movs	r1, #4
 800179a:	fa01 f202 	lsl.w	r2, r1, r2
 800179e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d071      	beq.n	800188c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80017b0:	e06c      	b.n	800188c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b6:	f003 031c 	and.w	r3, r3, #28
 80017ba:	2202      	movs	r2, #2
 80017bc:	409a      	lsls	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	4013      	ands	r3, r2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d02e      	beq.n	8001824 <HAL_DMA_IRQHandler+0xec>
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d029      	beq.n	8001824 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0320 	and.w	r3, r3, #32
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10b      	bne.n	80017f6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 020a 	bic.w	r2, r2, #10
 80017ec:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fa:	f003 021c 	and.w	r2, r3, #28
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	2102      	movs	r1, #2
 8001804:	fa01 f202 	lsl.w	r2, r1, r2
 8001808:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001816:	2b00      	cmp	r3, #0
 8001818:	d038      	beq.n	800188c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001822:	e033      	b.n	800188c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001828:	f003 031c 	and.w	r3, r3, #28
 800182c:	2208      	movs	r2, #8
 800182e:	409a      	lsls	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4013      	ands	r3, r2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d02a      	beq.n	800188e <HAL_DMA_IRQHandler+0x156>
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b00      	cmp	r3, #0
 8001840:	d025      	beq.n	800188e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 020e 	bic.w	r2, r2, #14
 8001850:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001856:	f003 021c 	and.w	r2, r3, #28
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	2101      	movs	r1, #1
 8001860:	fa01 f202 	lsl.w	r2, r1, r2
 8001864:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2201      	movs	r2, #1
 800186a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001880:	2b00      	cmp	r3, #0
 8001882:	d004      	beq.n	800188e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800188c:	bf00      	nop
 800188e:	bf00      	nop
}
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001896:	b480      	push	{r7}
 8001898:	b085      	sub	sp, #20
 800189a:	af00      	add	r7, sp, #0
 800189c:	60f8      	str	r0, [r7, #12]
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80018ac:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d004      	beq.n	80018c0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80018be:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c4:	f003 021c 	and.w	r2, r3, #28
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018cc:	2101      	movs	r1, #1
 80018ce:	fa01 f202 	lsl.w	r2, r1, r2
 80018d2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b10      	cmp	r3, #16
 80018e2:	d108      	bne.n	80018f6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	68ba      	ldr	r2, [r7, #8]
 80018f2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018f4:	e007      	b.n	8001906 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	60da      	str	r2, [r3, #12]
}
 8001906:	bf00      	nop
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	4b17      	ldr	r3, [pc, #92]	@ (8001980 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001924:	429a      	cmp	r2, r3
 8001926:	d80a      	bhi.n	800193e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192c:	089b      	lsrs	r3, r3, #2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001934:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6493      	str	r3, [r2, #72]	@ 0x48
 800193c:	e007      	b.n	800194e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001942:	089b      	lsrs	r3, r3, #2
 8001944:	009a      	lsls	r2, r3, #2
 8001946:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001948:	4413      	add	r3, r2
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	b2db      	uxtb	r3, r3
 8001954:	3b08      	subs	r3, #8
 8001956:	4a0c      	ldr	r2, [pc, #48]	@ (8001988 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001958:	fba2 2303 	umull	r2, r3, r2, r3
 800195c:	091b      	lsrs	r3, r3, #4
 800195e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a0a      	ldr	r2, [pc, #40]	@ (800198c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001964:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f003 031f 	and.w	r3, r3, #31
 800196c:	2201      	movs	r2, #1
 800196e:	409a      	lsls	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	40020407 	.word	0x40020407
 8001984:	4002081c 	.word	0x4002081c
 8001988:	cccccccd 	.word	0xcccccccd
 800198c:	40020880 	.word	0x40020880

08001990 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	b2db      	uxtb	r3, r3
 800199e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80019a4:	4413      	add	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	461a      	mov	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a08      	ldr	r2, [pc, #32]	@ (80019d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80019b2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	2201      	movs	r2, #1
 80019be:	409a      	lsls	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80019c4:	bf00      	nop
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	1000823f 	.word	0x1000823f
 80019d4:	40020940 	.word	0x40020940

080019d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d8:	b480      	push	{r7}
 80019da:	b087      	sub	sp, #28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e6:	e166      	b.n	8001cb6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	2101      	movs	r1, #1
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	fa01 f303 	lsl.w	r3, r1, r3
 80019f4:	4013      	ands	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 8158 	beq.w	8001cb0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d005      	beq.n	8001a18 <HAL_GPIO_Init+0x40>
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d130      	bne.n	8001a7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	2203      	movs	r2, #3
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a4e:	2201      	movs	r2, #1
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	091b      	lsrs	r3, r3, #4
 8001a64:	f003 0201 	and.w	r2, r3, #1
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f003 0303 	and.w	r3, r3, #3
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d017      	beq.n	8001ab6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	2203      	movs	r2, #3
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d123      	bne.n	8001b0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	08da      	lsrs	r2, r3, #3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3208      	adds	r2, #8
 8001aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ace:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	220f      	movs	r2, #15
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	691a      	ldr	r2, [r3, #16]
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	08da      	lsrs	r2, r3, #3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3208      	adds	r2, #8
 8001b04:	6939      	ldr	r1, [r7, #16]
 8001b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	2203      	movs	r2, #3
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 0203 	and.w	r2, r3, #3
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 80b2 	beq.w	8001cb0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4c:	4b61      	ldr	r3, [pc, #388]	@ (8001cd4 <HAL_GPIO_Init+0x2fc>)
 8001b4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b50:	4a60      	ldr	r2, [pc, #384]	@ (8001cd4 <HAL_GPIO_Init+0x2fc>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b58:	4b5e      	ldr	r3, [pc, #376]	@ (8001cd4 <HAL_GPIO_Init+0x2fc>)
 8001b5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b64:	4a5c      	ldr	r2, [pc, #368]	@ (8001cd8 <HAL_GPIO_Init+0x300>)
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	089b      	lsrs	r3, r3, #2
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	220f      	movs	r2, #15
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4013      	ands	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b8e:	d02b      	beq.n	8001be8 <HAL_GPIO_Init+0x210>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a52      	ldr	r2, [pc, #328]	@ (8001cdc <HAL_GPIO_Init+0x304>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d025      	beq.n	8001be4 <HAL_GPIO_Init+0x20c>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a51      	ldr	r2, [pc, #324]	@ (8001ce0 <HAL_GPIO_Init+0x308>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d01f      	beq.n	8001be0 <HAL_GPIO_Init+0x208>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a50      	ldr	r2, [pc, #320]	@ (8001ce4 <HAL_GPIO_Init+0x30c>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d019      	beq.n	8001bdc <HAL_GPIO_Init+0x204>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a4f      	ldr	r2, [pc, #316]	@ (8001ce8 <HAL_GPIO_Init+0x310>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d013      	beq.n	8001bd8 <HAL_GPIO_Init+0x200>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a4e      	ldr	r2, [pc, #312]	@ (8001cec <HAL_GPIO_Init+0x314>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d00d      	beq.n	8001bd4 <HAL_GPIO_Init+0x1fc>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a4d      	ldr	r2, [pc, #308]	@ (8001cf0 <HAL_GPIO_Init+0x318>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d007      	beq.n	8001bd0 <HAL_GPIO_Init+0x1f8>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a4c      	ldr	r2, [pc, #304]	@ (8001cf4 <HAL_GPIO_Init+0x31c>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d101      	bne.n	8001bcc <HAL_GPIO_Init+0x1f4>
 8001bc8:	2307      	movs	r3, #7
 8001bca:	e00e      	b.n	8001bea <HAL_GPIO_Init+0x212>
 8001bcc:	2308      	movs	r3, #8
 8001bce:	e00c      	b.n	8001bea <HAL_GPIO_Init+0x212>
 8001bd0:	2306      	movs	r3, #6
 8001bd2:	e00a      	b.n	8001bea <HAL_GPIO_Init+0x212>
 8001bd4:	2305      	movs	r3, #5
 8001bd6:	e008      	b.n	8001bea <HAL_GPIO_Init+0x212>
 8001bd8:	2304      	movs	r3, #4
 8001bda:	e006      	b.n	8001bea <HAL_GPIO_Init+0x212>
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e004      	b.n	8001bea <HAL_GPIO_Init+0x212>
 8001be0:	2302      	movs	r3, #2
 8001be2:	e002      	b.n	8001bea <HAL_GPIO_Init+0x212>
 8001be4:	2301      	movs	r3, #1
 8001be6:	e000      	b.n	8001bea <HAL_GPIO_Init+0x212>
 8001be8:	2300      	movs	r3, #0
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	f002 0203 	and.w	r2, r2, #3
 8001bf0:	0092      	lsls	r2, r2, #2
 8001bf2:	4093      	lsls	r3, r2
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bfa:	4937      	ldr	r1, [pc, #220]	@ (8001cd8 <HAL_GPIO_Init+0x300>)
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	089b      	lsrs	r3, r3, #2
 8001c00:	3302      	adds	r3, #2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c08:	4b3b      	ldr	r3, [pc, #236]	@ (8001cf8 <HAL_GPIO_Init+0x320>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c2c:	4a32      	ldr	r2, [pc, #200]	@ (8001cf8 <HAL_GPIO_Init+0x320>)
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c32:	4b31      	ldr	r3, [pc, #196]	@ (8001cf8 <HAL_GPIO_Init+0x320>)
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c56:	4a28      	ldr	r2, [pc, #160]	@ (8001cf8 <HAL_GPIO_Init+0x320>)
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c5c:	4b26      	ldr	r3, [pc, #152]	@ (8001cf8 <HAL_GPIO_Init+0x320>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c80:	4a1d      	ldr	r2, [pc, #116]	@ (8001cf8 <HAL_GPIO_Init+0x320>)
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c86:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf8 <HAL_GPIO_Init+0x320>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4013      	ands	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001caa:	4a13      	ldr	r2, [pc, #76]	@ (8001cf8 <HAL_GPIO_Init+0x320>)
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f47f ae91 	bne.w	80019e8 <HAL_GPIO_Init+0x10>
  }
}
 8001cc6:	bf00      	nop
 8001cc8:	bf00      	nop
 8001cca:	371c      	adds	r7, #28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40010000 	.word	0x40010000
 8001cdc:	48000400 	.word	0x48000400
 8001ce0:	48000800 	.word	0x48000800
 8001ce4:	48000c00 	.word	0x48000c00
 8001ce8:	48001000 	.word	0x48001000
 8001cec:	48001400 	.word	0x48001400
 8001cf0:	48001800 	.word	0x48001800
 8001cf4:	48001c00 	.word	0x48001c00
 8001cf8:	40010400 	.word	0x40010400

08001cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	807b      	strh	r3, [r7, #2]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d0c:	787b      	ldrb	r3, [r7, #1]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d12:	887a      	ldrh	r2, [r7, #2]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d18:	e002      	b.n	8001d20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d1a:	887a      	ldrh	r2, [r7, #2]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d3e:	887a      	ldrh	r2, [r7, #2]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	4013      	ands	r3, r2
 8001d44:	041a      	lsls	r2, r3, #16
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	43d9      	mvns	r1, r3
 8001d4a:	887b      	ldrh	r3, [r7, #2]
 8001d4c:	400b      	ands	r3, r1
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	619a      	str	r2, [r3, #24]
}
 8001d54:	bf00      	nop
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af02      	add	r7, sp, #8
 8001d66:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e101      	b.n	8001f76 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d106      	bne.n	8001d8c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff f802 	bl	8000d90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2203      	movs	r2, #3
 8001d90:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f003 fc6d 	bl	800567e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6818      	ldr	r0, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	7c1a      	ldrb	r2, [r3, #16]
 8001dac:	f88d 2000 	strb.w	r2, [sp]
 8001db0:	3304      	adds	r3, #4
 8001db2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001db4:	f003 fc36 	bl	8005624 <USB_CoreInit>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d005      	beq.n	8001dca <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e0d5      	b.n	8001f76 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2100      	movs	r1, #0
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f003 fc65 	bl	80056a0 <USB_SetCurrentMode>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2202      	movs	r2, #2
 8001de0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0c6      	b.n	8001f76 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001de8:	2300      	movs	r3, #0
 8001dea:	73fb      	strb	r3, [r7, #15]
 8001dec:	e04a      	b.n	8001e84 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001dee:	7bfa      	ldrb	r2, [r7, #15]
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	4413      	add	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	3315      	adds	r3, #21
 8001dfe:	2201      	movs	r2, #1
 8001e00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e02:	7bfa      	ldrb	r2, [r7, #15]
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	3314      	adds	r3, #20
 8001e12:	7bfa      	ldrb	r2, [r7, #15]
 8001e14:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e16:	7bfa      	ldrb	r2, [r7, #15]
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	b298      	uxth	r0, r3
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	4413      	add	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	440b      	add	r3, r1
 8001e28:	332e      	adds	r3, #46	@ 0x2e
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e2e:	7bfa      	ldrb	r2, [r7, #15]
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4413      	add	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	3318      	adds	r3, #24
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e42:	7bfa      	ldrb	r2, [r7, #15]
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	440b      	add	r3, r1
 8001e50:	331c      	adds	r3, #28
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e56:	7bfa      	ldrb	r2, [r7, #15]
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	4413      	add	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	440b      	add	r3, r1
 8001e64:	3320      	adds	r3, #32
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e6a:	7bfa      	ldrb	r2, [r7, #15]
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	4413      	add	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	440b      	add	r3, r1
 8001e78:	3324      	adds	r3, #36	@ 0x24
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	3301      	adds	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	791b      	ldrb	r3, [r3, #4]
 8001e88:	7bfa      	ldrb	r2, [r7, #15]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d3af      	bcc.n	8001dee <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	73fb      	strb	r3, [r7, #15]
 8001e92:	e044      	b.n	8001f1e <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e94:	7bfa      	ldrb	r2, [r7, #15]
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001eaa:	7bfa      	ldrb	r2, [r7, #15]
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001ebc:	7bfa      	ldrb	r2, [r7, #15]
 8001ebe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ed6:	7bfa      	ldrb	r2, [r7, #15]
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	4413      	add	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001eec:	7bfa      	ldrb	r2, [r7, #15]
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f02:	7bfa      	ldrb	r2, [r7, #15]
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	73fb      	strb	r3, [r7, #15]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	791b      	ldrb	r3, [r3, #4]
 8001f22:	7bfa      	ldrb	r2, [r7, #15]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d3b5      	bcc.n	8001e94 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6818      	ldr	r0, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	7c1a      	ldrb	r2, [r3, #16]
 8001f30:	f88d 2000 	strb.w	r2, [sp]
 8001f34:	3304      	adds	r3, #4
 8001f36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f38:	f003 fbfe 	bl	8005738 <USB_DevInit>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d005      	beq.n	8001f4e <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2202      	movs	r2, #2
 8001f46:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e013      	b.n	8001f76 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7b1b      	ldrb	r3, [r3, #12]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d102      	bne.n	8001f6a <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f80a 	bl	8001f7e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f003 fda3 	bl	8005aba <USB_DevDisconnect>

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b085      	sub	sp, #20
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb0:	f043 0303 	orr.w	r3, r3, #3
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8002004 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fd8:	d102      	bne.n	8001fe0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001fda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fde:	e00b      	b.n	8001ff8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001fe0:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fee:	d102      	bne.n	8001ff6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001ff0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ff4:	e000      	b.n	8001ff8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001ff6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40007000 	.word	0x40007000

08002008 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d141      	bne.n	800209a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002016:	4b4b      	ldr	r3, [pc, #300]	@ (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800201e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002022:	d131      	bne.n	8002088 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002024:	4b47      	ldr	r3, [pc, #284]	@ (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800202a:	4a46      	ldr	r2, [pc, #280]	@ (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800202c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002030:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002034:	4b43      	ldr	r3, [pc, #268]	@ (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800203c:	4a41      	ldr	r2, [pc, #260]	@ (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800203e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002042:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002044:	4b40      	ldr	r3, [pc, #256]	@ (8002148 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2232      	movs	r2, #50	@ 0x32
 800204a:	fb02 f303 	mul.w	r3, r2, r3
 800204e:	4a3f      	ldr	r2, [pc, #252]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002050:	fba2 2303 	umull	r2, r3, r2, r3
 8002054:	0c9b      	lsrs	r3, r3, #18
 8002056:	3301      	adds	r3, #1
 8002058:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800205a:	e002      	b.n	8002062 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	3b01      	subs	r3, #1
 8002060:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002062:	4b38      	ldr	r3, [pc, #224]	@ (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800206a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800206e:	d102      	bne.n	8002076 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f2      	bne.n	800205c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002076:	4b33      	ldr	r3, [pc, #204]	@ (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800207e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002082:	d158      	bne.n	8002136 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e057      	b.n	8002138 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002088:	4b2e      	ldr	r3, [pc, #184]	@ (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800208a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800208e:	4a2d      	ldr	r2, [pc, #180]	@ (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002090:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002094:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002098:	e04d      	b.n	8002136 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020a0:	d141      	bne.n	8002126 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020a2:	4b28      	ldr	r3, [pc, #160]	@ (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ae:	d131      	bne.n	8002114 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020b0:	4b24      	ldr	r3, [pc, #144]	@ (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020b6:	4a23      	ldr	r2, [pc, #140]	@ (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020c0:	4b20      	ldr	r3, [pc, #128]	@ (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020c8:	4a1e      	ldr	r2, [pc, #120]	@ (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80020d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002148 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2232      	movs	r2, #50	@ 0x32
 80020d6:	fb02 f303 	mul.w	r3, r2, r3
 80020da:	4a1c      	ldr	r2, [pc, #112]	@ (800214c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020dc:	fba2 2303 	umull	r2, r3, r2, r3
 80020e0:	0c9b      	lsrs	r3, r3, #18
 80020e2:	3301      	adds	r3, #1
 80020e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020e6:	e002      	b.n	80020ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020ee:	4b15      	ldr	r3, [pc, #84]	@ (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020fa:	d102      	bne.n	8002102 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f2      	bne.n	80020e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002102:	4b10      	ldr	r3, [pc, #64]	@ (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800210a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800210e:	d112      	bne.n	8002136 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e011      	b.n	8002138 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002114:	4b0b      	ldr	r3, [pc, #44]	@ (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002116:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800211a:	4a0a      	ldr	r2, [pc, #40]	@ (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800211c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002120:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002124:	e007      	b.n	8002136 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002126:	4b07      	ldr	r3, [pc, #28]	@ (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800212e:	4a05      	ldr	r2, [pc, #20]	@ (8002144 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002130:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002134:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	40007000 	.word	0x40007000
 8002148:	20040000 	.word	0x20040000
 800214c:	431bde83 	.word	0x431bde83

08002150 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002154:	4b05      	ldr	r3, [pc, #20]	@ (800216c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	4a04      	ldr	r2, [pc, #16]	@ (800216c <HAL_PWREx_EnableVddUSB+0x1c>)
 800215a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800215e:	6053      	str	r3, [r2, #4]
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40007000 	.word	0x40007000

08002170 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002174:	4b05      	ldr	r3, [pc, #20]	@ (800218c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	4a04      	ldr	r2, [pc, #16]	@ (800218c <HAL_PWREx_EnableVddIO2+0x1c>)
 800217a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800217e:	6053      	str	r3, [r2, #4]
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40007000 	.word	0x40007000

08002190 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d102      	bne.n	80021a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	f000 bc08 	b.w	80029b4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021a4:	4b96      	ldr	r3, [pc, #600]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 030c 	and.w	r3, r3, #12
 80021ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021ae:	4b94      	ldr	r3, [pc, #592]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0310 	and.w	r3, r3, #16
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 80e4 	beq.w	800238e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d007      	beq.n	80021dc <HAL_RCC_OscConfig+0x4c>
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	2b0c      	cmp	r3, #12
 80021d0:	f040 808b 	bne.w	80022ea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	f040 8087 	bne.w	80022ea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021dc:	4b88      	ldr	r3, [pc, #544]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <HAL_RCC_OscConfig+0x64>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e3df      	b.n	80029b4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1a      	ldr	r2, [r3, #32]
 80021f8:	4b81      	ldr	r3, [pc, #516]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	2b00      	cmp	r3, #0
 8002202:	d004      	beq.n	800220e <HAL_RCC_OscConfig+0x7e>
 8002204:	4b7e      	ldr	r3, [pc, #504]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800220c:	e005      	b.n	800221a <HAL_RCC_OscConfig+0x8a>
 800220e:	4b7c      	ldr	r3, [pc, #496]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 8002210:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800221a:	4293      	cmp	r3, r2
 800221c:	d223      	bcs.n	8002266 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	4618      	mov	r0, r3
 8002224:	f000 fdcc 	bl	8002dc0 <RCC_SetFlashLatencyFromMSIRange>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e3c0      	b.n	80029b4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002232:	4b73      	ldr	r3, [pc, #460]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a72      	ldr	r2, [pc, #456]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 8002238:	f043 0308 	orr.w	r3, r3, #8
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	4b70      	ldr	r3, [pc, #448]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	496d      	ldr	r1, [pc, #436]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 800224c:	4313      	orrs	r3, r2
 800224e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002250:	4b6b      	ldr	r3, [pc, #428]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	021b      	lsls	r3, r3, #8
 800225e:	4968      	ldr	r1, [pc, #416]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]
 8002264:	e025      	b.n	80022b2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002266:	4b66      	ldr	r3, [pc, #408]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a65      	ldr	r2, [pc, #404]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 800226c:	f043 0308 	orr.w	r3, r3, #8
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	4b63      	ldr	r3, [pc, #396]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	4960      	ldr	r1, [pc, #384]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 8002280:	4313      	orrs	r3, r2
 8002282:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002284:	4b5e      	ldr	r3, [pc, #376]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	021b      	lsls	r3, r3, #8
 8002292:	495b      	ldr	r1, [pc, #364]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 8002294:	4313      	orrs	r3, r2
 8002296:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d109      	bne.n	80022b2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 fd8c 	bl	8002dc0 <RCC_SetFlashLatencyFromMSIRange>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e380      	b.n	80029b4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022b2:	f000 fcc1 	bl	8002c38 <HAL_RCC_GetSysClockFreq>
 80022b6:	4602      	mov	r2, r0
 80022b8:	4b51      	ldr	r3, [pc, #324]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	091b      	lsrs	r3, r3, #4
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	4950      	ldr	r1, [pc, #320]	@ (8002404 <HAL_RCC_OscConfig+0x274>)
 80022c4:	5ccb      	ldrb	r3, [r1, r3]
 80022c6:	f003 031f 	and.w	r3, r3, #31
 80022ca:	fa22 f303 	lsr.w	r3, r2, r3
 80022ce:	4a4e      	ldr	r2, [pc, #312]	@ (8002408 <HAL_RCC_OscConfig+0x278>)
 80022d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022d2:	4b4e      	ldr	r3, [pc, #312]	@ (800240c <HAL_RCC_OscConfig+0x27c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe febe 	bl	8001058 <HAL_InitTick>
 80022dc:	4603      	mov	r3, r0
 80022de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d052      	beq.n	800238c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	e364      	b.n	80029b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d032      	beq.n	8002358 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022f2:	4b43      	ldr	r3, [pc, #268]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a42      	ldr	r2, [pc, #264]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022fe:	f7fe fefb 	bl	80010f8 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002306:	f7fe fef7 	bl	80010f8 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e34d      	b.n	80029b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002318:	4b39      	ldr	r3, [pc, #228]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002324:	4b36      	ldr	r3, [pc, #216]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a35      	ldr	r2, [pc, #212]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 800232a:	f043 0308 	orr.w	r3, r3, #8
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	4b33      	ldr	r3, [pc, #204]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	4930      	ldr	r1, [pc, #192]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002342:	4b2f      	ldr	r3, [pc, #188]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	021b      	lsls	r3, r3, #8
 8002350:	492b      	ldr	r1, [pc, #172]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 8002352:	4313      	orrs	r3, r2
 8002354:	604b      	str	r3, [r1, #4]
 8002356:	e01a      	b.n	800238e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002358:	4b29      	ldr	r3, [pc, #164]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a28      	ldr	r2, [pc, #160]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 800235e:	f023 0301 	bic.w	r3, r3, #1
 8002362:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002364:	f7fe fec8 	bl	80010f8 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800236c:	f7fe fec4 	bl	80010f8 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e31a      	b.n	80029b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800237e:	4b20      	ldr	r3, [pc, #128]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f0      	bne.n	800236c <HAL_RCC_OscConfig+0x1dc>
 800238a:	e000      	b.n	800238e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800238c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d073      	beq.n	8002482 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	2b08      	cmp	r3, #8
 800239e:	d005      	beq.n	80023ac <HAL_RCC_OscConfig+0x21c>
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	2b0c      	cmp	r3, #12
 80023a4:	d10e      	bne.n	80023c4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d10b      	bne.n	80023c4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ac:	4b14      	ldr	r3, [pc, #80]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d063      	beq.n	8002480 <HAL_RCC_OscConfig+0x2f0>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d15f      	bne.n	8002480 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e2f7      	b.n	80029b4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023cc:	d106      	bne.n	80023dc <HAL_RCC_OscConfig+0x24c>
 80023ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a0b      	ldr	r2, [pc, #44]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e025      	b.n	8002428 <HAL_RCC_OscConfig+0x298>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023e4:	d114      	bne.n	8002410 <HAL_RCC_OscConfig+0x280>
 80023e6:	4b06      	ldr	r3, [pc, #24]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a05      	ldr	r2, [pc, #20]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 80023ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	4b03      	ldr	r3, [pc, #12]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a02      	ldr	r2, [pc, #8]	@ (8002400 <HAL_RCC_OscConfig+0x270>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e013      	b.n	8002428 <HAL_RCC_OscConfig+0x298>
 8002400:	40021000 	.word	0x40021000
 8002404:	08006588 	.word	0x08006588
 8002408:	20040000 	.word	0x20040000
 800240c:	20040004 	.word	0x20040004
 8002410:	4ba0      	ldr	r3, [pc, #640]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a9f      	ldr	r2, [pc, #636]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 8002416:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	4b9d      	ldr	r3, [pc, #628]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a9c      	ldr	r2, [pc, #624]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 8002422:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d013      	beq.n	8002458 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7fe fe62 	bl	80010f8 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002438:	f7fe fe5e 	bl	80010f8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	@ 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e2b4      	b.n	80029b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800244a:	4b92      	ldr	r3, [pc, #584]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0x2a8>
 8002456:	e014      	b.n	8002482 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002458:	f7fe fe4e 	bl	80010f8 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002460:	f7fe fe4a 	bl	80010f8 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b64      	cmp	r3, #100	@ 0x64
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e2a0      	b.n	80029b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002472:	4b88      	ldr	r3, [pc, #544]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x2d0>
 800247e:	e000      	b.n	8002482 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d060      	beq.n	8002550 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	2b04      	cmp	r3, #4
 8002492:	d005      	beq.n	80024a0 <HAL_RCC_OscConfig+0x310>
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	2b0c      	cmp	r3, #12
 8002498:	d119      	bne.n	80024ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d116      	bne.n	80024ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024a0:	4b7c      	ldr	r3, [pc, #496]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_RCC_OscConfig+0x328>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e27d      	b.n	80029b4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b8:	4b76      	ldr	r3, [pc, #472]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	061b      	lsls	r3, r3, #24
 80024c6:	4973      	ldr	r1, [pc, #460]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024cc:	e040      	b.n	8002550 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d023      	beq.n	800251e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d6:	4b6f      	ldr	r3, [pc, #444]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a6e      	ldr	r2, [pc, #440]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 80024dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e2:	f7fe fe09 	bl	80010f8 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ea:	f7fe fe05 	bl	80010f8 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e25b      	b.n	80029b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024fc:	4b65      	ldr	r3, [pc, #404]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0f0      	beq.n	80024ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002508:	4b62      	ldr	r3, [pc, #392]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	061b      	lsls	r3, r3, #24
 8002516:	495f      	ldr	r1, [pc, #380]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 8002518:	4313      	orrs	r3, r2
 800251a:	604b      	str	r3, [r1, #4]
 800251c:	e018      	b.n	8002550 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800251e:	4b5d      	ldr	r3, [pc, #372]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a5c      	ldr	r2, [pc, #368]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 8002524:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252a:	f7fe fde5 	bl	80010f8 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002532:	f7fe fde1 	bl	80010f8 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e237      	b.n	80029b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002544:	4b53      	ldr	r3, [pc, #332]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1f0      	bne.n	8002532 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d03c      	beq.n	80025d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d01c      	beq.n	800259e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002564:	4b4b      	ldr	r3, [pc, #300]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 8002566:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800256a:	4a4a      	ldr	r2, [pc, #296]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002574:	f7fe fdc0 	bl	80010f8 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800257c:	f7fe fdbc 	bl	80010f8 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e212      	b.n	80029b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800258e:	4b41      	ldr	r3, [pc, #260]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 8002590:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0ef      	beq.n	800257c <HAL_RCC_OscConfig+0x3ec>
 800259c:	e01b      	b.n	80025d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800259e:	4b3d      	ldr	r3, [pc, #244]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 80025a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025a4:	4a3b      	ldr	r2, [pc, #236]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 80025a6:	f023 0301 	bic.w	r3, r3, #1
 80025aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ae:	f7fe fda3 	bl	80010f8 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b6:	f7fe fd9f 	bl	80010f8 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e1f5      	b.n	80029b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025c8:	4b32      	ldr	r3, [pc, #200]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 80025ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1ef      	bne.n	80025b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0304 	and.w	r3, r3, #4
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 80a6 	beq.w	8002730 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025e4:	2300      	movs	r3, #0
 80025e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 80025ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10d      	bne.n	8002610 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f4:	4b27      	ldr	r3, [pc, #156]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 80025f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f8:	4a26      	ldr	r2, [pc, #152]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 80025fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002600:	4b24      	ldr	r3, [pc, #144]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 8002602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800260c:	2301      	movs	r3, #1
 800260e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002610:	4b21      	ldr	r3, [pc, #132]	@ (8002698 <HAL_RCC_OscConfig+0x508>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002618:	2b00      	cmp	r3, #0
 800261a:	d118      	bne.n	800264e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800261c:	4b1e      	ldr	r3, [pc, #120]	@ (8002698 <HAL_RCC_OscConfig+0x508>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a1d      	ldr	r2, [pc, #116]	@ (8002698 <HAL_RCC_OscConfig+0x508>)
 8002622:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002626:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002628:	f7fe fd66 	bl	80010f8 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002630:	f7fe fd62 	bl	80010f8 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e1b8      	b.n	80029b4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002642:	4b15      	ldr	r3, [pc, #84]	@ (8002698 <HAL_RCC_OscConfig+0x508>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d108      	bne.n	8002668 <HAL_RCC_OscConfig+0x4d8>
 8002656:	4b0f      	ldr	r3, [pc, #60]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 8002658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800265c:	4a0d      	ldr	r2, [pc, #52]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002666:	e029      	b.n	80026bc <HAL_RCC_OscConfig+0x52c>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	2b05      	cmp	r3, #5
 800266e:	d115      	bne.n	800269c <HAL_RCC_OscConfig+0x50c>
 8002670:	4b08      	ldr	r3, [pc, #32]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 8002672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002676:	4a07      	ldr	r2, [pc, #28]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 8002678:	f043 0304 	orr.w	r3, r3, #4
 800267c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002680:	4b04      	ldr	r3, [pc, #16]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 8002682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002686:	4a03      	ldr	r2, [pc, #12]	@ (8002694 <HAL_RCC_OscConfig+0x504>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002690:	e014      	b.n	80026bc <HAL_RCC_OscConfig+0x52c>
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000
 8002698:	40007000 	.word	0x40007000
 800269c:	4b9d      	ldr	r3, [pc, #628]	@ (8002914 <HAL_RCC_OscConfig+0x784>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a2:	4a9c      	ldr	r2, [pc, #624]	@ (8002914 <HAL_RCC_OscConfig+0x784>)
 80026a4:	f023 0301 	bic.w	r3, r3, #1
 80026a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026ac:	4b99      	ldr	r3, [pc, #612]	@ (8002914 <HAL_RCC_OscConfig+0x784>)
 80026ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b2:	4a98      	ldr	r2, [pc, #608]	@ (8002914 <HAL_RCC_OscConfig+0x784>)
 80026b4:	f023 0304 	bic.w	r3, r3, #4
 80026b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d016      	beq.n	80026f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c4:	f7fe fd18 	bl	80010f8 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ca:	e00a      	b.n	80026e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026cc:	f7fe fd14 	bl	80010f8 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026da:	4293      	cmp	r3, r2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e168      	b.n	80029b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026e2:	4b8c      	ldr	r3, [pc, #560]	@ (8002914 <HAL_RCC_OscConfig+0x784>)
 80026e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0ed      	beq.n	80026cc <HAL_RCC_OscConfig+0x53c>
 80026f0:	e015      	b.n	800271e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f2:	f7fe fd01 	bl	80010f8 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026f8:	e00a      	b.n	8002710 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fa:	f7fe fcfd 	bl	80010f8 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002708:	4293      	cmp	r3, r2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e151      	b.n	80029b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002710:	4b80      	ldr	r3, [pc, #512]	@ (8002914 <HAL_RCC_OscConfig+0x784>)
 8002712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1ed      	bne.n	80026fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800271e:	7ffb      	ldrb	r3, [r7, #31]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d105      	bne.n	8002730 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002724:	4b7b      	ldr	r3, [pc, #492]	@ (8002914 <HAL_RCC_OscConfig+0x784>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002728:	4a7a      	ldr	r2, [pc, #488]	@ (8002914 <HAL_RCC_OscConfig+0x784>)
 800272a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800272e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0320 	and.w	r3, r3, #32
 8002738:	2b00      	cmp	r3, #0
 800273a:	d03c      	beq.n	80027b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002740:	2b00      	cmp	r3, #0
 8002742:	d01c      	beq.n	800277e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002744:	4b73      	ldr	r3, [pc, #460]	@ (8002914 <HAL_RCC_OscConfig+0x784>)
 8002746:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800274a:	4a72      	ldr	r2, [pc, #456]	@ (8002914 <HAL_RCC_OscConfig+0x784>)
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002754:	f7fe fcd0 	bl	80010f8 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800275c:	f7fe fccc 	bl	80010f8 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e122      	b.n	80029b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800276e:	4b69      	ldr	r3, [pc, #420]	@ (8002914 <HAL_RCC_OscConfig+0x784>)
 8002770:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0ef      	beq.n	800275c <HAL_RCC_OscConfig+0x5cc>
 800277c:	e01b      	b.n	80027b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800277e:	4b65      	ldr	r3, [pc, #404]	@ (8002914 <HAL_RCC_OscConfig+0x784>)
 8002780:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002784:	4a63      	ldr	r2, [pc, #396]	@ (8002914 <HAL_RCC_OscConfig+0x784>)
 8002786:	f023 0301 	bic.w	r3, r3, #1
 800278a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278e:	f7fe fcb3 	bl	80010f8 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002796:	f7fe fcaf 	bl	80010f8 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e105      	b.n	80029b4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027a8:	4b5a      	ldr	r3, [pc, #360]	@ (8002914 <HAL_RCC_OscConfig+0x784>)
 80027aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1ef      	bne.n	8002796 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 80f9 	beq.w	80029b2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	f040 80cf 	bne.w	8002968 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027ca:	4b52      	ldr	r3, [pc, #328]	@ (8002914 <HAL_RCC_OscConfig+0x784>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f003 0203 	and.w	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027da:	429a      	cmp	r2, r3
 80027dc:	d12c      	bne.n	8002838 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e8:	3b01      	subs	r3, #1
 80027ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d123      	bne.n	8002838 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d11b      	bne.n	8002838 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800280a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800280c:	429a      	cmp	r2, r3
 800280e:	d113      	bne.n	8002838 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800281a:	085b      	lsrs	r3, r3, #1
 800281c:	3b01      	subs	r3, #1
 800281e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002820:	429a      	cmp	r2, r3
 8002822:	d109      	bne.n	8002838 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	085b      	lsrs	r3, r3, #1
 8002830:	3b01      	subs	r3, #1
 8002832:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002834:	429a      	cmp	r2, r3
 8002836:	d071      	beq.n	800291c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	2b0c      	cmp	r3, #12
 800283c:	d068      	beq.n	8002910 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800283e:	4b35      	ldr	r3, [pc, #212]	@ (8002914 <HAL_RCC_OscConfig+0x784>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d105      	bne.n	8002856 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800284a:	4b32      	ldr	r3, [pc, #200]	@ (8002914 <HAL_RCC_OscConfig+0x784>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e0ac      	b.n	80029b4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800285a:	4b2e      	ldr	r3, [pc, #184]	@ (8002914 <HAL_RCC_OscConfig+0x784>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a2d      	ldr	r2, [pc, #180]	@ (8002914 <HAL_RCC_OscConfig+0x784>)
 8002860:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002864:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002866:	f7fe fc47 	bl	80010f8 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286e:	f7fe fc43 	bl	80010f8 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e099      	b.n	80029b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002880:	4b24      	ldr	r3, [pc, #144]	@ (8002914 <HAL_RCC_OscConfig+0x784>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f0      	bne.n	800286e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800288c:	4b21      	ldr	r3, [pc, #132]	@ (8002914 <HAL_RCC_OscConfig+0x784>)
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	4b21      	ldr	r3, [pc, #132]	@ (8002918 <HAL_RCC_OscConfig+0x788>)
 8002892:	4013      	ands	r3, r2
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800289c:	3a01      	subs	r2, #1
 800289e:	0112      	lsls	r2, r2, #4
 80028a0:	4311      	orrs	r1, r2
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80028a6:	0212      	lsls	r2, r2, #8
 80028a8:	4311      	orrs	r1, r2
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80028ae:	0852      	lsrs	r2, r2, #1
 80028b0:	3a01      	subs	r2, #1
 80028b2:	0552      	lsls	r2, r2, #21
 80028b4:	4311      	orrs	r1, r2
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80028ba:	0852      	lsrs	r2, r2, #1
 80028bc:	3a01      	subs	r2, #1
 80028be:	0652      	lsls	r2, r2, #25
 80028c0:	4311      	orrs	r1, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028c6:	06d2      	lsls	r2, r2, #27
 80028c8:	430a      	orrs	r2, r1
 80028ca:	4912      	ldr	r1, [pc, #72]	@ (8002914 <HAL_RCC_OscConfig+0x784>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028d0:	4b10      	ldr	r3, [pc, #64]	@ (8002914 <HAL_RCC_OscConfig+0x784>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a0f      	ldr	r2, [pc, #60]	@ (8002914 <HAL_RCC_OscConfig+0x784>)
 80028d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002914 <HAL_RCC_OscConfig+0x784>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	4a0c      	ldr	r2, [pc, #48]	@ (8002914 <HAL_RCC_OscConfig+0x784>)
 80028e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028e8:	f7fe fc06 	bl	80010f8 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f0:	f7fe fc02 	bl	80010f8 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e058      	b.n	80029b4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002902:	4b04      	ldr	r3, [pc, #16]	@ (8002914 <HAL_RCC_OscConfig+0x784>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800290e:	e050      	b.n	80029b2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e04f      	b.n	80029b4 <HAL_RCC_OscConfig+0x824>
 8002914:	40021000 	.word	0x40021000
 8002918:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291c:	4b27      	ldr	r3, [pc, #156]	@ (80029bc <HAL_RCC_OscConfig+0x82c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d144      	bne.n	80029b2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002928:	4b24      	ldr	r3, [pc, #144]	@ (80029bc <HAL_RCC_OscConfig+0x82c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a23      	ldr	r2, [pc, #140]	@ (80029bc <HAL_RCC_OscConfig+0x82c>)
 800292e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002932:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002934:	4b21      	ldr	r3, [pc, #132]	@ (80029bc <HAL_RCC_OscConfig+0x82c>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4a20      	ldr	r2, [pc, #128]	@ (80029bc <HAL_RCC_OscConfig+0x82c>)
 800293a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800293e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002940:	f7fe fbda 	bl	80010f8 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002948:	f7fe fbd6 	bl	80010f8 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e02c      	b.n	80029b4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295a:	4b18      	ldr	r3, [pc, #96]	@ (80029bc <HAL_RCC_OscConfig+0x82c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCC_OscConfig+0x7b8>
 8002966:	e024      	b.n	80029b2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	2b0c      	cmp	r3, #12
 800296c:	d01f      	beq.n	80029ae <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296e:	4b13      	ldr	r3, [pc, #76]	@ (80029bc <HAL_RCC_OscConfig+0x82c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a12      	ldr	r2, [pc, #72]	@ (80029bc <HAL_RCC_OscConfig+0x82c>)
 8002974:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297a:	f7fe fbbd 	bl	80010f8 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002982:	f7fe fbb9 	bl	80010f8 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e00f      	b.n	80029b4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002994:	4b09      	ldr	r3, [pc, #36]	@ (80029bc <HAL_RCC_OscConfig+0x82c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1f0      	bne.n	8002982 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029a0:	4b06      	ldr	r3, [pc, #24]	@ (80029bc <HAL_RCC_OscConfig+0x82c>)
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	4905      	ldr	r1, [pc, #20]	@ (80029bc <HAL_RCC_OscConfig+0x82c>)
 80029a6:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <HAL_RCC_OscConfig+0x830>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	60cb      	str	r3, [r1, #12]
 80029ac:	e001      	b.n	80029b2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3720      	adds	r7, #32
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40021000 	.word	0x40021000
 80029c0:	feeefffc 	.word	0xfeeefffc

080029c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e11d      	b.n	8002c18 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029dc:	4b90      	ldr	r3, [pc, #576]	@ (8002c20 <HAL_RCC_ClockConfig+0x25c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 030f 	and.w	r3, r3, #15
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d910      	bls.n	8002a0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b8d      	ldr	r3, [pc, #564]	@ (8002c20 <HAL_RCC_ClockConfig+0x25c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 020f 	bic.w	r2, r3, #15
 80029f2:	498b      	ldr	r1, [pc, #556]	@ (8002c20 <HAL_RCC_ClockConfig+0x25c>)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b89      	ldr	r3, [pc, #548]	@ (8002c20 <HAL_RCC_ClockConfig+0x25c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e105      	b.n	8002c18 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d010      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	4b81      	ldr	r3, [pc, #516]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d908      	bls.n	8002a3a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a28:	4b7e      	ldr	r3, [pc, #504]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	497b      	ldr	r1, [pc, #492]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d079      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d11e      	bne.n	8002a8c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a4e:	4b75      	ldr	r3, [pc, #468]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e0dc      	b.n	8002c18 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002a5e:	f000 fa09 	bl	8002e74 <RCC_GetSysClockFreqFromPLLSource>
 8002a62:	4603      	mov	r3, r0
 8002a64:	4a70      	ldr	r2, [pc, #448]	@ (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d946      	bls.n	8002af8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a6a:	4b6e      	ldr	r3, [pc, #440]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d140      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a76:	4b6b      	ldr	r3, [pc, #428]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a7e:	4a69      	ldr	r2, [pc, #420]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002a80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a84:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a86:	2380      	movs	r3, #128	@ 0x80
 8002a88:	617b      	str	r3, [r7, #20]
 8002a8a:	e035      	b.n	8002af8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d107      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a94:	4b63      	ldr	r3, [pc, #396]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d115      	bne.n	8002acc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0b9      	b.n	8002c18 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d107      	bne.n	8002abc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002aac:	4b5d      	ldr	r3, [pc, #372]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d109      	bne.n	8002acc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0ad      	b.n	8002c18 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002abc:	4b59      	ldr	r3, [pc, #356]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0a5      	b.n	8002c18 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002acc:	f000 f8b4 	bl	8002c38 <HAL_RCC_GetSysClockFreq>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	4a55      	ldr	r2, [pc, #340]	@ (8002c28 <HAL_RCC_ClockConfig+0x264>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d90f      	bls.n	8002af8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002ad8:	4b52      	ldr	r3, [pc, #328]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d109      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ae4:	4b4f      	ldr	r3, [pc, #316]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002aec:	4a4d      	ldr	r2, [pc, #308]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002aee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002af2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002af4:	2380      	movs	r3, #128	@ 0x80
 8002af6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002af8:	4b4a      	ldr	r3, [pc, #296]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f023 0203 	bic.w	r2, r3, #3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	4947      	ldr	r1, [pc, #284]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b0a:	f7fe faf5 	bl	80010f8 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b10:	e00a      	b.n	8002b28 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b12:	f7fe faf1 	bl	80010f8 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e077      	b.n	8002c18 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b28:	4b3e      	ldr	r3, [pc, #248]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 020c 	and.w	r2, r3, #12
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d1eb      	bne.n	8002b12 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2b80      	cmp	r3, #128	@ 0x80
 8002b3e:	d105      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b40:	4b38      	ldr	r3, [pc, #224]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	4a37      	ldr	r2, [pc, #220]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002b46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b4a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d010      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	4b31      	ldr	r3, [pc, #196]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d208      	bcs.n	8002b7a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b68:	4b2e      	ldr	r3, [pc, #184]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	492b      	ldr	r1, [pc, #172]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b7a:	4b29      	ldr	r3, [pc, #164]	@ (8002c20 <HAL_RCC_ClockConfig+0x25c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d210      	bcs.n	8002baa <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b88:	4b25      	ldr	r3, [pc, #148]	@ (8002c20 <HAL_RCC_ClockConfig+0x25c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f023 020f 	bic.w	r2, r3, #15
 8002b90:	4923      	ldr	r1, [pc, #140]	@ (8002c20 <HAL_RCC_ClockConfig+0x25c>)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b98:	4b21      	ldr	r3, [pc, #132]	@ (8002c20 <HAL_RCC_ClockConfig+0x25c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 030f 	and.w	r3, r3, #15
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d001      	beq.n	8002baa <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e036      	b.n	8002c18 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d008      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	4918      	ldr	r1, [pc, #96]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d009      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bd4:	4b13      	ldr	r3, [pc, #76]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4910      	ldr	r1, [pc, #64]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002be8:	f000 f826 	bl	8002c38 <HAL_RCC_GetSysClockFreq>
 8002bec:	4602      	mov	r2, r0
 8002bee:	4b0d      	ldr	r3, [pc, #52]	@ (8002c24 <HAL_RCC_ClockConfig+0x260>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	091b      	lsrs	r3, r3, #4
 8002bf4:	f003 030f 	and.w	r3, r3, #15
 8002bf8:	490c      	ldr	r1, [pc, #48]	@ (8002c2c <HAL_RCC_ClockConfig+0x268>)
 8002bfa:	5ccb      	ldrb	r3, [r1, r3]
 8002bfc:	f003 031f 	and.w	r3, r3, #31
 8002c00:	fa22 f303 	lsr.w	r3, r2, r3
 8002c04:	4a0a      	ldr	r2, [pc, #40]	@ (8002c30 <HAL_RCC_ClockConfig+0x26c>)
 8002c06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c08:	4b0a      	ldr	r3, [pc, #40]	@ (8002c34 <HAL_RCC_ClockConfig+0x270>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fe fa23 	bl	8001058 <HAL_InitTick>
 8002c12:	4603      	mov	r3, r0
 8002c14:	73fb      	strb	r3, [r7, #15]

  return status;
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40022000 	.word	0x40022000
 8002c24:	40021000 	.word	0x40021000
 8002c28:	04c4b400 	.word	0x04c4b400
 8002c2c:	08006588 	.word	0x08006588
 8002c30:	20040000 	.word	0x20040000
 8002c34:	20040004 	.word	0x20040004

08002c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b089      	sub	sp, #36	@ 0x24
 8002c3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61fb      	str	r3, [r7, #28]
 8002c42:	2300      	movs	r3, #0
 8002c44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c46:	4b3e      	ldr	r3, [pc, #248]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c50:	4b3b      	ldr	r3, [pc, #236]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 0303 	and.w	r3, r3, #3
 8002c58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_RCC_GetSysClockFreq+0x34>
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	2b0c      	cmp	r3, #12
 8002c64:	d121      	bne.n	8002caa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d11e      	bne.n	8002caa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c6c:	4b34      	ldr	r3, [pc, #208]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d107      	bne.n	8002c88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c78:	4b31      	ldr	r3, [pc, #196]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c7e:	0a1b      	lsrs	r3, r3, #8
 8002c80:	f003 030f 	and.w	r3, r3, #15
 8002c84:	61fb      	str	r3, [r7, #28]
 8002c86:	e005      	b.n	8002c94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c88:	4b2d      	ldr	r3, [pc, #180]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	091b      	lsrs	r3, r3, #4
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c94:	4a2b      	ldr	r2, [pc, #172]	@ (8002d44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10d      	bne.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ca8:	e00a      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d102      	bne.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cb0:	4b25      	ldr	r3, [pc, #148]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cb2:	61bb      	str	r3, [r7, #24]
 8002cb4:	e004      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d101      	bne.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cbc:	4b23      	ldr	r3, [pc, #140]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x114>)
 8002cbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	2b0c      	cmp	r3, #12
 8002cc4:	d134      	bne.n	8002d30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d003      	beq.n	8002cde <HAL_RCC_GetSysClockFreq+0xa6>
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d003      	beq.n	8002ce4 <HAL_RCC_GetSysClockFreq+0xac>
 8002cdc:	e005      	b.n	8002cea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cde:	4b1a      	ldr	r3, [pc, #104]	@ (8002d48 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ce0:	617b      	str	r3, [r7, #20]
      break;
 8002ce2:	e005      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ce4:	4b19      	ldr	r3, [pc, #100]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x114>)
 8002ce6:	617b      	str	r3, [r7, #20]
      break;
 8002ce8:	e002      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	617b      	str	r3, [r7, #20]
      break;
 8002cee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cf0:	4b13      	ldr	r3, [pc, #76]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cfe:	4b10      	ldr	r3, [pc, #64]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	0a1b      	lsrs	r3, r3, #8
 8002d04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	fb03 f202 	mul.w	r2, r3, r2
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d16:	4b0a      	ldr	r3, [pc, #40]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	0e5b      	lsrs	r3, r3, #25
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	3301      	adds	r3, #1
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d30:	69bb      	ldr	r3, [r7, #24]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3724      	adds	r7, #36	@ 0x24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000
 8002d44:	080065a0 	.word	0x080065a0
 8002d48:	00f42400 	.word	0x00f42400
 8002d4c:	007a1200 	.word	0x007a1200

08002d50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d54:	4b03      	ldr	r3, [pc, #12]	@ (8002d64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d56:	681b      	ldr	r3, [r3, #0]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	20040000 	.word	0x20040000

08002d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d6c:	f7ff fff0 	bl	8002d50 <HAL_RCC_GetHCLKFreq>
 8002d70:	4602      	mov	r2, r0
 8002d72:	4b06      	ldr	r3, [pc, #24]	@ (8002d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	0a1b      	lsrs	r3, r3, #8
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	4904      	ldr	r1, [pc, #16]	@ (8002d90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d7e:	5ccb      	ldrb	r3, [r1, r3]
 8002d80:	f003 031f 	and.w	r3, r3, #31
 8002d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	08006598 	.word	0x08006598

08002d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d98:	f7ff ffda 	bl	8002d50 <HAL_RCC_GetHCLKFreq>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	4b06      	ldr	r3, [pc, #24]	@ (8002db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	0adb      	lsrs	r3, r3, #11
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	4904      	ldr	r1, [pc, #16]	@ (8002dbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002daa:	5ccb      	ldrb	r3, [r1, r3]
 8002dac:	f003 031f 	and.w	r3, r3, #31
 8002db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	08006598 	.word	0x08006598

08002dc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002dc8:	2300      	movs	r3, #0
 8002dca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002dcc:	4b27      	ldr	r3, [pc, #156]	@ (8002e6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002dd8:	f7ff f8f6 	bl	8001fc8 <HAL_PWREx_GetVoltageRange>
 8002ddc:	6178      	str	r0, [r7, #20]
 8002dde:	e014      	b.n	8002e0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002de0:	4b22      	ldr	r3, [pc, #136]	@ (8002e6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de4:	4a21      	ldr	r2, [pc, #132]	@ (8002e6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002de6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dea:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dec:	4b1f      	ldr	r3, [pc, #124]	@ (8002e6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002df8:	f7ff f8e6 	bl	8001fc8 <HAL_PWREx_GetVoltageRange>
 8002dfc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8002e6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e02:	4a1a      	ldr	r2, [pc, #104]	@ (8002e6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e08:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e10:	d10b      	bne.n	8002e2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b80      	cmp	r3, #128	@ 0x80
 8002e16:	d913      	bls.n	8002e40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e1c:	d902      	bls.n	8002e24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e1e:	2302      	movs	r3, #2
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	e00d      	b.n	8002e40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e24:	2301      	movs	r3, #1
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	e00a      	b.n	8002e40 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e2e:	d902      	bls.n	8002e36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002e30:	2302      	movs	r3, #2
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	e004      	b.n	8002e40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b70      	cmp	r3, #112	@ 0x70
 8002e3a:	d101      	bne.n	8002e40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e40:	4b0b      	ldr	r3, [pc, #44]	@ (8002e70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f023 020f 	bic.w	r2, r3, #15
 8002e48:	4909      	ldr	r1, [pc, #36]	@ (8002e70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e50:	4b07      	ldr	r3, [pc, #28]	@ (8002e70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 030f 	and.w	r3, r3, #15
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d001      	beq.n	8002e62 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	40022000 	.word	0x40022000

08002e74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b087      	sub	sp, #28
 8002e78:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e7a:	4b2d      	ldr	r3, [pc, #180]	@ (8002f30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b03      	cmp	r3, #3
 8002e88:	d00b      	beq.n	8002ea2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2b03      	cmp	r3, #3
 8002e8e:	d825      	bhi.n	8002edc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d008      	beq.n	8002ea8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d11f      	bne.n	8002edc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002e9c:	4b25      	ldr	r3, [pc, #148]	@ (8002f34 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002e9e:	613b      	str	r3, [r7, #16]
    break;
 8002ea0:	e01f      	b.n	8002ee2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002ea2:	4b25      	ldr	r3, [pc, #148]	@ (8002f38 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002ea4:	613b      	str	r3, [r7, #16]
    break;
 8002ea6:	e01c      	b.n	8002ee2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ea8:	4b21      	ldr	r3, [pc, #132]	@ (8002f30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d107      	bne.n	8002ec4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8002f30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eba:	0a1b      	lsrs	r3, r3, #8
 8002ebc:	f003 030f 	and.w	r3, r3, #15
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	e005      	b.n	8002ed0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8002f30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002ed0:	4a1a      	ldr	r2, [pc, #104]	@ (8002f3c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed8:	613b      	str	r3, [r7, #16]
    break;
 8002eda:	e002      	b.n	8002ee2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	613b      	str	r3, [r7, #16]
    break;
 8002ee0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ee2:	4b13      	ldr	r3, [pc, #76]	@ (8002f30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	091b      	lsrs	r3, r3, #4
 8002ee8:	f003 030f 	and.w	r3, r3, #15
 8002eec:	3301      	adds	r3, #1
 8002eee:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8002f30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	0a1b      	lsrs	r3, r3, #8
 8002ef6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	fb03 f202 	mul.w	r2, r3, r2
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f06:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f08:	4b09      	ldr	r3, [pc, #36]	@ (8002f30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	0e5b      	lsrs	r3, r3, #25
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	3301      	adds	r3, #1
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f20:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002f22:	683b      	ldr	r3, [r7, #0]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	371c      	adds	r7, #28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	40021000 	.word	0x40021000
 8002f34:	00f42400 	.word	0x00f42400
 8002f38:	007a1200 	.word	0x007a1200
 8002f3c:	080065a0 	.word	0x080065a0

08002f40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f48:	2300      	movs	r3, #0
 8002f4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d040      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f60:	2b80      	cmp	r3, #128	@ 0x80
 8002f62:	d02a      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002f64:	2b80      	cmp	r3, #128	@ 0x80
 8002f66:	d825      	bhi.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f68:	2b60      	cmp	r3, #96	@ 0x60
 8002f6a:	d026      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002f6c:	2b60      	cmp	r3, #96	@ 0x60
 8002f6e:	d821      	bhi.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f70:	2b40      	cmp	r3, #64	@ 0x40
 8002f72:	d006      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002f74:	2b40      	cmp	r3, #64	@ 0x40
 8002f76:	d81d      	bhi.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d009      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002f7c:	2b20      	cmp	r3, #32
 8002f7e:	d010      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002f80:	e018      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f82:	4b89      	ldr	r3, [pc, #548]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	4a88      	ldr	r2, [pc, #544]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f8c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f8e:	e015      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3304      	adds	r3, #4
 8002f94:	2100      	movs	r1, #0
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fb02 	bl	80035a0 <RCCEx_PLLSAI1_Config>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fa0:	e00c      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3320      	adds	r3, #32
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fbed 	bl	8003788 <RCCEx_PLLSAI2_Config>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fb2:	e003      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	74fb      	strb	r3, [r7, #19]
      break;
 8002fb8:	e000      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002fba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fbc:	7cfb      	ldrb	r3, [r7, #19]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10b      	bne.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fc2:	4b79      	ldr	r3, [pc, #484]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002fc8:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fd0:	4975      	ldr	r1, [pc, #468]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002fd8:	e001      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fda:	7cfb      	ldrb	r3, [r7, #19]
 8002fdc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d047      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ff2:	d030      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002ff4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ff8:	d82a      	bhi.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002ffa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ffe:	d02a      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003000:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003004:	d824      	bhi.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003006:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800300a:	d008      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800300c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003010:	d81e      	bhi.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003016:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800301a:	d010      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800301c:	e018      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800301e:	4b62      	ldr	r3, [pc, #392]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	4a61      	ldr	r2, [pc, #388]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003024:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003028:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800302a:	e015      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3304      	adds	r3, #4
 8003030:	2100      	movs	r1, #0
 8003032:	4618      	mov	r0, r3
 8003034:	f000 fab4 	bl	80035a0 <RCCEx_PLLSAI1_Config>
 8003038:	4603      	mov	r3, r0
 800303a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800303c:	e00c      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3320      	adds	r3, #32
 8003042:	2100      	movs	r1, #0
 8003044:	4618      	mov	r0, r3
 8003046:	f000 fb9f 	bl	8003788 <RCCEx_PLLSAI2_Config>
 800304a:	4603      	mov	r3, r0
 800304c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800304e:	e003      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	74fb      	strb	r3, [r7, #19]
      break;
 8003054:	e000      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003056:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003058:	7cfb      	ldrb	r3, [r7, #19]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10b      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800305e:	4b52      	ldr	r3, [pc, #328]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003060:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003064:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800306c:	494e      	ldr	r1, [pc, #312]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003074:	e001      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003076:	7cfb      	ldrb	r3, [r7, #19]
 8003078:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 809f 	beq.w	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003088:	2300      	movs	r3, #0
 800308a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800308c:	4b46      	ldr	r3, [pc, #280]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800308e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003090:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800309c:	2300      	movs	r3, #0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00d      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030a2:	4b41      	ldr	r3, [pc, #260]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a6:	4a40      	ldr	r2, [pc, #256]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80030ae:	4b3e      	ldr	r3, [pc, #248]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ba:	2301      	movs	r3, #1
 80030bc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030be:	4b3b      	ldr	r3, [pc, #236]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a3a      	ldr	r2, [pc, #232]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80030c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030ca:	f7fe f815 	bl	80010f8 <HAL_GetTick>
 80030ce:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030d0:	e009      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d2:	f7fe f811 	bl	80010f8 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d902      	bls.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	74fb      	strb	r3, [r7, #19]
        break;
 80030e4:	e005      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030e6:	4b31      	ldr	r3, [pc, #196]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0ef      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80030f2:	7cfb      	ldrb	r3, [r7, #19]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d15b      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030f8:	4b2b      	ldr	r3, [pc, #172]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003102:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d01f      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	429a      	cmp	r2, r3
 8003114:	d019      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003116:	4b24      	ldr	r3, [pc, #144]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800311c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003120:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003122:	4b21      	ldr	r3, [pc, #132]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003124:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003128:	4a1f      	ldr	r2, [pc, #124]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800312a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800312e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003132:	4b1d      	ldr	r3, [pc, #116]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003138:	4a1b      	ldr	r2, [pc, #108]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800313a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800313e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003142:	4a19      	ldr	r2, [pc, #100]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d016      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003154:	f7fd ffd0 	bl	80010f8 <HAL_GetTick>
 8003158:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800315a:	e00b      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800315c:	f7fd ffcc 	bl	80010f8 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800316a:	4293      	cmp	r3, r2
 800316c:	d902      	bls.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	74fb      	strb	r3, [r7, #19]
            break;
 8003172:	e006      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003174:	4b0c      	ldr	r3, [pc, #48]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0ec      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003182:	7cfb      	ldrb	r3, [r7, #19]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10c      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003188:	4b07      	ldr	r3, [pc, #28]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800318a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003198:	4903      	ldr	r1, [pc, #12]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80031a0:	e008      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031a2:	7cfb      	ldrb	r3, [r7, #19]
 80031a4:	74bb      	strb	r3, [r7, #18]
 80031a6:	e005      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80031a8:	40021000 	.word	0x40021000
 80031ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b0:	7cfb      	ldrb	r3, [r7, #19]
 80031b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031b4:	7c7b      	ldrb	r3, [r7, #17]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d105      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ba:	4ba0      	ldr	r3, [pc, #640]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031be:	4a9f      	ldr	r2, [pc, #636]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031d2:	4b9a      	ldr	r3, [pc, #616]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d8:	f023 0203 	bic.w	r2, r3, #3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e0:	4996      	ldr	r1, [pc, #600]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00a      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031f4:	4b91      	ldr	r3, [pc, #580]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031fa:	f023 020c 	bic.w	r2, r3, #12
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003202:	498e      	ldr	r1, [pc, #568]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00a      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003216:	4b89      	ldr	r3, [pc, #548]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800321c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003224:	4985      	ldr	r1, [pc, #532]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003226:	4313      	orrs	r3, r2
 8003228:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003238:	4b80      	ldr	r3, [pc, #512]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800323a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800323e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003246:	497d      	ldr	r1, [pc, #500]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0310 	and.w	r3, r3, #16
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800325a:	4b78      	ldr	r3, [pc, #480]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800325c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003260:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003268:	4974      	ldr	r1, [pc, #464]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800326a:	4313      	orrs	r3, r2
 800326c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0320 	and.w	r3, r3, #32
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800327c:	4b6f      	ldr	r3, [pc, #444]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800327e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003282:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800328a:	496c      	ldr	r1, [pc, #432]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800329e:	4b67      	ldr	r3, [pc, #412]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032ac:	4963      	ldr	r1, [pc, #396]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00a      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032c0:	4b5e      	ldr	r3, [pc, #376]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032ce:	495b      	ldr	r1, [pc, #364]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032e2:	4b56      	ldr	r3, [pc, #344]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f0:	4952      	ldr	r1, [pc, #328]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00a      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003304:	4b4d      	ldr	r3, [pc, #308]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800330a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003312:	494a      	ldr	r1, [pc, #296]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003314:	4313      	orrs	r3, r2
 8003316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003326:	4b45      	ldr	r3, [pc, #276]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800332c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003334:	4941      	ldr	r1, [pc, #260]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00a      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003348:	4b3c      	ldr	r3, [pc, #240]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800334a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800334e:	f023 0203 	bic.w	r2, r3, #3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003356:	4939      	ldr	r1, [pc, #228]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d028      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800336a:	4b34      	ldr	r3, [pc, #208]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800336c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003370:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003378:	4930      	ldr	r1, [pc, #192]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003384:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003388:	d106      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800338a:	4b2c      	ldr	r3, [pc, #176]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	4a2b      	ldr	r2, [pc, #172]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003390:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003394:	60d3      	str	r3, [r2, #12]
 8003396:	e011      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800339c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033a0:	d10c      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	3304      	adds	r3, #4
 80033a6:	2101      	movs	r1, #1
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 f8f9 	bl	80035a0 <RCCEx_PLLSAI1_Config>
 80033ae:	4603      	mov	r3, r0
 80033b0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033b2:	7cfb      	ldrb	r3, [r7, #19]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d04d      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033d0:	d108      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80033d2:	4b1a      	ldr	r3, [pc, #104]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033d8:	4a18      	ldr	r2, [pc, #96]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033de:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80033e2:	e012      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80033e4:	4b15      	ldr	r3, [pc, #84]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033ea:	4a14      	ldr	r2, [pc, #80]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033f0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80033f4:	4b11      	ldr	r3, [pc, #68]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003402:	490e      	ldr	r1, [pc, #56]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800340e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003412:	d106      	bne.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003414:	4b09      	ldr	r3, [pc, #36]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	4a08      	ldr	r2, [pc, #32]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800341a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800341e:	60d3      	str	r3, [r2, #12]
 8003420:	e020      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003426:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800342a:	d109      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800342c:	4b03      	ldr	r3, [pc, #12]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4a02      	ldr	r2, [pc, #8]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003432:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003436:	60d3      	str	r3, [r2, #12]
 8003438:	e014      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800343a:	bf00      	nop
 800343c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003444:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003448:	d10c      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3304      	adds	r3, #4
 800344e:	2101      	movs	r1, #1
 8003450:	4618      	mov	r0, r3
 8003452:	f000 f8a5 	bl	80035a0 <RCCEx_PLLSAI1_Config>
 8003456:	4603      	mov	r3, r0
 8003458:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800345a:	7cfb      	ldrb	r3, [r7, #19]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003460:	7cfb      	ldrb	r3, [r7, #19]
 8003462:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d028      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003470:	4b4a      	ldr	r3, [pc, #296]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003476:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800347e:	4947      	ldr	r1, [pc, #284]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003480:	4313      	orrs	r3, r2
 8003482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800348a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800348e:	d106      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003490:	4b42      	ldr	r3, [pc, #264]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	4a41      	ldr	r2, [pc, #260]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003496:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800349a:	60d3      	str	r3, [r2, #12]
 800349c:	e011      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034a6:	d10c      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3304      	adds	r3, #4
 80034ac:	2101      	movs	r1, #1
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 f876 	bl	80035a0 <RCCEx_PLLSAI1_Config>
 80034b4:	4603      	mov	r3, r0
 80034b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034b8:	7cfb      	ldrb	r3, [r7, #19]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80034be:	7cfb      	ldrb	r3, [r7, #19]
 80034c0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d01e      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034ce:	4b33      	ldr	r3, [pc, #204]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034de:	492f      	ldr	r1, [pc, #188]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034f0:	d10c      	bne.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3304      	adds	r3, #4
 80034f6:	2102      	movs	r1, #2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 f851 	bl	80035a0 <RCCEx_PLLSAI1_Config>
 80034fe:	4603      	mov	r3, r0
 8003500:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003502:	7cfb      	ldrb	r3, [r7, #19]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003508:	7cfb      	ldrb	r3, [r7, #19]
 800350a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00b      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003518:	4b20      	ldr	r3, [pc, #128]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800351a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800351e:	f023 0204 	bic.w	r2, r3, #4
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003528:	491c      	ldr	r1, [pc, #112]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00b      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800353c:	4b17      	ldr	r3, [pc, #92]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800353e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003542:	f023 0218 	bic.w	r2, r3, #24
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354c:	4913      	ldr	r1, [pc, #76]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800354e:	4313      	orrs	r3, r2
 8003550:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d017      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003560:	4b0e      	ldr	r3, [pc, #56]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003562:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003566:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003570:	490a      	ldr	r1, [pc, #40]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800357e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003582:	d105      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003584:	4b05      	ldr	r3, [pc, #20]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	4a04      	ldr	r2, [pc, #16]	@ (800359c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800358a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800358e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003590:	7cbb      	ldrb	r3, [r7, #18]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40021000 	.word	0x40021000

080035a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035ae:	4b72      	ldr	r3, [pc, #456]	@ (8003778 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00e      	beq.n	80035d8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035ba:	4b6f      	ldr	r3, [pc, #444]	@ (8003778 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f003 0203 	and.w	r2, r3, #3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d103      	bne.n	80035d2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
       ||
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d142      	bne.n	8003658 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	73fb      	strb	r3, [r7, #15]
 80035d6:	e03f      	b.n	8003658 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d018      	beq.n	8003612 <RCCEx_PLLSAI1_Config+0x72>
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d825      	bhi.n	8003630 <RCCEx_PLLSAI1_Config+0x90>
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d002      	beq.n	80035ee <RCCEx_PLLSAI1_Config+0x4e>
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d009      	beq.n	8003600 <RCCEx_PLLSAI1_Config+0x60>
 80035ec:	e020      	b.n	8003630 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035ee:	4b62      	ldr	r3, [pc, #392]	@ (8003778 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d11d      	bne.n	8003636 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035fe:	e01a      	b.n	8003636 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003600:	4b5d      	ldr	r3, [pc, #372]	@ (8003778 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003608:	2b00      	cmp	r3, #0
 800360a:	d116      	bne.n	800363a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003610:	e013      	b.n	800363a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003612:	4b59      	ldr	r3, [pc, #356]	@ (8003778 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10f      	bne.n	800363e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800361e:	4b56      	ldr	r3, [pc, #344]	@ (8003778 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d109      	bne.n	800363e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800362e:	e006      	b.n	800363e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
      break;
 8003634:	e004      	b.n	8003640 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003636:	bf00      	nop
 8003638:	e002      	b.n	8003640 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800363a:	bf00      	nop
 800363c:	e000      	b.n	8003640 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800363e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003640:	7bfb      	ldrb	r3, [r7, #15]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d108      	bne.n	8003658 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003646:	4b4c      	ldr	r3, [pc, #304]	@ (8003778 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f023 0203 	bic.w	r2, r3, #3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4949      	ldr	r1, [pc, #292]	@ (8003778 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003654:	4313      	orrs	r3, r2
 8003656:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	2b00      	cmp	r3, #0
 800365c:	f040 8086 	bne.w	800376c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003660:	4b45      	ldr	r3, [pc, #276]	@ (8003778 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a44      	ldr	r2, [pc, #272]	@ (8003778 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003666:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800366a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800366c:	f7fd fd44 	bl	80010f8 <HAL_GetTick>
 8003670:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003672:	e009      	b.n	8003688 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003674:	f7fd fd40 	bl	80010f8 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d902      	bls.n	8003688 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	73fb      	strb	r3, [r7, #15]
        break;
 8003686:	e005      	b.n	8003694 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003688:	4b3b      	ldr	r3, [pc, #236]	@ (8003778 <RCCEx_PLLSAI1_Config+0x1d8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1ef      	bne.n	8003674 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d168      	bne.n	800376c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d113      	bne.n	80036c8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036a0:	4b35      	ldr	r3, [pc, #212]	@ (8003778 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	4b35      	ldr	r3, [pc, #212]	@ (800377c <RCCEx_PLLSAI1_Config+0x1dc>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6892      	ldr	r2, [r2, #8]
 80036ac:	0211      	lsls	r1, r2, #8
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	68d2      	ldr	r2, [r2, #12]
 80036b2:	06d2      	lsls	r2, r2, #27
 80036b4:	4311      	orrs	r1, r2
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6852      	ldr	r2, [r2, #4]
 80036ba:	3a01      	subs	r2, #1
 80036bc:	0112      	lsls	r2, r2, #4
 80036be:	430a      	orrs	r2, r1
 80036c0:	492d      	ldr	r1, [pc, #180]	@ (8003778 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	610b      	str	r3, [r1, #16]
 80036c6:	e02d      	b.n	8003724 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d115      	bne.n	80036fa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036ce:	4b2a      	ldr	r3, [pc, #168]	@ (8003778 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036d0:	691a      	ldr	r2, [r3, #16]
 80036d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003780 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6892      	ldr	r2, [r2, #8]
 80036da:	0211      	lsls	r1, r2, #8
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6912      	ldr	r2, [r2, #16]
 80036e0:	0852      	lsrs	r2, r2, #1
 80036e2:	3a01      	subs	r2, #1
 80036e4:	0552      	lsls	r2, r2, #21
 80036e6:	4311      	orrs	r1, r2
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6852      	ldr	r2, [r2, #4]
 80036ec:	3a01      	subs	r2, #1
 80036ee:	0112      	lsls	r2, r2, #4
 80036f0:	430a      	orrs	r2, r1
 80036f2:	4921      	ldr	r1, [pc, #132]	@ (8003778 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	610b      	str	r3, [r1, #16]
 80036f8:	e014      	b.n	8003724 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036fa:	4b1f      	ldr	r3, [pc, #124]	@ (8003778 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	4b21      	ldr	r3, [pc, #132]	@ (8003784 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003700:	4013      	ands	r3, r2
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6892      	ldr	r2, [r2, #8]
 8003706:	0211      	lsls	r1, r2, #8
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6952      	ldr	r2, [r2, #20]
 800370c:	0852      	lsrs	r2, r2, #1
 800370e:	3a01      	subs	r2, #1
 8003710:	0652      	lsls	r2, r2, #25
 8003712:	4311      	orrs	r1, r2
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6852      	ldr	r2, [r2, #4]
 8003718:	3a01      	subs	r2, #1
 800371a:	0112      	lsls	r2, r2, #4
 800371c:	430a      	orrs	r2, r1
 800371e:	4916      	ldr	r1, [pc, #88]	@ (8003778 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003720:	4313      	orrs	r3, r2
 8003722:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003724:	4b14      	ldr	r3, [pc, #80]	@ (8003778 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a13      	ldr	r2, [pc, #76]	@ (8003778 <RCCEx_PLLSAI1_Config+0x1d8>)
 800372a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800372e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003730:	f7fd fce2 	bl	80010f8 <HAL_GetTick>
 8003734:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003736:	e009      	b.n	800374c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003738:	f7fd fcde 	bl	80010f8 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d902      	bls.n	800374c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	73fb      	strb	r3, [r7, #15]
          break;
 800374a:	e005      	b.n	8003758 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800374c:	4b0a      	ldr	r3, [pc, #40]	@ (8003778 <RCCEx_PLLSAI1_Config+0x1d8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0ef      	beq.n	8003738 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800375e:	4b06      	ldr	r3, [pc, #24]	@ (8003778 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003760:	691a      	ldr	r2, [r3, #16]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	4904      	ldr	r1, [pc, #16]	@ (8003778 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003768:	4313      	orrs	r3, r2
 800376a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800376c:	7bfb      	ldrb	r3, [r7, #15]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40021000 	.word	0x40021000
 800377c:	07ff800f 	.word	0x07ff800f
 8003780:	ff9f800f 	.word	0xff9f800f
 8003784:	f9ff800f 	.word	0xf9ff800f

08003788 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003796:	4b72      	ldr	r3, [pc, #456]	@ (8003960 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00e      	beq.n	80037c0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037a2:	4b6f      	ldr	r3, [pc, #444]	@ (8003960 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f003 0203 	and.w	r2, r3, #3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d103      	bne.n	80037ba <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
       ||
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d142      	bne.n	8003840 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	73fb      	strb	r3, [r7, #15]
 80037be:	e03f      	b.n	8003840 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b03      	cmp	r3, #3
 80037c6:	d018      	beq.n	80037fa <RCCEx_PLLSAI2_Config+0x72>
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d825      	bhi.n	8003818 <RCCEx_PLLSAI2_Config+0x90>
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d002      	beq.n	80037d6 <RCCEx_PLLSAI2_Config+0x4e>
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d009      	beq.n	80037e8 <RCCEx_PLLSAI2_Config+0x60>
 80037d4:	e020      	b.n	8003818 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037d6:	4b62      	ldr	r3, [pc, #392]	@ (8003960 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d11d      	bne.n	800381e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037e6:	e01a      	b.n	800381e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037e8:	4b5d      	ldr	r3, [pc, #372]	@ (8003960 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d116      	bne.n	8003822 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037f8:	e013      	b.n	8003822 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037fa:	4b59      	ldr	r3, [pc, #356]	@ (8003960 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10f      	bne.n	8003826 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003806:	4b56      	ldr	r3, [pc, #344]	@ (8003960 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d109      	bne.n	8003826 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003816:	e006      	b.n	8003826 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	73fb      	strb	r3, [r7, #15]
      break;
 800381c:	e004      	b.n	8003828 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800381e:	bf00      	nop
 8003820:	e002      	b.n	8003828 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003822:	bf00      	nop
 8003824:	e000      	b.n	8003828 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003826:	bf00      	nop
    }

    if(status == HAL_OK)
 8003828:	7bfb      	ldrb	r3, [r7, #15]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d108      	bne.n	8003840 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800382e:	4b4c      	ldr	r3, [pc, #304]	@ (8003960 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f023 0203 	bic.w	r2, r3, #3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4949      	ldr	r1, [pc, #292]	@ (8003960 <RCCEx_PLLSAI2_Config+0x1d8>)
 800383c:	4313      	orrs	r3, r2
 800383e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003840:	7bfb      	ldrb	r3, [r7, #15]
 8003842:	2b00      	cmp	r3, #0
 8003844:	f040 8086 	bne.w	8003954 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003848:	4b45      	ldr	r3, [pc, #276]	@ (8003960 <RCCEx_PLLSAI2_Config+0x1d8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a44      	ldr	r2, [pc, #272]	@ (8003960 <RCCEx_PLLSAI2_Config+0x1d8>)
 800384e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003852:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003854:	f7fd fc50 	bl	80010f8 <HAL_GetTick>
 8003858:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800385a:	e009      	b.n	8003870 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800385c:	f7fd fc4c 	bl	80010f8 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d902      	bls.n	8003870 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	73fb      	strb	r3, [r7, #15]
        break;
 800386e:	e005      	b.n	800387c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003870:	4b3b      	ldr	r3, [pc, #236]	@ (8003960 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1ef      	bne.n	800385c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d168      	bne.n	8003954 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d113      	bne.n	80038b0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003888:	4b35      	ldr	r3, [pc, #212]	@ (8003960 <RCCEx_PLLSAI2_Config+0x1d8>)
 800388a:	695a      	ldr	r2, [r3, #20]
 800388c:	4b35      	ldr	r3, [pc, #212]	@ (8003964 <RCCEx_PLLSAI2_Config+0x1dc>)
 800388e:	4013      	ands	r3, r2
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6892      	ldr	r2, [r2, #8]
 8003894:	0211      	lsls	r1, r2, #8
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	68d2      	ldr	r2, [r2, #12]
 800389a:	06d2      	lsls	r2, r2, #27
 800389c:	4311      	orrs	r1, r2
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6852      	ldr	r2, [r2, #4]
 80038a2:	3a01      	subs	r2, #1
 80038a4:	0112      	lsls	r2, r2, #4
 80038a6:	430a      	orrs	r2, r1
 80038a8:	492d      	ldr	r1, [pc, #180]	@ (8003960 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	614b      	str	r3, [r1, #20]
 80038ae:	e02d      	b.n	800390c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d115      	bne.n	80038e2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003960 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038b8:	695a      	ldr	r2, [r3, #20]
 80038ba:	4b2b      	ldr	r3, [pc, #172]	@ (8003968 <RCCEx_PLLSAI2_Config+0x1e0>)
 80038bc:	4013      	ands	r3, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6892      	ldr	r2, [r2, #8]
 80038c2:	0211      	lsls	r1, r2, #8
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6912      	ldr	r2, [r2, #16]
 80038c8:	0852      	lsrs	r2, r2, #1
 80038ca:	3a01      	subs	r2, #1
 80038cc:	0552      	lsls	r2, r2, #21
 80038ce:	4311      	orrs	r1, r2
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6852      	ldr	r2, [r2, #4]
 80038d4:	3a01      	subs	r2, #1
 80038d6:	0112      	lsls	r2, r2, #4
 80038d8:	430a      	orrs	r2, r1
 80038da:	4921      	ldr	r1, [pc, #132]	@ (8003960 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	614b      	str	r3, [r1, #20]
 80038e0:	e014      	b.n	800390c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038e2:	4b1f      	ldr	r3, [pc, #124]	@ (8003960 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038e4:	695a      	ldr	r2, [r3, #20]
 80038e6:	4b21      	ldr	r3, [pc, #132]	@ (800396c <RCCEx_PLLSAI2_Config+0x1e4>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6892      	ldr	r2, [r2, #8]
 80038ee:	0211      	lsls	r1, r2, #8
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6952      	ldr	r2, [r2, #20]
 80038f4:	0852      	lsrs	r2, r2, #1
 80038f6:	3a01      	subs	r2, #1
 80038f8:	0652      	lsls	r2, r2, #25
 80038fa:	4311      	orrs	r1, r2
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6852      	ldr	r2, [r2, #4]
 8003900:	3a01      	subs	r2, #1
 8003902:	0112      	lsls	r2, r2, #4
 8003904:	430a      	orrs	r2, r1
 8003906:	4916      	ldr	r1, [pc, #88]	@ (8003960 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003908:	4313      	orrs	r3, r2
 800390a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800390c:	4b14      	ldr	r3, [pc, #80]	@ (8003960 <RCCEx_PLLSAI2_Config+0x1d8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a13      	ldr	r2, [pc, #76]	@ (8003960 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003912:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003916:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003918:	f7fd fbee 	bl	80010f8 <HAL_GetTick>
 800391c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800391e:	e009      	b.n	8003934 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003920:	f7fd fbea 	bl	80010f8 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d902      	bls.n	8003934 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	73fb      	strb	r3, [r7, #15]
          break;
 8003932:	e005      	b.n	8003940 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003934:	4b0a      	ldr	r3, [pc, #40]	@ (8003960 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0ef      	beq.n	8003920 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d106      	bne.n	8003954 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003946:	4b06      	ldr	r3, [pc, #24]	@ (8003960 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003948:	695a      	ldr	r2, [r3, #20]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	4904      	ldr	r1, [pc, #16]	@ (8003960 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003950:	4313      	orrs	r3, r2
 8003952:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003954:	7bfb      	ldrb	r3, [r7, #15]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40021000 	.word	0x40021000
 8003964:	07ff800f 	.word	0x07ff800f
 8003968:	ff9f800f 	.word	0xff9f800f
 800396c:	f9ff800f 	.word	0xf9ff800f

08003970 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e042      	b.n	8003a08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003988:	2b00      	cmp	r3, #0
 800398a:	d106      	bne.n	800399a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7fd f8f1 	bl	8000b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2224      	movs	r2, #36	@ 0x24
 800399e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0201 	bic.w	r2, r2, #1
 80039b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f001 f832 	bl	8004a24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 fd33 	bl	800442c <UART_SetConfig>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e01b      	b.n	8003a08 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0201 	orr.w	r2, r2, #1
 80039fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f001 f8b1 	bl	8004b68 <UART_CheckIdleState>
 8003a06:	4603      	mov	r3, r0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08a      	sub	sp, #40	@ 0x28
 8003a14:	af02      	add	r7, sp, #8
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	d17b      	bne.n	8003b22 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <HAL_UART_Transmit+0x26>
 8003a30:	88fb      	ldrh	r3, [r7, #6]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e074      	b.n	8003b24 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2221      	movs	r2, #33	@ 0x21
 8003a46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a4a:	f7fd fb55 	bl	80010f8 <HAL_GetTick>
 8003a4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	88fa      	ldrh	r2, [r7, #6]
 8003a54:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	88fa      	ldrh	r2, [r7, #6]
 8003a5c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a68:	d108      	bne.n	8003a7c <HAL_UART_Transmit+0x6c>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d104      	bne.n	8003a7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a72:	2300      	movs	r3, #0
 8003a74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	61bb      	str	r3, [r7, #24]
 8003a7a:	e003      	b.n	8003a84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a80:	2300      	movs	r3, #0
 8003a82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a84:	e030      	b.n	8003ae8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	2180      	movs	r1, #128	@ 0x80
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f001 f913 	bl	8004cbc <UART_WaitOnFlagUntilTimeout>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d005      	beq.n	8003aa8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e03d      	b.n	8003b24 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10b      	bne.n	8003ac6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	881a      	ldrh	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aba:	b292      	uxth	r2, r2
 8003abc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	3302      	adds	r3, #2
 8003ac2:	61bb      	str	r3, [r7, #24]
 8003ac4:	e007      	b.n	8003ad6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	781a      	ldrb	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1c8      	bne.n	8003a86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	2200      	movs	r2, #0
 8003afc:	2140      	movs	r1, #64	@ 0x40
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f001 f8dc 	bl	8004cbc <UART_WaitOnFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e006      	b.n	8003b24 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	e000      	b.n	8003b24 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003b22:	2302      	movs	r3, #2
  }
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3720      	adds	r7, #32
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b091      	sub	sp, #68	@ 0x44
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	4613      	mov	r3, r2
 8003b38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b40:	2b20      	cmp	r3, #32
 8003b42:	d178      	bne.n	8003c36 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <HAL_UART_Transmit_IT+0x24>
 8003b4a:	88fb      	ldrh	r3, [r7, #6]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e071      	b.n	8003c38 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	88fa      	ldrh	r2, [r7, #6]
 8003b5e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	88fa      	ldrh	r2, [r7, #6]
 8003b66:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2221      	movs	r2, #33	@ 0x21
 8003b7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

#if defined(USART_CR1_FIFOEN)
    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b88:	d12a      	bne.n	8003be0 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b92:	d107      	bne.n	8003ba4 <HAL_UART_Transmit_IT+0x78>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d103      	bne.n	8003ba4 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4a29      	ldr	r2, [pc, #164]	@ (8003c44 <HAL_UART_Transmit_IT+0x118>)
 8003ba0:	679a      	str	r2, [r3, #120]	@ 0x78
 8003ba2:	e002      	b.n	8003baa <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4a28      	ldr	r2, [pc, #160]	@ (8003c48 <HAL_UART_Transmit_IT+0x11c>)
 8003ba8:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	3308      	adds	r3, #8
 8003bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb4:	e853 3f00 	ldrex	r3, [r3]
 8003bb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	3308      	adds	r3, #8
 8003bc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003bca:	637a      	str	r2, [r7, #52]	@ 0x34
 8003bcc:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003bd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003bd2:	e841 2300 	strex	r3, r2, [r1]
 8003bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1e5      	bne.n	8003baa <HAL_UART_Transmit_IT+0x7e>
 8003bde:	e028      	b.n	8003c32 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003be8:	d107      	bne.n	8003bfa <HAL_UART_Transmit_IT+0xce>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d103      	bne.n	8003bfa <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4a15      	ldr	r2, [pc, #84]	@ (8003c4c <HAL_UART_Transmit_IT+0x120>)
 8003bf6:	679a      	str	r2, [r3, #120]	@ 0x78
 8003bf8:	e002      	b.n	8003c00 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4a14      	ldr	r2, [pc, #80]	@ (8003c50 <HAL_UART_Transmit_IT+0x124>)
 8003bfe:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	e853 3f00 	ldrex	r3, [r3]
 8003c0c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c1e:	623b      	str	r3, [r7, #32]
 8003c20:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c22:	69f9      	ldr	r1, [r7, #28]
 8003c24:	6a3a      	ldr	r2, [r7, #32]
 8003c26:	e841 2300 	strex	r3, r2, [r1]
 8003c2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1e6      	bne.n	8003c00 <HAL_UART_Transmit_IT+0xd4>

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	e000      	b.n	8003c38 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003c36:	2302      	movs	r3, #2
  }
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3744      	adds	r7, #68	@ 0x44
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	080052a1 	.word	0x080052a1
 8003c48:	080051c1 	.word	0x080051c1
 8003c4c:	080050ff 	.word	0x080050ff
 8003c50:	08005047 	.word	0x08005047

08003c54 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08a      	sub	sp, #40	@ 0x28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d167      	bne.n	8003d3c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <HAL_UART_Transmit_DMA+0x24>
 8003c72:	88fb      	ldrh	r3, [r7, #6]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e060      	b.n	8003d3e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	88fa      	ldrh	r2, [r7, #6]
 8003c86:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	88fa      	ldrh	r2, [r7, #6]
 8003c8e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2221      	movs	r2, #33	@ 0x21
 8003c9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d028      	beq.n	8003cfc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cae:	4a26      	ldr	r2, [pc, #152]	@ (8003d48 <HAL_UART_Transmit_DMA+0xf4>)
 8003cb0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cb6:	4a25      	ldr	r2, [pc, #148]	@ (8003d4c <HAL_UART_Transmit_DMA+0xf8>)
 8003cb8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cbe:	4a24      	ldr	r2, [pc, #144]	@ (8003d50 <HAL_UART_Transmit_DMA+0xfc>)
 8003cc0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3328      	adds	r3, #40	@ 0x28
 8003cda:	461a      	mov	r2, r3
 8003cdc:	88fb      	ldrh	r3, [r7, #6]
 8003cde:	f7fd fbf5 	bl	80014cc <HAL_DMA_Start_IT>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d009      	beq.n	8003cfc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2210      	movs	r2, #16
 8003cec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e020      	b.n	8003d3e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2240      	movs	r2, #64	@ 0x40
 8003d02:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	3308      	adds	r3, #8
 8003d0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	e853 3f00 	ldrex	r3, [r3]
 8003d12:	613b      	str	r3, [r7, #16]
   return(result);
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3308      	adds	r3, #8
 8003d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d24:	623a      	str	r2, [r7, #32]
 8003d26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d28:	69f9      	ldr	r1, [r7, #28]
 8003d2a:	6a3a      	ldr	r2, [r7, #32]
 8003d2c:	e841 2300 	strex	r3, r2, [r1]
 8003d30:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1e5      	bne.n	8003d04 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e000      	b.n	8003d3e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003d3c:	2302      	movs	r3, #2
  }
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3728      	adds	r7, #40	@ 0x28
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	08004ee5 	.word	0x08004ee5
 8003d4c:	08004f7f 	.word	0x08004f7f
 8003d50:	08004f9b 	.word	0x08004f9b

08003d54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b0ba      	sub	sp, #232	@ 0xe8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003d7e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003d82:	4013      	ands	r3, r2
 8003d84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003d88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d11b      	bne.n	8003dc8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d94:	f003 0320 	and.w	r3, r3, #32
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d015      	beq.n	8003dc8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d105      	bne.n	8003db4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d009      	beq.n	8003dc8 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 8300 	beq.w	80043be <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	4798      	blx	r3
      }
      return;
 8003dc6:	e2fa      	b.n	80043be <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8003dc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 8123 	beq.w	8004018 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003dd2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003dd6:	4b8d      	ldr	r3, [pc, #564]	@ (800400c <HAL_UART_IRQHandler+0x2b8>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d106      	bne.n	8003dec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003dde:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003de2:	4b8b      	ldr	r3, [pc, #556]	@ (8004010 <HAL_UART_IRQHandler+0x2bc>)
 8003de4:	4013      	ands	r3, r2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 8116 	beq.w	8004018 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d011      	beq.n	8003e1c <HAL_UART_IRQHandler+0xc8>
 8003df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00b      	beq.n	8003e1c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e12:	f043 0201 	orr.w	r2, r3, #1
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d011      	beq.n	8003e4c <HAL_UART_IRQHandler+0xf8>
 8003e28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00b      	beq.n	8003e4c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2202      	movs	r2, #2
 8003e3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e42:	f043 0204 	orr.w	r2, r3, #4
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d011      	beq.n	8003e7c <HAL_UART_IRQHandler+0x128>
 8003e58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00b      	beq.n	8003e7c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2204      	movs	r2, #4
 8003e6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e72:	f043 0202 	orr.w	r2, r3, #2
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e80:	f003 0308 	and.w	r3, r3, #8
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d017      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d105      	bne.n	8003ea0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003e94:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003e98:	4b5c      	ldr	r3, [pc, #368]	@ (800400c <HAL_UART_IRQHandler+0x2b8>)
 8003e9a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00b      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2208      	movs	r2, #8
 8003ea6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eae:	f043 0208 	orr.w	r2, r3, #8
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ebc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d012      	beq.n	8003eea <HAL_UART_IRQHandler+0x196>
 8003ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ec8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00c      	beq.n	8003eea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ed8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee0:	f043 0220 	orr.w	r2, r3, #32
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 8266 	beq.w	80043c2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003efa:	f003 0320 	and.w	r3, r3, #32
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d013      	beq.n	8003f2a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f06:	f003 0320 	and.w	r3, r3, #32
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d105      	bne.n	8003f1a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d007      	beq.n	8003f2a <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f30:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f3e:	2b40      	cmp	r3, #64	@ 0x40
 8003f40:	d005      	beq.n	8003f4e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003f42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f46:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d054      	beq.n	8003ff8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 ff62 	bl	8004e18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f5e:	2b40      	cmp	r3, #64	@ 0x40
 8003f60:	d146      	bne.n	8003ff0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	3308      	adds	r3, #8
 8003f68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f70:	e853 3f00 	ldrex	r3, [r3]
 8003f74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3308      	adds	r3, #8
 8003f8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f8e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003f92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f9e:	e841 2300 	strex	r3, r2, [r1]
 8003fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003fa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1d9      	bne.n	8003f62 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d017      	beq.n	8003fe8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fbe:	4a15      	ldr	r2, [pc, #84]	@ (8004014 <HAL_UART_IRQHandler+0x2c0>)
 8003fc0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fd fb56 	bl	800167a <HAL_DMA_Abort_IT>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d019      	beq.n	8004008 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe6:	e00f      	b.n	8004008 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 fa09 	bl	8004400 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fee:	e00b      	b.n	8004008 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 fa05 	bl	8004400 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff6:	e007      	b.n	8004008 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 fa01 	bl	8004400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004006:	e1dc      	b.n	80043c2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004008:	bf00      	nop
    return;
 800400a:	e1da      	b.n	80043c2 <HAL_UART_IRQHandler+0x66e>
 800400c:	10000001 	.word	0x10000001
 8004010:	04000120 	.word	0x04000120
 8004014:	0800501b 	.word	0x0800501b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800401c:	2b01      	cmp	r3, #1
 800401e:	f040 8170 	bne.w	8004302 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004026:	f003 0310 	and.w	r3, r3, #16
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 8169 	beq.w	8004302 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004034:	f003 0310 	and.w	r3, r3, #16
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 8162 	beq.w	8004302 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2210      	movs	r2, #16
 8004044:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004050:	2b40      	cmp	r3, #64	@ 0x40
 8004052:	f040 80d8 	bne.w	8004206 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004064:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 80af 	beq.w	80041cc <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004074:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004078:	429a      	cmp	r2, r3
 800407a:	f080 80a7 	bcs.w	80041cc <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004084:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b00      	cmp	r3, #0
 8004098:	f040 8087 	bne.w	80041aa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040a8:	e853 3f00 	ldrex	r3, [r3]
 80040ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80040b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80040b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	461a      	mov	r2, r3
 80040c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80040c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80040ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80040d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80040d6:	e841 2300 	strex	r3, r2, [r1]
 80040da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80040de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1da      	bne.n	800409c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	3308      	adds	r3, #8
 80040ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040f0:	e853 3f00 	ldrex	r3, [r3]
 80040f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80040f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040f8:	f023 0301 	bic.w	r3, r3, #1
 80040fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3308      	adds	r3, #8
 8004106:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800410a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800410e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004110:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004112:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004116:	e841 2300 	strex	r3, r2, [r1]
 800411a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800411c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1e1      	bne.n	80040e6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3308      	adds	r3, #8
 8004128:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800412c:	e853 3f00 	ldrex	r3, [r3]
 8004130:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004132:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004134:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004138:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3308      	adds	r3, #8
 8004142:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004146:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004148:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800414c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800414e:	e841 2300 	strex	r3, r2, [r1]
 8004152:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004154:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1e3      	bne.n	8004122 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2220      	movs	r2, #32
 800415e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004170:	e853 3f00 	ldrex	r3, [r3]
 8004174:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004176:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004178:	f023 0310 	bic.w	r3, r3, #16
 800417c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	461a      	mov	r2, r3
 8004186:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800418a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800418c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004190:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004192:	e841 2300 	strex	r3, r2, [r1]
 8004196:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004198:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1e4      	bne.n	8004168 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fd fa0c 	bl	80015c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2202      	movs	r2, #2
 80041ae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80041bc:	b29b      	uxth	r3, r3
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	4619      	mov	r1, r3
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f925 	bl	8004414 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80041ca:	e0fc      	b.n	80043c6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80041d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041d6:	429a      	cmp	r2, r3
 80041d8:	f040 80f5 	bne.w	80043c6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0320 	and.w	r3, r3, #32
 80041ea:	2b20      	cmp	r3, #32
 80041ec:	f040 80eb 	bne.w	80043c6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80041fc:	4619      	mov	r1, r3
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f908 	bl	8004414 <HAL_UARTEx_RxEventCallback>
      return;
 8004204:	e0df      	b.n	80043c6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004212:	b29b      	uxth	r3, r3
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004220:	b29b      	uxth	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 80d1 	beq.w	80043ca <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004228:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 80cc 	beq.w	80043ca <HAL_UART_IRQHandler+0x676>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800423a:	e853 3f00 	ldrex	r3, [r3]
 800423e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004242:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004246:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	461a      	mov	r2, r3
 8004250:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004254:	647b      	str	r3, [r7, #68]	@ 0x44
 8004256:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004258:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800425a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800425c:	e841 2300 	strex	r3, r2, [r1]
 8004260:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1e4      	bne.n	8004232 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	3308      	adds	r3, #8
 800426e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004272:	e853 3f00 	ldrex	r3, [r3]
 8004276:	623b      	str	r3, [r7, #32]
   return(result);
 8004278:	6a3b      	ldr	r3, [r7, #32]
 800427a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800427e:	f023 0301 	bic.w	r3, r3, #1
 8004282:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3308      	adds	r3, #8
 800428c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004290:	633a      	str	r2, [r7, #48]	@ 0x30
 8004292:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004294:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004296:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004298:	e841 2300 	strex	r3, r2, [r1]
 800429c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800429e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e1      	bne.n	8004268 <HAL_UART_IRQHandler+0x514>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	e853 3f00 	ldrex	r3, [r3]
 80042c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f023 0310 	bic.w	r3, r3, #16
 80042cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	461a      	mov	r2, r3
 80042d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80042da:	61fb      	str	r3, [r7, #28]
 80042dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042de:	69b9      	ldr	r1, [r7, #24]
 80042e0:	69fa      	ldr	r2, [r7, #28]
 80042e2:	e841 2300 	strex	r3, r2, [r1]
 80042e6:	617b      	str	r3, [r7, #20]
   return(result);
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1e4      	bne.n	80042b8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2202      	movs	r2, #2
 80042f2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042f8:	4619      	mov	r1, r3
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f88a 	bl	8004414 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004300:	e063      	b.n	80043ca <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004306:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00e      	beq.n	800432c <HAL_UART_IRQHandler+0x5d8>
 800430e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004312:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d008      	beq.n	800432c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004322:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f001 f85b 	bl	80053e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800432a:	e051      	b.n	80043d0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800432c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004334:	2b00      	cmp	r3, #0
 8004336:	d014      	beq.n	8004362 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800433c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004340:	2b00      	cmp	r3, #0
 8004342:	d105      	bne.n	8004350 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004348:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d008      	beq.n	8004362 <HAL_UART_IRQHandler+0x60e>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004354:	2b00      	cmp	r3, #0
 8004356:	d03a      	beq.n	80043ce <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	4798      	blx	r3
    }
    return;
 8004360:	e035      	b.n	80043ce <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800436a:	2b00      	cmp	r3, #0
 800436c:	d009      	beq.n	8004382 <HAL_UART_IRQHandler+0x62e>
 800436e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f001 f805 	bl	800538a <UART_EndTransmit_IT>
    return;
 8004380:	e026      	b.n	80043d0 <HAL_UART_IRQHandler+0x67c>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004386:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d009      	beq.n	80043a2 <HAL_UART_IRQHandler+0x64e>
 800438e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004392:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f001 f834 	bl	8005408 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043a0:	e016      	b.n	80043d0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80043a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d010      	beq.n	80043d0 <HAL_UART_IRQHandler+0x67c>
 80043ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	da0c      	bge.n	80043d0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f001 f81c 	bl	80053f4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043bc:	e008      	b.n	80043d0 <HAL_UART_IRQHandler+0x67c>
      return;
 80043be:	bf00      	nop
 80043c0:	e006      	b.n	80043d0 <HAL_UART_IRQHandler+0x67c>
    return;
 80043c2:	bf00      	nop
 80043c4:	e004      	b.n	80043d0 <HAL_UART_IRQHandler+0x67c>
      return;
 80043c6:	bf00      	nop
 80043c8:	e002      	b.n	80043d0 <HAL_UART_IRQHandler+0x67c>
      return;
 80043ca:	bf00      	nop
 80043cc:	e000      	b.n	80043d0 <HAL_UART_IRQHandler+0x67c>
    return;
 80043ce:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80043d0:	37e8      	adds	r7, #232	@ 0xe8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop

080043d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	460b      	mov	r3, r1
 800441e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800442c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004430:	b08c      	sub	sp, #48	@ 0x30
 8004432:	af00      	add	r7, sp, #0
 8004434:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004436:	2300      	movs	r3, #0
 8004438:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	431a      	orrs	r2, r3
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	431a      	orrs	r2, r3
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	4313      	orrs	r3, r2
 8004452:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	4baa      	ldr	r3, [pc, #680]	@ (8004704 <UART_SetConfig+0x2d8>)
 800445c:	4013      	ands	r3, r2
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	6812      	ldr	r2, [r2, #0]
 8004462:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004464:	430b      	orrs	r3, r1
 8004466:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a9f      	ldr	r2, [pc, #636]	@ (8004708 <UART_SetConfig+0x2dc>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d004      	beq.n	8004498 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004494:	4313      	orrs	r3, r2
 8004496:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80044a2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044ac:	430b      	orrs	r3, r1
 80044ae:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b6:	f023 010f 	bic.w	r1, r3, #15
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a90      	ldr	r2, [pc, #576]	@ (800470c <UART_SetConfig+0x2e0>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d125      	bne.n	800451c <UART_SetConfig+0xf0>
 80044d0:	4b8f      	ldr	r3, [pc, #572]	@ (8004710 <UART_SetConfig+0x2e4>)
 80044d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	2b03      	cmp	r3, #3
 80044dc:	d81a      	bhi.n	8004514 <UART_SetConfig+0xe8>
 80044de:	a201      	add	r2, pc, #4	@ (adr r2, 80044e4 <UART_SetConfig+0xb8>)
 80044e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e4:	080044f5 	.word	0x080044f5
 80044e8:	08004505 	.word	0x08004505
 80044ec:	080044fd 	.word	0x080044fd
 80044f0:	0800450d 	.word	0x0800450d
 80044f4:	2301      	movs	r3, #1
 80044f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044fa:	e116      	b.n	800472a <UART_SetConfig+0x2fe>
 80044fc:	2302      	movs	r3, #2
 80044fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004502:	e112      	b.n	800472a <UART_SetConfig+0x2fe>
 8004504:	2304      	movs	r3, #4
 8004506:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800450a:	e10e      	b.n	800472a <UART_SetConfig+0x2fe>
 800450c:	2308      	movs	r3, #8
 800450e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004512:	e10a      	b.n	800472a <UART_SetConfig+0x2fe>
 8004514:	2310      	movs	r3, #16
 8004516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800451a:	e106      	b.n	800472a <UART_SetConfig+0x2fe>
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a7c      	ldr	r2, [pc, #496]	@ (8004714 <UART_SetConfig+0x2e8>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d138      	bne.n	8004598 <UART_SetConfig+0x16c>
 8004526:	4b7a      	ldr	r3, [pc, #488]	@ (8004710 <UART_SetConfig+0x2e4>)
 8004528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800452c:	f003 030c 	and.w	r3, r3, #12
 8004530:	2b0c      	cmp	r3, #12
 8004532:	d82d      	bhi.n	8004590 <UART_SetConfig+0x164>
 8004534:	a201      	add	r2, pc, #4	@ (adr r2, 800453c <UART_SetConfig+0x110>)
 8004536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453a:	bf00      	nop
 800453c:	08004571 	.word	0x08004571
 8004540:	08004591 	.word	0x08004591
 8004544:	08004591 	.word	0x08004591
 8004548:	08004591 	.word	0x08004591
 800454c:	08004581 	.word	0x08004581
 8004550:	08004591 	.word	0x08004591
 8004554:	08004591 	.word	0x08004591
 8004558:	08004591 	.word	0x08004591
 800455c:	08004579 	.word	0x08004579
 8004560:	08004591 	.word	0x08004591
 8004564:	08004591 	.word	0x08004591
 8004568:	08004591 	.word	0x08004591
 800456c:	08004589 	.word	0x08004589
 8004570:	2300      	movs	r3, #0
 8004572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004576:	e0d8      	b.n	800472a <UART_SetConfig+0x2fe>
 8004578:	2302      	movs	r3, #2
 800457a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800457e:	e0d4      	b.n	800472a <UART_SetConfig+0x2fe>
 8004580:	2304      	movs	r3, #4
 8004582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004586:	e0d0      	b.n	800472a <UART_SetConfig+0x2fe>
 8004588:	2308      	movs	r3, #8
 800458a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800458e:	e0cc      	b.n	800472a <UART_SetConfig+0x2fe>
 8004590:	2310      	movs	r3, #16
 8004592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004596:	e0c8      	b.n	800472a <UART_SetConfig+0x2fe>
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a5e      	ldr	r2, [pc, #376]	@ (8004718 <UART_SetConfig+0x2ec>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d125      	bne.n	80045ee <UART_SetConfig+0x1c2>
 80045a2:	4b5b      	ldr	r3, [pc, #364]	@ (8004710 <UART_SetConfig+0x2e4>)
 80045a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80045ac:	2b30      	cmp	r3, #48	@ 0x30
 80045ae:	d016      	beq.n	80045de <UART_SetConfig+0x1b2>
 80045b0:	2b30      	cmp	r3, #48	@ 0x30
 80045b2:	d818      	bhi.n	80045e6 <UART_SetConfig+0x1ba>
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d00a      	beq.n	80045ce <UART_SetConfig+0x1a2>
 80045b8:	2b20      	cmp	r3, #32
 80045ba:	d814      	bhi.n	80045e6 <UART_SetConfig+0x1ba>
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d002      	beq.n	80045c6 <UART_SetConfig+0x19a>
 80045c0:	2b10      	cmp	r3, #16
 80045c2:	d008      	beq.n	80045d6 <UART_SetConfig+0x1aa>
 80045c4:	e00f      	b.n	80045e6 <UART_SetConfig+0x1ba>
 80045c6:	2300      	movs	r3, #0
 80045c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045cc:	e0ad      	b.n	800472a <UART_SetConfig+0x2fe>
 80045ce:	2302      	movs	r3, #2
 80045d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045d4:	e0a9      	b.n	800472a <UART_SetConfig+0x2fe>
 80045d6:	2304      	movs	r3, #4
 80045d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045dc:	e0a5      	b.n	800472a <UART_SetConfig+0x2fe>
 80045de:	2308      	movs	r3, #8
 80045e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045e4:	e0a1      	b.n	800472a <UART_SetConfig+0x2fe>
 80045e6:	2310      	movs	r3, #16
 80045e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045ec:	e09d      	b.n	800472a <UART_SetConfig+0x2fe>
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a4a      	ldr	r2, [pc, #296]	@ (800471c <UART_SetConfig+0x2f0>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d125      	bne.n	8004644 <UART_SetConfig+0x218>
 80045f8:	4b45      	ldr	r3, [pc, #276]	@ (8004710 <UART_SetConfig+0x2e4>)
 80045fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004602:	2bc0      	cmp	r3, #192	@ 0xc0
 8004604:	d016      	beq.n	8004634 <UART_SetConfig+0x208>
 8004606:	2bc0      	cmp	r3, #192	@ 0xc0
 8004608:	d818      	bhi.n	800463c <UART_SetConfig+0x210>
 800460a:	2b80      	cmp	r3, #128	@ 0x80
 800460c:	d00a      	beq.n	8004624 <UART_SetConfig+0x1f8>
 800460e:	2b80      	cmp	r3, #128	@ 0x80
 8004610:	d814      	bhi.n	800463c <UART_SetConfig+0x210>
 8004612:	2b00      	cmp	r3, #0
 8004614:	d002      	beq.n	800461c <UART_SetConfig+0x1f0>
 8004616:	2b40      	cmp	r3, #64	@ 0x40
 8004618:	d008      	beq.n	800462c <UART_SetConfig+0x200>
 800461a:	e00f      	b.n	800463c <UART_SetConfig+0x210>
 800461c:	2300      	movs	r3, #0
 800461e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004622:	e082      	b.n	800472a <UART_SetConfig+0x2fe>
 8004624:	2302      	movs	r3, #2
 8004626:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800462a:	e07e      	b.n	800472a <UART_SetConfig+0x2fe>
 800462c:	2304      	movs	r3, #4
 800462e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004632:	e07a      	b.n	800472a <UART_SetConfig+0x2fe>
 8004634:	2308      	movs	r3, #8
 8004636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800463a:	e076      	b.n	800472a <UART_SetConfig+0x2fe>
 800463c:	2310      	movs	r3, #16
 800463e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004642:	e072      	b.n	800472a <UART_SetConfig+0x2fe>
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a35      	ldr	r2, [pc, #212]	@ (8004720 <UART_SetConfig+0x2f4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d12a      	bne.n	80046a4 <UART_SetConfig+0x278>
 800464e:	4b30      	ldr	r3, [pc, #192]	@ (8004710 <UART_SetConfig+0x2e4>)
 8004650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004654:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004658:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800465c:	d01a      	beq.n	8004694 <UART_SetConfig+0x268>
 800465e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004662:	d81b      	bhi.n	800469c <UART_SetConfig+0x270>
 8004664:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004668:	d00c      	beq.n	8004684 <UART_SetConfig+0x258>
 800466a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800466e:	d815      	bhi.n	800469c <UART_SetConfig+0x270>
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <UART_SetConfig+0x250>
 8004674:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004678:	d008      	beq.n	800468c <UART_SetConfig+0x260>
 800467a:	e00f      	b.n	800469c <UART_SetConfig+0x270>
 800467c:	2300      	movs	r3, #0
 800467e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004682:	e052      	b.n	800472a <UART_SetConfig+0x2fe>
 8004684:	2302      	movs	r3, #2
 8004686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800468a:	e04e      	b.n	800472a <UART_SetConfig+0x2fe>
 800468c:	2304      	movs	r3, #4
 800468e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004692:	e04a      	b.n	800472a <UART_SetConfig+0x2fe>
 8004694:	2308      	movs	r3, #8
 8004696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800469a:	e046      	b.n	800472a <UART_SetConfig+0x2fe>
 800469c:	2310      	movs	r3, #16
 800469e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046a2:	e042      	b.n	800472a <UART_SetConfig+0x2fe>
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a17      	ldr	r2, [pc, #92]	@ (8004708 <UART_SetConfig+0x2dc>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d13a      	bne.n	8004724 <UART_SetConfig+0x2f8>
 80046ae:	4b18      	ldr	r3, [pc, #96]	@ (8004710 <UART_SetConfig+0x2e4>)
 80046b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80046b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046bc:	d01a      	beq.n	80046f4 <UART_SetConfig+0x2c8>
 80046be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046c2:	d81b      	bhi.n	80046fc <UART_SetConfig+0x2d0>
 80046c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046c8:	d00c      	beq.n	80046e4 <UART_SetConfig+0x2b8>
 80046ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046ce:	d815      	bhi.n	80046fc <UART_SetConfig+0x2d0>
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <UART_SetConfig+0x2b0>
 80046d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046d8:	d008      	beq.n	80046ec <UART_SetConfig+0x2c0>
 80046da:	e00f      	b.n	80046fc <UART_SetConfig+0x2d0>
 80046dc:	2300      	movs	r3, #0
 80046de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046e2:	e022      	b.n	800472a <UART_SetConfig+0x2fe>
 80046e4:	2302      	movs	r3, #2
 80046e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046ea:	e01e      	b.n	800472a <UART_SetConfig+0x2fe>
 80046ec:	2304      	movs	r3, #4
 80046ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046f2:	e01a      	b.n	800472a <UART_SetConfig+0x2fe>
 80046f4:	2308      	movs	r3, #8
 80046f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046fa:	e016      	b.n	800472a <UART_SetConfig+0x2fe>
 80046fc:	2310      	movs	r3, #16
 80046fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004702:	e012      	b.n	800472a <UART_SetConfig+0x2fe>
 8004704:	cfff69f3 	.word	0xcfff69f3
 8004708:	40008000 	.word	0x40008000
 800470c:	40013800 	.word	0x40013800
 8004710:	40021000 	.word	0x40021000
 8004714:	40004400 	.word	0x40004400
 8004718:	40004800 	.word	0x40004800
 800471c:	40004c00 	.word	0x40004c00
 8004720:	40005000 	.word	0x40005000
 8004724:	2310      	movs	r3, #16
 8004726:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4aae      	ldr	r2, [pc, #696]	@ (80049e8 <UART_SetConfig+0x5bc>)
 8004730:	4293      	cmp	r3, r2
 8004732:	f040 8097 	bne.w	8004864 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004736:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800473a:	2b08      	cmp	r3, #8
 800473c:	d823      	bhi.n	8004786 <UART_SetConfig+0x35a>
 800473e:	a201      	add	r2, pc, #4	@ (adr r2, 8004744 <UART_SetConfig+0x318>)
 8004740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004744:	08004769 	.word	0x08004769
 8004748:	08004787 	.word	0x08004787
 800474c:	08004771 	.word	0x08004771
 8004750:	08004787 	.word	0x08004787
 8004754:	08004777 	.word	0x08004777
 8004758:	08004787 	.word	0x08004787
 800475c:	08004787 	.word	0x08004787
 8004760:	08004787 	.word	0x08004787
 8004764:	0800477f 	.word	0x0800477f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004768:	f7fe fafe 	bl	8002d68 <HAL_RCC_GetPCLK1Freq>
 800476c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800476e:	e010      	b.n	8004792 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004770:	4b9e      	ldr	r3, [pc, #632]	@ (80049ec <UART_SetConfig+0x5c0>)
 8004772:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004774:	e00d      	b.n	8004792 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004776:	f7fe fa5f 	bl	8002c38 <HAL_RCC_GetSysClockFreq>
 800477a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800477c:	e009      	b.n	8004792 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800477e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004782:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004784:	e005      	b.n	8004792 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004786:	2300      	movs	r3, #0
 8004788:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004790:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 8130 	beq.w	80049fa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479e:	4a94      	ldr	r2, [pc, #592]	@ (80049f0 <UART_SetConfig+0x5c4>)
 80047a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047a4:	461a      	mov	r2, r3
 80047a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	4613      	mov	r3, r2
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	4413      	add	r3, r2
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d305      	bcc.n	80047ca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d903      	bls.n	80047d2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80047d0:	e113      	b.n	80049fa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d4:	2200      	movs	r2, #0
 80047d6:	60bb      	str	r3, [r7, #8]
 80047d8:	60fa      	str	r2, [r7, #12]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047de:	4a84      	ldr	r2, [pc, #528]	@ (80049f0 <UART_SetConfig+0x5c4>)
 80047e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	2200      	movs	r2, #0
 80047e8:	603b      	str	r3, [r7, #0]
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047f4:	f7fb fd5c 	bl	80002b0 <__aeabi_uldivmod>
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	4610      	mov	r0, r2
 80047fe:	4619      	mov	r1, r3
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	020b      	lsls	r3, r1, #8
 800480a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800480e:	0202      	lsls	r2, r0, #8
 8004810:	6979      	ldr	r1, [r7, #20]
 8004812:	6849      	ldr	r1, [r1, #4]
 8004814:	0849      	lsrs	r1, r1, #1
 8004816:	2000      	movs	r0, #0
 8004818:	460c      	mov	r4, r1
 800481a:	4605      	mov	r5, r0
 800481c:	eb12 0804 	adds.w	r8, r2, r4
 8004820:	eb43 0905 	adc.w	r9, r3, r5
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	469a      	mov	sl, r3
 800482c:	4693      	mov	fp, r2
 800482e:	4652      	mov	r2, sl
 8004830:	465b      	mov	r3, fp
 8004832:	4640      	mov	r0, r8
 8004834:	4649      	mov	r1, r9
 8004836:	f7fb fd3b 	bl	80002b0 <__aeabi_uldivmod>
 800483a:	4602      	mov	r2, r0
 800483c:	460b      	mov	r3, r1
 800483e:	4613      	mov	r3, r2
 8004840:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004848:	d308      	bcc.n	800485c <UART_SetConfig+0x430>
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004850:	d204      	bcs.n	800485c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6a3a      	ldr	r2, [r7, #32]
 8004858:	60da      	str	r2, [r3, #12]
 800485a:	e0ce      	b.n	80049fa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004862:	e0ca      	b.n	80049fa <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800486c:	d166      	bne.n	800493c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800486e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004872:	2b08      	cmp	r3, #8
 8004874:	d827      	bhi.n	80048c6 <UART_SetConfig+0x49a>
 8004876:	a201      	add	r2, pc, #4	@ (adr r2, 800487c <UART_SetConfig+0x450>)
 8004878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487c:	080048a1 	.word	0x080048a1
 8004880:	080048a9 	.word	0x080048a9
 8004884:	080048b1 	.word	0x080048b1
 8004888:	080048c7 	.word	0x080048c7
 800488c:	080048b7 	.word	0x080048b7
 8004890:	080048c7 	.word	0x080048c7
 8004894:	080048c7 	.word	0x080048c7
 8004898:	080048c7 	.word	0x080048c7
 800489c:	080048bf 	.word	0x080048bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048a0:	f7fe fa62 	bl	8002d68 <HAL_RCC_GetPCLK1Freq>
 80048a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80048a6:	e014      	b.n	80048d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048a8:	f7fe fa74 	bl	8002d94 <HAL_RCC_GetPCLK2Freq>
 80048ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80048ae:	e010      	b.n	80048d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048b0:	4b4e      	ldr	r3, [pc, #312]	@ (80049ec <UART_SetConfig+0x5c0>)
 80048b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80048b4:	e00d      	b.n	80048d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048b6:	f7fe f9bf 	bl	8002c38 <HAL_RCC_GetSysClockFreq>
 80048ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80048bc:	e009      	b.n	80048d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80048c4:	e005      	b.n	80048d2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80048d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 8090 	beq.w	80049fa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048de:	4a44      	ldr	r2, [pc, #272]	@ (80049f0 <UART_SetConfig+0x5c4>)
 80048e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048e4:	461a      	mov	r2, r3
 80048e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80048ec:	005a      	lsls	r2, r3, #1
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	085b      	lsrs	r3, r3, #1
 80048f4:	441a      	add	r2, r3
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fe:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	2b0f      	cmp	r3, #15
 8004904:	d916      	bls.n	8004934 <UART_SetConfig+0x508>
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800490c:	d212      	bcs.n	8004934 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	b29b      	uxth	r3, r3
 8004912:	f023 030f 	bic.w	r3, r3, #15
 8004916:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	085b      	lsrs	r3, r3, #1
 800491c:	b29b      	uxth	r3, r3
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	b29a      	uxth	r2, r3
 8004924:	8bfb      	ldrh	r3, [r7, #30]
 8004926:	4313      	orrs	r3, r2
 8004928:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	8bfa      	ldrh	r2, [r7, #30]
 8004930:	60da      	str	r2, [r3, #12]
 8004932:	e062      	b.n	80049fa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800493a:	e05e      	b.n	80049fa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800493c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004940:	2b08      	cmp	r3, #8
 8004942:	d828      	bhi.n	8004996 <UART_SetConfig+0x56a>
 8004944:	a201      	add	r2, pc, #4	@ (adr r2, 800494c <UART_SetConfig+0x520>)
 8004946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494a:	bf00      	nop
 800494c:	08004971 	.word	0x08004971
 8004950:	08004979 	.word	0x08004979
 8004954:	08004981 	.word	0x08004981
 8004958:	08004997 	.word	0x08004997
 800495c:	08004987 	.word	0x08004987
 8004960:	08004997 	.word	0x08004997
 8004964:	08004997 	.word	0x08004997
 8004968:	08004997 	.word	0x08004997
 800496c:	0800498f 	.word	0x0800498f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004970:	f7fe f9fa 	bl	8002d68 <HAL_RCC_GetPCLK1Freq>
 8004974:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004976:	e014      	b.n	80049a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004978:	f7fe fa0c 	bl	8002d94 <HAL_RCC_GetPCLK2Freq>
 800497c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800497e:	e010      	b.n	80049a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004980:	4b1a      	ldr	r3, [pc, #104]	@ (80049ec <UART_SetConfig+0x5c0>)
 8004982:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004984:	e00d      	b.n	80049a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004986:	f7fe f957 	bl	8002c38 <HAL_RCC_GetSysClockFreq>
 800498a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800498c:	e009      	b.n	80049a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800498e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004992:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004994:	e005      	b.n	80049a2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004996:	2300      	movs	r3, #0
 8004998:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80049a0:	bf00      	nop
    }

    if (pclk != 0U)
 80049a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d028      	beq.n	80049fa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ac:	4a10      	ldr	r2, [pc, #64]	@ (80049f0 <UART_SetConfig+0x5c4>)
 80049ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049b2:	461a      	mov	r2, r3
 80049b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	085b      	lsrs	r3, r3, #1
 80049c0:	441a      	add	r2, r3
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ca:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	2b0f      	cmp	r3, #15
 80049d0:	d910      	bls.n	80049f4 <UART_SetConfig+0x5c8>
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049d8:	d20c      	bcs.n	80049f4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	b29a      	uxth	r2, r3
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	60da      	str	r2, [r3, #12]
 80049e4:	e009      	b.n	80049fa <UART_SetConfig+0x5ce>
 80049e6:	bf00      	nop
 80049e8:	40008000 	.word	0x40008000
 80049ec:	00f42400 	.word	0x00f42400
 80049f0:	080065d0 	.word	0x080065d0
      }
      else
      {
        ret = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	2200      	movs	r2, #0
 8004a14:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004a16:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3730      	adds	r7, #48	@ 0x30
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004a24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a30:	f003 0308 	and.w	r3, r3, #8
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00a      	beq.n	8004a92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab8:	f003 0310 	and.w	r3, r3, #16
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ada:	f003 0320 	and.w	r3, r3, #32
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d01a      	beq.n	8004b3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b22:	d10a      	bne.n	8004b3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00a      	beq.n	8004b5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	605a      	str	r2, [r3, #4]
  }
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b098      	sub	sp, #96	@ 0x60
 8004b6c:	af02      	add	r7, sp, #8
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b78:	f7fc fabe 	bl	80010f8 <HAL_GetTick>
 8004b7c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0308 	and.w	r3, r3, #8
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d12f      	bne.n	8004bec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b94:	2200      	movs	r2, #0
 8004b96:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f88e 	bl	8004cbc <UART_WaitOnFlagUntilTimeout>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d022      	beq.n	8004bec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bae:	e853 3f00 	ldrex	r3, [r3]
 8004bb2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bba:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bc6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bcc:	e841 2300 	strex	r3, r2, [r1]
 8004bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1e6      	bne.n	8004ba6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e063      	b.n	8004cb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0304 	and.w	r3, r3, #4
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d149      	bne.n	8004c8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bfa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c02:	2200      	movs	r2, #0
 8004c04:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f857 	bl	8004cbc <UART_WaitOnFlagUntilTimeout>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d03c      	beq.n	8004c8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1c:	e853 3f00 	ldrex	r3, [r3]
 8004c20:	623b      	str	r3, [r7, #32]
   return(result);
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c32:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c34:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c3a:	e841 2300 	strex	r3, r2, [r1]
 8004c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1e6      	bne.n	8004c14 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3308      	adds	r3, #8
 8004c4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	e853 3f00 	ldrex	r3, [r3]
 8004c54:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f023 0301 	bic.w	r3, r3, #1
 8004c5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3308      	adds	r3, #8
 8004c64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c66:	61fa      	str	r2, [r7, #28]
 8004c68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6a:	69b9      	ldr	r1, [r7, #24]
 8004c6c:	69fa      	ldr	r2, [r7, #28]
 8004c6e:	e841 2300 	strex	r3, r2, [r1]
 8004c72:	617b      	str	r3, [r7, #20]
   return(result);
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1e5      	bne.n	8004c46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e012      	b.n	8004cb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2220      	movs	r2, #32
 8004c92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3758      	adds	r7, #88	@ 0x58
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	603b      	str	r3, [r7, #0]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ccc:	e04f      	b.n	8004d6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd4:	d04b      	beq.n	8004d6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd6:	f7fc fa0f 	bl	80010f8 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d302      	bcc.n	8004cec <UART_WaitOnFlagUntilTimeout+0x30>
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e04e      	b.n	8004d8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0304 	and.w	r3, r3, #4
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d037      	beq.n	8004d6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b80      	cmp	r3, #128	@ 0x80
 8004d02:	d034      	beq.n	8004d6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2b40      	cmp	r3, #64	@ 0x40
 8004d08:	d031      	beq.n	8004d6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	f003 0308 	and.w	r3, r3, #8
 8004d14:	2b08      	cmp	r3, #8
 8004d16:	d110      	bne.n	8004d3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2208      	movs	r2, #8
 8004d1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 f879 	bl	8004e18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2208      	movs	r2, #8
 8004d2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e029      	b.n	8004d8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69db      	ldr	r3, [r3, #28]
 8004d40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d48:	d111      	bne.n	8004d6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 f85f 	bl	8004e18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e00f      	b.n	8004d8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69da      	ldr	r2, [r3, #28]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	4013      	ands	r3, r2
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	bf0c      	ite	eq
 8004d7e:	2301      	moveq	r3, #1
 8004d80:	2300      	movne	r3, #0
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	461a      	mov	r2, r3
 8004d86:	79fb      	ldrb	r3, [r7, #7]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d0a0      	beq.n	8004cce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b08f      	sub	sp, #60	@ 0x3c
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	e853 3f00 	ldrex	r3, [r3]
 8004daa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	461a      	mov	r2, r3
 8004dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dbe:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dc4:	e841 2300 	strex	r3, r2, [r1]
 8004dc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1e6      	bne.n	8004d9e <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3308      	adds	r3, #8
 8004dd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	e853 3f00 	ldrex	r3, [r3]
 8004dde:	60bb      	str	r3, [r7, #8]
   return(result);
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004de6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3308      	adds	r3, #8
 8004dee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004df0:	61ba      	str	r2, [r7, #24]
 8004df2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df4:	6979      	ldr	r1, [r7, #20]
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	e841 2300 	strex	r3, r2, [r1]
 8004dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1e5      	bne.n	8004dd0 <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8004e0c:	bf00      	nop
 8004e0e:	373c      	adds	r7, #60	@ 0x3c
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b095      	sub	sp, #84	@ 0x54
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e28:	e853 3f00 	ldrex	r3, [r3]
 8004e2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e40:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e46:	e841 2300 	strex	r3, r2, [r1]
 8004e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1e6      	bne.n	8004e20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3308      	adds	r3, #8
 8004e58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	e853 3f00 	ldrex	r3, [r3]
 8004e60:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e68:	f023 0301 	bic.w	r3, r3, #1
 8004e6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	3308      	adds	r3, #8
 8004e74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e7e:	e841 2300 	strex	r3, r2, [r1]
 8004e82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1e3      	bne.n	8004e52 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d118      	bne.n	8004ec4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	e853 3f00 	ldrex	r3, [r3]
 8004e9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f023 0310 	bic.w	r3, r3, #16
 8004ea6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	461a      	mov	r2, r3
 8004eae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004eb0:	61bb      	str	r3, [r7, #24]
 8004eb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb4:	6979      	ldr	r1, [r7, #20]
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	e841 2300 	strex	r3, r2, [r1]
 8004ebc:	613b      	str	r3, [r7, #16]
   return(result);
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1e6      	bne.n	8004e92 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004ed8:	bf00      	nop
 8004eda:	3754      	adds	r7, #84	@ 0x54
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b090      	sub	sp, #64	@ 0x40
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0320 	and.w	r3, r3, #32
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d137      	bne.n	8004f70 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8004f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f02:	2200      	movs	r2, #0
 8004f04:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f12:	e853 3f00 	ldrex	r3, [r3]
 8004f16:	623b      	str	r3, [r7, #32]
   return(result);
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3308      	adds	r3, #8
 8004f26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f28:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f30:	e841 2300 	strex	r3, r2, [r1]
 8004f34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1e5      	bne.n	8004f08 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f50:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	461a      	mov	r2, r3
 8004f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f5a:	61fb      	str	r3, [r7, #28]
 8004f5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5e:	69b9      	ldr	r1, [r7, #24]
 8004f60:	69fa      	ldr	r2, [r7, #28]
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	617b      	str	r3, [r7, #20]
   return(result);
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e6      	bne.n	8004f3c <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f6e:	e002      	b.n	8004f76 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004f70:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004f72:	f7ff fa31 	bl	80043d8 <HAL_UART_TxCpltCallback>
}
 8004f76:	bf00      	nop
 8004f78:	3740      	adds	r7, #64	@ 0x40
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b084      	sub	sp, #16
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f7ff fa2d 	bl	80043ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f92:	bf00      	nop
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b086      	sub	sp, #24
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fc2:	2b80      	cmp	r3, #128	@ 0x80
 8004fc4:	d109      	bne.n	8004fda <UART_DMAError+0x40>
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	2b21      	cmp	r3, #33	@ 0x21
 8004fca:	d106      	bne.n	8004fda <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8004fd4:	6978      	ldr	r0, [r7, #20]
 8004fd6:	f7ff fede 	bl	8004d96 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fe4:	2b40      	cmp	r3, #64	@ 0x40
 8004fe6:	d109      	bne.n	8004ffc <UART_DMAError+0x62>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2b22      	cmp	r3, #34	@ 0x22
 8004fec:	d106      	bne.n	8004ffc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8004ff6:	6978      	ldr	r0, [r7, #20]
 8004ff8:	f7ff ff0e 	bl	8004e18 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005002:	f043 0210 	orr.w	r2, r3, #16
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800500c:	6978      	ldr	r0, [r7, #20]
 800500e:	f7ff f9f7 	bl	8004400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005012:	bf00      	nop
 8005014:	3718      	adds	r7, #24
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b084      	sub	sp, #16
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005026:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f7ff f9e1 	bl	8004400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800503e:	bf00      	nop
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005046:	b480      	push	{r7}
 8005048:	b08f      	sub	sp, #60	@ 0x3c
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005054:	2b21      	cmp	r3, #33	@ 0x21
 8005056:	d14c      	bne.n	80050f2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800505e:	b29b      	uxth	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d132      	bne.n	80050ca <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	e853 3f00 	ldrex	r3, [r3]
 8005070:	61fb      	str	r3, [r7, #28]
   return(result);
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005078:	637b      	str	r3, [r7, #52]	@ 0x34
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005082:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005084:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005086:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005088:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800508a:	e841 2300 	strex	r3, r2, [r1]
 800508e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1e6      	bne.n	8005064 <UART_TxISR_8BIT+0x1e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	e853 3f00 	ldrex	r3, [r3]
 80050a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	461a      	mov	r2, r3
 80050b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b4:	61bb      	str	r3, [r7, #24]
 80050b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	6979      	ldr	r1, [r7, #20]
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	e841 2300 	strex	r3, r2, [r1]
 80050c0:	613b      	str	r3, [r7, #16]
   return(result);
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e6      	bne.n	8005096 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80050c8:	e013      	b.n	80050f2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ce:	781a      	ldrb	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	3b01      	subs	r3, #1
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80050f2:	bf00      	nop
 80050f4:	373c      	adds	r7, #60	@ 0x3c
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80050fe:	b480      	push	{r7}
 8005100:	b091      	sub	sp, #68	@ 0x44
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800510c:	2b21      	cmp	r3, #33	@ 0x21
 800510e:	d151      	bne.n	80051b4 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005116:	b29b      	uxth	r3, r3
 8005118:	2b00      	cmp	r3, #0
 800511a:	d132      	bne.n	8005182 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005124:	e853 3f00 	ldrex	r3, [r3]
 8005128:	623b      	str	r3, [r7, #32]
   return(result);
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005130:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	461a      	mov	r2, r3
 8005138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800513a:	633b      	str	r3, [r7, #48]	@ 0x30
 800513c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005140:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005142:	e841 2300 	strex	r3, r2, [r1]
 8005146:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1e6      	bne.n	800511c <UART_TxISR_16BIT+0x1e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	e853 3f00 	ldrex	r3, [r3]
 800515a:	60fb      	str	r3, [r7, #12]
   return(result);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005162:	637b      	str	r3, [r7, #52]	@ 0x34
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	461a      	mov	r2, r3
 800516a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800516c:	61fb      	str	r3, [r7, #28]
 800516e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005170:	69b9      	ldr	r1, [r7, #24]
 8005172:	69fa      	ldr	r2, [r7, #28]
 8005174:	e841 2300 	strex	r3, r2, [r1]
 8005178:	617b      	str	r3, [r7, #20]
   return(result);
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1e6      	bne.n	800514e <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005180:	e018      	b.n	80051b4 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005186:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800518a:	881a      	ldrh	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005194:	b292      	uxth	r2, r2
 8005196:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800519c:	1c9a      	adds	r2, r3, #2
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	3b01      	subs	r3, #1
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80051b4:	bf00      	nop
 80051b6:	3744      	adds	r7, #68	@ 0x44
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b091      	sub	sp, #68	@ 0x44
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ce:	2b21      	cmp	r3, #33	@ 0x21
 80051d0:	d160      	bne.n	8005294 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80051d8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80051da:	e057      	b.n	800528c <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d133      	bne.n	8005250 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	3308      	adds	r3, #8
 80051ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f2:	e853 3f00 	ldrex	r3, [r3]
 80051f6:	623b      	str	r3, [r7, #32]
   return(result);
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80051fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3308      	adds	r3, #8
 8005206:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005208:	633a      	str	r2, [r7, #48]	@ 0x30
 800520a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800520e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005210:	e841 2300 	strex	r3, r2, [r1]
 8005214:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1e5      	bne.n	80051e8 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	e853 3f00 	ldrex	r3, [r3]
 8005228:	60fb      	str	r3, [r7, #12]
   return(result);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005230:	637b      	str	r3, [r7, #52]	@ 0x34
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	461a      	mov	r2, r3
 8005238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800523a:	61fb      	str	r3, [r7, #28]
 800523c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523e:	69b9      	ldr	r1, [r7, #24]
 8005240:	69fa      	ldr	r2, [r7, #28]
 8005242:	e841 2300 	strex	r3, r2, [r1]
 8005246:	617b      	str	r3, [r7, #20]
   return(result);
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1e6      	bne.n	800521c <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800524e:	e021      	b.n	8005294 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800525a:	2b00      	cmp	r3, #0
 800525c:	d013      	beq.n	8005286 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005262:	781a      	ldrb	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	851a      	strh	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800527a:	b29b      	uxth	r3, r3
 800527c:	3b01      	subs	r3, #1
 800527e:	b29a      	uxth	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005286:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005288:	3b01      	subs	r3, #1
 800528a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800528c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1a4      	bne.n	80051dc <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8005292:	e7ff      	b.n	8005294 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8005294:	bf00      	nop
 8005296:	3744      	adds	r7, #68	@ 0x44
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b091      	sub	sp, #68	@ 0x44
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ae:	2b21      	cmp	r3, #33	@ 0x21
 80052b0:	d165      	bne.n	800537e <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80052b8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80052ba:	e05c      	b.n	8005376 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d133      	bne.n	8005330 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3308      	adds	r3, #8
 80052ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	e853 3f00 	ldrex	r3, [r3]
 80052d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80052de:	637b      	str	r3, [r7, #52]	@ 0x34
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3308      	adds	r3, #8
 80052e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052f0:	e841 2300 	strex	r3, r2, [r1]
 80052f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1e5      	bne.n	80052c8 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	e853 3f00 	ldrex	r3, [r3]
 8005308:	60bb      	str	r3, [r7, #8]
   return(result);
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005310:	633b      	str	r3, [r7, #48]	@ 0x30
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	461a      	mov	r2, r3
 8005318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531a:	61bb      	str	r3, [r7, #24]
 800531c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531e:	6979      	ldr	r1, [r7, #20]
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	e841 2300 	strex	r3, r2, [r1]
 8005326:	613b      	str	r3, [r7, #16]
   return(result);
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1e6      	bne.n	80052fc <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800532e:	e026      	b.n	800537e <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800533a:	2b00      	cmp	r3, #0
 800533c:	d018      	beq.n	8005370 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005342:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005346:	881a      	ldrh	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005350:	b292      	uxth	r2, r2
 8005352:	851a      	strh	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005358:	1c9a      	adds	r2, r3, #2
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005364:	b29b      	uxth	r3, r3
 8005366:	3b01      	subs	r3, #1
 8005368:	b29a      	uxth	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005370:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005372:	3b01      	subs	r3, #1
 8005374:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005376:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005378:	2b00      	cmp	r3, #0
 800537a:	d19f      	bne.n	80052bc <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800537c:	e7ff      	b.n	800537e <UART_TxISR_16BIT_FIFOEN+0xde>
 800537e:	bf00      	nop
 8005380:	3744      	adds	r7, #68	@ 0x44
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b088      	sub	sp, #32
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	e853 3f00 	ldrex	r3, [r3]
 800539e:	60bb      	str	r3, [r7, #8]
   return(result);
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053a6:	61fb      	str	r3, [r7, #28]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	461a      	mov	r2, r3
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	61bb      	str	r3, [r7, #24]
 80053b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	6979      	ldr	r1, [r7, #20]
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	e841 2300 	strex	r3, r2, [r1]
 80053bc:	613b      	str	r3, [r7, #16]
   return(result);
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e6      	bne.n	8005392 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7ff f800 	bl	80043d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053d8:	bf00      	nop
 80053da:	3720      	adds	r7, #32
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800542a:	2b01      	cmp	r3, #1
 800542c:	d101      	bne.n	8005432 <HAL_UARTEx_DisableFifoMode+0x16>
 800542e:	2302      	movs	r3, #2
 8005430:	e027      	b.n	8005482 <HAL_UARTEx_DisableFifoMode+0x66>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2224      	movs	r2, #36	@ 0x24
 800543e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 0201 	bic.w	r2, r2, #1
 8005458:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005460:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2220      	movs	r2, #32
 8005474:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d101      	bne.n	80054a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80054a2:	2302      	movs	r3, #2
 80054a4:	e02d      	b.n	8005502 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2224      	movs	r2, #36	@ 0x24
 80054b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0201 	bic.w	r2, r2, #1
 80054cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f850 	bl	8005588 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b084      	sub	sp, #16
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
 8005512:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800551a:	2b01      	cmp	r3, #1
 800551c:	d101      	bne.n	8005522 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800551e:	2302      	movs	r3, #2
 8005520:	e02d      	b.n	800557e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2224      	movs	r2, #36	@ 0x24
 800552e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f022 0201 	bic.w	r2, r2, #1
 8005548:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f812 	bl	8005588 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2220      	movs	r2, #32
 8005570:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
	...

08005588 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005594:	2b00      	cmp	r3, #0
 8005596:	d108      	bne.n	80055aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80055a8:	e031      	b.n	800560e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80055aa:	2308      	movs	r3, #8
 80055ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80055ae:	2308      	movs	r3, #8
 80055b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	0e5b      	lsrs	r3, r3, #25
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	f003 0307 	and.w	r3, r3, #7
 80055c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	0f5b      	lsrs	r3, r3, #29
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	f003 0307 	and.w	r3, r3, #7
 80055d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055d2:	7bbb      	ldrb	r3, [r7, #14]
 80055d4:	7b3a      	ldrb	r2, [r7, #12]
 80055d6:	4911      	ldr	r1, [pc, #68]	@ (800561c <UARTEx_SetNbDataToProcess+0x94>)
 80055d8:	5c8a      	ldrb	r2, [r1, r2]
 80055da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80055de:	7b3a      	ldrb	r2, [r7, #12]
 80055e0:	490f      	ldr	r1, [pc, #60]	@ (8005620 <UARTEx_SetNbDataToProcess+0x98>)
 80055e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
 80055f2:	7b7a      	ldrb	r2, [r7, #13]
 80055f4:	4909      	ldr	r1, [pc, #36]	@ (800561c <UARTEx_SetNbDataToProcess+0x94>)
 80055f6:	5c8a      	ldrb	r2, [r1, r2]
 80055f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80055fc:	7b7a      	ldrb	r2, [r7, #13]
 80055fe:	4908      	ldr	r1, [pc, #32]	@ (8005620 <UARTEx_SetNbDataToProcess+0x98>)
 8005600:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005602:	fb93 f3f2 	sdiv	r3, r3, r2
 8005606:	b29a      	uxth	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800560e:	bf00      	nop
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	080065e8 	.word	0x080065e8
 8005620:	080065f0 	.word	0x080065f0

08005624 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005624:	b084      	sub	sp, #16
 8005626:	b580      	push	{r7, lr}
 8005628:	b084      	sub	sp, #16
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	f107 001c 	add.w	r0, r7, #28
 8005632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fa68 	bl	8005b18 <USB_CoreReset>
 8005648:	4603      	mov	r3, r0
 800564a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800564c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005650:	2b00      	cmp	r3, #0
 8005652:	d106      	bne.n	8005662 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005658:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005660:	e005      	b.n	800566e <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005666:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 800566e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800567a:	b004      	add	sp, #16
 800567c:	4770      	bx	lr

0800567e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f023 0201 	bic.w	r2, r3, #1
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	460b      	mov	r3, r1
 80056aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80056ac:	2300      	movs	r3, #0
 80056ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056bc:	78fb      	ldrb	r3, [r7, #3]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d115      	bne.n	80056ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80056ce:	200a      	movs	r0, #10
 80056d0:	f7fb fd1e 	bl	8001110 <HAL_Delay>
      ms += 10U;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	330a      	adds	r3, #10
 80056d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 fa0e 	bl	8005afc <USB_GetMode>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d01e      	beq.n	8005724 <USB_SetCurrentMode+0x84>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2bc7      	cmp	r3, #199	@ 0xc7
 80056ea:	d9f0      	bls.n	80056ce <USB_SetCurrentMode+0x2e>
 80056ec:	e01a      	b.n	8005724 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80056ee:	78fb      	ldrb	r3, [r7, #3]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d115      	bne.n	8005720 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005700:	200a      	movs	r0, #10
 8005702:	f7fb fd05 	bl	8001110 <HAL_Delay>
      ms += 10U;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	330a      	adds	r3, #10
 800570a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f9f5 	bl	8005afc <USB_GetMode>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d005      	beq.n	8005724 <USB_SetCurrentMode+0x84>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2bc7      	cmp	r3, #199	@ 0xc7
 800571c:	d9f0      	bls.n	8005700 <USB_SetCurrentMode+0x60>
 800571e:	e001      	b.n	8005724 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e005      	b.n	8005730 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2bc8      	cmp	r3, #200	@ 0xc8
 8005728:	d101      	bne.n	800572e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e000      	b.n	8005730 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005738:	b084      	sub	sp, #16
 800573a:	b580      	push	{r7, lr}
 800573c:	b086      	sub	sp, #24
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005746:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005752:	2300      	movs	r3, #0
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	e009      	b.n	800576c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	3340      	adds	r3, #64	@ 0x40
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	2200      	movs	r2, #0
 8005764:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	3301      	adds	r3, #1
 800576a:	613b      	str	r3, [r7, #16]
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	2b0e      	cmp	r3, #14
 8005770:	d9f2      	bls.n	8005758 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005772:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005776:	2b00      	cmp	r3, #0
 8005778:	d11c      	bne.n	80057b4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005788:	f043 0302 	orr.w	r3, r3, #2
 800578c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005792:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	e005      	b.n	80057c0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80057c6:	461a      	mov	r2, r3
 80057c8:	2300      	movs	r3, #0
 80057ca:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80057cc:	2103      	movs	r1, #3
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f95a 	bl	8005a88 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057d4:	2110      	movs	r1, #16
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f8f6 	bl	80059c8 <USB_FlushTxFifo>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f920 	bl	8005a2c <USB_FlushRxFifo>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057fc:	461a      	mov	r2, r3
 80057fe:	2300      	movs	r3, #0
 8005800:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005808:	461a      	mov	r2, r3
 800580a:	2300      	movs	r3, #0
 800580c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005814:	461a      	mov	r2, r3
 8005816:	2300      	movs	r3, #0
 8005818:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800581a:	2300      	movs	r3, #0
 800581c:	613b      	str	r3, [r7, #16]
 800581e:	e043      	b.n	80058a8 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005832:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005836:	d118      	bne.n	800586a <USB_DevInit+0x132>
    {
      if (i == 0U)
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10a      	bne.n	8005854 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	015a      	lsls	r2, r3, #5
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	4413      	add	r3, r2
 8005846:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800584a:	461a      	mov	r2, r3
 800584c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	e013      	b.n	800587c <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4413      	add	r3, r2
 800585c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005860:	461a      	mov	r2, r3
 8005862:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005866:	6013      	str	r3, [r2, #0]
 8005868:	e008      	b.n	800587c <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	015a      	lsls	r2, r3, #5
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	4413      	add	r3, r2
 8005872:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005876:	461a      	mov	r2, r3
 8005878:	2300      	movs	r3, #0
 800587a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4413      	add	r3, r2
 8005884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005888:	461a      	mov	r2, r3
 800588a:	2300      	movs	r3, #0
 800588c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4413      	add	r3, r2
 8005896:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800589a:	461a      	mov	r2, r3
 800589c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80058a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	3301      	adds	r3, #1
 80058a6:	613b      	str	r3, [r7, #16]
 80058a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80058ac:	461a      	mov	r2, r3
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d3b5      	bcc.n	8005820 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058b4:	2300      	movs	r3, #0
 80058b6:	613b      	str	r3, [r7, #16]
 80058b8:	e043      	b.n	8005942 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058d0:	d118      	bne.n	8005904 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10a      	bne.n	80058ee <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058e4:	461a      	mov	r2, r3
 80058e6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80058ea:	6013      	str	r3, [r2, #0]
 80058ec:	e013      	b.n	8005916 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	015a      	lsls	r2, r3, #5
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058fa:	461a      	mov	r2, r3
 80058fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	e008      	b.n	8005916 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	015a      	lsls	r2, r3, #5
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4413      	add	r3, r2
 800590c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005910:	461a      	mov	r2, r3
 8005912:	2300      	movs	r3, #0
 8005914:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005922:	461a      	mov	r2, r3
 8005924:	2300      	movs	r3, #0
 8005926:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005934:	461a      	mov	r2, r3
 8005936:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800593a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	3301      	adds	r3, #1
 8005940:	613b      	str	r3, [r7, #16]
 8005942:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005946:	461a      	mov	r2, r3
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	4293      	cmp	r3, r2
 800594c:	d3b5      	bcc.n	80058ba <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800595c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005960:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800596e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	f043 0210 	orr.w	r2, r3, #16
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	699a      	ldr	r2, [r3, #24]
 8005980:	4b10      	ldr	r3, [pc, #64]	@ (80059c4 <USB_DevInit+0x28c>)
 8005982:	4313      	orrs	r3, r2
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005988:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800598c:	2b00      	cmp	r3, #0
 800598e:	d005      	beq.n	800599c <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	f043 0208 	orr.w	r2, r3, #8
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800599c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d107      	bne.n	80059b4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80059ac:	f043 0304 	orr.w	r3, r3, #4
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80059b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059c0:	b004      	add	sp, #16
 80059c2:	4770      	bx	lr
 80059c4:	803c3800 	.word	0x803c3800

080059c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059d2:	2300      	movs	r3, #0
 80059d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	3301      	adds	r3, #1
 80059da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059e2:	d901      	bls.n	80059e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e01b      	b.n	8005a20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	daf2      	bge.n	80059d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	019b      	lsls	r3, r3, #6
 80059f8:	f043 0220 	orr.w	r2, r3, #32
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	3301      	adds	r3, #1
 8005a04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a0c:	d901      	bls.n	8005a12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e006      	b.n	8005a20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f003 0320 	and.w	r3, r3, #32
 8005a1a:	2b20      	cmp	r3, #32
 8005a1c:	d0f0      	beq.n	8005a00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a44:	d901      	bls.n	8005a4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e018      	b.n	8005a7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	daf2      	bge.n	8005a38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a52:	2300      	movs	r3, #0
 8005a54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2210      	movs	r2, #16
 8005a5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a68:	d901      	bls.n	8005a6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e006      	b.n	8005a7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	f003 0310 	and.w	r3, r3, #16
 8005a76:	2b10      	cmp	r3, #16
 8005a78:	d0f0      	beq.n	8005a5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	460b      	mov	r3, r1
 8005a92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	78fb      	ldrb	r3, [r7, #3]
 8005aa2:	68f9      	ldr	r1, [r7, #12]
 8005aa4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b085      	sub	sp, #20
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005ad4:	f023 0303 	bic.w	r3, r3, #3
 8005ad8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ae8:	f043 0302 	orr.w	r3, r3, #2
 8005aec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	f003 0301 	and.w	r3, r3, #1
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b20:	2300      	movs	r3, #0
 8005b22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	3301      	adds	r3, #1
 8005b28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b30:	d901      	bls.n	8005b36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e01b      	b.n	8005b6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	daf2      	bge.n	8005b24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f043 0201 	orr.w	r2, r3, #1
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	3301      	adds	r3, #1
 8005b52:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b5a:	d901      	bls.n	8005b60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e006      	b.n	8005b6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d0f0      	beq.n	8005b4e <USB_CoreReset+0x36>

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
	...

08005b7c <siprintf>:
 8005b7c:	b40e      	push	{r1, r2, r3}
 8005b7e:	b500      	push	{lr}
 8005b80:	b09c      	sub	sp, #112	@ 0x70
 8005b82:	ab1d      	add	r3, sp, #116	@ 0x74
 8005b84:	9002      	str	r0, [sp, #8]
 8005b86:	9006      	str	r0, [sp, #24]
 8005b88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005b8c:	4809      	ldr	r0, [pc, #36]	@ (8005bb4 <siprintf+0x38>)
 8005b8e:	9107      	str	r1, [sp, #28]
 8005b90:	9104      	str	r1, [sp, #16]
 8005b92:	4909      	ldr	r1, [pc, #36]	@ (8005bb8 <siprintf+0x3c>)
 8005b94:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b98:	9105      	str	r1, [sp, #20]
 8005b9a:	6800      	ldr	r0, [r0, #0]
 8005b9c:	9301      	str	r3, [sp, #4]
 8005b9e:	a902      	add	r1, sp, #8
 8005ba0:	f000 f994 	bl	8005ecc <_svfiprintf_r>
 8005ba4:	9b02      	ldr	r3, [sp, #8]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	701a      	strb	r2, [r3, #0]
 8005baa:	b01c      	add	sp, #112	@ 0x70
 8005bac:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bb0:	b003      	add	sp, #12
 8005bb2:	4770      	bx	lr
 8005bb4:	2004000c 	.word	0x2004000c
 8005bb8:	ffff0208 	.word	0xffff0208

08005bbc <memset>:
 8005bbc:	4402      	add	r2, r0
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d100      	bne.n	8005bc6 <memset+0xa>
 8005bc4:	4770      	bx	lr
 8005bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8005bca:	e7f9      	b.n	8005bc0 <memset+0x4>

08005bcc <__errno>:
 8005bcc:	4b01      	ldr	r3, [pc, #4]	@ (8005bd4 <__errno+0x8>)
 8005bce:	6818      	ldr	r0, [r3, #0]
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	2004000c 	.word	0x2004000c

08005bd8 <__libc_init_array>:
 8005bd8:	b570      	push	{r4, r5, r6, lr}
 8005bda:	4d0d      	ldr	r5, [pc, #52]	@ (8005c10 <__libc_init_array+0x38>)
 8005bdc:	4c0d      	ldr	r4, [pc, #52]	@ (8005c14 <__libc_init_array+0x3c>)
 8005bde:	1b64      	subs	r4, r4, r5
 8005be0:	10a4      	asrs	r4, r4, #2
 8005be2:	2600      	movs	r6, #0
 8005be4:	42a6      	cmp	r6, r4
 8005be6:	d109      	bne.n	8005bfc <__libc_init_array+0x24>
 8005be8:	4d0b      	ldr	r5, [pc, #44]	@ (8005c18 <__libc_init_array+0x40>)
 8005bea:	4c0c      	ldr	r4, [pc, #48]	@ (8005c1c <__libc_init_array+0x44>)
 8005bec:	f000 fc66 	bl	80064bc <_init>
 8005bf0:	1b64      	subs	r4, r4, r5
 8005bf2:	10a4      	asrs	r4, r4, #2
 8005bf4:	2600      	movs	r6, #0
 8005bf6:	42a6      	cmp	r6, r4
 8005bf8:	d105      	bne.n	8005c06 <__libc_init_array+0x2e>
 8005bfa:	bd70      	pop	{r4, r5, r6, pc}
 8005bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c00:	4798      	blx	r3
 8005c02:	3601      	adds	r6, #1
 8005c04:	e7ee      	b.n	8005be4 <__libc_init_array+0xc>
 8005c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c0a:	4798      	blx	r3
 8005c0c:	3601      	adds	r6, #1
 8005c0e:	e7f2      	b.n	8005bf6 <__libc_init_array+0x1e>
 8005c10:	08006634 	.word	0x08006634
 8005c14:	08006634 	.word	0x08006634
 8005c18:	08006634 	.word	0x08006634
 8005c1c:	08006638 	.word	0x08006638

08005c20 <__retarget_lock_acquire_recursive>:
 8005c20:	4770      	bx	lr

08005c22 <__retarget_lock_release_recursive>:
 8005c22:	4770      	bx	lr

08005c24 <_free_r>:
 8005c24:	b538      	push	{r3, r4, r5, lr}
 8005c26:	4605      	mov	r5, r0
 8005c28:	2900      	cmp	r1, #0
 8005c2a:	d041      	beq.n	8005cb0 <_free_r+0x8c>
 8005c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c30:	1f0c      	subs	r4, r1, #4
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	bfb8      	it	lt
 8005c36:	18e4      	addlt	r4, r4, r3
 8005c38:	f000 f8e0 	bl	8005dfc <__malloc_lock>
 8005c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8005cb4 <_free_r+0x90>)
 8005c3e:	6813      	ldr	r3, [r2, #0]
 8005c40:	b933      	cbnz	r3, 8005c50 <_free_r+0x2c>
 8005c42:	6063      	str	r3, [r4, #4]
 8005c44:	6014      	str	r4, [r2, #0]
 8005c46:	4628      	mov	r0, r5
 8005c48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c4c:	f000 b8dc 	b.w	8005e08 <__malloc_unlock>
 8005c50:	42a3      	cmp	r3, r4
 8005c52:	d908      	bls.n	8005c66 <_free_r+0x42>
 8005c54:	6820      	ldr	r0, [r4, #0]
 8005c56:	1821      	adds	r1, r4, r0
 8005c58:	428b      	cmp	r3, r1
 8005c5a:	bf01      	itttt	eq
 8005c5c:	6819      	ldreq	r1, [r3, #0]
 8005c5e:	685b      	ldreq	r3, [r3, #4]
 8005c60:	1809      	addeq	r1, r1, r0
 8005c62:	6021      	streq	r1, [r4, #0]
 8005c64:	e7ed      	b.n	8005c42 <_free_r+0x1e>
 8005c66:	461a      	mov	r2, r3
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	b10b      	cbz	r3, 8005c70 <_free_r+0x4c>
 8005c6c:	42a3      	cmp	r3, r4
 8005c6e:	d9fa      	bls.n	8005c66 <_free_r+0x42>
 8005c70:	6811      	ldr	r1, [r2, #0]
 8005c72:	1850      	adds	r0, r2, r1
 8005c74:	42a0      	cmp	r0, r4
 8005c76:	d10b      	bne.n	8005c90 <_free_r+0x6c>
 8005c78:	6820      	ldr	r0, [r4, #0]
 8005c7a:	4401      	add	r1, r0
 8005c7c:	1850      	adds	r0, r2, r1
 8005c7e:	4283      	cmp	r3, r0
 8005c80:	6011      	str	r1, [r2, #0]
 8005c82:	d1e0      	bne.n	8005c46 <_free_r+0x22>
 8005c84:	6818      	ldr	r0, [r3, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	6053      	str	r3, [r2, #4]
 8005c8a:	4408      	add	r0, r1
 8005c8c:	6010      	str	r0, [r2, #0]
 8005c8e:	e7da      	b.n	8005c46 <_free_r+0x22>
 8005c90:	d902      	bls.n	8005c98 <_free_r+0x74>
 8005c92:	230c      	movs	r3, #12
 8005c94:	602b      	str	r3, [r5, #0]
 8005c96:	e7d6      	b.n	8005c46 <_free_r+0x22>
 8005c98:	6820      	ldr	r0, [r4, #0]
 8005c9a:	1821      	adds	r1, r4, r0
 8005c9c:	428b      	cmp	r3, r1
 8005c9e:	bf04      	itt	eq
 8005ca0:	6819      	ldreq	r1, [r3, #0]
 8005ca2:	685b      	ldreq	r3, [r3, #4]
 8005ca4:	6063      	str	r3, [r4, #4]
 8005ca6:	bf04      	itt	eq
 8005ca8:	1809      	addeq	r1, r1, r0
 8005caa:	6021      	streq	r1, [r4, #0]
 8005cac:	6054      	str	r4, [r2, #4]
 8005cae:	e7ca      	b.n	8005c46 <_free_r+0x22>
 8005cb0:	bd38      	pop	{r3, r4, r5, pc}
 8005cb2:	bf00      	nop
 8005cb4:	2004097c 	.word	0x2004097c

08005cb8 <sbrk_aligned>:
 8005cb8:	b570      	push	{r4, r5, r6, lr}
 8005cba:	4e0f      	ldr	r6, [pc, #60]	@ (8005cf8 <sbrk_aligned+0x40>)
 8005cbc:	460c      	mov	r4, r1
 8005cbe:	6831      	ldr	r1, [r6, #0]
 8005cc0:	4605      	mov	r5, r0
 8005cc2:	b911      	cbnz	r1, 8005cca <sbrk_aligned+0x12>
 8005cc4:	f000 fba6 	bl	8006414 <_sbrk_r>
 8005cc8:	6030      	str	r0, [r6, #0]
 8005cca:	4621      	mov	r1, r4
 8005ccc:	4628      	mov	r0, r5
 8005cce:	f000 fba1 	bl	8006414 <_sbrk_r>
 8005cd2:	1c43      	adds	r3, r0, #1
 8005cd4:	d103      	bne.n	8005cde <sbrk_aligned+0x26>
 8005cd6:	f04f 34ff 	mov.w	r4, #4294967295
 8005cda:	4620      	mov	r0, r4
 8005cdc:	bd70      	pop	{r4, r5, r6, pc}
 8005cde:	1cc4      	adds	r4, r0, #3
 8005ce0:	f024 0403 	bic.w	r4, r4, #3
 8005ce4:	42a0      	cmp	r0, r4
 8005ce6:	d0f8      	beq.n	8005cda <sbrk_aligned+0x22>
 8005ce8:	1a21      	subs	r1, r4, r0
 8005cea:	4628      	mov	r0, r5
 8005cec:	f000 fb92 	bl	8006414 <_sbrk_r>
 8005cf0:	3001      	adds	r0, #1
 8005cf2:	d1f2      	bne.n	8005cda <sbrk_aligned+0x22>
 8005cf4:	e7ef      	b.n	8005cd6 <sbrk_aligned+0x1e>
 8005cf6:	bf00      	nop
 8005cf8:	20040978 	.word	0x20040978

08005cfc <_malloc_r>:
 8005cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d00:	1ccd      	adds	r5, r1, #3
 8005d02:	f025 0503 	bic.w	r5, r5, #3
 8005d06:	3508      	adds	r5, #8
 8005d08:	2d0c      	cmp	r5, #12
 8005d0a:	bf38      	it	cc
 8005d0c:	250c      	movcc	r5, #12
 8005d0e:	2d00      	cmp	r5, #0
 8005d10:	4606      	mov	r6, r0
 8005d12:	db01      	blt.n	8005d18 <_malloc_r+0x1c>
 8005d14:	42a9      	cmp	r1, r5
 8005d16:	d904      	bls.n	8005d22 <_malloc_r+0x26>
 8005d18:	230c      	movs	r3, #12
 8005d1a:	6033      	str	r3, [r6, #0]
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005df8 <_malloc_r+0xfc>
 8005d26:	f000 f869 	bl	8005dfc <__malloc_lock>
 8005d2a:	f8d8 3000 	ldr.w	r3, [r8]
 8005d2e:	461c      	mov	r4, r3
 8005d30:	bb44      	cbnz	r4, 8005d84 <_malloc_r+0x88>
 8005d32:	4629      	mov	r1, r5
 8005d34:	4630      	mov	r0, r6
 8005d36:	f7ff ffbf 	bl	8005cb8 <sbrk_aligned>
 8005d3a:	1c43      	adds	r3, r0, #1
 8005d3c:	4604      	mov	r4, r0
 8005d3e:	d158      	bne.n	8005df2 <_malloc_r+0xf6>
 8005d40:	f8d8 4000 	ldr.w	r4, [r8]
 8005d44:	4627      	mov	r7, r4
 8005d46:	2f00      	cmp	r7, #0
 8005d48:	d143      	bne.n	8005dd2 <_malloc_r+0xd6>
 8005d4a:	2c00      	cmp	r4, #0
 8005d4c:	d04b      	beq.n	8005de6 <_malloc_r+0xea>
 8005d4e:	6823      	ldr	r3, [r4, #0]
 8005d50:	4639      	mov	r1, r7
 8005d52:	4630      	mov	r0, r6
 8005d54:	eb04 0903 	add.w	r9, r4, r3
 8005d58:	f000 fb5c 	bl	8006414 <_sbrk_r>
 8005d5c:	4581      	cmp	r9, r0
 8005d5e:	d142      	bne.n	8005de6 <_malloc_r+0xea>
 8005d60:	6821      	ldr	r1, [r4, #0]
 8005d62:	1a6d      	subs	r5, r5, r1
 8005d64:	4629      	mov	r1, r5
 8005d66:	4630      	mov	r0, r6
 8005d68:	f7ff ffa6 	bl	8005cb8 <sbrk_aligned>
 8005d6c:	3001      	adds	r0, #1
 8005d6e:	d03a      	beq.n	8005de6 <_malloc_r+0xea>
 8005d70:	6823      	ldr	r3, [r4, #0]
 8005d72:	442b      	add	r3, r5
 8005d74:	6023      	str	r3, [r4, #0]
 8005d76:	f8d8 3000 	ldr.w	r3, [r8]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	bb62      	cbnz	r2, 8005dd8 <_malloc_r+0xdc>
 8005d7e:	f8c8 7000 	str.w	r7, [r8]
 8005d82:	e00f      	b.n	8005da4 <_malloc_r+0xa8>
 8005d84:	6822      	ldr	r2, [r4, #0]
 8005d86:	1b52      	subs	r2, r2, r5
 8005d88:	d420      	bmi.n	8005dcc <_malloc_r+0xd0>
 8005d8a:	2a0b      	cmp	r2, #11
 8005d8c:	d917      	bls.n	8005dbe <_malloc_r+0xc2>
 8005d8e:	1961      	adds	r1, r4, r5
 8005d90:	42a3      	cmp	r3, r4
 8005d92:	6025      	str	r5, [r4, #0]
 8005d94:	bf18      	it	ne
 8005d96:	6059      	strne	r1, [r3, #4]
 8005d98:	6863      	ldr	r3, [r4, #4]
 8005d9a:	bf08      	it	eq
 8005d9c:	f8c8 1000 	streq.w	r1, [r8]
 8005da0:	5162      	str	r2, [r4, r5]
 8005da2:	604b      	str	r3, [r1, #4]
 8005da4:	4630      	mov	r0, r6
 8005da6:	f000 f82f 	bl	8005e08 <__malloc_unlock>
 8005daa:	f104 000b 	add.w	r0, r4, #11
 8005dae:	1d23      	adds	r3, r4, #4
 8005db0:	f020 0007 	bic.w	r0, r0, #7
 8005db4:	1ac2      	subs	r2, r0, r3
 8005db6:	bf1c      	itt	ne
 8005db8:	1a1b      	subne	r3, r3, r0
 8005dba:	50a3      	strne	r3, [r4, r2]
 8005dbc:	e7af      	b.n	8005d1e <_malloc_r+0x22>
 8005dbe:	6862      	ldr	r2, [r4, #4]
 8005dc0:	42a3      	cmp	r3, r4
 8005dc2:	bf0c      	ite	eq
 8005dc4:	f8c8 2000 	streq.w	r2, [r8]
 8005dc8:	605a      	strne	r2, [r3, #4]
 8005dca:	e7eb      	b.n	8005da4 <_malloc_r+0xa8>
 8005dcc:	4623      	mov	r3, r4
 8005dce:	6864      	ldr	r4, [r4, #4]
 8005dd0:	e7ae      	b.n	8005d30 <_malloc_r+0x34>
 8005dd2:	463c      	mov	r4, r7
 8005dd4:	687f      	ldr	r7, [r7, #4]
 8005dd6:	e7b6      	b.n	8005d46 <_malloc_r+0x4a>
 8005dd8:	461a      	mov	r2, r3
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	42a3      	cmp	r3, r4
 8005dde:	d1fb      	bne.n	8005dd8 <_malloc_r+0xdc>
 8005de0:	2300      	movs	r3, #0
 8005de2:	6053      	str	r3, [r2, #4]
 8005de4:	e7de      	b.n	8005da4 <_malloc_r+0xa8>
 8005de6:	230c      	movs	r3, #12
 8005de8:	6033      	str	r3, [r6, #0]
 8005dea:	4630      	mov	r0, r6
 8005dec:	f000 f80c 	bl	8005e08 <__malloc_unlock>
 8005df0:	e794      	b.n	8005d1c <_malloc_r+0x20>
 8005df2:	6005      	str	r5, [r0, #0]
 8005df4:	e7d6      	b.n	8005da4 <_malloc_r+0xa8>
 8005df6:	bf00      	nop
 8005df8:	2004097c 	.word	0x2004097c

08005dfc <__malloc_lock>:
 8005dfc:	4801      	ldr	r0, [pc, #4]	@ (8005e04 <__malloc_lock+0x8>)
 8005dfe:	f7ff bf0f 	b.w	8005c20 <__retarget_lock_acquire_recursive>
 8005e02:	bf00      	nop
 8005e04:	20040974 	.word	0x20040974

08005e08 <__malloc_unlock>:
 8005e08:	4801      	ldr	r0, [pc, #4]	@ (8005e10 <__malloc_unlock+0x8>)
 8005e0a:	f7ff bf0a 	b.w	8005c22 <__retarget_lock_release_recursive>
 8005e0e:	bf00      	nop
 8005e10:	20040974 	.word	0x20040974

08005e14 <__ssputs_r>:
 8005e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e18:	688e      	ldr	r6, [r1, #8]
 8005e1a:	461f      	mov	r7, r3
 8005e1c:	42be      	cmp	r6, r7
 8005e1e:	680b      	ldr	r3, [r1, #0]
 8005e20:	4682      	mov	sl, r0
 8005e22:	460c      	mov	r4, r1
 8005e24:	4690      	mov	r8, r2
 8005e26:	d82d      	bhi.n	8005e84 <__ssputs_r+0x70>
 8005e28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005e30:	d026      	beq.n	8005e80 <__ssputs_r+0x6c>
 8005e32:	6965      	ldr	r5, [r4, #20]
 8005e34:	6909      	ldr	r1, [r1, #16]
 8005e36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e3a:	eba3 0901 	sub.w	r9, r3, r1
 8005e3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e42:	1c7b      	adds	r3, r7, #1
 8005e44:	444b      	add	r3, r9
 8005e46:	106d      	asrs	r5, r5, #1
 8005e48:	429d      	cmp	r5, r3
 8005e4a:	bf38      	it	cc
 8005e4c:	461d      	movcc	r5, r3
 8005e4e:	0553      	lsls	r3, r2, #21
 8005e50:	d527      	bpl.n	8005ea2 <__ssputs_r+0x8e>
 8005e52:	4629      	mov	r1, r5
 8005e54:	f7ff ff52 	bl	8005cfc <_malloc_r>
 8005e58:	4606      	mov	r6, r0
 8005e5a:	b360      	cbz	r0, 8005eb6 <__ssputs_r+0xa2>
 8005e5c:	6921      	ldr	r1, [r4, #16]
 8005e5e:	464a      	mov	r2, r9
 8005e60:	f000 fae8 	bl	8006434 <memcpy>
 8005e64:	89a3      	ldrh	r3, [r4, #12]
 8005e66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e6e:	81a3      	strh	r3, [r4, #12]
 8005e70:	6126      	str	r6, [r4, #16]
 8005e72:	6165      	str	r5, [r4, #20]
 8005e74:	444e      	add	r6, r9
 8005e76:	eba5 0509 	sub.w	r5, r5, r9
 8005e7a:	6026      	str	r6, [r4, #0]
 8005e7c:	60a5      	str	r5, [r4, #8]
 8005e7e:	463e      	mov	r6, r7
 8005e80:	42be      	cmp	r6, r7
 8005e82:	d900      	bls.n	8005e86 <__ssputs_r+0x72>
 8005e84:	463e      	mov	r6, r7
 8005e86:	6820      	ldr	r0, [r4, #0]
 8005e88:	4632      	mov	r2, r6
 8005e8a:	4641      	mov	r1, r8
 8005e8c:	f000 faa8 	bl	80063e0 <memmove>
 8005e90:	68a3      	ldr	r3, [r4, #8]
 8005e92:	1b9b      	subs	r3, r3, r6
 8005e94:	60a3      	str	r3, [r4, #8]
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	4433      	add	r3, r6
 8005e9a:	6023      	str	r3, [r4, #0]
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ea2:	462a      	mov	r2, r5
 8005ea4:	f000 fad4 	bl	8006450 <_realloc_r>
 8005ea8:	4606      	mov	r6, r0
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	d1e0      	bne.n	8005e70 <__ssputs_r+0x5c>
 8005eae:	6921      	ldr	r1, [r4, #16]
 8005eb0:	4650      	mov	r0, sl
 8005eb2:	f7ff feb7 	bl	8005c24 <_free_r>
 8005eb6:	230c      	movs	r3, #12
 8005eb8:	f8ca 3000 	str.w	r3, [sl]
 8005ebc:	89a3      	ldrh	r3, [r4, #12]
 8005ebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ec2:	81a3      	strh	r3, [r4, #12]
 8005ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec8:	e7e9      	b.n	8005e9e <__ssputs_r+0x8a>
	...

08005ecc <_svfiprintf_r>:
 8005ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed0:	4698      	mov	r8, r3
 8005ed2:	898b      	ldrh	r3, [r1, #12]
 8005ed4:	061b      	lsls	r3, r3, #24
 8005ed6:	b09d      	sub	sp, #116	@ 0x74
 8005ed8:	4607      	mov	r7, r0
 8005eda:	460d      	mov	r5, r1
 8005edc:	4614      	mov	r4, r2
 8005ede:	d510      	bpl.n	8005f02 <_svfiprintf_r+0x36>
 8005ee0:	690b      	ldr	r3, [r1, #16]
 8005ee2:	b973      	cbnz	r3, 8005f02 <_svfiprintf_r+0x36>
 8005ee4:	2140      	movs	r1, #64	@ 0x40
 8005ee6:	f7ff ff09 	bl	8005cfc <_malloc_r>
 8005eea:	6028      	str	r0, [r5, #0]
 8005eec:	6128      	str	r0, [r5, #16]
 8005eee:	b930      	cbnz	r0, 8005efe <_svfiprintf_r+0x32>
 8005ef0:	230c      	movs	r3, #12
 8005ef2:	603b      	str	r3, [r7, #0]
 8005ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef8:	b01d      	add	sp, #116	@ 0x74
 8005efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005efe:	2340      	movs	r3, #64	@ 0x40
 8005f00:	616b      	str	r3, [r5, #20]
 8005f02:	2300      	movs	r3, #0
 8005f04:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f06:	2320      	movs	r3, #32
 8005f08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f10:	2330      	movs	r3, #48	@ 0x30
 8005f12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80060b0 <_svfiprintf_r+0x1e4>
 8005f16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f1a:	f04f 0901 	mov.w	r9, #1
 8005f1e:	4623      	mov	r3, r4
 8005f20:	469a      	mov	sl, r3
 8005f22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f26:	b10a      	cbz	r2, 8005f2c <_svfiprintf_r+0x60>
 8005f28:	2a25      	cmp	r2, #37	@ 0x25
 8005f2a:	d1f9      	bne.n	8005f20 <_svfiprintf_r+0x54>
 8005f2c:	ebba 0b04 	subs.w	fp, sl, r4
 8005f30:	d00b      	beq.n	8005f4a <_svfiprintf_r+0x7e>
 8005f32:	465b      	mov	r3, fp
 8005f34:	4622      	mov	r2, r4
 8005f36:	4629      	mov	r1, r5
 8005f38:	4638      	mov	r0, r7
 8005f3a:	f7ff ff6b 	bl	8005e14 <__ssputs_r>
 8005f3e:	3001      	adds	r0, #1
 8005f40:	f000 80a7 	beq.w	8006092 <_svfiprintf_r+0x1c6>
 8005f44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f46:	445a      	add	r2, fp
 8005f48:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f4a:	f89a 3000 	ldrb.w	r3, [sl]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 809f 	beq.w	8006092 <_svfiprintf_r+0x1c6>
 8005f54:	2300      	movs	r3, #0
 8005f56:	f04f 32ff 	mov.w	r2, #4294967295
 8005f5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f5e:	f10a 0a01 	add.w	sl, sl, #1
 8005f62:	9304      	str	r3, [sp, #16]
 8005f64:	9307      	str	r3, [sp, #28]
 8005f66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f6a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f6c:	4654      	mov	r4, sl
 8005f6e:	2205      	movs	r2, #5
 8005f70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f74:	484e      	ldr	r0, [pc, #312]	@ (80060b0 <_svfiprintf_r+0x1e4>)
 8005f76:	f7fa f94b 	bl	8000210 <memchr>
 8005f7a:	9a04      	ldr	r2, [sp, #16]
 8005f7c:	b9d8      	cbnz	r0, 8005fb6 <_svfiprintf_r+0xea>
 8005f7e:	06d0      	lsls	r0, r2, #27
 8005f80:	bf44      	itt	mi
 8005f82:	2320      	movmi	r3, #32
 8005f84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f88:	0711      	lsls	r1, r2, #28
 8005f8a:	bf44      	itt	mi
 8005f8c:	232b      	movmi	r3, #43	@ 0x2b
 8005f8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f92:	f89a 3000 	ldrb.w	r3, [sl]
 8005f96:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f98:	d015      	beq.n	8005fc6 <_svfiprintf_r+0xfa>
 8005f9a:	9a07      	ldr	r2, [sp, #28]
 8005f9c:	4654      	mov	r4, sl
 8005f9e:	2000      	movs	r0, #0
 8005fa0:	f04f 0c0a 	mov.w	ip, #10
 8005fa4:	4621      	mov	r1, r4
 8005fa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005faa:	3b30      	subs	r3, #48	@ 0x30
 8005fac:	2b09      	cmp	r3, #9
 8005fae:	d94b      	bls.n	8006048 <_svfiprintf_r+0x17c>
 8005fb0:	b1b0      	cbz	r0, 8005fe0 <_svfiprintf_r+0x114>
 8005fb2:	9207      	str	r2, [sp, #28]
 8005fb4:	e014      	b.n	8005fe0 <_svfiprintf_r+0x114>
 8005fb6:	eba0 0308 	sub.w	r3, r0, r8
 8005fba:	fa09 f303 	lsl.w	r3, r9, r3
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	9304      	str	r3, [sp, #16]
 8005fc2:	46a2      	mov	sl, r4
 8005fc4:	e7d2      	b.n	8005f6c <_svfiprintf_r+0xa0>
 8005fc6:	9b03      	ldr	r3, [sp, #12]
 8005fc8:	1d19      	adds	r1, r3, #4
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	9103      	str	r1, [sp, #12]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	bfbb      	ittet	lt
 8005fd2:	425b      	neglt	r3, r3
 8005fd4:	f042 0202 	orrlt.w	r2, r2, #2
 8005fd8:	9307      	strge	r3, [sp, #28]
 8005fda:	9307      	strlt	r3, [sp, #28]
 8005fdc:	bfb8      	it	lt
 8005fde:	9204      	strlt	r2, [sp, #16]
 8005fe0:	7823      	ldrb	r3, [r4, #0]
 8005fe2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005fe4:	d10a      	bne.n	8005ffc <_svfiprintf_r+0x130>
 8005fe6:	7863      	ldrb	r3, [r4, #1]
 8005fe8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fea:	d132      	bne.n	8006052 <_svfiprintf_r+0x186>
 8005fec:	9b03      	ldr	r3, [sp, #12]
 8005fee:	1d1a      	adds	r2, r3, #4
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	9203      	str	r2, [sp, #12]
 8005ff4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ff8:	3402      	adds	r4, #2
 8005ffa:	9305      	str	r3, [sp, #20]
 8005ffc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80060c0 <_svfiprintf_r+0x1f4>
 8006000:	7821      	ldrb	r1, [r4, #0]
 8006002:	2203      	movs	r2, #3
 8006004:	4650      	mov	r0, sl
 8006006:	f7fa f903 	bl	8000210 <memchr>
 800600a:	b138      	cbz	r0, 800601c <_svfiprintf_r+0x150>
 800600c:	9b04      	ldr	r3, [sp, #16]
 800600e:	eba0 000a 	sub.w	r0, r0, sl
 8006012:	2240      	movs	r2, #64	@ 0x40
 8006014:	4082      	lsls	r2, r0
 8006016:	4313      	orrs	r3, r2
 8006018:	3401      	adds	r4, #1
 800601a:	9304      	str	r3, [sp, #16]
 800601c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006020:	4824      	ldr	r0, [pc, #144]	@ (80060b4 <_svfiprintf_r+0x1e8>)
 8006022:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006026:	2206      	movs	r2, #6
 8006028:	f7fa f8f2 	bl	8000210 <memchr>
 800602c:	2800      	cmp	r0, #0
 800602e:	d036      	beq.n	800609e <_svfiprintf_r+0x1d2>
 8006030:	4b21      	ldr	r3, [pc, #132]	@ (80060b8 <_svfiprintf_r+0x1ec>)
 8006032:	bb1b      	cbnz	r3, 800607c <_svfiprintf_r+0x1b0>
 8006034:	9b03      	ldr	r3, [sp, #12]
 8006036:	3307      	adds	r3, #7
 8006038:	f023 0307 	bic.w	r3, r3, #7
 800603c:	3308      	adds	r3, #8
 800603e:	9303      	str	r3, [sp, #12]
 8006040:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006042:	4433      	add	r3, r6
 8006044:	9309      	str	r3, [sp, #36]	@ 0x24
 8006046:	e76a      	b.n	8005f1e <_svfiprintf_r+0x52>
 8006048:	fb0c 3202 	mla	r2, ip, r2, r3
 800604c:	460c      	mov	r4, r1
 800604e:	2001      	movs	r0, #1
 8006050:	e7a8      	b.n	8005fa4 <_svfiprintf_r+0xd8>
 8006052:	2300      	movs	r3, #0
 8006054:	3401      	adds	r4, #1
 8006056:	9305      	str	r3, [sp, #20]
 8006058:	4619      	mov	r1, r3
 800605a:	f04f 0c0a 	mov.w	ip, #10
 800605e:	4620      	mov	r0, r4
 8006060:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006064:	3a30      	subs	r2, #48	@ 0x30
 8006066:	2a09      	cmp	r2, #9
 8006068:	d903      	bls.n	8006072 <_svfiprintf_r+0x1a6>
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0c6      	beq.n	8005ffc <_svfiprintf_r+0x130>
 800606e:	9105      	str	r1, [sp, #20]
 8006070:	e7c4      	b.n	8005ffc <_svfiprintf_r+0x130>
 8006072:	fb0c 2101 	mla	r1, ip, r1, r2
 8006076:	4604      	mov	r4, r0
 8006078:	2301      	movs	r3, #1
 800607a:	e7f0      	b.n	800605e <_svfiprintf_r+0x192>
 800607c:	ab03      	add	r3, sp, #12
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	462a      	mov	r2, r5
 8006082:	4b0e      	ldr	r3, [pc, #56]	@ (80060bc <_svfiprintf_r+0x1f0>)
 8006084:	a904      	add	r1, sp, #16
 8006086:	4638      	mov	r0, r7
 8006088:	f3af 8000 	nop.w
 800608c:	1c42      	adds	r2, r0, #1
 800608e:	4606      	mov	r6, r0
 8006090:	d1d6      	bne.n	8006040 <_svfiprintf_r+0x174>
 8006092:	89ab      	ldrh	r3, [r5, #12]
 8006094:	065b      	lsls	r3, r3, #25
 8006096:	f53f af2d 	bmi.w	8005ef4 <_svfiprintf_r+0x28>
 800609a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800609c:	e72c      	b.n	8005ef8 <_svfiprintf_r+0x2c>
 800609e:	ab03      	add	r3, sp, #12
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	462a      	mov	r2, r5
 80060a4:	4b05      	ldr	r3, [pc, #20]	@ (80060bc <_svfiprintf_r+0x1f0>)
 80060a6:	a904      	add	r1, sp, #16
 80060a8:	4638      	mov	r0, r7
 80060aa:	f000 f879 	bl	80061a0 <_printf_i>
 80060ae:	e7ed      	b.n	800608c <_svfiprintf_r+0x1c0>
 80060b0:	080065f8 	.word	0x080065f8
 80060b4:	08006602 	.word	0x08006602
 80060b8:	00000000 	.word	0x00000000
 80060bc:	08005e15 	.word	0x08005e15
 80060c0:	080065fe 	.word	0x080065fe

080060c4 <_printf_common>:
 80060c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060c8:	4616      	mov	r6, r2
 80060ca:	4698      	mov	r8, r3
 80060cc:	688a      	ldr	r2, [r1, #8]
 80060ce:	690b      	ldr	r3, [r1, #16]
 80060d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80060d4:	4293      	cmp	r3, r2
 80060d6:	bfb8      	it	lt
 80060d8:	4613      	movlt	r3, r2
 80060da:	6033      	str	r3, [r6, #0]
 80060dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80060e0:	4607      	mov	r7, r0
 80060e2:	460c      	mov	r4, r1
 80060e4:	b10a      	cbz	r2, 80060ea <_printf_common+0x26>
 80060e6:	3301      	adds	r3, #1
 80060e8:	6033      	str	r3, [r6, #0]
 80060ea:	6823      	ldr	r3, [r4, #0]
 80060ec:	0699      	lsls	r1, r3, #26
 80060ee:	bf42      	ittt	mi
 80060f0:	6833      	ldrmi	r3, [r6, #0]
 80060f2:	3302      	addmi	r3, #2
 80060f4:	6033      	strmi	r3, [r6, #0]
 80060f6:	6825      	ldr	r5, [r4, #0]
 80060f8:	f015 0506 	ands.w	r5, r5, #6
 80060fc:	d106      	bne.n	800610c <_printf_common+0x48>
 80060fe:	f104 0a19 	add.w	sl, r4, #25
 8006102:	68e3      	ldr	r3, [r4, #12]
 8006104:	6832      	ldr	r2, [r6, #0]
 8006106:	1a9b      	subs	r3, r3, r2
 8006108:	42ab      	cmp	r3, r5
 800610a:	dc26      	bgt.n	800615a <_printf_common+0x96>
 800610c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006110:	6822      	ldr	r2, [r4, #0]
 8006112:	3b00      	subs	r3, #0
 8006114:	bf18      	it	ne
 8006116:	2301      	movne	r3, #1
 8006118:	0692      	lsls	r2, r2, #26
 800611a:	d42b      	bmi.n	8006174 <_printf_common+0xb0>
 800611c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006120:	4641      	mov	r1, r8
 8006122:	4638      	mov	r0, r7
 8006124:	47c8      	blx	r9
 8006126:	3001      	adds	r0, #1
 8006128:	d01e      	beq.n	8006168 <_printf_common+0xa4>
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	6922      	ldr	r2, [r4, #16]
 800612e:	f003 0306 	and.w	r3, r3, #6
 8006132:	2b04      	cmp	r3, #4
 8006134:	bf02      	ittt	eq
 8006136:	68e5      	ldreq	r5, [r4, #12]
 8006138:	6833      	ldreq	r3, [r6, #0]
 800613a:	1aed      	subeq	r5, r5, r3
 800613c:	68a3      	ldr	r3, [r4, #8]
 800613e:	bf0c      	ite	eq
 8006140:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006144:	2500      	movne	r5, #0
 8006146:	4293      	cmp	r3, r2
 8006148:	bfc4      	itt	gt
 800614a:	1a9b      	subgt	r3, r3, r2
 800614c:	18ed      	addgt	r5, r5, r3
 800614e:	2600      	movs	r6, #0
 8006150:	341a      	adds	r4, #26
 8006152:	42b5      	cmp	r5, r6
 8006154:	d11a      	bne.n	800618c <_printf_common+0xc8>
 8006156:	2000      	movs	r0, #0
 8006158:	e008      	b.n	800616c <_printf_common+0xa8>
 800615a:	2301      	movs	r3, #1
 800615c:	4652      	mov	r2, sl
 800615e:	4641      	mov	r1, r8
 8006160:	4638      	mov	r0, r7
 8006162:	47c8      	blx	r9
 8006164:	3001      	adds	r0, #1
 8006166:	d103      	bne.n	8006170 <_printf_common+0xac>
 8006168:	f04f 30ff 	mov.w	r0, #4294967295
 800616c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006170:	3501      	adds	r5, #1
 8006172:	e7c6      	b.n	8006102 <_printf_common+0x3e>
 8006174:	18e1      	adds	r1, r4, r3
 8006176:	1c5a      	adds	r2, r3, #1
 8006178:	2030      	movs	r0, #48	@ 0x30
 800617a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800617e:	4422      	add	r2, r4
 8006180:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006184:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006188:	3302      	adds	r3, #2
 800618a:	e7c7      	b.n	800611c <_printf_common+0x58>
 800618c:	2301      	movs	r3, #1
 800618e:	4622      	mov	r2, r4
 8006190:	4641      	mov	r1, r8
 8006192:	4638      	mov	r0, r7
 8006194:	47c8      	blx	r9
 8006196:	3001      	adds	r0, #1
 8006198:	d0e6      	beq.n	8006168 <_printf_common+0xa4>
 800619a:	3601      	adds	r6, #1
 800619c:	e7d9      	b.n	8006152 <_printf_common+0x8e>
	...

080061a0 <_printf_i>:
 80061a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061a4:	7e0f      	ldrb	r7, [r1, #24]
 80061a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061a8:	2f78      	cmp	r7, #120	@ 0x78
 80061aa:	4691      	mov	r9, r2
 80061ac:	4680      	mov	r8, r0
 80061ae:	460c      	mov	r4, r1
 80061b0:	469a      	mov	sl, r3
 80061b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80061b6:	d807      	bhi.n	80061c8 <_printf_i+0x28>
 80061b8:	2f62      	cmp	r7, #98	@ 0x62
 80061ba:	d80a      	bhi.n	80061d2 <_printf_i+0x32>
 80061bc:	2f00      	cmp	r7, #0
 80061be:	f000 80d2 	beq.w	8006366 <_printf_i+0x1c6>
 80061c2:	2f58      	cmp	r7, #88	@ 0x58
 80061c4:	f000 80b9 	beq.w	800633a <_printf_i+0x19a>
 80061c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80061d0:	e03a      	b.n	8006248 <_printf_i+0xa8>
 80061d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80061d6:	2b15      	cmp	r3, #21
 80061d8:	d8f6      	bhi.n	80061c8 <_printf_i+0x28>
 80061da:	a101      	add	r1, pc, #4	@ (adr r1, 80061e0 <_printf_i+0x40>)
 80061dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061e0:	08006239 	.word	0x08006239
 80061e4:	0800624d 	.word	0x0800624d
 80061e8:	080061c9 	.word	0x080061c9
 80061ec:	080061c9 	.word	0x080061c9
 80061f0:	080061c9 	.word	0x080061c9
 80061f4:	080061c9 	.word	0x080061c9
 80061f8:	0800624d 	.word	0x0800624d
 80061fc:	080061c9 	.word	0x080061c9
 8006200:	080061c9 	.word	0x080061c9
 8006204:	080061c9 	.word	0x080061c9
 8006208:	080061c9 	.word	0x080061c9
 800620c:	0800634d 	.word	0x0800634d
 8006210:	08006277 	.word	0x08006277
 8006214:	08006307 	.word	0x08006307
 8006218:	080061c9 	.word	0x080061c9
 800621c:	080061c9 	.word	0x080061c9
 8006220:	0800636f 	.word	0x0800636f
 8006224:	080061c9 	.word	0x080061c9
 8006228:	08006277 	.word	0x08006277
 800622c:	080061c9 	.word	0x080061c9
 8006230:	080061c9 	.word	0x080061c9
 8006234:	0800630f 	.word	0x0800630f
 8006238:	6833      	ldr	r3, [r6, #0]
 800623a:	1d1a      	adds	r2, r3, #4
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	6032      	str	r2, [r6, #0]
 8006240:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006244:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006248:	2301      	movs	r3, #1
 800624a:	e09d      	b.n	8006388 <_printf_i+0x1e8>
 800624c:	6833      	ldr	r3, [r6, #0]
 800624e:	6820      	ldr	r0, [r4, #0]
 8006250:	1d19      	adds	r1, r3, #4
 8006252:	6031      	str	r1, [r6, #0]
 8006254:	0606      	lsls	r6, r0, #24
 8006256:	d501      	bpl.n	800625c <_printf_i+0xbc>
 8006258:	681d      	ldr	r5, [r3, #0]
 800625a:	e003      	b.n	8006264 <_printf_i+0xc4>
 800625c:	0645      	lsls	r5, r0, #25
 800625e:	d5fb      	bpl.n	8006258 <_printf_i+0xb8>
 8006260:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006264:	2d00      	cmp	r5, #0
 8006266:	da03      	bge.n	8006270 <_printf_i+0xd0>
 8006268:	232d      	movs	r3, #45	@ 0x2d
 800626a:	426d      	negs	r5, r5
 800626c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006270:	4859      	ldr	r0, [pc, #356]	@ (80063d8 <_printf_i+0x238>)
 8006272:	230a      	movs	r3, #10
 8006274:	e011      	b.n	800629a <_printf_i+0xfa>
 8006276:	6821      	ldr	r1, [r4, #0]
 8006278:	6833      	ldr	r3, [r6, #0]
 800627a:	0608      	lsls	r0, r1, #24
 800627c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006280:	d402      	bmi.n	8006288 <_printf_i+0xe8>
 8006282:	0649      	lsls	r1, r1, #25
 8006284:	bf48      	it	mi
 8006286:	b2ad      	uxthmi	r5, r5
 8006288:	2f6f      	cmp	r7, #111	@ 0x6f
 800628a:	4853      	ldr	r0, [pc, #332]	@ (80063d8 <_printf_i+0x238>)
 800628c:	6033      	str	r3, [r6, #0]
 800628e:	bf14      	ite	ne
 8006290:	230a      	movne	r3, #10
 8006292:	2308      	moveq	r3, #8
 8006294:	2100      	movs	r1, #0
 8006296:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800629a:	6866      	ldr	r6, [r4, #4]
 800629c:	60a6      	str	r6, [r4, #8]
 800629e:	2e00      	cmp	r6, #0
 80062a0:	bfa2      	ittt	ge
 80062a2:	6821      	ldrge	r1, [r4, #0]
 80062a4:	f021 0104 	bicge.w	r1, r1, #4
 80062a8:	6021      	strge	r1, [r4, #0]
 80062aa:	b90d      	cbnz	r5, 80062b0 <_printf_i+0x110>
 80062ac:	2e00      	cmp	r6, #0
 80062ae:	d04b      	beq.n	8006348 <_printf_i+0x1a8>
 80062b0:	4616      	mov	r6, r2
 80062b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80062b6:	fb03 5711 	mls	r7, r3, r1, r5
 80062ba:	5dc7      	ldrb	r7, [r0, r7]
 80062bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062c0:	462f      	mov	r7, r5
 80062c2:	42bb      	cmp	r3, r7
 80062c4:	460d      	mov	r5, r1
 80062c6:	d9f4      	bls.n	80062b2 <_printf_i+0x112>
 80062c8:	2b08      	cmp	r3, #8
 80062ca:	d10b      	bne.n	80062e4 <_printf_i+0x144>
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	07df      	lsls	r7, r3, #31
 80062d0:	d508      	bpl.n	80062e4 <_printf_i+0x144>
 80062d2:	6923      	ldr	r3, [r4, #16]
 80062d4:	6861      	ldr	r1, [r4, #4]
 80062d6:	4299      	cmp	r1, r3
 80062d8:	bfde      	ittt	le
 80062da:	2330      	movle	r3, #48	@ 0x30
 80062dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80062e4:	1b92      	subs	r2, r2, r6
 80062e6:	6122      	str	r2, [r4, #16]
 80062e8:	f8cd a000 	str.w	sl, [sp]
 80062ec:	464b      	mov	r3, r9
 80062ee:	aa03      	add	r2, sp, #12
 80062f0:	4621      	mov	r1, r4
 80062f2:	4640      	mov	r0, r8
 80062f4:	f7ff fee6 	bl	80060c4 <_printf_common>
 80062f8:	3001      	adds	r0, #1
 80062fa:	d14a      	bne.n	8006392 <_printf_i+0x1f2>
 80062fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006300:	b004      	add	sp, #16
 8006302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006306:	6823      	ldr	r3, [r4, #0]
 8006308:	f043 0320 	orr.w	r3, r3, #32
 800630c:	6023      	str	r3, [r4, #0]
 800630e:	4833      	ldr	r0, [pc, #204]	@ (80063dc <_printf_i+0x23c>)
 8006310:	2778      	movs	r7, #120	@ 0x78
 8006312:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006316:	6823      	ldr	r3, [r4, #0]
 8006318:	6831      	ldr	r1, [r6, #0]
 800631a:	061f      	lsls	r7, r3, #24
 800631c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006320:	d402      	bmi.n	8006328 <_printf_i+0x188>
 8006322:	065f      	lsls	r7, r3, #25
 8006324:	bf48      	it	mi
 8006326:	b2ad      	uxthmi	r5, r5
 8006328:	6031      	str	r1, [r6, #0]
 800632a:	07d9      	lsls	r1, r3, #31
 800632c:	bf44      	itt	mi
 800632e:	f043 0320 	orrmi.w	r3, r3, #32
 8006332:	6023      	strmi	r3, [r4, #0]
 8006334:	b11d      	cbz	r5, 800633e <_printf_i+0x19e>
 8006336:	2310      	movs	r3, #16
 8006338:	e7ac      	b.n	8006294 <_printf_i+0xf4>
 800633a:	4827      	ldr	r0, [pc, #156]	@ (80063d8 <_printf_i+0x238>)
 800633c:	e7e9      	b.n	8006312 <_printf_i+0x172>
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	f023 0320 	bic.w	r3, r3, #32
 8006344:	6023      	str	r3, [r4, #0]
 8006346:	e7f6      	b.n	8006336 <_printf_i+0x196>
 8006348:	4616      	mov	r6, r2
 800634a:	e7bd      	b.n	80062c8 <_printf_i+0x128>
 800634c:	6833      	ldr	r3, [r6, #0]
 800634e:	6825      	ldr	r5, [r4, #0]
 8006350:	6961      	ldr	r1, [r4, #20]
 8006352:	1d18      	adds	r0, r3, #4
 8006354:	6030      	str	r0, [r6, #0]
 8006356:	062e      	lsls	r6, r5, #24
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	d501      	bpl.n	8006360 <_printf_i+0x1c0>
 800635c:	6019      	str	r1, [r3, #0]
 800635e:	e002      	b.n	8006366 <_printf_i+0x1c6>
 8006360:	0668      	lsls	r0, r5, #25
 8006362:	d5fb      	bpl.n	800635c <_printf_i+0x1bc>
 8006364:	8019      	strh	r1, [r3, #0]
 8006366:	2300      	movs	r3, #0
 8006368:	6123      	str	r3, [r4, #16]
 800636a:	4616      	mov	r6, r2
 800636c:	e7bc      	b.n	80062e8 <_printf_i+0x148>
 800636e:	6833      	ldr	r3, [r6, #0]
 8006370:	1d1a      	adds	r2, r3, #4
 8006372:	6032      	str	r2, [r6, #0]
 8006374:	681e      	ldr	r6, [r3, #0]
 8006376:	6862      	ldr	r2, [r4, #4]
 8006378:	2100      	movs	r1, #0
 800637a:	4630      	mov	r0, r6
 800637c:	f7f9 ff48 	bl	8000210 <memchr>
 8006380:	b108      	cbz	r0, 8006386 <_printf_i+0x1e6>
 8006382:	1b80      	subs	r0, r0, r6
 8006384:	6060      	str	r0, [r4, #4]
 8006386:	6863      	ldr	r3, [r4, #4]
 8006388:	6123      	str	r3, [r4, #16]
 800638a:	2300      	movs	r3, #0
 800638c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006390:	e7aa      	b.n	80062e8 <_printf_i+0x148>
 8006392:	6923      	ldr	r3, [r4, #16]
 8006394:	4632      	mov	r2, r6
 8006396:	4649      	mov	r1, r9
 8006398:	4640      	mov	r0, r8
 800639a:	47d0      	blx	sl
 800639c:	3001      	adds	r0, #1
 800639e:	d0ad      	beq.n	80062fc <_printf_i+0x15c>
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	079b      	lsls	r3, r3, #30
 80063a4:	d413      	bmi.n	80063ce <_printf_i+0x22e>
 80063a6:	68e0      	ldr	r0, [r4, #12]
 80063a8:	9b03      	ldr	r3, [sp, #12]
 80063aa:	4298      	cmp	r0, r3
 80063ac:	bfb8      	it	lt
 80063ae:	4618      	movlt	r0, r3
 80063b0:	e7a6      	b.n	8006300 <_printf_i+0x160>
 80063b2:	2301      	movs	r3, #1
 80063b4:	4632      	mov	r2, r6
 80063b6:	4649      	mov	r1, r9
 80063b8:	4640      	mov	r0, r8
 80063ba:	47d0      	blx	sl
 80063bc:	3001      	adds	r0, #1
 80063be:	d09d      	beq.n	80062fc <_printf_i+0x15c>
 80063c0:	3501      	adds	r5, #1
 80063c2:	68e3      	ldr	r3, [r4, #12]
 80063c4:	9903      	ldr	r1, [sp, #12]
 80063c6:	1a5b      	subs	r3, r3, r1
 80063c8:	42ab      	cmp	r3, r5
 80063ca:	dcf2      	bgt.n	80063b2 <_printf_i+0x212>
 80063cc:	e7eb      	b.n	80063a6 <_printf_i+0x206>
 80063ce:	2500      	movs	r5, #0
 80063d0:	f104 0619 	add.w	r6, r4, #25
 80063d4:	e7f5      	b.n	80063c2 <_printf_i+0x222>
 80063d6:	bf00      	nop
 80063d8:	08006609 	.word	0x08006609
 80063dc:	0800661a 	.word	0x0800661a

080063e0 <memmove>:
 80063e0:	4288      	cmp	r0, r1
 80063e2:	b510      	push	{r4, lr}
 80063e4:	eb01 0402 	add.w	r4, r1, r2
 80063e8:	d902      	bls.n	80063f0 <memmove+0x10>
 80063ea:	4284      	cmp	r4, r0
 80063ec:	4623      	mov	r3, r4
 80063ee:	d807      	bhi.n	8006400 <memmove+0x20>
 80063f0:	1e43      	subs	r3, r0, #1
 80063f2:	42a1      	cmp	r1, r4
 80063f4:	d008      	beq.n	8006408 <memmove+0x28>
 80063f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063fe:	e7f8      	b.n	80063f2 <memmove+0x12>
 8006400:	4402      	add	r2, r0
 8006402:	4601      	mov	r1, r0
 8006404:	428a      	cmp	r2, r1
 8006406:	d100      	bne.n	800640a <memmove+0x2a>
 8006408:	bd10      	pop	{r4, pc}
 800640a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800640e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006412:	e7f7      	b.n	8006404 <memmove+0x24>

08006414 <_sbrk_r>:
 8006414:	b538      	push	{r3, r4, r5, lr}
 8006416:	4d06      	ldr	r5, [pc, #24]	@ (8006430 <_sbrk_r+0x1c>)
 8006418:	2300      	movs	r3, #0
 800641a:	4604      	mov	r4, r0
 800641c:	4608      	mov	r0, r1
 800641e:	602b      	str	r3, [r5, #0]
 8006420:	f7fa fd90 	bl	8000f44 <_sbrk>
 8006424:	1c43      	adds	r3, r0, #1
 8006426:	d102      	bne.n	800642e <_sbrk_r+0x1a>
 8006428:	682b      	ldr	r3, [r5, #0]
 800642a:	b103      	cbz	r3, 800642e <_sbrk_r+0x1a>
 800642c:	6023      	str	r3, [r4, #0]
 800642e:	bd38      	pop	{r3, r4, r5, pc}
 8006430:	20040970 	.word	0x20040970

08006434 <memcpy>:
 8006434:	440a      	add	r2, r1
 8006436:	4291      	cmp	r1, r2
 8006438:	f100 33ff 	add.w	r3, r0, #4294967295
 800643c:	d100      	bne.n	8006440 <memcpy+0xc>
 800643e:	4770      	bx	lr
 8006440:	b510      	push	{r4, lr}
 8006442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006446:	f803 4f01 	strb.w	r4, [r3, #1]!
 800644a:	4291      	cmp	r1, r2
 800644c:	d1f9      	bne.n	8006442 <memcpy+0xe>
 800644e:	bd10      	pop	{r4, pc}

08006450 <_realloc_r>:
 8006450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006454:	4680      	mov	r8, r0
 8006456:	4615      	mov	r5, r2
 8006458:	460c      	mov	r4, r1
 800645a:	b921      	cbnz	r1, 8006466 <_realloc_r+0x16>
 800645c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006460:	4611      	mov	r1, r2
 8006462:	f7ff bc4b 	b.w	8005cfc <_malloc_r>
 8006466:	b92a      	cbnz	r2, 8006474 <_realloc_r+0x24>
 8006468:	f7ff fbdc 	bl	8005c24 <_free_r>
 800646c:	2400      	movs	r4, #0
 800646e:	4620      	mov	r0, r4
 8006470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006474:	f000 f81a 	bl	80064ac <_malloc_usable_size_r>
 8006478:	4285      	cmp	r5, r0
 800647a:	4606      	mov	r6, r0
 800647c:	d802      	bhi.n	8006484 <_realloc_r+0x34>
 800647e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006482:	d8f4      	bhi.n	800646e <_realloc_r+0x1e>
 8006484:	4629      	mov	r1, r5
 8006486:	4640      	mov	r0, r8
 8006488:	f7ff fc38 	bl	8005cfc <_malloc_r>
 800648c:	4607      	mov	r7, r0
 800648e:	2800      	cmp	r0, #0
 8006490:	d0ec      	beq.n	800646c <_realloc_r+0x1c>
 8006492:	42b5      	cmp	r5, r6
 8006494:	462a      	mov	r2, r5
 8006496:	4621      	mov	r1, r4
 8006498:	bf28      	it	cs
 800649a:	4632      	movcs	r2, r6
 800649c:	f7ff ffca 	bl	8006434 <memcpy>
 80064a0:	4621      	mov	r1, r4
 80064a2:	4640      	mov	r0, r8
 80064a4:	f7ff fbbe 	bl	8005c24 <_free_r>
 80064a8:	463c      	mov	r4, r7
 80064aa:	e7e0      	b.n	800646e <_realloc_r+0x1e>

080064ac <_malloc_usable_size_r>:
 80064ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064b0:	1f18      	subs	r0, r3, #4
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	bfbc      	itt	lt
 80064b6:	580b      	ldrlt	r3, [r1, r0]
 80064b8:	18c0      	addlt	r0, r0, r3
 80064ba:	4770      	bx	lr

080064bc <_init>:
 80064bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064be:	bf00      	nop
 80064c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064c2:	bc08      	pop	{r3}
 80064c4:	469e      	mov	lr, r3
 80064c6:	4770      	bx	lr

080064c8 <_fini>:
 80064c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ca:	bf00      	nop
 80064cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ce:	bc08      	pop	{r3}
 80064d0:	469e      	mov	lr, r3
 80064d2:	4770      	bx	lr
