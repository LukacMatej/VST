
cv06_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000635c  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  0800651c  0800651c  0000751c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800668c  0800668c  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  0800668c  0800668c  0000768c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006694  08006694  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006694  08006694  00007694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006698  08006698  00007698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20040000  0800669c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b0  20040060  080066fc  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20040910  080066fc  00008910  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122cd  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000277a  00000000  00000000  0001a35d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  0001cad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac8  00000000  00000000  0001d8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029fe5  00000000  00000000  0001e3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011993  00000000  00000000  0004838d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff8bc  00000000  00000000  00059d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001595dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f34  00000000  00000000  00159620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0015d554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20040060 	.word	0x20040060
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006504 	.word	0x08006504

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20040064 	.word	0x20040064
 80001fc:	08006504 	.word	0x08006504

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_UART_TxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool tx_in_process;
uint32_t len_process;
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	time_end = HAL_GetTick();
 80005a8:	f000 fdd4 	bl	8001154 <HAL_GetTick>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4a06      	ldr	r2, [pc, #24]	@ (80005c8 <HAL_UART_TxCpltCallback+0x28>)
 80005b0:	6013      	str	r3, [r2, #0]
	tx_in_process = false;
 80005b2:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <HAL_UART_TxCpltCallback+0x2c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
	blik_bool = false;
 80005b8:	4b05      	ldr	r3, [pc, #20]	@ (80005d0 <HAL_UART_TxCpltCallback+0x30>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200407b4 	.word	0x200407b4
 80005cc:	200407b8 	.word	0x200407b8
 80005d0:	20040000 	.word	0x20040000

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f000 fd52 	bl	8001082 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f8e1 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 fa2b 	bl	8000a3c <MX_GPIO_Init>
  MX_DMA_Init();
 80005e6:	f000 f9f7 	bl	80009d8 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005ea:	f000 f92f 	bl	800084c <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 80005ee:	f000 f979 	bl	80008e4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f2:	f000 f9c3 	bl	800097c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  uint32_t state = 1;
 80005f6:	2301      	movs	r3, #1
 80005f8:	617b      	str	r3, [r7, #20]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf(str, "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
 80005fa:	495c      	ldr	r1, [pc, #368]	@ (800076c <main+0x198>)
 80005fc:	485c      	ldr	r0, [pc, #368]	@ (8000770 <main+0x19c>)
 80005fe:	f005 fae1 	bl	8005bc4 <siprintf>
	  if (!tx_in_process){
 8000602:	4b5c      	ldr	r3, [pc, #368]	@ (8000774 <main+0x1a0>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	f083 0301 	eor.w	r3, r3, #1
 800060a:	b2db      	uxtb	r3, r3
 800060c:	2b00      	cmp	r3, #0
 800060e:	d04f      	beq.n	80006b0 <main+0xdc>
		  time_start = HAL_GetTick();
 8000610:	f000 fda0 	bl	8001154 <HAL_GetTick>
 8000614:	4603      	mov	r3, r0
 8000616:	4a58      	ldr	r2, [pc, #352]	@ (8000778 <main+0x1a4>)
 8000618:	6013      	str	r3, [r2, #0]
		  tx_in_process = true;
 800061a:	4b56      	ldr	r3, [pc, #344]	@ (8000774 <main+0x1a0>)
 800061c:	2201      	movs	r2, #1
 800061e:	701a      	strb	r2, [r3, #0]
		  switch (state){
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	2b02      	cmp	r3, #2
 8000624:	d02d      	beq.n	8000682 <main+0xae>
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	2b02      	cmp	r3, #2
 800062a:	d83c      	bhi.n	80006a6 <main+0xd2>
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d003      	beq.n	800063a <main+0x66>
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d012      	beq.n	800065e <main+0x8a>
 8000638:	e035      	b.n	80006a6 <main+0xd2>
		  case 0:
			  err = HAL_UART_Transmit(&hlpuart1, (uint8_t *)str, strlen(str), 100);
 800063a:	484d      	ldr	r0, [pc, #308]	@ (8000770 <main+0x19c>)
 800063c:	f7ff fde0 	bl	8000200 <strlen>
 8000640:	4603      	mov	r3, r0
 8000642:	b29a      	uxth	r2, r3
 8000644:	2364      	movs	r3, #100	@ 0x64
 8000646:	494a      	ldr	r1, [pc, #296]	@ (8000770 <main+0x19c>)
 8000648:	484c      	ldr	r0, [pc, #304]	@ (800077c <main+0x1a8>)
 800064a:	f003 fa0f 	bl	8003a6c <HAL_UART_Transmit>
 800064e:	4603      	mov	r3, r0
 8000650:	74fb      	strb	r3, [r7, #19]
			  sprintf(type_of_transmit, "Trasmit");
 8000652:	463b      	mov	r3, r7
 8000654:	494a      	ldr	r1, [pc, #296]	@ (8000780 <main+0x1ac>)
 8000656:	4618      	mov	r0, r3
 8000658:	f005 fab4 	bl	8005bc4 <siprintf>
			  break;
 800065c:	e023      	b.n	80006a6 <main+0xd2>
		  case 1:
			  err = HAL_UART_Transmit_DMA(&hlpuart1, (uint8_t *)str, strlen(str));
 800065e:	4844      	ldr	r0, [pc, #272]	@ (8000770 <main+0x19c>)
 8000660:	f7ff fdce 	bl	8000200 <strlen>
 8000664:	4603      	mov	r3, r0
 8000666:	b29b      	uxth	r3, r3
 8000668:	461a      	mov	r2, r3
 800066a:	4941      	ldr	r1, [pc, #260]	@ (8000770 <main+0x19c>)
 800066c:	4843      	ldr	r0, [pc, #268]	@ (800077c <main+0x1a8>)
 800066e:	f003 fb1f 	bl	8003cb0 <HAL_UART_Transmit_DMA>
 8000672:	4603      	mov	r3, r0
 8000674:	74fb      	strb	r3, [r7, #19]
			  sprintf(type_of_transmit, "Trasmit_DMA");
 8000676:	463b      	mov	r3, r7
 8000678:	4942      	ldr	r1, [pc, #264]	@ (8000784 <main+0x1b0>)
 800067a:	4618      	mov	r0, r3
 800067c:	f005 faa2 	bl	8005bc4 <siprintf>
			  break;
 8000680:	e011      	b.n	80006a6 <main+0xd2>
		  case 2:
			  err = HAL_UART_Transmit_IT(&hlpuart1, (uint8_t *)str, strlen(str));
 8000682:	483b      	ldr	r0, [pc, #236]	@ (8000770 <main+0x19c>)
 8000684:	f7ff fdbc 	bl	8000200 <strlen>
 8000688:	4603      	mov	r3, r0
 800068a:	b29b      	uxth	r3, r3
 800068c:	461a      	mov	r2, r3
 800068e:	4938      	ldr	r1, [pc, #224]	@ (8000770 <main+0x19c>)
 8000690:	483a      	ldr	r0, [pc, #232]	@ (800077c <main+0x1a8>)
 8000692:	f003 fa79 	bl	8003b88 <HAL_UART_Transmit_IT>
 8000696:	4603      	mov	r3, r0
 8000698:	74fb      	strb	r3, [r7, #19]
			  sprintf(type_of_transmit, "Trasmit_IT");
 800069a:	463b      	mov	r3, r7
 800069c:	493a      	ldr	r1, [pc, #232]	@ (8000788 <main+0x1b4>)
 800069e:	4618      	mov	r0, r3
 80006a0:	f005 fa90 	bl	8005bc4 <siprintf>
			  break;
 80006a4:	bf00      	nop
		  }
		  if (err != HAL_OK){
 80006a6:	7cfb      	ldrb	r3, [r7, #19]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <main+0xdc>
			  Error_Handler();
 80006ac:	f000 fa6a 	bl	8000b84 <Error_Handler>
		  }
	  }
	  if (tx_in_process && blik_bool){
 80006b0:	4b30      	ldr	r3, [pc, #192]	@ (8000774 <main+0x1a0>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d00c      	beq.n	80006d2 <main+0xfe>
 80006b8:	4b34      	ldr	r3, [pc, #208]	@ (800078c <main+0x1b8>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d008      	beq.n	80006d2 <main+0xfe>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006c0:	2180      	movs	r1, #128	@ 0x80
 80006c2:	4833      	ldr	r0, [pc, #204]	@ (8000790 <main+0x1bc>)
 80006c4:	f001 fb60 	bl	8001d88 <HAL_GPIO_TogglePin>
		  blik_counter += 1;
 80006c8:	4b32      	ldr	r3, [pc, #200]	@ (8000794 <main+0x1c0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	3301      	adds	r3, #1
 80006ce:	4a31      	ldr	r2, [pc, #196]	@ (8000794 <main+0x1c0>)
 80006d0:	6013      	str	r3, [r2, #0]
	  }
	  if (!blik_bool){
 80006d2:	4b2e      	ldr	r3, [pc, #184]	@ (800078c <main+0x1b8>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	f083 0301 	eor.w	r3, r3, #1
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d03d      	beq.n	800075c <main+0x188>
		  	len_process = time_end-time_start;
 80006e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000798 <main+0x1c4>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b24      	ldr	r3, [pc, #144]	@ (8000778 <main+0x1a4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	4a2c      	ldr	r2, [pc, #176]	@ (800079c <main+0x1c8>)
 80006ec:	6013      	str	r3, [r2, #0]
			sprintf(str, "\r\n Start: %lu ,Transmit length: %lu, Blik count: %lu, Type: %s  \r\n", time_start, len_process, blik_counter, type_of_transmit);
 80006ee:	4b22      	ldr	r3, [pc, #136]	@ (8000778 <main+0x1a4>)
 80006f0:	6819      	ldr	r1, [r3, #0]
 80006f2:	4b2a      	ldr	r3, [pc, #168]	@ (800079c <main+0x1c8>)
 80006f4:	6818      	ldr	r0, [r3, #0]
 80006f6:	4b27      	ldr	r3, [pc, #156]	@ (8000794 <main+0x1c0>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	463a      	mov	r2, r7
 80006fc:	9201      	str	r2, [sp, #4]
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	4603      	mov	r3, r0
 8000702:	460a      	mov	r2, r1
 8000704:	4926      	ldr	r1, [pc, #152]	@ (80007a0 <main+0x1cc>)
 8000706:	481a      	ldr	r0, [pc, #104]	@ (8000770 <main+0x19c>)
 8000708:	f005 fa5c 	bl	8005bc4 <siprintf>
			if (!tx_in_process){
 800070c:	4b19      	ldr	r3, [pc, #100]	@ (8000774 <main+0x1a0>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	f083 0301 	eor.w	r3, r3, #1
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d016      	beq.n	8000748 <main+0x174>
				tx_in_process = 1;
 800071a:	4b16      	ldr	r3, [pc, #88]	@ (8000774 <main+0x1a0>)
 800071c:	2201      	movs	r2, #1
 800071e:	701a      	strb	r2, [r3, #0]
				HAL_StatusTypeDef err = HAL_UART_Transmit_DMA(&hlpuart1, (uint8_t *)str, strlen(str));
 8000720:	4813      	ldr	r0, [pc, #76]	@ (8000770 <main+0x19c>)
 8000722:	f7ff fd6d 	bl	8000200 <strlen>
 8000726:	4603      	mov	r3, r0
 8000728:	b29b      	uxth	r3, r3
 800072a:	461a      	mov	r2, r3
 800072c:	4910      	ldr	r1, [pc, #64]	@ (8000770 <main+0x19c>)
 800072e:	4813      	ldr	r0, [pc, #76]	@ (800077c <main+0x1a8>)
 8000730:	f003 fabe 	bl	8003cb0 <HAL_UART_Transmit_DMA>
 8000734:	4603      	mov	r3, r0
 8000736:	74bb      	strb	r3, [r7, #18]
				blik_counter = 0;
 8000738:	4b16      	ldr	r3, [pc, #88]	@ (8000794 <main+0x1c0>)
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
				if (err != HAL_OK){
 800073e:	7cbb      	ldrb	r3, [r7, #18]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <main+0x174>
					Error_Handler();
 8000744:	f000 fa1e 	bl	8000b84 <Error_Handler>
				}
			}
			HAL_Delay(1000);
 8000748:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800074c:	f000 fd0e 	bl	800116c <HAL_Delay>
			state = state + 1;
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	3301      	adds	r3, #1
 8000754:	617b      	str	r3, [r7, #20]
			blik_bool = true;
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <main+0x1b8>)
 8000758:	2201      	movs	r2, #1
 800075a:	701a      	strb	r2, [r3, #0]
	  }
	  if (state > 2){
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	2b02      	cmp	r3, #2
 8000760:	f67f af4b 	bls.w	80005fa <main+0x26>
		  state = 1;
 8000764:	2301      	movs	r3, #1
 8000766:	617b      	str	r3, [r7, #20]
	  sprintf(str, "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
 8000768:	e747      	b.n	80005fa <main+0x26>
 800076a:	bf00      	nop
 800076c:	0800651c 	.word	0x0800651c
 8000770:	2004074c 	.word	0x2004074c
 8000774:	200407b8 	.word	0x200407b8
 8000778:	200407b0 	.word	0x200407b0
 800077c:	2004007c 	.word	0x2004007c
 8000780:	08006584 	.word	0x08006584
 8000784:	0800658c 	.word	0x0800658c
 8000788:	08006598 	.word	0x08006598
 800078c:	20040000 	.word	0x20040000
 8000790:	48000400 	.word	0x48000400
 8000794:	20040748 	.word	0x20040748
 8000798:	200407b4 	.word	0x200407b4
 800079c:	200407bc 	.word	0x200407bc
 80007a0:	080065a4 	.word	0x080065a4

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b096      	sub	sp, #88	@ 0x58
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	2244      	movs	r2, #68	@ 0x44
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f005 fa26 	bl	8005c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	463b      	mov	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80007c6:	2000      	movs	r0, #0
 80007c8:	f001 fc4c 	bl	8002064 <HAL_PWREx_ControlVoltageScaling>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80007d2:	f000 f9d7 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80007d6:	2322      	movs	r3, #34	@ 0x22
 80007d8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007e0:	2301      	movs	r3, #1
 80007e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e4:	2340      	movs	r3, #64	@ 0x40
 80007e6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e8:	2302      	movs	r3, #2
 80007ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ec:	2302      	movs	r3, #2
 80007ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80007f4:	231e      	movs	r3, #30
 80007f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007fc:	2302      	movs	r3, #2
 80007fe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000800:	2302      	movs	r3, #2
 8000802:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4618      	mov	r0, r3
 800080a:	f001 fcef 	bl	80021ec <HAL_RCC_OscConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000814:	f000 f9b6 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000818:	230f      	movs	r3, #15
 800081a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081c:	2303      	movs	r3, #3
 800081e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000824:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000828:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800082e:	463b      	mov	r3, r7
 8000830:	2105      	movs	r1, #5
 8000832:	4618      	mov	r0, r3
 8000834:	f002 f8f4 	bl	8002a20 <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800083e:	f000 f9a1 	bl	8000b84 <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3758      	adds	r7, #88	@ 0x58
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000850:	4b22      	ldr	r3, [pc, #136]	@ (80008dc <MX_LPUART1_UART_Init+0x90>)
 8000852:	4a23      	ldr	r2, [pc, #140]	@ (80008e0 <MX_LPUART1_UART_Init+0x94>)
 8000854:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000856:	4b21      	ldr	r3, [pc, #132]	@ (80008dc <MX_LPUART1_UART_Init+0x90>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b1f      	ldr	r3, [pc, #124]	@ (80008dc <MX_LPUART1_UART_Init+0x90>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b1d      	ldr	r3, [pc, #116]	@ (80008dc <MX_LPUART1_UART_Init+0x90>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800086a:	4b1c      	ldr	r3, [pc, #112]	@ (80008dc <MX_LPUART1_UART_Init+0x90>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b1a      	ldr	r3, [pc, #104]	@ (80008dc <MX_LPUART1_UART_Init+0x90>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b19      	ldr	r3, [pc, #100]	@ (80008dc <MX_LPUART1_UART_Init+0x90>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087c:	4b17      	ldr	r3, [pc, #92]	@ (80008dc <MX_LPUART1_UART_Init+0x90>)
 800087e:	2200      	movs	r2, #0
 8000880:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000882:	4b16      	ldr	r3, [pc, #88]	@ (80008dc <MX_LPUART1_UART_Init+0x90>)
 8000884:	2200      	movs	r2, #0
 8000886:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000888:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <MX_LPUART1_UART_Init+0x90>)
 800088a:	2200      	movs	r2, #0
 800088c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800088e:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <MX_LPUART1_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000894:	4811      	ldr	r0, [pc, #68]	@ (80008dc <MX_LPUART1_UART_Init+0x90>)
 8000896:	f003 f899 	bl	80039cc <HAL_UART_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80008a0:	f000 f970 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a4:	2100      	movs	r1, #0
 80008a6:	480d      	ldr	r0, [pc, #52]	@ (80008dc <MX_LPUART1_UART_Init+0x90>)
 80008a8:	f004 fe15 	bl	80054d6 <HAL_UARTEx_SetTxFifoThreshold>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008b2:	f000 f967 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b6:	2100      	movs	r1, #0
 80008b8:	4808      	ldr	r0, [pc, #32]	@ (80008dc <MX_LPUART1_UART_Init+0x90>)
 80008ba:	f004 fe4a 	bl	8005552 <HAL_UARTEx_SetRxFifoThreshold>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008c4:	f000 f95e 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008c8:	4804      	ldr	r0, [pc, #16]	@ (80008dc <MX_LPUART1_UART_Init+0x90>)
 80008ca:	f004 fdcb 	bl	8005464 <HAL_UARTEx_DisableFifoMode>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008d4:	f000 f956 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	2004007c 	.word	0x2004007c
 80008e0:	40008000 	.word	0x40008000

080008e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008e8:	4b22      	ldr	r3, [pc, #136]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 80008ea:	4a23      	ldr	r2, [pc, #140]	@ (8000978 <MX_USART3_UART_Init+0x94>)
 80008ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ee:	4b21      	ldr	r3, [pc, #132]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 80008f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000902:	4b1c      	ldr	r3, [pc, #112]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000908:	4b1a      	ldr	r3, [pc, #104]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 800090a:	220c      	movs	r2, #12
 800090c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090e:	4b19      	ldr	r3, [pc, #100]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000914:	4b17      	ldr	r3, [pc, #92]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 8000916:	2200      	movs	r2, #0
 8000918:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091a:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000920:	4b14      	ldr	r3, [pc, #80]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000926:	4b13      	ldr	r3, [pc, #76]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800092c:	4811      	ldr	r0, [pc, #68]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 800092e:	f003 f84d 	bl	80039cc <HAL_UART_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000938:	f000 f924 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093c:	2100      	movs	r1, #0
 800093e:	480d      	ldr	r0, [pc, #52]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 8000940:	f004 fdc9 	bl	80054d6 <HAL_UARTEx_SetTxFifoThreshold>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800094a:	f000 f91b 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800094e:	2100      	movs	r1, #0
 8000950:	4808      	ldr	r0, [pc, #32]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 8000952:	f004 fdfe 	bl	8005552 <HAL_UARTEx_SetRxFifoThreshold>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800095c:	f000 f912 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	@ (8000974 <MX_USART3_UART_Init+0x90>)
 8000962:	f004 fd7f 	bl	8005464 <HAL_UARTEx_DisableFifoMode>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800096c:	f000 f90a 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20040110 	.word	0x20040110
 8000978:	40004800 	.word	0x40004800

0800097c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000980:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000982:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000986:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000988:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098a:	2206      	movs	r2, #6
 800098c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800098e:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000990:	2202      	movs	r2, #2
 8000992:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000994:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000996:	2202      	movs	r2, #2
 8000998:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099c:	2201      	movs	r2, #1
 800099e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80009ac:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ae:	2201      	movs	r2, #1
 80009b0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c0:	f001 f9fc 	bl	8001dbc <HAL_PCD_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009ca:	f000 f8db 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20040264 	.word	0x20040264

080009d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80009de:	4b16      	ldr	r3, [pc, #88]	@ (8000a38 <MX_DMA_Init+0x60>)
 80009e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009e2:	4a15      	ldr	r2, [pc, #84]	@ (8000a38 <MX_DMA_Init+0x60>)
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	6493      	str	r3, [r2, #72]	@ 0x48
 80009ea:	4b13      	ldr	r3, [pc, #76]	@ (8000a38 <MX_DMA_Init+0x60>)
 80009ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <MX_DMA_Init+0x60>)
 80009f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80009fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000a38 <MX_DMA_Init+0x60>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a02:	4b0d      	ldr	r3, [pc, #52]	@ (8000a38 <MX_DMA_Init+0x60>)
 8000a04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2100      	movs	r1, #0
 8000a12:	200b      	movs	r0, #11
 8000a14:	f000 fca9 	bl	800136a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a18:	200b      	movs	r0, #11
 8000a1a:	f000 fcc2 	bl	80013a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	200c      	movs	r0, #12
 8000a24:	f000 fca1 	bl	800136a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000a28:	200c      	movs	r0, #12
 8000a2a:	f000 fcba 	bl	80013a2 <HAL_NVIC_EnableIRQ>

}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000

08000a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08c      	sub	sp, #48	@ 0x30
 8000a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	4b48      	ldr	r3, [pc, #288]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	4a47      	ldr	r2, [pc, #284]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5e:	4b45      	ldr	r3, [pc, #276]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	61bb      	str	r3, [r7, #24]
 8000a68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6a:	4b42      	ldr	r3, [pc, #264]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6e:	4a41      	ldr	r2, [pc, #260]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000a70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a76:	4b3f      	ldr	r3, [pc, #252]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	4b3c      	ldr	r3, [pc, #240]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a86:	4a3b      	ldr	r2, [pc, #236]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a8e:	4b39      	ldr	r3, [pc, #228]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9a:	4b36      	ldr	r3, [pc, #216]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9e:	4a35      	ldr	r2, [pc, #212]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000aa0:	f043 0308 	orr.w	r3, r3, #8
 8000aa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aa6:	4b33      	ldr	r3, [pc, #204]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aaa:	f003 0308 	and.w	r3, r3, #8
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ab2:	4b30      	ldr	r3, [pc, #192]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab6:	4a2f      	ldr	r2, [pc, #188]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000ab8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000abc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000abe:	4b2d      	ldr	r3, [pc, #180]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000aca:	f001 fb7f 	bl	80021cc <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	4b29      	ldr	r3, [pc, #164]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad2:	4a28      	ldr	r2, [pc, #160]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ada:	4b26      	ldr	r3, [pc, #152]	@ (8000b74 <MX_GPIO_Init+0x138>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000aec:	4822      	ldr	r0, [pc, #136]	@ (8000b78 <MX_GPIO_Init+0x13c>)
 8000aee:	f001 f933 	bl	8001d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2140      	movs	r1, #64	@ 0x40
 8000af6:	4821      	ldr	r0, [pc, #132]	@ (8000b7c <MX_GPIO_Init+0x140>)
 8000af8:	f001 f92e 	bl	8001d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000afc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b02:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	481b      	ldr	r0, [pc, #108]	@ (8000b80 <MX_GPIO_Init+0x144>)
 8000b14:	f000 ff8e 	bl	8001a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000b18:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4811      	ldr	r0, [pc, #68]	@ (8000b78 <MX_GPIO_Init+0x13c>)
 8000b32:	f000 ff7f 	bl	8001a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b36:	2320      	movs	r3, #32
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	4619      	mov	r1, r3
 8000b48:	480c      	ldr	r0, [pc, #48]	@ (8000b7c <MX_GPIO_Init+0x140>)
 8000b4a:	f000 ff73 	bl	8001a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b4e:	2340      	movs	r3, #64	@ 0x40
 8000b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b52:	2301      	movs	r3, #1
 8000b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4619      	mov	r1, r3
 8000b64:	4805      	ldr	r0, [pc, #20]	@ (8000b7c <MX_GPIO_Init+0x140>)
 8000b66:	f000 ff65 	bl	8001a34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b6a:	bf00      	nop
 8000b6c:	3730      	adds	r7, #48	@ 0x30
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40021000 	.word	0x40021000
 8000b78:	48000400 	.word	0x48000400
 8000b7c:	48001800 	.word	0x48001800
 8000b80:	48000800 	.word	0x48000800

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <Error_Handler+0x8>

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b96:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd4 <HAL_MspInit+0x44>)
 8000b98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd4 <HAL_MspInit+0x44>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <HAL_MspInit+0x44>)
 8000ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <HAL_MspInit+0x44>)
 8000bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bb2:	4a08      	ldr	r2, [pc, #32]	@ (8000bd4 <HAL_MspInit+0x44>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bba:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <HAL_MspInit+0x44>)
 8000bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b0b0      	sub	sp, #192	@ 0xc0
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bf0:	f107 0318 	add.w	r3, r7, #24
 8000bf4:	2294      	movs	r2, #148	@ 0x94
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f005 f803 	bl	8005c04 <memset>
  if(huart->Instance==LPUART1)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a71      	ldr	r2, [pc, #452]	@ (8000dc8 <HAL_UART_MspInit+0x1f0>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	f040 809a 	bne.w	8000d3e <HAL_UART_MspInit+0x166>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c0a:	2320      	movs	r3, #32
 8000c0c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c12:	f107 0318 	add.w	r3, r7, #24
 8000c16:	4618      	mov	r0, r3
 8000c18:	f002 f9c0 	bl	8002f9c <HAL_RCCEx_PeriphCLKConfig>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c22:	f7ff ffaf 	bl	8000b84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c26:	4b69      	ldr	r3, [pc, #420]	@ (8000dcc <HAL_UART_MspInit+0x1f4>)
 8000c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c2a:	4a68      	ldr	r2, [pc, #416]	@ (8000dcc <HAL_UART_MspInit+0x1f4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000c32:	4b66      	ldr	r3, [pc, #408]	@ (8000dcc <HAL_UART_MspInit+0x1f4>)
 8000c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c3e:	4b63      	ldr	r3, [pc, #396]	@ (8000dcc <HAL_UART_MspInit+0x1f4>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c42:	4a62      	ldr	r2, [pc, #392]	@ (8000dcc <HAL_UART_MspInit+0x1f4>)
 8000c44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c4a:	4b60      	ldr	r3, [pc, #384]	@ (8000dcc <HAL_UART_MspInit+0x1f4>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000c56:	f001 fab9 	bl	80021cc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000c5a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000c5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000c74:	2308      	movs	r3, #8
 8000c76:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c7a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4853      	ldr	r0, [pc, #332]	@ (8000dd0 <HAL_UART_MspInit+0x1f8>)
 8000c82:	f000 fed7 	bl	8001a34 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000c86:	4b53      	ldr	r3, [pc, #332]	@ (8000dd4 <HAL_UART_MspInit+0x1fc>)
 8000c88:	4a53      	ldr	r2, [pc, #332]	@ (8000dd8 <HAL_UART_MspInit+0x200>)
 8000c8a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000c8c:	4b51      	ldr	r3, [pc, #324]	@ (8000dd4 <HAL_UART_MspInit+0x1fc>)
 8000c8e:	2222      	movs	r2, #34	@ 0x22
 8000c90:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c92:	4b50      	ldr	r3, [pc, #320]	@ (8000dd4 <HAL_UART_MspInit+0x1fc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c98:	4b4e      	ldr	r3, [pc, #312]	@ (8000dd4 <HAL_UART_MspInit+0x1fc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c9e:	4b4d      	ldr	r3, [pc, #308]	@ (8000dd4 <HAL_UART_MspInit+0x1fc>)
 8000ca0:	2280      	movs	r2, #128	@ 0x80
 8000ca2:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ca4:	4b4b      	ldr	r3, [pc, #300]	@ (8000dd4 <HAL_UART_MspInit+0x1fc>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000caa:	4b4a      	ldr	r3, [pc, #296]	@ (8000dd4 <HAL_UART_MspInit+0x1fc>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000cb0:	4b48      	ldr	r3, [pc, #288]	@ (8000dd4 <HAL_UART_MspInit+0x1fc>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cb6:	4b47      	ldr	r3, [pc, #284]	@ (8000dd4 <HAL_UART_MspInit+0x1fc>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000cbc:	4845      	ldr	r0, [pc, #276]	@ (8000dd4 <HAL_UART_MspInit+0x1fc>)
 8000cbe:	f000 fb8b 	bl	80013d8 <HAL_DMA_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8000cc8:	f7ff ff5c 	bl	8000b84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a41      	ldr	r2, [pc, #260]	@ (8000dd4 <HAL_UART_MspInit+0x1fc>)
 8000cd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000cd4:	4a3f      	ldr	r2, [pc, #252]	@ (8000dd4 <HAL_UART_MspInit+0x1fc>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000cda:	4b40      	ldr	r3, [pc, #256]	@ (8000ddc <HAL_UART_MspInit+0x204>)
 8000cdc:	4a40      	ldr	r2, [pc, #256]	@ (8000de0 <HAL_UART_MspInit+0x208>)
 8000cde:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000ce0:	4b3e      	ldr	r3, [pc, #248]	@ (8000ddc <HAL_UART_MspInit+0x204>)
 8000ce2:	2223      	movs	r2, #35	@ 0x23
 8000ce4:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ce6:	4b3d      	ldr	r3, [pc, #244]	@ (8000ddc <HAL_UART_MspInit+0x204>)
 8000ce8:	2210      	movs	r2, #16
 8000cea:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cec:	4b3b      	ldr	r3, [pc, #236]	@ (8000ddc <HAL_UART_MspInit+0x204>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cf2:	4b3a      	ldr	r3, [pc, #232]	@ (8000ddc <HAL_UART_MspInit+0x204>)
 8000cf4:	2280      	movs	r2, #128	@ 0x80
 8000cf6:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cf8:	4b38      	ldr	r3, [pc, #224]	@ (8000ddc <HAL_UART_MspInit+0x204>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cfe:	4b37      	ldr	r3, [pc, #220]	@ (8000ddc <HAL_UART_MspInit+0x204>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000d04:	4b35      	ldr	r3, [pc, #212]	@ (8000ddc <HAL_UART_MspInit+0x204>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d0a:	4b34      	ldr	r3, [pc, #208]	@ (8000ddc <HAL_UART_MspInit+0x204>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000d10:	4832      	ldr	r0, [pc, #200]	@ (8000ddc <HAL_UART_MspInit+0x204>)
 8000d12:	f000 fb61 	bl	80013d8 <HAL_DMA_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <HAL_UART_MspInit+0x148>
    {
      Error_Handler();
 8000d1c:	f7ff ff32 	bl	8000b84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a2e      	ldr	r2, [pc, #184]	@ (8000ddc <HAL_UART_MspInit+0x204>)
 8000d24:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000d26:	4a2d      	ldr	r2, [pc, #180]	@ (8000ddc <HAL_UART_MspInit+0x204>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2100      	movs	r1, #0
 8000d30:	2046      	movs	r0, #70	@ 0x46
 8000d32:	f000 fb1a 	bl	800136a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000d36:	2046      	movs	r0, #70	@ 0x46
 8000d38:	f000 fb33 	bl	80013a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d3c:	e040      	b.n	8000dc0 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a28      	ldr	r2, [pc, #160]	@ (8000de4 <HAL_UART_MspInit+0x20c>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d13b      	bne.n	8000dc0 <HAL_UART_MspInit+0x1e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d48:	2304      	movs	r3, #4
 8000d4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d50:	f107 0318 	add.w	r3, r7, #24
 8000d54:	4618      	mov	r0, r3
 8000d56:	f002 f921 	bl	8002f9c <HAL_RCCEx_PeriphCLKConfig>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8000d60:	f7ff ff10 	bl	8000b84 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d64:	4b19      	ldr	r3, [pc, #100]	@ (8000dcc <HAL_UART_MspInit+0x1f4>)
 8000d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d68:	4a18      	ldr	r2, [pc, #96]	@ (8000dcc <HAL_UART_MspInit+0x1f4>)
 8000d6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d70:	4b16      	ldr	r3, [pc, #88]	@ (8000dcc <HAL_UART_MspInit+0x1f4>)
 8000d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7c:	4b13      	ldr	r3, [pc, #76]	@ (8000dcc <HAL_UART_MspInit+0x1f4>)
 8000d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d80:	4a12      	ldr	r2, [pc, #72]	@ (8000dcc <HAL_UART_MspInit+0x1f4>)
 8000d82:	f043 0308 	orr.w	r3, r3, #8
 8000d86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d88:	4b10      	ldr	r3, [pc, #64]	@ (8000dcc <HAL_UART_MspInit+0x1f4>)
 8000d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8c:	f003 0308 	and.w	r3, r3, #8
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d94:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dae:	2307      	movs	r3, #7
 8000db0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000db8:	4619      	mov	r1, r3
 8000dba:	480b      	ldr	r0, [pc, #44]	@ (8000de8 <HAL_UART_MspInit+0x210>)
 8000dbc:	f000 fe3a 	bl	8001a34 <HAL_GPIO_Init>
}
 8000dc0:	bf00      	nop
 8000dc2:	37c0      	adds	r7, #192	@ 0xc0
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40008000 	.word	0x40008000
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	48001800 	.word	0x48001800
 8000dd4:	200401a4 	.word	0x200401a4
 8000dd8:	40020008 	.word	0x40020008
 8000ddc:	20040204 	.word	0x20040204
 8000de0:	4002001c 	.word	0x4002001c
 8000de4:	40004800 	.word	0x40004800
 8000de8:	48000c00 	.word	0x48000c00

08000dec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b0b0      	sub	sp, #192	@ 0xc0
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e04:	f107 0318 	add.w	r3, r7, #24
 8000e08:	2294      	movs	r2, #148	@ 0x94
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f004 fef9 	bl	8005c04 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e1a:	d16c      	bne.n	8000ef6 <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000e1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e20:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e28:	f107 0318 	add.w	r3, r7, #24
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f002 f8b5 	bl	8002f9c <HAL_RCCEx_PeriphCLKConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e38:	f7ff fea4 	bl	8000b84 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3c:	4b30      	ldr	r3, [pc, #192]	@ (8000f00 <HAL_PCD_MspInit+0x114>)
 8000e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e40:	4a2f      	ldr	r2, [pc, #188]	@ (8000f00 <HAL_PCD_MspInit+0x114>)
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e48:	4b2d      	ldr	r3, [pc, #180]	@ (8000f00 <HAL_PCD_MspInit+0x114>)
 8000e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	617b      	str	r3, [r7, #20]
 8000e52:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e54:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000e58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e6e:	230a      	movs	r3, #10
 8000e70:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e7e:	f000 fdd9 	bl	8001a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e96:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea0:	f000 fdc8 	bl	8001a34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ea4:	4b16      	ldr	r3, [pc, #88]	@ (8000f00 <HAL_PCD_MspInit+0x114>)
 8000ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea8:	4a15      	ldr	r2, [pc, #84]	@ (8000f00 <HAL_PCD_MspInit+0x114>)
 8000eaa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000eae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb0:	4b13      	ldr	r3, [pc, #76]	@ (8000f00 <HAL_PCD_MspInit+0x114>)
 8000eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ebc:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <HAL_PCD_MspInit+0x114>)
 8000ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d114      	bne.n	8000ef2 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f00 <HAL_PCD_MspInit+0x114>)
 8000eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ecc:	4a0c      	ldr	r2, [pc, #48]	@ (8000f00 <HAL_PCD_MspInit+0x114>)
 8000ece:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <HAL_PCD_MspInit+0x114>)
 8000ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000ee0:	f001 f964 	bl	80021ac <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ee4:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_PCD_MspInit+0x114>)
 8000ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee8:	4a05      	ldr	r2, [pc, #20]	@ (8000f00 <HAL_PCD_MspInit+0x114>)
 8000eea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000eee:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000ef0:	e001      	b.n	8000ef6 <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 8000ef2:	f001 f95b 	bl	80021ac <HAL_PWREx_EnableVddUSB>
}
 8000ef6:	bf00      	nop
 8000ef8:	37c0      	adds	r7, #192	@ 0xc0
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40021000 	.word	0x40021000

08000f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <NMI_Handler+0x4>

08000f0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <HardFault_Handler+0x4>

08000f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <MemManage_Handler+0x4>

08000f1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <BusFault_Handler+0x4>

08000f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <UsageFault_Handler+0x4>

08000f2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5a:	f000 f8e7 	bl	800112c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000f68:	4802      	ldr	r0, [pc, #8]	@ (8000f74 <DMA1_Channel1_IRQHandler+0x10>)
 8000f6a:	f000 fc13 	bl	8001794 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200401a4 	.word	0x200401a4

08000f78 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000f7c:	4802      	ldr	r0, [pc, #8]	@ (8000f88 <DMA1_Channel2_IRQHandler+0x10>)
 8000f7e:	f000 fc09 	bl	8001794 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20040204 	.word	0x20040204

08000f8c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000f90:	4802      	ldr	r0, [pc, #8]	@ (8000f9c <LPUART1_IRQHandler+0x10>)
 8000f92:	f002 ff0d 	bl	8003db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2004007c 	.word	0x2004007c

08000fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa8:	4a14      	ldr	r2, [pc, #80]	@ (8000ffc <_sbrk+0x5c>)
 8000faa:	4b15      	ldr	r3, [pc, #84]	@ (8001000 <_sbrk+0x60>)
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb4:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d102      	bne.n	8000fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <_sbrk+0x64>)
 8000fbe:	4a12      	ldr	r2, [pc, #72]	@ (8001008 <_sbrk+0x68>)
 8000fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fc2:	4b10      	ldr	r3, [pc, #64]	@ (8001004 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d207      	bcs.n	8000fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd0:	f004 fe20 	bl	8005c14 <__errno>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	e009      	b.n	8000ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe0:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <_sbrk+0x64>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fe6:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	4a05      	ldr	r2, [pc, #20]	@ (8001004 <_sbrk+0x64>)
 8000ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	200a0000 	.word	0x200a0000
 8001000:	00000400 	.word	0x00000400
 8001004:	200407c0 	.word	0x200407c0
 8001008:	20040910 	.word	0x20040910

0800100c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001010:	4b06      	ldr	r3, [pc, #24]	@ (800102c <SystemInit+0x20>)
 8001012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001016:	4a05      	ldr	r2, [pc, #20]	@ (800102c <SystemInit+0x20>)
 8001018:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800101c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001030:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001068 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001034:	f7ff ffea 	bl	800100c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001038:	480c      	ldr	r0, [pc, #48]	@ (800106c <LoopForever+0x6>)
  ldr r1, =_edata
 800103a:	490d      	ldr	r1, [pc, #52]	@ (8001070 <LoopForever+0xa>)
  ldr r2, =_sidata
 800103c:	4a0d      	ldr	r2, [pc, #52]	@ (8001074 <LoopForever+0xe>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001040:	e002      	b.n	8001048 <LoopCopyDataInit>

08001042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001046:	3304      	adds	r3, #4

08001048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800104a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800104c:	d3f9      	bcc.n	8001042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104e:	4a0a      	ldr	r2, [pc, #40]	@ (8001078 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001050:	4c0a      	ldr	r4, [pc, #40]	@ (800107c <LoopForever+0x16>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001054:	e001      	b.n	800105a <LoopFillZerobss>

08001056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001058:	3204      	adds	r2, #4

0800105a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800105a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800105c:	d3fb      	bcc.n	8001056 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800105e:	f004 fddf 	bl	8005c20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001062:	f7ff fab7 	bl	80005d4 <main>

08001066 <LoopForever>:

LoopForever:
    b LoopForever
 8001066:	e7fe      	b.n	8001066 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001068:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800106c:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8001070:	20040060 	.word	0x20040060
  ldr r2, =_sidata
 8001074:	0800669c 	.word	0x0800669c
  ldr r2, =_sbss
 8001078:	20040060 	.word	0x20040060
  ldr r4, =_ebss
 800107c:	20040910 	.word	0x20040910

08001080 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC1_IRQHandler>

08001082 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001088:	2300      	movs	r3, #0
 800108a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108c:	2003      	movs	r0, #3
 800108e:	f000 f961 	bl	8001354 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001092:	2000      	movs	r0, #0
 8001094:	f000 f80e 	bl	80010b4 <HAL_InitTick>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d002      	beq.n	80010a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	71fb      	strb	r3, [r7, #7]
 80010a2:	e001      	b.n	80010a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010a4:	f7ff fd74 	bl	8000b90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010a8:	79fb      	ldrb	r3, [r7, #7]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010bc:	2300      	movs	r3, #0
 80010be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010c0:	4b17      	ldr	r3, [pc, #92]	@ (8001120 <HAL_InitTick+0x6c>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d023      	beq.n	8001110 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010c8:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <HAL_InitTick+0x70>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <HAL_InitTick+0x6c>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010da:	fbb2 f3f3 	udiv	r3, r2, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 f96d 	bl	80013be <HAL_SYSTICK_Config>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10f      	bne.n	800110a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	d809      	bhi.n	8001104 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f0:	2200      	movs	r2, #0
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f000 f937 	bl	800136a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001128 <HAL_InitTick+0x74>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	e007      	b.n	8001114 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	73fb      	strb	r3, [r7, #15]
 8001108:	e004      	b.n	8001114 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	73fb      	strb	r3, [r7, #15]
 800110e:	e001      	b.n	8001114 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001114:	7bfb      	ldrb	r3, [r7, #15]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	2004000c 	.word	0x2004000c
 8001124:	20040004 	.word	0x20040004
 8001128:	20040008 	.word	0x20040008

0800112c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <HAL_IncTick+0x20>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <HAL_IncTick+0x24>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4413      	add	r3, r2
 800113c:	4a04      	ldr	r2, [pc, #16]	@ (8001150 <HAL_IncTick+0x24>)
 800113e:	6013      	str	r3, [r2, #0]
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	2004000c 	.word	0x2004000c
 8001150:	200407c4 	.word	0x200407c4

08001154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return uwTick;
 8001158:	4b03      	ldr	r3, [pc, #12]	@ (8001168 <HAL_GetTick+0x14>)
 800115a:	681b      	ldr	r3, [r3, #0]
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	200407c4 	.word	0x200407c4

0800116c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001174:	f7ff ffee 	bl	8001154 <HAL_GetTick>
 8001178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001184:	d005      	beq.n	8001192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001186:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <HAL_Delay+0x44>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001192:	bf00      	nop
 8001194:	f7ff ffde 	bl	8001154 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d8f7      	bhi.n	8001194 <HAL_Delay+0x28>
  {
  }
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	2004000c 	.word	0x2004000c

080011b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c4:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011d0:	4013      	ands	r3, r2
 80011d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e6:	4a04      	ldr	r2, [pc, #16]	@ (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	60d3      	str	r3, [r2, #12]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001200:	4b04      	ldr	r3, [pc, #16]	@ (8001214 <__NVIC_GetPriorityGrouping+0x18>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	f003 0307 	and.w	r3, r3, #7
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	2b00      	cmp	r3, #0
 8001228:	db0b      	blt.n	8001242 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f003 021f 	and.w	r2, r3, #31
 8001230:	4907      	ldr	r1, [pc, #28]	@ (8001250 <__NVIC_EnableIRQ+0x38>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	095b      	lsrs	r3, r3, #5
 8001238:	2001      	movs	r0, #1
 800123a:	fa00 f202 	lsl.w	r2, r0, r2
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000e100 	.word	0xe000e100

08001254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001264:	2b00      	cmp	r3, #0
 8001266:	db0a      	blt.n	800127e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	b2da      	uxtb	r2, r3
 800126c:	490c      	ldr	r1, [pc, #48]	@ (80012a0 <__NVIC_SetPriority+0x4c>)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	0112      	lsls	r2, r2, #4
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	440b      	add	r3, r1
 8001278:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800127c:	e00a      	b.n	8001294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4908      	ldr	r1, [pc, #32]	@ (80012a4 <__NVIC_SetPriority+0x50>)
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	f003 030f 	and.w	r3, r3, #15
 800128a:	3b04      	subs	r3, #4
 800128c:	0112      	lsls	r2, r2, #4
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	440b      	add	r3, r1
 8001292:	761a      	strb	r2, [r3, #24]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000e100 	.word	0xe000e100
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b089      	sub	sp, #36	@ 0x24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f1c3 0307 	rsb	r3, r3, #7
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	bf28      	it	cs
 80012c6:	2304      	movcs	r3, #4
 80012c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3304      	adds	r3, #4
 80012ce:	2b06      	cmp	r3, #6
 80012d0:	d902      	bls.n	80012d8 <NVIC_EncodePriority+0x30>
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3b03      	subs	r3, #3
 80012d6:	e000      	b.n	80012da <NVIC_EncodePriority+0x32>
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	f04f 32ff 	mov.w	r2, #4294967295
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43da      	mvns	r2, r3
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	401a      	ands	r2, r3
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f0:	f04f 31ff 	mov.w	r1, #4294967295
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	fa01 f303 	lsl.w	r3, r1, r3
 80012fa:	43d9      	mvns	r1, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	4313      	orrs	r3, r2
         );
}
 8001302:	4618      	mov	r0, r3
 8001304:	3724      	adds	r7, #36	@ 0x24
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001320:	d301      	bcc.n	8001326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001322:	2301      	movs	r3, #1
 8001324:	e00f      	b.n	8001346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001326:	4a0a      	ldr	r2, [pc, #40]	@ (8001350 <SysTick_Config+0x40>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132e:	210f      	movs	r1, #15
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	f7ff ff8e 	bl	8001254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001338:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <SysTick_Config+0x40>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133e:	4b04      	ldr	r3, [pc, #16]	@ (8001350 <SysTick_Config+0x40>)
 8001340:	2207      	movs	r2, #7
 8001342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	e000e010 	.word	0xe000e010

08001354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ff29 	bl	80011b4 <__NVIC_SetPriorityGrouping>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800137c:	f7ff ff3e 	bl	80011fc <__NVIC_GetPriorityGrouping>
 8001380:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	68b9      	ldr	r1, [r7, #8]
 8001386:	6978      	ldr	r0, [r7, #20]
 8001388:	f7ff ff8e 	bl	80012a8 <NVIC_EncodePriority>
 800138c:	4602      	mov	r2, r0
 800138e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff5d 	bl	8001254 <__NVIC_SetPriority>
}
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff31 	bl	8001218 <__NVIC_EnableIRQ>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff ffa2 	bl	8001310 <SysTick_Config>
 80013cc:	4603      	mov	r3, r0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e08d      	b.n	8001506 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	461a      	mov	r2, r3
 80013f0:	4b47      	ldr	r3, [pc, #284]	@ (8001510 <HAL_DMA_Init+0x138>)
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d80f      	bhi.n	8001416 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b45      	ldr	r3, [pc, #276]	@ (8001514 <HAL_DMA_Init+0x13c>)
 80013fe:	4413      	add	r3, r2
 8001400:	4a45      	ldr	r2, [pc, #276]	@ (8001518 <HAL_DMA_Init+0x140>)
 8001402:	fba2 2303 	umull	r2, r3, r2, r3
 8001406:	091b      	lsrs	r3, r3, #4
 8001408:	009a      	lsls	r2, r3, #2
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a42      	ldr	r2, [pc, #264]	@ (800151c <HAL_DMA_Init+0x144>)
 8001412:	641a      	str	r2, [r3, #64]	@ 0x40
 8001414:	e00e      	b.n	8001434 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	461a      	mov	r2, r3
 800141c:	4b40      	ldr	r3, [pc, #256]	@ (8001520 <HAL_DMA_Init+0x148>)
 800141e:	4413      	add	r3, r2
 8001420:	4a3d      	ldr	r2, [pc, #244]	@ (8001518 <HAL_DMA_Init+0x140>)
 8001422:	fba2 2303 	umull	r2, r3, r2, r3
 8001426:	091b      	lsrs	r3, r3, #4
 8001428:	009a      	lsls	r2, r3, #2
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a3c      	ldr	r2, [pc, #240]	@ (8001524 <HAL_DMA_Init+0x14c>)
 8001432:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2202      	movs	r2, #2
 8001438:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800144a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800144e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001458:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001464:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001470:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a1b      	ldr	r3, [r3, #32]
 8001476:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	4313      	orrs	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 fa72 	bl	8001970 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001494:	d102      	bne.n	800149c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80014b0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d010      	beq.n	80014dc <HAL_DMA_Init+0x104>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b04      	cmp	r3, #4
 80014c0:	d80c      	bhi.n	80014dc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 fa92 	bl	80019ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	e008      	b.n	80014ee <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40020407 	.word	0x40020407
 8001514:	bffdfff8 	.word	0xbffdfff8
 8001518:	cccccccd 	.word	0xcccccccd
 800151c:	40020000 	.word	0x40020000
 8001520:	bffdfbf8 	.word	0xbffdfbf8
 8001524:	40020400 	.word	0x40020400

08001528 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001540:	2b01      	cmp	r3, #1
 8001542:	d101      	bne.n	8001548 <HAL_DMA_Start_IT+0x20>
 8001544:	2302      	movs	r3, #2
 8001546:	e066      	b.n	8001616 <HAL_DMA_Start_IT+0xee>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b01      	cmp	r3, #1
 800155a:	d155      	bne.n	8001608 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2202      	movs	r2, #2
 8001560:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0201 	bic.w	r2, r2, #1
 8001578:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	68b9      	ldr	r1, [r7, #8]
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f000 f9b6 	bl	80018f2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	2b00      	cmp	r3, #0
 800158c:	d008      	beq.n	80015a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f042 020e 	orr.w	r2, r2, #14
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	e00f      	b.n	80015c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0204 	bic.w	r2, r2, #4
 80015ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 020a 	orr.w	r2, r2, #10
 80015be:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d007      	beq.n	80015de <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015dc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d007      	beq.n	80015f6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015f4:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f042 0201 	orr.w	r2, r2, #1
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	e005      	b.n	8001614 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001610:	2302      	movs	r3, #2
 8001612:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001614:	7dfb      	ldrb	r3, [r7, #23]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800161e:	b480      	push	{r7}
 8001620:	b085      	sub	sp, #20
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001626:	2300      	movs	r3, #0
 8001628:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d008      	beq.n	8001648 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2204      	movs	r2, #4
 800163a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e040      	b.n	80016ca <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 020e 	bic.w	r2, r2, #14
 8001656:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001662:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001666:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0201 	bic.w	r2, r2, #1
 8001676:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167c:	f003 021c 	and.w	r2, r3, #28
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001684:	2101      	movs	r1, #1
 8001686:	fa01 f202 	lsl.w	r2, r1, r2
 800168a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001694:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00c      	beq.n	80016b8 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016ac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80016b6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b084      	sub	sp, #16
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d005      	beq.n	80016fa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2204      	movs	r2, #4
 80016f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
 80016f8:	e047      	b.n	800178a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 020e 	bic.w	r2, r2, #14
 8001708:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0201 	bic.w	r2, r2, #1
 8001718:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001724:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001728:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172e:	f003 021c 	and.w	r2, r3, #28
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	2101      	movs	r1, #1
 8001738:	fa01 f202 	lsl.w	r2, r1, r2
 800173c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001746:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00c      	beq.n	800176a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800175a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800175e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001768:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2201      	movs	r2, #1
 800176e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	4798      	blx	r3
    }
  }
  return status;
 800178a:	7bfb      	ldrb	r3, [r7, #15]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b0:	f003 031c 	and.w	r3, r3, #28
 80017b4:	2204      	movs	r2, #4
 80017b6:	409a      	lsls	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d026      	beq.n	800180e <HAL_DMA_IRQHandler+0x7a>
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d021      	beq.n	800180e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0320 	and.w	r3, r3, #32
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d107      	bne.n	80017e8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 0204 	bic.w	r2, r2, #4
 80017e6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ec:	f003 021c 	and.w	r2, r3, #28
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f4:	2104      	movs	r1, #4
 80017f6:	fa01 f202 	lsl.w	r2, r1, r2
 80017fa:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001800:	2b00      	cmp	r3, #0
 8001802:	d071      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800180c:	e06c      	b.n	80018e8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001812:	f003 031c 	and.w	r3, r3, #28
 8001816:	2202      	movs	r2, #2
 8001818:	409a      	lsls	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	4013      	ands	r3, r2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d02e      	beq.n	8001880 <HAL_DMA_IRQHandler+0xec>
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d029      	beq.n	8001880 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0320 	and.w	r3, r3, #32
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10b      	bne.n	8001852 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 020a 	bic.w	r2, r2, #10
 8001848:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001856:	f003 021c 	and.w	r2, r3, #28
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	2102      	movs	r1, #2
 8001860:	fa01 f202 	lsl.w	r2, r1, r2
 8001864:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001872:	2b00      	cmp	r3, #0
 8001874:	d038      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800187e:	e033      	b.n	80018e8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001884:	f003 031c 	and.w	r3, r3, #28
 8001888:	2208      	movs	r2, #8
 800188a:	409a      	lsls	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4013      	ands	r3, r2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d02a      	beq.n	80018ea <HAL_DMA_IRQHandler+0x156>
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	2b00      	cmp	r3, #0
 800189c:	d025      	beq.n	80018ea <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 020e 	bic.w	r2, r2, #14
 80018ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b2:	f003 021c 	and.w	r2, r3, #28
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ba:	2101      	movs	r1, #1
 80018bc:	fa01 f202 	lsl.w	r2, r1, r2
 80018c0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2201      	movs	r2, #1
 80018c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d004      	beq.n	80018ea <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
}
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b085      	sub	sp, #20
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	60f8      	str	r0, [r7, #12]
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001908:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800190e:	2b00      	cmp	r3, #0
 8001910:	d004      	beq.n	800191c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800191a:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001920:	f003 021c 	and.w	r2, r3, #28
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001928:	2101      	movs	r1, #1
 800192a:	fa01 f202 	lsl.w	r2, r1, r2
 800192e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2b10      	cmp	r3, #16
 800193e:	d108      	bne.n	8001952 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68ba      	ldr	r2, [r7, #8]
 800194e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001950:	e007      	b.n	8001962 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	60da      	str	r2, [r3, #12]
}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	461a      	mov	r2, r3
 800197e:	4b17      	ldr	r3, [pc, #92]	@ (80019dc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001980:	429a      	cmp	r2, r3
 8001982:	d80a      	bhi.n	800199a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001988:	089b      	lsrs	r3, r3, #2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001990:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6493      	str	r3, [r2, #72]	@ 0x48
 8001998:	e007      	b.n	80019aa <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199e:	089b      	lsrs	r3, r3, #2
 80019a0:	009a      	lsls	r2, r3, #2
 80019a2:	4b0f      	ldr	r3, [pc, #60]	@ (80019e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80019a4:	4413      	add	r3, r2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	3b08      	subs	r3, #8
 80019b2:	4a0c      	ldr	r2, [pc, #48]	@ (80019e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80019b4:	fba2 2303 	umull	r2, r3, r2, r3
 80019b8:	091b      	lsrs	r3, r3, #4
 80019ba:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a0a      	ldr	r2, [pc, #40]	@ (80019e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80019c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f003 031f 	and.w	r3, r3, #31
 80019c8:	2201      	movs	r2, #1
 80019ca:	409a      	lsls	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	40020407 	.word	0x40020407
 80019e0:	4002081c 	.word	0x4002081c
 80019e4:	cccccccd 	.word	0xcccccccd
 80019e8:	40020880 	.word	0x40020880

080019ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	4b0b      	ldr	r3, [pc, #44]	@ (8001a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001a00:	4413      	add	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	461a      	mov	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a08      	ldr	r2, [pc, #32]	@ (8001a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001a0e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	2201      	movs	r2, #1
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001a20:	bf00      	nop
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	1000823f 	.word	0x1000823f
 8001a30:	40020940 	.word	0x40020940

08001a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a42:	e166      	b.n	8001d12 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	2101      	movs	r1, #1
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a50:	4013      	ands	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 8158 	beq.w	8001d0c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d005      	beq.n	8001a74 <HAL_GPIO_Init+0x40>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d130      	bne.n	8001ad6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	2203      	movs	r2, #3
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aaa:	2201      	movs	r2, #1
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	091b      	lsrs	r3, r3, #4
 8001ac0:	f003 0201 	and.w	r2, r3, #1
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d017      	beq.n	8001b12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	2203      	movs	r2, #3
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d123      	bne.n	8001b66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	08da      	lsrs	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	3208      	adds	r2, #8
 8001b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	220f      	movs	r2, #15
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	691a      	ldr	r2, [r3, #16]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	08da      	lsrs	r2, r3, #3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3208      	adds	r2, #8
 8001b60:	6939      	ldr	r1, [r7, #16]
 8001b62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	2203      	movs	r2, #3
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0203 	and.w	r2, r3, #3
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 80b2 	beq.w	8001d0c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba8:	4b61      	ldr	r3, [pc, #388]	@ (8001d30 <HAL_GPIO_Init+0x2fc>)
 8001baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bac:	4a60      	ldr	r2, [pc, #384]	@ (8001d30 <HAL_GPIO_Init+0x2fc>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bb4:	4b5e      	ldr	r3, [pc, #376]	@ (8001d30 <HAL_GPIO_Init+0x2fc>)
 8001bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bc0:	4a5c      	ldr	r2, [pc, #368]	@ (8001d34 <HAL_GPIO_Init+0x300>)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	089b      	lsrs	r3, r3, #2
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	220f      	movs	r2, #15
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4013      	ands	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001bea:	d02b      	beq.n	8001c44 <HAL_GPIO_Init+0x210>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a52      	ldr	r2, [pc, #328]	@ (8001d38 <HAL_GPIO_Init+0x304>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d025      	beq.n	8001c40 <HAL_GPIO_Init+0x20c>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a51      	ldr	r2, [pc, #324]	@ (8001d3c <HAL_GPIO_Init+0x308>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d01f      	beq.n	8001c3c <HAL_GPIO_Init+0x208>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a50      	ldr	r2, [pc, #320]	@ (8001d40 <HAL_GPIO_Init+0x30c>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d019      	beq.n	8001c38 <HAL_GPIO_Init+0x204>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a4f      	ldr	r2, [pc, #316]	@ (8001d44 <HAL_GPIO_Init+0x310>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d013      	beq.n	8001c34 <HAL_GPIO_Init+0x200>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a4e      	ldr	r2, [pc, #312]	@ (8001d48 <HAL_GPIO_Init+0x314>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d00d      	beq.n	8001c30 <HAL_GPIO_Init+0x1fc>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a4d      	ldr	r2, [pc, #308]	@ (8001d4c <HAL_GPIO_Init+0x318>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d007      	beq.n	8001c2c <HAL_GPIO_Init+0x1f8>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a4c      	ldr	r2, [pc, #304]	@ (8001d50 <HAL_GPIO_Init+0x31c>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d101      	bne.n	8001c28 <HAL_GPIO_Init+0x1f4>
 8001c24:	2307      	movs	r3, #7
 8001c26:	e00e      	b.n	8001c46 <HAL_GPIO_Init+0x212>
 8001c28:	2308      	movs	r3, #8
 8001c2a:	e00c      	b.n	8001c46 <HAL_GPIO_Init+0x212>
 8001c2c:	2306      	movs	r3, #6
 8001c2e:	e00a      	b.n	8001c46 <HAL_GPIO_Init+0x212>
 8001c30:	2305      	movs	r3, #5
 8001c32:	e008      	b.n	8001c46 <HAL_GPIO_Init+0x212>
 8001c34:	2304      	movs	r3, #4
 8001c36:	e006      	b.n	8001c46 <HAL_GPIO_Init+0x212>
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e004      	b.n	8001c46 <HAL_GPIO_Init+0x212>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	e002      	b.n	8001c46 <HAL_GPIO_Init+0x212>
 8001c40:	2301      	movs	r3, #1
 8001c42:	e000      	b.n	8001c46 <HAL_GPIO_Init+0x212>
 8001c44:	2300      	movs	r3, #0
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	f002 0203 	and.w	r2, r2, #3
 8001c4c:	0092      	lsls	r2, r2, #2
 8001c4e:	4093      	lsls	r3, r2
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c56:	4937      	ldr	r1, [pc, #220]	@ (8001d34 <HAL_GPIO_Init+0x300>)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	089b      	lsrs	r3, r3, #2
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c64:	4b3b      	ldr	r3, [pc, #236]	@ (8001d54 <HAL_GPIO_Init+0x320>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c88:	4a32      	ldr	r2, [pc, #200]	@ (8001d54 <HAL_GPIO_Init+0x320>)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c8e:	4b31      	ldr	r3, [pc, #196]	@ (8001d54 <HAL_GPIO_Init+0x320>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cb2:	4a28      	ldr	r2, [pc, #160]	@ (8001d54 <HAL_GPIO_Init+0x320>)
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001cb8:	4b26      	ldr	r3, [pc, #152]	@ (8001d54 <HAL_GPIO_Init+0x320>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8001d54 <HAL_GPIO_Init+0x320>)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d54 <HAL_GPIO_Init+0x320>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d06:	4a13      	ldr	r2, [pc, #76]	@ (8001d54 <HAL_GPIO_Init+0x320>)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f47f ae91 	bne.w	8001a44 <HAL_GPIO_Init+0x10>
  }
}
 8001d22:	bf00      	nop
 8001d24:	bf00      	nop
 8001d26:	371c      	adds	r7, #28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40010000 	.word	0x40010000
 8001d38:	48000400 	.word	0x48000400
 8001d3c:	48000800 	.word	0x48000800
 8001d40:	48000c00 	.word	0x48000c00
 8001d44:	48001000 	.word	0x48001000
 8001d48:	48001400 	.word	0x48001400
 8001d4c:	48001800 	.word	0x48001800
 8001d50:	48001c00 	.word	0x48001c00
 8001d54:	40010400 	.word	0x40010400

08001d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	807b      	strh	r3, [r7, #2]
 8001d64:	4613      	mov	r3, r2
 8001d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d68:	787b      	ldrb	r3, [r7, #1]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d6e:	887a      	ldrh	r2, [r7, #2]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d74:	e002      	b.n	8001d7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d76:	887a      	ldrh	r2, [r7, #2]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d9a:	887a      	ldrh	r2, [r7, #2]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	041a      	lsls	r2, r3, #16
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	43d9      	mvns	r1, r3
 8001da6:	887b      	ldrh	r3, [r7, #2]
 8001da8:	400b      	ands	r3, r1
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	619a      	str	r2, [r3, #24]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af02      	add	r7, sp, #8
 8001dc2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e101      	b.n	8001fd2 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d106      	bne.n	8001de8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff f802 	bl	8000dec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2203      	movs	r2, #3
 8001dec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f003 fc63 	bl	80056c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6818      	ldr	r0, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	7c1a      	ldrb	r2, [r3, #16]
 8001e08:	f88d 2000 	strb.w	r2, [sp]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e10:	f003 fc2c 	bl	800566c <USB_CoreInit>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d005      	beq.n	8001e26 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e0d5      	b.n	8001fd2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f003 fc5b 	bl	80056e8 <USB_SetCurrentMode>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e0c6      	b.n	8001fd2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e44:	2300      	movs	r3, #0
 8001e46:	73fb      	strb	r3, [r7, #15]
 8001e48:	e04a      	b.n	8001ee0 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e4a:	7bfa      	ldrb	r2, [r7, #15]
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	440b      	add	r3, r1
 8001e58:	3315      	adds	r3, #21
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e5e:	7bfa      	ldrb	r2, [r7, #15]
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	4413      	add	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	3314      	adds	r3, #20
 8001e6e:	7bfa      	ldrb	r2, [r7, #15]
 8001e70:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e72:	7bfa      	ldrb	r2, [r7, #15]
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	b298      	uxth	r0, r3
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	332e      	adds	r3, #46	@ 0x2e
 8001e86:	4602      	mov	r2, r0
 8001e88:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e8a:	7bfa      	ldrb	r2, [r7, #15]
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	4413      	add	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	3318      	adds	r3, #24
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	331c      	adds	r3, #28
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001eb2:	7bfa      	ldrb	r2, [r7, #15]
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4413      	add	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	3320      	adds	r3, #32
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ec6:	7bfa      	ldrb	r2, [r7, #15]
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4413      	add	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	440b      	add	r3, r1
 8001ed4:	3324      	adds	r3, #36	@ 0x24
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
 8001edc:	3301      	adds	r3, #1
 8001ede:	73fb      	strb	r3, [r7, #15]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	791b      	ldrb	r3, [r3, #4]
 8001ee4:	7bfa      	ldrb	r2, [r7, #15]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d3af      	bcc.n	8001e4a <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eea:	2300      	movs	r3, #0
 8001eec:	73fb      	strb	r3, [r7, #15]
 8001eee:	e044      	b.n	8001f7a <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ef0:	7bfa      	ldrb	r2, [r7, #15]
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4413      	add	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f06:	7bfa      	ldrb	r2, [r7, #15]
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f1c:	7bfa      	ldrb	r2, [r7, #15]
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4413      	add	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f32:	7bfa      	ldrb	r2, [r7, #15]
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	440b      	add	r3, r1
 8001f40:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f48:	7bfa      	ldrb	r2, [r7, #15]
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f5e:	7bfa      	ldrb	r2, [r7, #15]
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	4413      	add	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	3301      	adds	r3, #1
 8001f78:	73fb      	strb	r3, [r7, #15]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	791b      	ldrb	r3, [r3, #4]
 8001f7e:	7bfa      	ldrb	r2, [r7, #15]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d3b5      	bcc.n	8001ef0 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	7c1a      	ldrb	r2, [r3, #16]
 8001f8c:	f88d 2000 	strb.w	r2, [sp]
 8001f90:	3304      	adds	r3, #4
 8001f92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f94:	f003 fbf4 	bl	8005780 <USB_DevInit>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e013      	b.n	8001fd2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	7b1b      	ldrb	r3, [r3, #12]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d102      	bne.n	8001fc6 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f80a 	bl	8001fda <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f003 fd99 	bl	8005b02 <USB_DevDisconnect>

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b085      	sub	sp, #20
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002008:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800200c:	f043 0303 	orr.w	r3, r3, #3
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002028:	4b0d      	ldr	r3, [pc, #52]	@ (8002060 <HAL_PWREx_GetVoltageRange+0x3c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002030:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002034:	d102      	bne.n	800203c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002036:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800203a:	e00b      	b.n	8002054 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800203c:	4b08      	ldr	r3, [pc, #32]	@ (8002060 <HAL_PWREx_GetVoltageRange+0x3c>)
 800203e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002046:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800204a:	d102      	bne.n	8002052 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800204c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002050:	e000      	b.n	8002054 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002052:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002054:	4618      	mov	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40007000 	.word	0x40007000

08002064 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d141      	bne.n	80020f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002072:	4b4b      	ldr	r3, [pc, #300]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800207a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800207e:	d131      	bne.n	80020e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002080:	4b47      	ldr	r3, [pc, #284]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002082:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002086:	4a46      	ldr	r2, [pc, #280]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002088:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800208c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002090:	4b43      	ldr	r3, [pc, #268]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002098:	4a41      	ldr	r2, [pc, #260]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800209a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800209e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80020a0:	4b40      	ldr	r3, [pc, #256]	@ (80021a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2232      	movs	r2, #50	@ 0x32
 80020a6:	fb02 f303 	mul.w	r3, r2, r3
 80020aa:	4a3f      	ldr	r2, [pc, #252]	@ (80021a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020ac:	fba2 2303 	umull	r2, r3, r2, r3
 80020b0:	0c9b      	lsrs	r3, r3, #18
 80020b2:	3301      	adds	r3, #1
 80020b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020b6:	e002      	b.n	80020be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020be:	4b38      	ldr	r3, [pc, #224]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ca:	d102      	bne.n	80020d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f2      	bne.n	80020b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020d2:	4b33      	ldr	r3, [pc, #204]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020de:	d158      	bne.n	8002192 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e057      	b.n	8002194 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020e4:	4b2e      	ldr	r3, [pc, #184]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020ea:	4a2d      	ldr	r2, [pc, #180]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80020f4:	e04d      	b.n	8002192 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020fc:	d141      	bne.n	8002182 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020fe:	4b28      	ldr	r3, [pc, #160]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002106:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800210a:	d131      	bne.n	8002170 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800210c:	4b24      	ldr	r3, [pc, #144]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800210e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002112:	4a23      	ldr	r2, [pc, #140]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002114:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002118:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800211c:	4b20      	ldr	r3, [pc, #128]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002124:	4a1e      	ldr	r2, [pc, #120]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002126:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800212a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800212c:	4b1d      	ldr	r3, [pc, #116]	@ (80021a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2232      	movs	r2, #50	@ 0x32
 8002132:	fb02 f303 	mul.w	r3, r2, r3
 8002136:	4a1c      	ldr	r2, [pc, #112]	@ (80021a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002138:	fba2 2303 	umull	r2, r3, r2, r3
 800213c:	0c9b      	lsrs	r3, r3, #18
 800213e:	3301      	adds	r3, #1
 8002140:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002142:	e002      	b.n	800214a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	3b01      	subs	r3, #1
 8002148:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800214a:	4b15      	ldr	r3, [pc, #84]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002152:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002156:	d102      	bne.n	800215e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f2      	bne.n	8002144 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800215e:	4b10      	ldr	r3, [pc, #64]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800216a:	d112      	bne.n	8002192 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e011      	b.n	8002194 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002170:	4b0b      	ldr	r3, [pc, #44]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002172:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002176:	4a0a      	ldr	r2, [pc, #40]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002178:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800217c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002180:	e007      	b.n	8002192 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002182:	4b07      	ldr	r3, [pc, #28]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800218a:	4a05      	ldr	r2, [pc, #20]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800218c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002190:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	40007000 	.word	0x40007000
 80021a4:	20040004 	.word	0x20040004
 80021a8:	431bde83 	.word	0x431bde83

080021ac <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80021b0:	4b05      	ldr	r3, [pc, #20]	@ (80021c8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	4a04      	ldr	r2, [pc, #16]	@ (80021c8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80021b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021ba:	6053      	str	r3, [r2, #4]
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40007000 	.word	0x40007000

080021cc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80021d0:	4b05      	ldr	r3, [pc, #20]	@ (80021e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	4a04      	ldr	r2, [pc, #16]	@ (80021e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80021d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021da:	6053      	str	r3, [r2, #4]
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40007000 	.word	0x40007000

080021ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b088      	sub	sp, #32
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d102      	bne.n	8002200 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	f000 bc08 	b.w	8002a10 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002200:	4b96      	ldr	r3, [pc, #600]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 030c 	and.w	r3, r3, #12
 8002208:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800220a:	4b94      	ldr	r3, [pc, #592]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 80e4 	beq.w	80023ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d007      	beq.n	8002238 <HAL_RCC_OscConfig+0x4c>
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	2b0c      	cmp	r3, #12
 800222c:	f040 808b 	bne.w	8002346 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	2b01      	cmp	r3, #1
 8002234:	f040 8087 	bne.w	8002346 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002238:	4b88      	ldr	r3, [pc, #544]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_RCC_OscConfig+0x64>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e3df      	b.n	8002a10 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a1a      	ldr	r2, [r3, #32]
 8002254:	4b81      	ldr	r3, [pc, #516]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b00      	cmp	r3, #0
 800225e:	d004      	beq.n	800226a <HAL_RCC_OscConfig+0x7e>
 8002260:	4b7e      	ldr	r3, [pc, #504]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002268:	e005      	b.n	8002276 <HAL_RCC_OscConfig+0x8a>
 800226a:	4b7c      	ldr	r3, [pc, #496]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 800226c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002276:	4293      	cmp	r3, r2
 8002278:	d223      	bcs.n	80022c2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	4618      	mov	r0, r3
 8002280:	f000 fdcc 	bl	8002e1c <RCC_SetFlashLatencyFromMSIRange>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e3c0      	b.n	8002a10 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800228e:	4b73      	ldr	r3, [pc, #460]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a72      	ldr	r2, [pc, #456]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002294:	f043 0308 	orr.w	r3, r3, #8
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	4b70      	ldr	r3, [pc, #448]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	496d      	ldr	r1, [pc, #436]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022ac:	4b6b      	ldr	r3, [pc, #428]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	021b      	lsls	r3, r3, #8
 80022ba:	4968      	ldr	r1, [pc, #416]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	604b      	str	r3, [r1, #4]
 80022c0:	e025      	b.n	800230e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022c2:	4b66      	ldr	r3, [pc, #408]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a65      	ldr	r2, [pc, #404]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 80022c8:	f043 0308 	orr.w	r3, r3, #8
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	4b63      	ldr	r3, [pc, #396]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	4960      	ldr	r1, [pc, #384]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022e0:	4b5e      	ldr	r3, [pc, #376]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	021b      	lsls	r3, r3, #8
 80022ee:	495b      	ldr	r1, [pc, #364]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d109      	bne.n	800230e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 fd8c 	bl	8002e1c <RCC_SetFlashLatencyFromMSIRange>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e380      	b.n	8002a10 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800230e:	f000 fcc1 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 8002312:	4602      	mov	r2, r0
 8002314:	4b51      	ldr	r3, [pc, #324]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	091b      	lsrs	r3, r3, #4
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	4950      	ldr	r1, [pc, #320]	@ (8002460 <HAL_RCC_OscConfig+0x274>)
 8002320:	5ccb      	ldrb	r3, [r1, r3]
 8002322:	f003 031f 	and.w	r3, r3, #31
 8002326:	fa22 f303 	lsr.w	r3, r2, r3
 800232a:	4a4e      	ldr	r2, [pc, #312]	@ (8002464 <HAL_RCC_OscConfig+0x278>)
 800232c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800232e:	4b4e      	ldr	r3, [pc, #312]	@ (8002468 <HAL_RCC_OscConfig+0x27c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe febe 	bl	80010b4 <HAL_InitTick>
 8002338:	4603      	mov	r3, r0
 800233a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d052      	beq.n	80023e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	e364      	b.n	8002a10 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d032      	beq.n	80023b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800234e:	4b43      	ldr	r3, [pc, #268]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a42      	ldr	r2, [pc, #264]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800235a:	f7fe fefb 	bl	8001154 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002362:	f7fe fef7 	bl	8001154 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e34d      	b.n	8002a10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002374:	4b39      	ldr	r3, [pc, #228]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0f0      	beq.n	8002362 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002380:	4b36      	ldr	r3, [pc, #216]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a35      	ldr	r2, [pc, #212]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002386:	f043 0308 	orr.w	r3, r3, #8
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	4b33      	ldr	r3, [pc, #204]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	4930      	ldr	r1, [pc, #192]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 800239a:	4313      	orrs	r3, r2
 800239c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800239e:	4b2f      	ldr	r3, [pc, #188]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	021b      	lsls	r3, r3, #8
 80023ac:	492b      	ldr	r1, [pc, #172]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	604b      	str	r3, [r1, #4]
 80023b2:	e01a      	b.n	80023ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023b4:	4b29      	ldr	r3, [pc, #164]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a28      	ldr	r2, [pc, #160]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 80023ba:	f023 0301 	bic.w	r3, r3, #1
 80023be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023c0:	f7fe fec8 	bl	8001154 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023c8:	f7fe fec4 	bl	8001154 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e31a      	b.n	8002a10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023da:	4b20      	ldr	r3, [pc, #128]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x1dc>
 80023e6:	e000      	b.n	80023ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d073      	beq.n	80024de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d005      	beq.n	8002408 <HAL_RCC_OscConfig+0x21c>
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	2b0c      	cmp	r3, #12
 8002400:	d10e      	bne.n	8002420 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	2b03      	cmp	r3, #3
 8002406:	d10b      	bne.n	8002420 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002408:	4b14      	ldr	r3, [pc, #80]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d063      	beq.n	80024dc <HAL_RCC_OscConfig+0x2f0>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d15f      	bne.n	80024dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e2f7      	b.n	8002a10 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002428:	d106      	bne.n	8002438 <HAL_RCC_OscConfig+0x24c>
 800242a:	4b0c      	ldr	r3, [pc, #48]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a0b      	ldr	r2, [pc, #44]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	e025      	b.n	8002484 <HAL_RCC_OscConfig+0x298>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002440:	d114      	bne.n	800246c <HAL_RCC_OscConfig+0x280>
 8002442:	4b06      	ldr	r3, [pc, #24]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a05      	ldr	r2, [pc, #20]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	4b03      	ldr	r3, [pc, #12]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a02      	ldr	r2, [pc, #8]	@ (800245c <HAL_RCC_OscConfig+0x270>)
 8002454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	e013      	b.n	8002484 <HAL_RCC_OscConfig+0x298>
 800245c:	40021000 	.word	0x40021000
 8002460:	080065e8 	.word	0x080065e8
 8002464:	20040004 	.word	0x20040004
 8002468:	20040008 	.word	0x20040008
 800246c:	4ba0      	ldr	r3, [pc, #640]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a9f      	ldr	r2, [pc, #636]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 8002472:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	4b9d      	ldr	r3, [pc, #628]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a9c      	ldr	r2, [pc, #624]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 800247e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d013      	beq.n	80024b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248c:	f7fe fe62 	bl	8001154 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002494:	f7fe fe5e 	bl	8001154 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b64      	cmp	r3, #100	@ 0x64
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e2b4      	b.n	8002a10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024a6:	4b92      	ldr	r3, [pc, #584]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0x2a8>
 80024b2:	e014      	b.n	80024de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7fe fe4e 	bl	8001154 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024bc:	f7fe fe4a 	bl	8001154 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	@ 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e2a0      	b.n	8002a10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ce:	4b88      	ldr	r3, [pc, #544]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x2d0>
 80024da:	e000      	b.n	80024de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d060      	beq.n	80025ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_OscConfig+0x310>
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	2b0c      	cmp	r3, #12
 80024f4:	d119      	bne.n	800252a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d116      	bne.n	800252a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024fc:	4b7c      	ldr	r3, [pc, #496]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_RCC_OscConfig+0x328>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e27d      	b.n	8002a10 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002514:	4b76      	ldr	r3, [pc, #472]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	061b      	lsls	r3, r3, #24
 8002522:	4973      	ldr	r1, [pc, #460]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 8002524:	4313      	orrs	r3, r2
 8002526:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002528:	e040      	b.n	80025ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d023      	beq.n	800257a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002532:	4b6f      	ldr	r3, [pc, #444]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a6e      	ldr	r2, [pc, #440]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 8002538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800253c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253e:	f7fe fe09 	bl	8001154 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002546:	f7fe fe05 	bl	8001154 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e25b      	b.n	8002a10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002558:	4b65      	ldr	r3, [pc, #404]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0f0      	beq.n	8002546 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002564:	4b62      	ldr	r3, [pc, #392]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	061b      	lsls	r3, r3, #24
 8002572:	495f      	ldr	r1, [pc, #380]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 8002574:	4313      	orrs	r3, r2
 8002576:	604b      	str	r3, [r1, #4]
 8002578:	e018      	b.n	80025ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800257a:	4b5d      	ldr	r3, [pc, #372]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a5c      	ldr	r2, [pc, #368]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 8002580:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002586:	f7fe fde5 	bl	8001154 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800258e:	f7fe fde1 	bl	8001154 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e237      	b.n	8002a10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025a0:	4b53      	ldr	r3, [pc, #332]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1f0      	bne.n	800258e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d03c      	beq.n	8002632 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d01c      	beq.n	80025fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025c0:	4b4b      	ldr	r3, [pc, #300]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 80025c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025c6:	4a4a      	ldr	r2, [pc, #296]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d0:	f7fe fdc0 	bl	8001154 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d8:	f7fe fdbc 	bl	8001154 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e212      	b.n	8002a10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025ea:	4b41      	ldr	r3, [pc, #260]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 80025ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0ef      	beq.n	80025d8 <HAL_RCC_OscConfig+0x3ec>
 80025f8:	e01b      	b.n	8002632 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025fa:	4b3d      	ldr	r3, [pc, #244]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 80025fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002600:	4a3b      	ldr	r2, [pc, #236]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 8002602:	f023 0301 	bic.w	r3, r3, #1
 8002606:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260a:	f7fe fda3 	bl	8001154 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002612:	f7fe fd9f 	bl	8001154 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e1f5      	b.n	8002a10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002624:	4b32      	ldr	r3, [pc, #200]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 8002626:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1ef      	bne.n	8002612 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 80a6 	beq.w	800278c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002640:	2300      	movs	r3, #0
 8002642:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002644:	4b2a      	ldr	r3, [pc, #168]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 8002646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10d      	bne.n	800266c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002650:	4b27      	ldr	r3, [pc, #156]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 8002652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002654:	4a26      	ldr	r2, [pc, #152]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 8002656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800265a:	6593      	str	r3, [r2, #88]	@ 0x58
 800265c:	4b24      	ldr	r3, [pc, #144]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 800265e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002668:	2301      	movs	r3, #1
 800266a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800266c:	4b21      	ldr	r3, [pc, #132]	@ (80026f4 <HAL_RCC_OscConfig+0x508>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002674:	2b00      	cmp	r3, #0
 8002676:	d118      	bne.n	80026aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002678:	4b1e      	ldr	r3, [pc, #120]	@ (80026f4 <HAL_RCC_OscConfig+0x508>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a1d      	ldr	r2, [pc, #116]	@ (80026f4 <HAL_RCC_OscConfig+0x508>)
 800267e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002682:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002684:	f7fe fd66 	bl	8001154 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800268c:	f7fe fd62 	bl	8001154 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e1b8      	b.n	8002a10 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800269e:	4b15      	ldr	r3, [pc, #84]	@ (80026f4 <HAL_RCC_OscConfig+0x508>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d108      	bne.n	80026c4 <HAL_RCC_OscConfig+0x4d8>
 80026b2:	4b0f      	ldr	r3, [pc, #60]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 80026b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b8:	4a0d      	ldr	r2, [pc, #52]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026c2:	e029      	b.n	8002718 <HAL_RCC_OscConfig+0x52c>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b05      	cmp	r3, #5
 80026ca:	d115      	bne.n	80026f8 <HAL_RCC_OscConfig+0x50c>
 80026cc:	4b08      	ldr	r3, [pc, #32]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 80026ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d2:	4a07      	ldr	r2, [pc, #28]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 80026d4:	f043 0304 	orr.w	r3, r3, #4
 80026d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026dc:	4b04      	ldr	r3, [pc, #16]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 80026de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e2:	4a03      	ldr	r2, [pc, #12]	@ (80026f0 <HAL_RCC_OscConfig+0x504>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026ec:	e014      	b.n	8002718 <HAL_RCC_OscConfig+0x52c>
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40007000 	.word	0x40007000
 80026f8:	4b9d      	ldr	r3, [pc, #628]	@ (8002970 <HAL_RCC_OscConfig+0x784>)
 80026fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026fe:	4a9c      	ldr	r2, [pc, #624]	@ (8002970 <HAL_RCC_OscConfig+0x784>)
 8002700:	f023 0301 	bic.w	r3, r3, #1
 8002704:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002708:	4b99      	ldr	r3, [pc, #612]	@ (8002970 <HAL_RCC_OscConfig+0x784>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800270e:	4a98      	ldr	r2, [pc, #608]	@ (8002970 <HAL_RCC_OscConfig+0x784>)
 8002710:	f023 0304 	bic.w	r3, r3, #4
 8002714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d016      	beq.n	800274e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002720:	f7fe fd18 	bl	8001154 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002726:	e00a      	b.n	800273e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002728:	f7fe fd14 	bl	8001154 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e168      	b.n	8002a10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800273e:	4b8c      	ldr	r3, [pc, #560]	@ (8002970 <HAL_RCC_OscConfig+0x784>)
 8002740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0ed      	beq.n	8002728 <HAL_RCC_OscConfig+0x53c>
 800274c:	e015      	b.n	800277a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274e:	f7fe fd01 	bl	8001154 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002754:	e00a      	b.n	800276c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002756:	f7fe fcfd 	bl	8001154 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002764:	4293      	cmp	r3, r2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e151      	b.n	8002a10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800276c:	4b80      	ldr	r3, [pc, #512]	@ (8002970 <HAL_RCC_OscConfig+0x784>)
 800276e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1ed      	bne.n	8002756 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800277a:	7ffb      	ldrb	r3, [r7, #31]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d105      	bne.n	800278c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002780:	4b7b      	ldr	r3, [pc, #492]	@ (8002970 <HAL_RCC_OscConfig+0x784>)
 8002782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002784:	4a7a      	ldr	r2, [pc, #488]	@ (8002970 <HAL_RCC_OscConfig+0x784>)
 8002786:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800278a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	2b00      	cmp	r3, #0
 8002796:	d03c      	beq.n	8002812 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279c:	2b00      	cmp	r3, #0
 800279e:	d01c      	beq.n	80027da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027a0:	4b73      	ldr	r3, [pc, #460]	@ (8002970 <HAL_RCC_OscConfig+0x784>)
 80027a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027a6:	4a72      	ldr	r2, [pc, #456]	@ (8002970 <HAL_RCC_OscConfig+0x784>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b0:	f7fe fcd0 	bl	8001154 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027b8:	f7fe fccc 	bl	8001154 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e122      	b.n	8002a10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027ca:	4b69      	ldr	r3, [pc, #420]	@ (8002970 <HAL_RCC_OscConfig+0x784>)
 80027cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0ef      	beq.n	80027b8 <HAL_RCC_OscConfig+0x5cc>
 80027d8:	e01b      	b.n	8002812 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027da:	4b65      	ldr	r3, [pc, #404]	@ (8002970 <HAL_RCC_OscConfig+0x784>)
 80027dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027e0:	4a63      	ldr	r2, [pc, #396]	@ (8002970 <HAL_RCC_OscConfig+0x784>)
 80027e2:	f023 0301 	bic.w	r3, r3, #1
 80027e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ea:	f7fe fcb3 	bl	8001154 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027f2:	f7fe fcaf 	bl	8001154 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e105      	b.n	8002a10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002804:	4b5a      	ldr	r3, [pc, #360]	@ (8002970 <HAL_RCC_OscConfig+0x784>)
 8002806:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1ef      	bne.n	80027f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 80f9 	beq.w	8002a0e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002820:	2b02      	cmp	r3, #2
 8002822:	f040 80cf 	bne.w	80029c4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002826:	4b52      	ldr	r3, [pc, #328]	@ (8002970 <HAL_RCC_OscConfig+0x784>)
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f003 0203 	and.w	r2, r3, #3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002836:	429a      	cmp	r2, r3
 8002838:	d12c      	bne.n	8002894 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002844:	3b01      	subs	r3, #1
 8002846:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002848:	429a      	cmp	r2, r3
 800284a:	d123      	bne.n	8002894 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002856:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002858:	429a      	cmp	r2, r3
 800285a:	d11b      	bne.n	8002894 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002866:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002868:	429a      	cmp	r2, r3
 800286a:	d113      	bne.n	8002894 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002876:	085b      	lsrs	r3, r3, #1
 8002878:	3b01      	subs	r3, #1
 800287a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800287c:	429a      	cmp	r2, r3
 800287e:	d109      	bne.n	8002894 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	085b      	lsrs	r3, r3, #1
 800288c:	3b01      	subs	r3, #1
 800288e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002890:	429a      	cmp	r2, r3
 8002892:	d071      	beq.n	8002978 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	2b0c      	cmp	r3, #12
 8002898:	d068      	beq.n	800296c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800289a:	4b35      	ldr	r3, [pc, #212]	@ (8002970 <HAL_RCC_OscConfig+0x784>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d105      	bne.n	80028b2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028a6:	4b32      	ldr	r3, [pc, #200]	@ (8002970 <HAL_RCC_OscConfig+0x784>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e0ac      	b.n	8002a10 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002970 <HAL_RCC_OscConfig+0x784>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a2d      	ldr	r2, [pc, #180]	@ (8002970 <HAL_RCC_OscConfig+0x784>)
 80028bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028c2:	f7fe fc47 	bl	8001154 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ca:	f7fe fc43 	bl	8001154 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e099      	b.n	8002a10 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028dc:	4b24      	ldr	r3, [pc, #144]	@ (8002970 <HAL_RCC_OscConfig+0x784>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1f0      	bne.n	80028ca <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e8:	4b21      	ldr	r3, [pc, #132]	@ (8002970 <HAL_RCC_OscConfig+0x784>)
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	4b21      	ldr	r3, [pc, #132]	@ (8002974 <HAL_RCC_OscConfig+0x788>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80028f8:	3a01      	subs	r2, #1
 80028fa:	0112      	lsls	r2, r2, #4
 80028fc:	4311      	orrs	r1, r2
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002902:	0212      	lsls	r2, r2, #8
 8002904:	4311      	orrs	r1, r2
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800290a:	0852      	lsrs	r2, r2, #1
 800290c:	3a01      	subs	r2, #1
 800290e:	0552      	lsls	r2, r2, #21
 8002910:	4311      	orrs	r1, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002916:	0852      	lsrs	r2, r2, #1
 8002918:	3a01      	subs	r2, #1
 800291a:	0652      	lsls	r2, r2, #25
 800291c:	4311      	orrs	r1, r2
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002922:	06d2      	lsls	r2, r2, #27
 8002924:	430a      	orrs	r2, r1
 8002926:	4912      	ldr	r1, [pc, #72]	@ (8002970 <HAL_RCC_OscConfig+0x784>)
 8002928:	4313      	orrs	r3, r2
 800292a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800292c:	4b10      	ldr	r3, [pc, #64]	@ (8002970 <HAL_RCC_OscConfig+0x784>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0f      	ldr	r2, [pc, #60]	@ (8002970 <HAL_RCC_OscConfig+0x784>)
 8002932:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002936:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002938:	4b0d      	ldr	r3, [pc, #52]	@ (8002970 <HAL_RCC_OscConfig+0x784>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4a0c      	ldr	r2, [pc, #48]	@ (8002970 <HAL_RCC_OscConfig+0x784>)
 800293e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002942:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002944:	f7fe fc06 	bl	8001154 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294c:	f7fe fc02 	bl	8001154 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e058      	b.n	8002a10 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295e:	4b04      	ldr	r3, [pc, #16]	@ (8002970 <HAL_RCC_OscConfig+0x784>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800296a:	e050      	b.n	8002a0e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e04f      	b.n	8002a10 <HAL_RCC_OscConfig+0x824>
 8002970:	40021000 	.word	0x40021000
 8002974:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002978:	4b27      	ldr	r3, [pc, #156]	@ (8002a18 <HAL_RCC_OscConfig+0x82c>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d144      	bne.n	8002a0e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002984:	4b24      	ldr	r3, [pc, #144]	@ (8002a18 <HAL_RCC_OscConfig+0x82c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a23      	ldr	r2, [pc, #140]	@ (8002a18 <HAL_RCC_OscConfig+0x82c>)
 800298a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800298e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002990:	4b21      	ldr	r3, [pc, #132]	@ (8002a18 <HAL_RCC_OscConfig+0x82c>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	4a20      	ldr	r2, [pc, #128]	@ (8002a18 <HAL_RCC_OscConfig+0x82c>)
 8002996:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800299a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800299c:	f7fe fbda 	bl	8001154 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a4:	f7fe fbd6 	bl	8001154 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e02c      	b.n	8002a10 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029b6:	4b18      	ldr	r3, [pc, #96]	@ (8002a18 <HAL_RCC_OscConfig+0x82c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0x7b8>
 80029c2:	e024      	b.n	8002a0e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	2b0c      	cmp	r3, #12
 80029c8:	d01f      	beq.n	8002a0a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ca:	4b13      	ldr	r3, [pc, #76]	@ (8002a18 <HAL_RCC_OscConfig+0x82c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a12      	ldr	r2, [pc, #72]	@ (8002a18 <HAL_RCC_OscConfig+0x82c>)
 80029d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d6:	f7fe fbbd 	bl	8001154 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029de:	f7fe fbb9 	bl	8001154 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e00f      	b.n	8002a10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f0:	4b09      	ldr	r3, [pc, #36]	@ (8002a18 <HAL_RCC_OscConfig+0x82c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f0      	bne.n	80029de <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029fc:	4b06      	ldr	r3, [pc, #24]	@ (8002a18 <HAL_RCC_OscConfig+0x82c>)
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	4905      	ldr	r1, [pc, #20]	@ (8002a18 <HAL_RCC_OscConfig+0x82c>)
 8002a02:	4b06      	ldr	r3, [pc, #24]	@ (8002a1c <HAL_RCC_OscConfig+0x830>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	60cb      	str	r3, [r1, #12]
 8002a08:	e001      	b.n	8002a0e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3720      	adds	r7, #32
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	feeefffc 	.word	0xfeeefffc

08002a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e11d      	b.n	8002c74 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a38:	4b90      	ldr	r3, [pc, #576]	@ (8002c7c <HAL_RCC_ClockConfig+0x25c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 030f 	and.w	r3, r3, #15
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d910      	bls.n	8002a68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a46:	4b8d      	ldr	r3, [pc, #564]	@ (8002c7c <HAL_RCC_ClockConfig+0x25c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f023 020f 	bic.w	r2, r3, #15
 8002a4e:	498b      	ldr	r1, [pc, #556]	@ (8002c7c <HAL_RCC_ClockConfig+0x25c>)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a56:	4b89      	ldr	r3, [pc, #548]	@ (8002c7c <HAL_RCC_ClockConfig+0x25c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d001      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e105      	b.n	8002c74 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d010      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	4b81      	ldr	r3, [pc, #516]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d908      	bls.n	8002a96 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a84:	4b7e      	ldr	r3, [pc, #504]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	497b      	ldr	r1, [pc, #492]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d079      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d11e      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aaa:	4b75      	ldr	r3, [pc, #468]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e0dc      	b.n	8002c74 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002aba:	f000 fa09 	bl	8002ed0 <RCC_GetSysClockFreqFromPLLSource>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	4a70      	ldr	r2, [pc, #448]	@ (8002c84 <HAL_RCC_ClockConfig+0x264>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d946      	bls.n	8002b54 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002ac6:	4b6e      	ldr	r3, [pc, #440]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d140      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ad2:	4b6b      	ldr	r3, [pc, #428]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ada:	4a69      	ldr	r2, [pc, #420]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002adc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ae0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ae2:	2380      	movs	r3, #128	@ 0x80
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	e035      	b.n	8002b54 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d107      	bne.n	8002b00 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002af0:	4b63      	ldr	r3, [pc, #396]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d115      	bne.n	8002b28 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0b9      	b.n	8002c74 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d107      	bne.n	8002b18 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b08:	4b5d      	ldr	r3, [pc, #372]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d109      	bne.n	8002b28 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0ad      	b.n	8002c74 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b18:	4b59      	ldr	r3, [pc, #356]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0a5      	b.n	8002c74 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002b28:	f000 f8b4 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	4a55      	ldr	r2, [pc, #340]	@ (8002c84 <HAL_RCC_ClockConfig+0x264>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d90f      	bls.n	8002b54 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002b34:	4b52      	ldr	r3, [pc, #328]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d109      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b40:	4b4f      	ldr	r3, [pc, #316]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b48:	4a4d      	ldr	r2, [pc, #308]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b4e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b50:	2380      	movs	r3, #128	@ 0x80
 8002b52:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b54:	4b4a      	ldr	r3, [pc, #296]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f023 0203 	bic.w	r2, r3, #3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	4947      	ldr	r1, [pc, #284]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b66:	f7fe faf5 	bl	8001154 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6c:	e00a      	b.n	8002b84 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b6e:	f7fe faf1 	bl	8001154 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e077      	b.n	8002c74 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b84:	4b3e      	ldr	r3, [pc, #248]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 020c 	and.w	r2, r3, #12
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d1eb      	bne.n	8002b6e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2b80      	cmp	r3, #128	@ 0x80
 8002b9a:	d105      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b9c:	4b38      	ldr	r3, [pc, #224]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	4a37      	ldr	r2, [pc, #220]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002ba2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ba6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d010      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	4b31      	ldr	r3, [pc, #196]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d208      	bcs.n	8002bd6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc4:	4b2e      	ldr	r3, [pc, #184]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	492b      	ldr	r1, [pc, #172]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bd6:	4b29      	ldr	r3, [pc, #164]	@ (8002c7c <HAL_RCC_ClockConfig+0x25c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d210      	bcs.n	8002c06 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be4:	4b25      	ldr	r3, [pc, #148]	@ (8002c7c <HAL_RCC_ClockConfig+0x25c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f023 020f 	bic.w	r2, r3, #15
 8002bec:	4923      	ldr	r1, [pc, #140]	@ (8002c7c <HAL_RCC_ClockConfig+0x25c>)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf4:	4b21      	ldr	r3, [pc, #132]	@ (8002c7c <HAL_RCC_ClockConfig+0x25c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 030f 	and.w	r3, r3, #15
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d001      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e036      	b.n	8002c74 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d008      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c12:	4b1b      	ldr	r3, [pc, #108]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	4918      	ldr	r1, [pc, #96]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0308 	and.w	r3, r3, #8
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d009      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c30:	4b13      	ldr	r3, [pc, #76]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	4910      	ldr	r1, [pc, #64]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c44:	f000 f826 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c80 <HAL_RCC_ClockConfig+0x260>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	091b      	lsrs	r3, r3, #4
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	490c      	ldr	r1, [pc, #48]	@ (8002c88 <HAL_RCC_ClockConfig+0x268>)
 8002c56:	5ccb      	ldrb	r3, [r1, r3]
 8002c58:	f003 031f 	and.w	r3, r3, #31
 8002c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c60:	4a0a      	ldr	r2, [pc, #40]	@ (8002c8c <HAL_RCC_ClockConfig+0x26c>)
 8002c62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c64:	4b0a      	ldr	r3, [pc, #40]	@ (8002c90 <HAL_RCC_ClockConfig+0x270>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fe fa23 	bl	80010b4 <HAL_InitTick>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	73fb      	strb	r3, [r7, #15]

  return status;
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40022000 	.word	0x40022000
 8002c80:	40021000 	.word	0x40021000
 8002c84:	04c4b400 	.word	0x04c4b400
 8002c88:	080065e8 	.word	0x080065e8
 8002c8c:	20040004 	.word	0x20040004
 8002c90:	20040008 	.word	0x20040008

08002c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b089      	sub	sp, #36	@ 0x24
 8002c98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ca2:	4b3e      	ldr	r3, [pc, #248]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cac:	4b3b      	ldr	r3, [pc, #236]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f003 0303 	and.w	r3, r3, #3
 8002cb4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x34>
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	2b0c      	cmp	r3, #12
 8002cc0:	d121      	bne.n	8002d06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d11e      	bne.n	8002d06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002cc8:	4b34      	ldr	r3, [pc, #208]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d107      	bne.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cd4:	4b31      	ldr	r3, [pc, #196]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cda:	0a1b      	lsrs	r3, r3, #8
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	61fb      	str	r3, [r7, #28]
 8002ce2:	e005      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ce4:	4b2d      	ldr	r3, [pc, #180]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002cf0:	4a2b      	ldr	r2, [pc, #172]	@ (8002da0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10d      	bne.n	8002d1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d04:	e00a      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d102      	bne.n	8002d12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d0c:	4b25      	ldr	r3, [pc, #148]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d0e:	61bb      	str	r3, [r7, #24]
 8002d10:	e004      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d101      	bne.n	8002d1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d18:	4b23      	ldr	r3, [pc, #140]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	2b0c      	cmp	r3, #12
 8002d20:	d134      	bne.n	8002d8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d22:	4b1e      	ldr	r3, [pc, #120]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d003      	beq.n	8002d3a <HAL_RCC_GetSysClockFreq+0xa6>
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d003      	beq.n	8002d40 <HAL_RCC_GetSysClockFreq+0xac>
 8002d38:	e005      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d3c:	617b      	str	r3, [r7, #20]
      break;
 8002d3e:	e005      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d40:	4b19      	ldr	r3, [pc, #100]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d42:	617b      	str	r3, [r7, #20]
      break;
 8002d44:	e002      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	617b      	str	r3, [r7, #20]
      break;
 8002d4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d4c:	4b13      	ldr	r3, [pc, #76]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	091b      	lsrs	r3, r3, #4
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	3301      	adds	r3, #1
 8002d58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d5a:	4b10      	ldr	r3, [pc, #64]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	0a1b      	lsrs	r3, r3, #8
 8002d60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	fb03 f202 	mul.w	r2, r3, r2
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d72:	4b0a      	ldr	r3, [pc, #40]	@ (8002d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	0e5b      	lsrs	r3, r3, #25
 8002d78:	f003 0303 	and.w	r3, r3, #3
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d8c:	69bb      	ldr	r3, [r7, #24]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3724      	adds	r7, #36	@ 0x24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	08006600 	.word	0x08006600
 8002da4:	00f42400 	.word	0x00f42400
 8002da8:	007a1200 	.word	0x007a1200

08002dac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db0:	4b03      	ldr	r3, [pc, #12]	@ (8002dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002db2:	681b      	ldr	r3, [r3, #0]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	20040004 	.word	0x20040004

08002dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002dc8:	f7ff fff0 	bl	8002dac <HAL_RCC_GetHCLKFreq>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	4b06      	ldr	r3, [pc, #24]	@ (8002de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	0a1b      	lsrs	r3, r3, #8
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	4904      	ldr	r1, [pc, #16]	@ (8002dec <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dda:	5ccb      	ldrb	r3, [r1, r3]
 8002ddc:	f003 031f 	and.w	r3, r3, #31
 8002de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40021000 	.word	0x40021000
 8002dec:	080065f8 	.word	0x080065f8

08002df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002df4:	f7ff ffda 	bl	8002dac <HAL_RCC_GetHCLKFreq>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	4b06      	ldr	r3, [pc, #24]	@ (8002e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	0adb      	lsrs	r3, r3, #11
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	4904      	ldr	r1, [pc, #16]	@ (8002e18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e06:	5ccb      	ldrb	r3, [r1, r3]
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40021000 	.word	0x40021000
 8002e18:	080065f8 	.word	0x080065f8

08002e1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e24:	2300      	movs	r3, #0
 8002e26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e28:	4b27      	ldr	r3, [pc, #156]	@ (8002ec8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e34:	f7ff f8f6 	bl	8002024 <HAL_PWREx_GetVoltageRange>
 8002e38:	6178      	str	r0, [r7, #20]
 8002e3a:	e014      	b.n	8002e66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e3c:	4b22      	ldr	r3, [pc, #136]	@ (8002ec8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e40:	4a21      	ldr	r2, [pc, #132]	@ (8002ec8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e46:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e48:	4b1f      	ldr	r3, [pc, #124]	@ (8002ec8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e54:	f7ff f8e6 	bl	8002024 <HAL_PWREx_GetVoltageRange>
 8002e58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ec8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e64:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e6c:	d10b      	bne.n	8002e86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b80      	cmp	r3, #128	@ 0x80
 8002e72:	d913      	bls.n	8002e9c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e78:	d902      	bls.n	8002e80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	e00d      	b.n	8002e9c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e80:	2301      	movs	r3, #1
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	e00a      	b.n	8002e9c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e8a:	d902      	bls.n	8002e92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	613b      	str	r3, [r7, #16]
 8002e90:	e004      	b.n	8002e9c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b70      	cmp	r3, #112	@ 0x70
 8002e96:	d101      	bne.n	8002e9c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e98:	2301      	movs	r3, #1
 8002e9a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ecc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f023 020f 	bic.w	r2, r3, #15
 8002ea4:	4909      	ldr	r1, [pc, #36]	@ (8002ecc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002eac:	4b07      	ldr	r3, [pc, #28]	@ (8002ecc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d001      	beq.n	8002ebe <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	40022000 	.word	0x40022000

08002ed0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8002f8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d00b      	beq.n	8002efe <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d825      	bhi.n	8002f38 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d008      	beq.n	8002f04 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d11f      	bne.n	8002f38 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002ef8:	4b25      	ldr	r3, [pc, #148]	@ (8002f90 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002efa:	613b      	str	r3, [r7, #16]
    break;
 8002efc:	e01f      	b.n	8002f3e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002efe:	4b25      	ldr	r3, [pc, #148]	@ (8002f94 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002f00:	613b      	str	r3, [r7, #16]
    break;
 8002f02:	e01c      	b.n	8002f3e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f04:	4b21      	ldr	r3, [pc, #132]	@ (8002f8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0308 	and.w	r3, r3, #8
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d107      	bne.n	8002f20 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f10:	4b1e      	ldr	r3, [pc, #120]	@ (8002f8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f16:	0a1b      	lsrs	r3, r3, #8
 8002f18:	f003 030f 	and.w	r3, r3, #15
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	e005      	b.n	8002f2c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f20:	4b1a      	ldr	r3, [pc, #104]	@ (8002f8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	091b      	lsrs	r3, r3, #4
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002f2c:	4a1a      	ldr	r2, [pc, #104]	@ (8002f98 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f34:	613b      	str	r3, [r7, #16]
    break;
 8002f36:	e002      	b.n	8002f3e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	613b      	str	r3, [r7, #16]
    break;
 8002f3c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f3e:	4b13      	ldr	r3, [pc, #76]	@ (8002f8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	091b      	lsrs	r3, r3, #4
 8002f44:	f003 030f 	and.w	r3, r3, #15
 8002f48:	3301      	adds	r3, #1
 8002f4a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	0a1b      	lsrs	r3, r3, #8
 8002f52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	fb03 f202 	mul.w	r2, r3, r2
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f62:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f64:	4b09      	ldr	r3, [pc, #36]	@ (8002f8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	0e5b      	lsrs	r3, r3, #25
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	3301      	adds	r3, #1
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002f7e:	683b      	ldr	r3, [r7, #0]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	371c      	adds	r7, #28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	00f42400 	.word	0x00f42400
 8002f94:	007a1200 	.word	0x007a1200
 8002f98:	08006600 	.word	0x08006600

08002f9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fa8:	2300      	movs	r3, #0
 8002faa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d040      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fbc:	2b80      	cmp	r3, #128	@ 0x80
 8002fbe:	d02a      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002fc0:	2b80      	cmp	r3, #128	@ 0x80
 8002fc2:	d825      	bhi.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002fc4:	2b60      	cmp	r3, #96	@ 0x60
 8002fc6:	d026      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002fc8:	2b60      	cmp	r3, #96	@ 0x60
 8002fca:	d821      	bhi.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002fcc:	2b40      	cmp	r3, #64	@ 0x40
 8002fce:	d006      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002fd0:	2b40      	cmp	r3, #64	@ 0x40
 8002fd2:	d81d      	bhi.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d009      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d010      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002fdc:	e018      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fde:	4b89      	ldr	r3, [pc, #548]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	4a88      	ldr	r2, [pc, #544]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fe8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fea:	e015      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3304      	adds	r3, #4
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fb02 	bl	80035fc <RCCEx_PLLSAI1_Config>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ffc:	e00c      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3320      	adds	r3, #32
 8003002:	2100      	movs	r1, #0
 8003004:	4618      	mov	r0, r3
 8003006:	f000 fbed 	bl	80037e4 <RCCEx_PLLSAI2_Config>
 800300a:	4603      	mov	r3, r0
 800300c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800300e:	e003      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	74fb      	strb	r3, [r7, #19]
      break;
 8003014:	e000      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003016:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003018:	7cfb      	ldrb	r3, [r7, #19]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10b      	bne.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800301e:	4b79      	ldr	r3, [pc, #484]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003020:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003024:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800302c:	4975      	ldr	r1, [pc, #468]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800302e:	4313      	orrs	r3, r2
 8003030:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003034:	e001      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003036:	7cfb      	ldrb	r3, [r7, #19]
 8003038:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d047      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800304a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800304e:	d030      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003054:	d82a      	bhi.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003056:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800305a:	d02a      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800305c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003060:	d824      	bhi.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003062:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003066:	d008      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800306c:	d81e      	bhi.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003072:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003076:	d010      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003078:	e018      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800307a:	4b62      	ldr	r3, [pc, #392]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	4a61      	ldr	r2, [pc, #388]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003084:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003086:	e015      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3304      	adds	r3, #4
 800308c:	2100      	movs	r1, #0
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fab4 	bl	80035fc <RCCEx_PLLSAI1_Config>
 8003094:	4603      	mov	r3, r0
 8003096:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003098:	e00c      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3320      	adds	r3, #32
 800309e:	2100      	movs	r1, #0
 80030a0:	4618      	mov	r0, r3
 80030a2:	f000 fb9f 	bl	80037e4 <RCCEx_PLLSAI2_Config>
 80030a6:	4603      	mov	r3, r0
 80030a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030aa:	e003      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	74fb      	strb	r3, [r7, #19]
      break;
 80030b0:	e000      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80030b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030b4:	7cfb      	ldrb	r3, [r7, #19]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10b      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030ba:	4b52      	ldr	r3, [pc, #328]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c8:	494e      	ldr	r1, [pc, #312]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80030d0:	e001      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d2:	7cfb      	ldrb	r3, [r7, #19]
 80030d4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 809f 	beq.w	8003222 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e4:	2300      	movs	r3, #0
 80030e6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030e8:	4b46      	ldr	r3, [pc, #280]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80030f4:	2301      	movs	r3, #1
 80030f6:	e000      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80030f8:	2300      	movs	r3, #0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00d      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030fe:	4b41      	ldr	r3, [pc, #260]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003102:	4a40      	ldr	r2, [pc, #256]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003104:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003108:	6593      	str	r3, [r2, #88]	@ 0x58
 800310a:	4b3e      	ldr	r3, [pc, #248]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800310c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800310e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003116:	2301      	movs	r3, #1
 8003118:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800311a:	4b3b      	ldr	r3, [pc, #236]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a3a      	ldr	r2, [pc, #232]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003120:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003124:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003126:	f7fe f815 	bl	8001154 <HAL_GetTick>
 800312a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800312c:	e009      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800312e:	f7fe f811 	bl	8001154 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d902      	bls.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	74fb      	strb	r3, [r7, #19]
        break;
 8003140:	e005      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003142:	4b31      	ldr	r3, [pc, #196]	@ (8003208 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0ef      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800314e:	7cfb      	ldrb	r3, [r7, #19]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d15b      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003154:	4b2b      	ldr	r3, [pc, #172]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800315e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d01f      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	429a      	cmp	r2, r3
 8003170:	d019      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003172:	4b24      	ldr	r3, [pc, #144]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003178:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800317c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800317e:	4b21      	ldr	r3, [pc, #132]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003184:	4a1f      	ldr	r2, [pc, #124]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003186:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800318a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800318e:	4b1d      	ldr	r3, [pc, #116]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003194:	4a1b      	ldr	r2, [pc, #108]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003196:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800319a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800319e:	4a19      	ldr	r2, [pc, #100]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d016      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7fd ffd0 	bl	8001154 <HAL_GetTick>
 80031b4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031b6:	e00b      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b8:	f7fd ffcc 	bl	8001154 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d902      	bls.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	74fb      	strb	r3, [r7, #19]
            break;
 80031ce:	e006      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0ec      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80031de:	7cfb      	ldrb	r3, [r7, #19]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10c      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031e4:	4b07      	ldr	r3, [pc, #28]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f4:	4903      	ldr	r1, [pc, #12]	@ (8003204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80031fc:	e008      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031fe:	7cfb      	ldrb	r3, [r7, #19]
 8003200:	74bb      	strb	r3, [r7, #18]
 8003202:	e005      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003204:	40021000 	.word	0x40021000
 8003208:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800320c:	7cfb      	ldrb	r3, [r7, #19]
 800320e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003210:	7c7b      	ldrb	r3, [r7, #17]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d105      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003216:	4ba0      	ldr	r3, [pc, #640]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321a:	4a9f      	ldr	r2, [pc, #636]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800321c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003220:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800322e:	4b9a      	ldr	r3, [pc, #616]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003234:	f023 0203 	bic.w	r2, r3, #3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800323c:	4996      	ldr	r1, [pc, #600]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00a      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003250:	4b91      	ldr	r3, [pc, #580]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003256:	f023 020c 	bic.w	r2, r3, #12
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	498e      	ldr	r1, [pc, #568]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003272:	4b89      	ldr	r3, [pc, #548]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003278:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003280:	4985      	ldr	r1, [pc, #532]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00a      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003294:	4b80      	ldr	r3, [pc, #512]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800329a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032a2:	497d      	ldr	r1, [pc, #500]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0310 	and.w	r3, r3, #16
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032b6:	4b78      	ldr	r3, [pc, #480]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c4:	4974      	ldr	r1, [pc, #464]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0320 	and.w	r3, r3, #32
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032d8:	4b6f      	ldr	r3, [pc, #444]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032e6:	496c      	ldr	r1, [pc, #432]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032fa:	4b67      	ldr	r3, [pc, #412]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003300:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003308:	4963      	ldr	r1, [pc, #396]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800331c:	4b5e      	ldr	r3, [pc, #376]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800331e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003322:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800332a:	495b      	ldr	r1, [pc, #364]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800333e:	4b56      	ldr	r3, [pc, #344]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003344:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800334c:	4952      	ldr	r1, [pc, #328]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003360:	4b4d      	ldr	r3, [pc, #308]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003366:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800336e:	494a      	ldr	r1, [pc, #296]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003382:	4b45      	ldr	r3, [pc, #276]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003388:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003390:	4941      	ldr	r1, [pc, #260]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033a4:	4b3c      	ldr	r3, [pc, #240]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033aa:	f023 0203 	bic.w	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b2:	4939      	ldr	r1, [pc, #228]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d028      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033c6:	4b34      	ldr	r3, [pc, #208]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033d4:	4930      	ldr	r1, [pc, #192]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033e4:	d106      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033e6:	4b2c      	ldr	r3, [pc, #176]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	4a2b      	ldr	r2, [pc, #172]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033f0:	60d3      	str	r3, [r2, #12]
 80033f2:	e011      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033fc:	d10c      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3304      	adds	r3, #4
 8003402:	2101      	movs	r1, #1
 8003404:	4618      	mov	r0, r3
 8003406:	f000 f8f9 	bl	80035fc <RCCEx_PLLSAI1_Config>
 800340a:	4603      	mov	r3, r0
 800340c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800340e:	7cfb      	ldrb	r3, [r7, #19]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003414:	7cfb      	ldrb	r3, [r7, #19]
 8003416:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d04d      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003428:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800342c:	d108      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800342e:	4b1a      	ldr	r3, [pc, #104]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003430:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003434:	4a18      	ldr	r2, [pc, #96]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003436:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800343a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800343e:	e012      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003440:	4b15      	ldr	r3, [pc, #84]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003442:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003446:	4a14      	ldr	r2, [pc, #80]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003448:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800344c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003450:	4b11      	ldr	r3, [pc, #68]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003456:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800345e:	490e      	ldr	r1, [pc, #56]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800346a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800346e:	d106      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003470:	4b09      	ldr	r3, [pc, #36]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4a08      	ldr	r2, [pc, #32]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003476:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800347a:	60d3      	str	r3, [r2, #12]
 800347c:	e020      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003482:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003486:	d109      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003488:	4b03      	ldr	r3, [pc, #12]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	4a02      	ldr	r2, [pc, #8]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800348e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003492:	60d3      	str	r3, [r2, #12]
 8003494:	e014      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003496:	bf00      	nop
 8003498:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3304      	adds	r3, #4
 80034aa:	2101      	movs	r1, #1
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 f8a5 	bl	80035fc <RCCEx_PLLSAI1_Config>
 80034b2:	4603      	mov	r3, r0
 80034b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034b6:	7cfb      	ldrb	r3, [r7, #19]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80034bc:	7cfb      	ldrb	r3, [r7, #19]
 80034be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d028      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034cc:	4b4a      	ldr	r3, [pc, #296]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034da:	4947      	ldr	r1, [pc, #284]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034ea:	d106      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034ec:	4b42      	ldr	r3, [pc, #264]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	4a41      	ldr	r2, [pc, #260]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034f6:	60d3      	str	r3, [r2, #12]
 80034f8:	e011      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003502:	d10c      	bne.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3304      	adds	r3, #4
 8003508:	2101      	movs	r1, #1
 800350a:	4618      	mov	r0, r3
 800350c:	f000 f876 	bl	80035fc <RCCEx_PLLSAI1_Config>
 8003510:	4603      	mov	r3, r0
 8003512:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003514:	7cfb      	ldrb	r3, [r7, #19]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800351a:	7cfb      	ldrb	r3, [r7, #19]
 800351c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d01e      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800352a:	4b33      	ldr	r3, [pc, #204]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800352c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003530:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800353a:	492f      	ldr	r1, [pc, #188]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003548:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800354c:	d10c      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3304      	adds	r3, #4
 8003552:	2102      	movs	r1, #2
 8003554:	4618      	mov	r0, r3
 8003556:	f000 f851 	bl	80035fc <RCCEx_PLLSAI1_Config>
 800355a:	4603      	mov	r3, r0
 800355c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800355e:	7cfb      	ldrb	r3, [r7, #19]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003564:	7cfb      	ldrb	r3, [r7, #19]
 8003566:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00b      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003574:	4b20      	ldr	r3, [pc, #128]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003576:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800357a:	f023 0204 	bic.w	r2, r3, #4
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003584:	491c      	ldr	r1, [pc, #112]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00b      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003598:	4b17      	ldr	r3, [pc, #92]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800359a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800359e:	f023 0218 	bic.w	r2, r3, #24
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a8:	4913      	ldr	r1, [pc, #76]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d017      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80035bc:	4b0e      	ldr	r3, [pc, #56]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80035c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035cc:	490a      	ldr	r1, [pc, #40]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035de:	d105      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035e0:	4b05      	ldr	r3, [pc, #20]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	4a04      	ldr	r2, [pc, #16]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40021000 	.word	0x40021000

080035fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800360a:	4b72      	ldr	r3, [pc, #456]	@ (80037d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f003 0303 	and.w	r3, r3, #3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00e      	beq.n	8003634 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003616:	4b6f      	ldr	r3, [pc, #444]	@ (80037d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f003 0203 	and.w	r2, r3, #3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d103      	bne.n	800362e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
       ||
 800362a:	2b00      	cmp	r3, #0
 800362c:	d142      	bne.n	80036b4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	73fb      	strb	r3, [r7, #15]
 8003632:	e03f      	b.n	80036b4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b03      	cmp	r3, #3
 800363a:	d018      	beq.n	800366e <RCCEx_PLLSAI1_Config+0x72>
 800363c:	2b03      	cmp	r3, #3
 800363e:	d825      	bhi.n	800368c <RCCEx_PLLSAI1_Config+0x90>
 8003640:	2b01      	cmp	r3, #1
 8003642:	d002      	beq.n	800364a <RCCEx_PLLSAI1_Config+0x4e>
 8003644:	2b02      	cmp	r3, #2
 8003646:	d009      	beq.n	800365c <RCCEx_PLLSAI1_Config+0x60>
 8003648:	e020      	b.n	800368c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800364a:	4b62      	ldr	r3, [pc, #392]	@ (80037d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d11d      	bne.n	8003692 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800365a:	e01a      	b.n	8003692 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800365c:	4b5d      	ldr	r3, [pc, #372]	@ (80037d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003664:	2b00      	cmp	r3, #0
 8003666:	d116      	bne.n	8003696 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800366c:	e013      	b.n	8003696 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800366e:	4b59      	ldr	r3, [pc, #356]	@ (80037d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10f      	bne.n	800369a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800367a:	4b56      	ldr	r3, [pc, #344]	@ (80037d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d109      	bne.n	800369a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800368a:	e006      	b.n	800369a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	73fb      	strb	r3, [r7, #15]
      break;
 8003690:	e004      	b.n	800369c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003692:	bf00      	nop
 8003694:	e002      	b.n	800369c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003696:	bf00      	nop
 8003698:	e000      	b.n	800369c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800369a:	bf00      	nop
    }

    if(status == HAL_OK)
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d108      	bne.n	80036b4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80036a2:	4b4c      	ldr	r3, [pc, #304]	@ (80037d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f023 0203 	bic.w	r2, r3, #3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4949      	ldr	r1, [pc, #292]	@ (80037d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f040 8086 	bne.w	80037c8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80036bc:	4b45      	ldr	r3, [pc, #276]	@ (80037d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a44      	ldr	r2, [pc, #272]	@ (80037d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80036c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c8:	f7fd fd44 	bl	8001154 <HAL_GetTick>
 80036cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036ce:	e009      	b.n	80036e4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036d0:	f7fd fd40 	bl	8001154 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d902      	bls.n	80036e4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	73fb      	strb	r3, [r7, #15]
        break;
 80036e2:	e005      	b.n	80036f0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036e4:	4b3b      	ldr	r3, [pc, #236]	@ (80037d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1ef      	bne.n	80036d0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d168      	bne.n	80037c8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d113      	bne.n	8003724 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036fc:	4b35      	ldr	r3, [pc, #212]	@ (80037d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036fe:	691a      	ldr	r2, [r3, #16]
 8003700:	4b35      	ldr	r3, [pc, #212]	@ (80037d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003702:	4013      	ands	r3, r2
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6892      	ldr	r2, [r2, #8]
 8003708:	0211      	lsls	r1, r2, #8
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	68d2      	ldr	r2, [r2, #12]
 800370e:	06d2      	lsls	r2, r2, #27
 8003710:	4311      	orrs	r1, r2
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6852      	ldr	r2, [r2, #4]
 8003716:	3a01      	subs	r2, #1
 8003718:	0112      	lsls	r2, r2, #4
 800371a:	430a      	orrs	r2, r1
 800371c:	492d      	ldr	r1, [pc, #180]	@ (80037d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800371e:	4313      	orrs	r3, r2
 8003720:	610b      	str	r3, [r1, #16]
 8003722:	e02d      	b.n	8003780 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d115      	bne.n	8003756 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800372a:	4b2a      	ldr	r3, [pc, #168]	@ (80037d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	4b2b      	ldr	r3, [pc, #172]	@ (80037dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003730:	4013      	ands	r3, r2
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6892      	ldr	r2, [r2, #8]
 8003736:	0211      	lsls	r1, r2, #8
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6912      	ldr	r2, [r2, #16]
 800373c:	0852      	lsrs	r2, r2, #1
 800373e:	3a01      	subs	r2, #1
 8003740:	0552      	lsls	r2, r2, #21
 8003742:	4311      	orrs	r1, r2
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6852      	ldr	r2, [r2, #4]
 8003748:	3a01      	subs	r2, #1
 800374a:	0112      	lsls	r2, r2, #4
 800374c:	430a      	orrs	r2, r1
 800374e:	4921      	ldr	r1, [pc, #132]	@ (80037d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003750:	4313      	orrs	r3, r2
 8003752:	610b      	str	r3, [r1, #16]
 8003754:	e014      	b.n	8003780 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003756:	4b1f      	ldr	r3, [pc, #124]	@ (80037d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003758:	691a      	ldr	r2, [r3, #16]
 800375a:	4b21      	ldr	r3, [pc, #132]	@ (80037e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800375c:	4013      	ands	r3, r2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6892      	ldr	r2, [r2, #8]
 8003762:	0211      	lsls	r1, r2, #8
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6952      	ldr	r2, [r2, #20]
 8003768:	0852      	lsrs	r2, r2, #1
 800376a:	3a01      	subs	r2, #1
 800376c:	0652      	lsls	r2, r2, #25
 800376e:	4311      	orrs	r1, r2
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6852      	ldr	r2, [r2, #4]
 8003774:	3a01      	subs	r2, #1
 8003776:	0112      	lsls	r2, r2, #4
 8003778:	430a      	orrs	r2, r1
 800377a:	4916      	ldr	r1, [pc, #88]	@ (80037d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800377c:	4313      	orrs	r3, r2
 800377e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003780:	4b14      	ldr	r3, [pc, #80]	@ (80037d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a13      	ldr	r2, [pc, #76]	@ (80037d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003786:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800378a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378c:	f7fd fce2 	bl	8001154 <HAL_GetTick>
 8003790:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003792:	e009      	b.n	80037a8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003794:	f7fd fcde 	bl	8001154 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d902      	bls.n	80037a8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	73fb      	strb	r3, [r7, #15]
          break;
 80037a6:	e005      	b.n	80037b4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037a8:	4b0a      	ldr	r3, [pc, #40]	@ (80037d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0ef      	beq.n	8003794 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d106      	bne.n	80037c8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80037ba:	4b06      	ldr	r3, [pc, #24]	@ (80037d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037bc:	691a      	ldr	r2, [r3, #16]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	4904      	ldr	r1, [pc, #16]	@ (80037d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	40021000 	.word	0x40021000
 80037d8:	07ff800f 	.word	0x07ff800f
 80037dc:	ff9f800f 	.word	0xff9f800f
 80037e0:	f9ff800f 	.word	0xf9ff800f

080037e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037f2:	4b72      	ldr	r3, [pc, #456]	@ (80039bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00e      	beq.n	800381c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037fe:	4b6f      	ldr	r3, [pc, #444]	@ (80039bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f003 0203 	and.w	r2, r3, #3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d103      	bne.n	8003816 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
       ||
 8003812:	2b00      	cmp	r3, #0
 8003814:	d142      	bne.n	800389c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	73fb      	strb	r3, [r7, #15]
 800381a:	e03f      	b.n	800389c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b03      	cmp	r3, #3
 8003822:	d018      	beq.n	8003856 <RCCEx_PLLSAI2_Config+0x72>
 8003824:	2b03      	cmp	r3, #3
 8003826:	d825      	bhi.n	8003874 <RCCEx_PLLSAI2_Config+0x90>
 8003828:	2b01      	cmp	r3, #1
 800382a:	d002      	beq.n	8003832 <RCCEx_PLLSAI2_Config+0x4e>
 800382c:	2b02      	cmp	r3, #2
 800382e:	d009      	beq.n	8003844 <RCCEx_PLLSAI2_Config+0x60>
 8003830:	e020      	b.n	8003874 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003832:	4b62      	ldr	r3, [pc, #392]	@ (80039bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d11d      	bne.n	800387a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003842:	e01a      	b.n	800387a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003844:	4b5d      	ldr	r3, [pc, #372]	@ (80039bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800384c:	2b00      	cmp	r3, #0
 800384e:	d116      	bne.n	800387e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003854:	e013      	b.n	800387e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003856:	4b59      	ldr	r3, [pc, #356]	@ (80039bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10f      	bne.n	8003882 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003862:	4b56      	ldr	r3, [pc, #344]	@ (80039bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d109      	bne.n	8003882 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003872:	e006      	b.n	8003882 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	73fb      	strb	r3, [r7, #15]
      break;
 8003878:	e004      	b.n	8003884 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800387a:	bf00      	nop
 800387c:	e002      	b.n	8003884 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800387e:	bf00      	nop
 8003880:	e000      	b.n	8003884 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003882:	bf00      	nop
    }

    if(status == HAL_OK)
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d108      	bne.n	800389c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800388a:	4b4c      	ldr	r3, [pc, #304]	@ (80039bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f023 0203 	bic.w	r2, r3, #3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4949      	ldr	r1, [pc, #292]	@ (80039bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003898:	4313      	orrs	r3, r2
 800389a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800389c:	7bfb      	ldrb	r3, [r7, #15]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f040 8086 	bne.w	80039b0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80038a4:	4b45      	ldr	r3, [pc, #276]	@ (80039bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a44      	ldr	r2, [pc, #272]	@ (80039bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80038aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b0:	f7fd fc50 	bl	8001154 <HAL_GetTick>
 80038b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038b6:	e009      	b.n	80038cc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038b8:	f7fd fc4c 	bl	8001154 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d902      	bls.n	80038cc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	73fb      	strb	r3, [r7, #15]
        break;
 80038ca:	e005      	b.n	80038d8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038cc:	4b3b      	ldr	r3, [pc, #236]	@ (80039bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1ef      	bne.n	80038b8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d168      	bne.n	80039b0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d113      	bne.n	800390c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038e4:	4b35      	ldr	r3, [pc, #212]	@ (80039bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80038e6:	695a      	ldr	r2, [r3, #20]
 80038e8:	4b35      	ldr	r3, [pc, #212]	@ (80039c0 <RCCEx_PLLSAI2_Config+0x1dc>)
 80038ea:	4013      	ands	r3, r2
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6892      	ldr	r2, [r2, #8]
 80038f0:	0211      	lsls	r1, r2, #8
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	68d2      	ldr	r2, [r2, #12]
 80038f6:	06d2      	lsls	r2, r2, #27
 80038f8:	4311      	orrs	r1, r2
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6852      	ldr	r2, [r2, #4]
 80038fe:	3a01      	subs	r2, #1
 8003900:	0112      	lsls	r2, r2, #4
 8003902:	430a      	orrs	r2, r1
 8003904:	492d      	ldr	r1, [pc, #180]	@ (80039bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003906:	4313      	orrs	r3, r2
 8003908:	614b      	str	r3, [r1, #20]
 800390a:	e02d      	b.n	8003968 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d115      	bne.n	800393e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003912:	4b2a      	ldr	r3, [pc, #168]	@ (80039bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003914:	695a      	ldr	r2, [r3, #20]
 8003916:	4b2b      	ldr	r3, [pc, #172]	@ (80039c4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003918:	4013      	ands	r3, r2
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6892      	ldr	r2, [r2, #8]
 800391e:	0211      	lsls	r1, r2, #8
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6912      	ldr	r2, [r2, #16]
 8003924:	0852      	lsrs	r2, r2, #1
 8003926:	3a01      	subs	r2, #1
 8003928:	0552      	lsls	r2, r2, #21
 800392a:	4311      	orrs	r1, r2
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6852      	ldr	r2, [r2, #4]
 8003930:	3a01      	subs	r2, #1
 8003932:	0112      	lsls	r2, r2, #4
 8003934:	430a      	orrs	r2, r1
 8003936:	4921      	ldr	r1, [pc, #132]	@ (80039bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003938:	4313      	orrs	r3, r2
 800393a:	614b      	str	r3, [r1, #20]
 800393c:	e014      	b.n	8003968 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800393e:	4b1f      	ldr	r3, [pc, #124]	@ (80039bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003940:	695a      	ldr	r2, [r3, #20]
 8003942:	4b21      	ldr	r3, [pc, #132]	@ (80039c8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003944:	4013      	ands	r3, r2
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6892      	ldr	r2, [r2, #8]
 800394a:	0211      	lsls	r1, r2, #8
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6952      	ldr	r2, [r2, #20]
 8003950:	0852      	lsrs	r2, r2, #1
 8003952:	3a01      	subs	r2, #1
 8003954:	0652      	lsls	r2, r2, #25
 8003956:	4311      	orrs	r1, r2
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6852      	ldr	r2, [r2, #4]
 800395c:	3a01      	subs	r2, #1
 800395e:	0112      	lsls	r2, r2, #4
 8003960:	430a      	orrs	r2, r1
 8003962:	4916      	ldr	r1, [pc, #88]	@ (80039bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003964:	4313      	orrs	r3, r2
 8003966:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003968:	4b14      	ldr	r3, [pc, #80]	@ (80039bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a13      	ldr	r2, [pc, #76]	@ (80039bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800396e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003972:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003974:	f7fd fbee 	bl	8001154 <HAL_GetTick>
 8003978:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800397a:	e009      	b.n	8003990 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800397c:	f7fd fbea 	bl	8001154 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d902      	bls.n	8003990 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	73fb      	strb	r3, [r7, #15]
          break;
 800398e:	e005      	b.n	800399c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003990:	4b0a      	ldr	r3, [pc, #40]	@ (80039bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0ef      	beq.n	800397c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800399c:	7bfb      	ldrb	r3, [r7, #15]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80039a2:	4b06      	ldr	r3, [pc, #24]	@ (80039bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80039a4:	695a      	ldr	r2, [r3, #20]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	4904      	ldr	r1, [pc, #16]	@ (80039bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40021000 	.word	0x40021000
 80039c0:	07ff800f 	.word	0x07ff800f
 80039c4:	ff9f800f 	.word	0xff9f800f
 80039c8:	f9ff800f 	.word	0xf9ff800f

080039cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e042      	b.n	8003a64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d106      	bne.n	80039f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7fd f8f1 	bl	8000bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2224      	movs	r2, #36	@ 0x24
 80039fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0201 	bic.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f001 f828 	bl	8004a6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 fd29 	bl	8004474 <UART_SetConfig>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e01b      	b.n	8003a64 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0201 	orr.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f001 f8a7 	bl	8004bb0 <UART_CheckIdleState>
 8003a62:	4603      	mov	r3, r0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b08a      	sub	sp, #40	@ 0x28
 8003a70:	af02      	add	r7, sp, #8
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	603b      	str	r3, [r7, #0]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a82:	2b20      	cmp	r3, #32
 8003a84:	d17b      	bne.n	8003b7e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <HAL_UART_Transmit+0x26>
 8003a8c:	88fb      	ldrh	r3, [r7, #6]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e074      	b.n	8003b80 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2221      	movs	r2, #33	@ 0x21
 8003aa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003aa6:	f7fd fb55 	bl	8001154 <HAL_GetTick>
 8003aaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	88fa      	ldrh	r2, [r7, #6]
 8003ab0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	88fa      	ldrh	r2, [r7, #6]
 8003ab8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ac4:	d108      	bne.n	8003ad8 <HAL_UART_Transmit+0x6c>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d104      	bne.n	8003ad8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	61bb      	str	r3, [r7, #24]
 8003ad6:	e003      	b.n	8003ae0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ae0:	e030      	b.n	8003b44 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	2180      	movs	r1, #128	@ 0x80
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f001 f909 	bl	8004d04 <UART_WaitOnFlagUntilTimeout>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e03d      	b.n	8003b80 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10b      	bne.n	8003b22 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	881a      	ldrh	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b16:	b292      	uxth	r2, r2
 8003b18:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	3302      	adds	r3, #2
 8003b1e:	61bb      	str	r3, [r7, #24]
 8003b20:	e007      	b.n	8003b32 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	781a      	ldrb	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1c8      	bne.n	8003ae2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	2200      	movs	r2, #0
 8003b58:	2140      	movs	r1, #64	@ 0x40
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f001 f8d2 	bl	8004d04 <UART_WaitOnFlagUntilTimeout>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d005      	beq.n	8003b72 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e006      	b.n	8003b80 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e000      	b.n	8003b80 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003b7e:	2302      	movs	r3, #2
  }
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3720      	adds	r7, #32
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b091      	sub	sp, #68	@ 0x44
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	4613      	mov	r3, r2
 8003b94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b9c:	2b20      	cmp	r3, #32
 8003b9e:	d178      	bne.n	8003c92 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d002      	beq.n	8003bac <HAL_UART_Transmit_IT+0x24>
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e071      	b.n	8003c94 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	88fa      	ldrh	r2, [r7, #6]
 8003bba:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	88fa      	ldrh	r2, [r7, #6]
 8003bc2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2221      	movs	r2, #33	@ 0x21
 8003bd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

#if defined(USART_CR1_FIFOEN)
    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003be0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003be4:	d12a      	bne.n	8003c3c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bee:	d107      	bne.n	8003c00 <HAL_UART_Transmit_IT+0x78>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d103      	bne.n	8003c00 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4a29      	ldr	r2, [pc, #164]	@ (8003ca0 <HAL_UART_Transmit_IT+0x118>)
 8003bfc:	679a      	str	r2, [r3, #120]	@ 0x78
 8003bfe:	e002      	b.n	8003c06 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4a28      	ldr	r2, [pc, #160]	@ (8003ca4 <HAL_UART_Transmit_IT+0x11c>)
 8003c04:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3308      	adds	r3, #8
 8003c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c10:	e853 3f00 	ldrex	r3, [r3]
 8003c14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3308      	adds	r3, #8
 8003c24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c26:	637a      	str	r2, [r7, #52]	@ 0x34
 8003c28:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1e5      	bne.n	8003c06 <HAL_UART_Transmit_IT+0x7e>
 8003c3a:	e028      	b.n	8003c8e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c44:	d107      	bne.n	8003c56 <HAL_UART_Transmit_IT+0xce>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d103      	bne.n	8003c56 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4a15      	ldr	r2, [pc, #84]	@ (8003ca8 <HAL_UART_Transmit_IT+0x120>)
 8003c52:	679a      	str	r2, [r3, #120]	@ 0x78
 8003c54:	e002      	b.n	8003c5c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4a14      	ldr	r2, [pc, #80]	@ (8003cac <HAL_UART_Transmit_IT+0x124>)
 8003c5a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	e853 3f00 	ldrex	r3, [r3]
 8003c68:	613b      	str	r3, [r7, #16]
   return(result);
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	461a      	mov	r2, r3
 8003c78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c7a:	623b      	str	r3, [r7, #32]
 8003c7c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7e:	69f9      	ldr	r1, [r7, #28]
 8003c80:	6a3a      	ldr	r2, [r7, #32]
 8003c82:	e841 2300 	strex	r3, r2, [r1]
 8003c86:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e6      	bne.n	8003c5c <HAL_UART_Transmit_IT+0xd4>

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	e000      	b.n	8003c94 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003c92:	2302      	movs	r3, #2
  }
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3744      	adds	r7, #68	@ 0x44
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	080052e9 	.word	0x080052e9
 8003ca4:	08005209 	.word	0x08005209
 8003ca8:	08005147 	.word	0x08005147
 8003cac:	0800508f 	.word	0x0800508f

08003cb0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08a      	sub	sp, #40	@ 0x28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d167      	bne.n	8003d98 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d002      	beq.n	8003cd4 <HAL_UART_Transmit_DMA+0x24>
 8003cce:	88fb      	ldrh	r3, [r7, #6]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e060      	b.n	8003d9a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	88fa      	ldrh	r2, [r7, #6]
 8003ce2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	88fa      	ldrh	r2, [r7, #6]
 8003cea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2221      	movs	r2, #33	@ 0x21
 8003cfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d028      	beq.n	8003d58 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d0a:	4a26      	ldr	r2, [pc, #152]	@ (8003da4 <HAL_UART_Transmit_DMA+0xf4>)
 8003d0c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d12:	4a25      	ldr	r2, [pc, #148]	@ (8003da8 <HAL_UART_Transmit_DMA+0xf8>)
 8003d14:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d1a:	4a24      	ldr	r2, [pc, #144]	@ (8003dac <HAL_UART_Transmit_DMA+0xfc>)
 8003d1c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d22:	2200      	movs	r2, #0
 8003d24:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d2e:	4619      	mov	r1, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3328      	adds	r3, #40	@ 0x28
 8003d36:	461a      	mov	r2, r3
 8003d38:	88fb      	ldrh	r3, [r7, #6]
 8003d3a:	f7fd fbf5 	bl	8001528 <HAL_DMA_Start_IT>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d009      	beq.n	8003d58 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2210      	movs	r2, #16
 8003d48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e020      	b.n	8003d9a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2240      	movs	r2, #64	@ 0x40
 8003d5e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	3308      	adds	r3, #8
 8003d66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	e853 3f00 	ldrex	r3, [r3]
 8003d6e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d76:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3308      	adds	r3, #8
 8003d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d80:	623a      	str	r2, [r7, #32]
 8003d82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d84:	69f9      	ldr	r1, [r7, #28]
 8003d86:	6a3a      	ldr	r2, [r7, #32]
 8003d88:	e841 2300 	strex	r3, r2, [r1]
 8003d8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1e5      	bne.n	8003d60 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	e000      	b.n	8003d9a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003d98:	2302      	movs	r3, #2
  }
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3728      	adds	r7, #40	@ 0x28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	08004f2d 	.word	0x08004f2d
 8003da8:	08004fc7 	.word	0x08004fc7
 8003dac:	08004fe3 	.word	0x08004fe3

08003db0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b0ba      	sub	sp, #232	@ 0xe8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003dd6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003dda:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003dde:	4013      	ands	r3, r2
 8003de0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003de4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d11b      	bne.n	8003e24 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d015      	beq.n	8003e24 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dfc:	f003 0320 	and.w	r3, r3, #32
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d105      	bne.n	8003e10 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d009      	beq.n	8003e24 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 8300 	beq.w	800441a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	4798      	blx	r3
      }
      return;
 8003e22:	e2fa      	b.n	800441a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8003e24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 8123 	beq.w	8004074 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003e2e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003e32:	4b8d      	ldr	r3, [pc, #564]	@ (8004068 <HAL_UART_IRQHandler+0x2b8>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d106      	bne.n	8003e48 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003e3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003e3e:	4b8b      	ldr	r3, [pc, #556]	@ (800406c <HAL_UART_IRQHandler+0x2bc>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 8116 	beq.w	8004074 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d011      	beq.n	8003e78 <HAL_UART_IRQHandler+0xc8>
 8003e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00b      	beq.n	8003e78 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2201      	movs	r2, #1
 8003e66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6e:	f043 0201 	orr.w	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d011      	beq.n	8003ea8 <HAL_UART_IRQHandler+0xf8>
 8003e84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00b      	beq.n	8003ea8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2202      	movs	r2, #2
 8003e96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9e:	f043 0204 	orr.w	r2, r3, #4
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d011      	beq.n	8003ed8 <HAL_UART_IRQHandler+0x128>
 8003eb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00b      	beq.n	8003ed8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ece:	f043 0202 	orr.w	r2, r3, #2
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003edc:	f003 0308 	and.w	r3, r3, #8
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d017      	beq.n	8003f14 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ee8:	f003 0320 	and.w	r3, r3, #32
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d105      	bne.n	8003efc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003ef0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003ef4:	4b5c      	ldr	r3, [pc, #368]	@ (8004068 <HAL_UART_IRQHandler+0x2b8>)
 8003ef6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00b      	beq.n	8003f14 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2208      	movs	r2, #8
 8003f02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f0a:	f043 0208 	orr.w	r2, r3, #8
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d012      	beq.n	8003f46 <HAL_UART_IRQHandler+0x196>
 8003f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00c      	beq.n	8003f46 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f3c:	f043 0220 	orr.w	r2, r3, #32
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 8266 	beq.w	800441e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f56:	f003 0320 	and.w	r3, r3, #32
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d013      	beq.n	8003f86 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f62:	f003 0320 	and.w	r3, r3, #32
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d105      	bne.n	8003f76 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d007      	beq.n	8003f86 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f8c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f9a:	2b40      	cmp	r3, #64	@ 0x40
 8003f9c:	d005      	beq.n	8003faa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003f9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fa2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d054      	beq.n	8004054 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 ff58 	bl	8004e60 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fba:	2b40      	cmp	r3, #64	@ 0x40
 8003fbc:	d146      	bne.n	800404c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3308      	adds	r3, #8
 8003fc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003fcc:	e853 3f00 	ldrex	r3, [r3]
 8003fd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003fd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	3308      	adds	r3, #8
 8003fe6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003fea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003fee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ff6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003ffa:	e841 2300 	strex	r3, r2, [r1]
 8003ffe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004002:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1d9      	bne.n	8003fbe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004010:	2b00      	cmp	r3, #0
 8004012:	d017      	beq.n	8004044 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800401a:	4a15      	ldr	r2, [pc, #84]	@ (8004070 <HAL_UART_IRQHandler+0x2c0>)
 800401c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004024:	4618      	mov	r0, r3
 8004026:	f7fd fb56 	bl	80016d6 <HAL_DMA_Abort_IT>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d019      	beq.n	8004064 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800403e:	4610      	mov	r0, r2
 8004040:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004042:	e00f      	b.n	8004064 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 f9ff 	bl	8004448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800404a:	e00b      	b.n	8004064 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f9fb 	bl	8004448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004052:	e007      	b.n	8004064 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f9f7 	bl	8004448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004062:	e1dc      	b.n	800441e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004064:	bf00      	nop
    return;
 8004066:	e1da      	b.n	800441e <HAL_UART_IRQHandler+0x66e>
 8004068:	10000001 	.word	0x10000001
 800406c:	04000120 	.word	0x04000120
 8004070:	08005063 	.word	0x08005063

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004078:	2b01      	cmp	r3, #1
 800407a:	f040 8170 	bne.w	800435e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800407e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004082:	f003 0310 	and.w	r3, r3, #16
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 8169 	beq.w	800435e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800408c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004090:	f003 0310 	and.w	r3, r3, #16
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 8162 	beq.w	800435e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2210      	movs	r2, #16
 80040a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ac:	2b40      	cmp	r3, #64	@ 0x40
 80040ae:	f040 80d8 	bne.w	8004262 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 80af 	beq.w	8004228 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80040d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040d4:	429a      	cmp	r2, r3
 80040d6:	f080 80a7 	bcs.w	8004228 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0320 	and.w	r3, r3, #32
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f040 8087 	bne.w	8004206 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004100:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004104:	e853 3f00 	ldrex	r3, [r3]
 8004108:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800410c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004110:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004114:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	461a      	mov	r2, r3
 800411e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004122:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004126:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800412e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004132:	e841 2300 	strex	r3, r2, [r1]
 8004136:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800413a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1da      	bne.n	80040f8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	3308      	adds	r3, #8
 8004148:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800414c:	e853 3f00 	ldrex	r3, [r3]
 8004150:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004152:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004154:	f023 0301 	bic.w	r3, r3, #1
 8004158:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3308      	adds	r3, #8
 8004162:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004166:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800416a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800416e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004172:	e841 2300 	strex	r3, r2, [r1]
 8004176:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004178:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1e1      	bne.n	8004142 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3308      	adds	r3, #8
 8004184:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004186:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800418e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004190:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004194:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3308      	adds	r3, #8
 800419e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80041a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80041b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e3      	bne.n	800417e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041cc:	e853 3f00 	ldrex	r3, [r3]
 80041d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80041d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041d4:	f023 0310 	bic.w	r3, r3, #16
 80041d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	461a      	mov	r2, r3
 80041e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80041e8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041ee:	e841 2300 	strex	r3, r2, [r1]
 80041f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80041f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1e4      	bne.n	80041c4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004200:	4618      	mov	r0, r3
 8004202:	f7fd fa0c 	bl	800161e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2202      	movs	r2, #2
 800420a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004218:	b29b      	uxth	r3, r3
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	b29b      	uxth	r3, r3
 800421e:	4619      	mov	r1, r3
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f91b 	bl	800445c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004226:	e0fc      	b.n	8004422 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800422e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004232:	429a      	cmp	r2, r3
 8004234:	f040 80f5 	bne.w	8004422 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b20      	cmp	r3, #32
 8004248:	f040 80eb 	bne.w	8004422 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004258:	4619      	mov	r1, r3
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f8fe 	bl	800445c <HAL_UARTEx_RxEventCallback>
      return;
 8004260:	e0df      	b.n	8004422 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800426e:	b29b      	uxth	r3, r3
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800427c:	b29b      	uxth	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 80d1 	beq.w	8004426 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004284:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 80cc 	beq.w	8004426 <HAL_UART_IRQHandler+0x676>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004296:	e853 3f00 	ldrex	r3, [r3]
 800429a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800429c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800429e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80042b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80042b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042b8:	e841 2300 	strex	r3, r2, [r1]
 80042bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e4      	bne.n	800428e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3308      	adds	r3, #8
 80042ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ce:	e853 3f00 	ldrex	r3, [r3]
 80042d2:	623b      	str	r3, [r7, #32]
   return(result);
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042da:	f023 0301 	bic.w	r3, r3, #1
 80042de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3308      	adds	r3, #8
 80042e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80042ec:	633a      	str	r2, [r7, #48]	@ 0x30
 80042ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042f4:	e841 2300 	strex	r3, r2, [r1]
 80042f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e1      	bne.n	80042c4 <HAL_UART_IRQHandler+0x514>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2220      	movs	r2, #32
 8004304:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	e853 3f00 	ldrex	r3, [r3]
 8004320:	60fb      	str	r3, [r7, #12]
   return(result);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f023 0310 	bic.w	r3, r3, #16
 8004328:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	461a      	mov	r2, r3
 8004332:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004336:	61fb      	str	r3, [r7, #28]
 8004338:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433a:	69b9      	ldr	r1, [r7, #24]
 800433c:	69fa      	ldr	r2, [r7, #28]
 800433e:	e841 2300 	strex	r3, r2, [r1]
 8004342:	617b      	str	r3, [r7, #20]
   return(result);
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1e4      	bne.n	8004314 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2202      	movs	r2, #2
 800434e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004350:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004354:	4619      	mov	r1, r3
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f880 	bl	800445c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800435c:	e063      	b.n	8004426 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800435e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004362:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00e      	beq.n	8004388 <HAL_UART_IRQHandler+0x5d8>
 800436a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800436e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d008      	beq.n	8004388 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800437e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f001 f851 	bl	8005428 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004386:	e051      	b.n	800442c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800438c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004390:	2b00      	cmp	r3, #0
 8004392:	d014      	beq.n	80043be <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800439c:	2b00      	cmp	r3, #0
 800439e:	d105      	bne.n	80043ac <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80043a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d008      	beq.n	80043be <HAL_UART_IRQHandler+0x60e>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d03a      	beq.n	800442a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	4798      	blx	r3
    }
    return;
 80043bc:	e035      	b.n	800442a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80043be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d009      	beq.n	80043de <HAL_UART_IRQHandler+0x62e>
 80043ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fffb 	bl	80053d2 <UART_EndTransmit_IT>
    return;
 80043dc:	e026      	b.n	800442c <HAL_UART_IRQHandler+0x67c>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80043de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d009      	beq.n	80043fe <HAL_UART_IRQHandler+0x64e>
 80043ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043ee:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f001 f82a 	bl	8005450 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043fc:	e016      	b.n	800442c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80043fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004402:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d010      	beq.n	800442c <HAL_UART_IRQHandler+0x67c>
 800440a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800440e:	2b00      	cmp	r3, #0
 8004410:	da0c      	bge.n	800442c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f001 f812 	bl	800543c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004418:	e008      	b.n	800442c <HAL_UART_IRQHandler+0x67c>
      return;
 800441a:	bf00      	nop
 800441c:	e006      	b.n	800442c <HAL_UART_IRQHandler+0x67c>
    return;
 800441e:	bf00      	nop
 8004420:	e004      	b.n	800442c <HAL_UART_IRQHandler+0x67c>
      return;
 8004422:	bf00      	nop
 8004424:	e002      	b.n	800442c <HAL_UART_IRQHandler+0x67c>
      return;
 8004426:	bf00      	nop
 8004428:	e000      	b.n	800442c <HAL_UART_IRQHandler+0x67c>
    return;
 800442a:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800442c:	37e8      	adds	r7, #232	@ 0xe8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop

08004434 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	460b      	mov	r3, r1
 8004466:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004478:	b08c      	sub	sp, #48	@ 0x30
 800447a:	af00      	add	r7, sp, #0
 800447c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	431a      	orrs	r2, r3
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	431a      	orrs	r2, r3
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	4313      	orrs	r3, r2
 800449a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	4baa      	ldr	r3, [pc, #680]	@ (800474c <UART_SetConfig+0x2d8>)
 80044a4:	4013      	ands	r3, r2
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044ac:	430b      	orrs	r3, r1
 80044ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a9f      	ldr	r2, [pc, #636]	@ (8004750 <UART_SetConfig+0x2dc>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d004      	beq.n	80044e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044dc:	4313      	orrs	r3, r2
 80044de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80044ea:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	6812      	ldr	r2, [r2, #0]
 80044f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044f4:	430b      	orrs	r3, r1
 80044f6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fe:	f023 010f 	bic.w	r1, r3, #15
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a90      	ldr	r2, [pc, #576]	@ (8004754 <UART_SetConfig+0x2e0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d125      	bne.n	8004564 <UART_SetConfig+0xf0>
 8004518:	4b8f      	ldr	r3, [pc, #572]	@ (8004758 <UART_SetConfig+0x2e4>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	2b03      	cmp	r3, #3
 8004524:	d81a      	bhi.n	800455c <UART_SetConfig+0xe8>
 8004526:	a201      	add	r2, pc, #4	@ (adr r2, 800452c <UART_SetConfig+0xb8>)
 8004528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452c:	0800453d 	.word	0x0800453d
 8004530:	0800454d 	.word	0x0800454d
 8004534:	08004545 	.word	0x08004545
 8004538:	08004555 	.word	0x08004555
 800453c:	2301      	movs	r3, #1
 800453e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004542:	e116      	b.n	8004772 <UART_SetConfig+0x2fe>
 8004544:	2302      	movs	r3, #2
 8004546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800454a:	e112      	b.n	8004772 <UART_SetConfig+0x2fe>
 800454c:	2304      	movs	r3, #4
 800454e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004552:	e10e      	b.n	8004772 <UART_SetConfig+0x2fe>
 8004554:	2308      	movs	r3, #8
 8004556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800455a:	e10a      	b.n	8004772 <UART_SetConfig+0x2fe>
 800455c:	2310      	movs	r3, #16
 800455e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004562:	e106      	b.n	8004772 <UART_SetConfig+0x2fe>
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a7c      	ldr	r2, [pc, #496]	@ (800475c <UART_SetConfig+0x2e8>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d138      	bne.n	80045e0 <UART_SetConfig+0x16c>
 800456e:	4b7a      	ldr	r3, [pc, #488]	@ (8004758 <UART_SetConfig+0x2e4>)
 8004570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004574:	f003 030c 	and.w	r3, r3, #12
 8004578:	2b0c      	cmp	r3, #12
 800457a:	d82d      	bhi.n	80045d8 <UART_SetConfig+0x164>
 800457c:	a201      	add	r2, pc, #4	@ (adr r2, 8004584 <UART_SetConfig+0x110>)
 800457e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004582:	bf00      	nop
 8004584:	080045b9 	.word	0x080045b9
 8004588:	080045d9 	.word	0x080045d9
 800458c:	080045d9 	.word	0x080045d9
 8004590:	080045d9 	.word	0x080045d9
 8004594:	080045c9 	.word	0x080045c9
 8004598:	080045d9 	.word	0x080045d9
 800459c:	080045d9 	.word	0x080045d9
 80045a0:	080045d9 	.word	0x080045d9
 80045a4:	080045c1 	.word	0x080045c1
 80045a8:	080045d9 	.word	0x080045d9
 80045ac:	080045d9 	.word	0x080045d9
 80045b0:	080045d9 	.word	0x080045d9
 80045b4:	080045d1 	.word	0x080045d1
 80045b8:	2300      	movs	r3, #0
 80045ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045be:	e0d8      	b.n	8004772 <UART_SetConfig+0x2fe>
 80045c0:	2302      	movs	r3, #2
 80045c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045c6:	e0d4      	b.n	8004772 <UART_SetConfig+0x2fe>
 80045c8:	2304      	movs	r3, #4
 80045ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045ce:	e0d0      	b.n	8004772 <UART_SetConfig+0x2fe>
 80045d0:	2308      	movs	r3, #8
 80045d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045d6:	e0cc      	b.n	8004772 <UART_SetConfig+0x2fe>
 80045d8:	2310      	movs	r3, #16
 80045da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045de:	e0c8      	b.n	8004772 <UART_SetConfig+0x2fe>
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a5e      	ldr	r2, [pc, #376]	@ (8004760 <UART_SetConfig+0x2ec>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d125      	bne.n	8004636 <UART_SetConfig+0x1c2>
 80045ea:	4b5b      	ldr	r3, [pc, #364]	@ (8004758 <UART_SetConfig+0x2e4>)
 80045ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80045f4:	2b30      	cmp	r3, #48	@ 0x30
 80045f6:	d016      	beq.n	8004626 <UART_SetConfig+0x1b2>
 80045f8:	2b30      	cmp	r3, #48	@ 0x30
 80045fa:	d818      	bhi.n	800462e <UART_SetConfig+0x1ba>
 80045fc:	2b20      	cmp	r3, #32
 80045fe:	d00a      	beq.n	8004616 <UART_SetConfig+0x1a2>
 8004600:	2b20      	cmp	r3, #32
 8004602:	d814      	bhi.n	800462e <UART_SetConfig+0x1ba>
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <UART_SetConfig+0x19a>
 8004608:	2b10      	cmp	r3, #16
 800460a:	d008      	beq.n	800461e <UART_SetConfig+0x1aa>
 800460c:	e00f      	b.n	800462e <UART_SetConfig+0x1ba>
 800460e:	2300      	movs	r3, #0
 8004610:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004614:	e0ad      	b.n	8004772 <UART_SetConfig+0x2fe>
 8004616:	2302      	movs	r3, #2
 8004618:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800461c:	e0a9      	b.n	8004772 <UART_SetConfig+0x2fe>
 800461e:	2304      	movs	r3, #4
 8004620:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004624:	e0a5      	b.n	8004772 <UART_SetConfig+0x2fe>
 8004626:	2308      	movs	r3, #8
 8004628:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800462c:	e0a1      	b.n	8004772 <UART_SetConfig+0x2fe>
 800462e:	2310      	movs	r3, #16
 8004630:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004634:	e09d      	b.n	8004772 <UART_SetConfig+0x2fe>
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a4a      	ldr	r2, [pc, #296]	@ (8004764 <UART_SetConfig+0x2f0>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d125      	bne.n	800468c <UART_SetConfig+0x218>
 8004640:	4b45      	ldr	r3, [pc, #276]	@ (8004758 <UART_SetConfig+0x2e4>)
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004646:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800464a:	2bc0      	cmp	r3, #192	@ 0xc0
 800464c:	d016      	beq.n	800467c <UART_SetConfig+0x208>
 800464e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004650:	d818      	bhi.n	8004684 <UART_SetConfig+0x210>
 8004652:	2b80      	cmp	r3, #128	@ 0x80
 8004654:	d00a      	beq.n	800466c <UART_SetConfig+0x1f8>
 8004656:	2b80      	cmp	r3, #128	@ 0x80
 8004658:	d814      	bhi.n	8004684 <UART_SetConfig+0x210>
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <UART_SetConfig+0x1f0>
 800465e:	2b40      	cmp	r3, #64	@ 0x40
 8004660:	d008      	beq.n	8004674 <UART_SetConfig+0x200>
 8004662:	e00f      	b.n	8004684 <UART_SetConfig+0x210>
 8004664:	2300      	movs	r3, #0
 8004666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800466a:	e082      	b.n	8004772 <UART_SetConfig+0x2fe>
 800466c:	2302      	movs	r3, #2
 800466e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004672:	e07e      	b.n	8004772 <UART_SetConfig+0x2fe>
 8004674:	2304      	movs	r3, #4
 8004676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800467a:	e07a      	b.n	8004772 <UART_SetConfig+0x2fe>
 800467c:	2308      	movs	r3, #8
 800467e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004682:	e076      	b.n	8004772 <UART_SetConfig+0x2fe>
 8004684:	2310      	movs	r3, #16
 8004686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800468a:	e072      	b.n	8004772 <UART_SetConfig+0x2fe>
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a35      	ldr	r2, [pc, #212]	@ (8004768 <UART_SetConfig+0x2f4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d12a      	bne.n	80046ec <UART_SetConfig+0x278>
 8004696:	4b30      	ldr	r3, [pc, #192]	@ (8004758 <UART_SetConfig+0x2e4>)
 8004698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800469c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046a4:	d01a      	beq.n	80046dc <UART_SetConfig+0x268>
 80046a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046aa:	d81b      	bhi.n	80046e4 <UART_SetConfig+0x270>
 80046ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046b0:	d00c      	beq.n	80046cc <UART_SetConfig+0x258>
 80046b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046b6:	d815      	bhi.n	80046e4 <UART_SetConfig+0x270>
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <UART_SetConfig+0x250>
 80046bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046c0:	d008      	beq.n	80046d4 <UART_SetConfig+0x260>
 80046c2:	e00f      	b.n	80046e4 <UART_SetConfig+0x270>
 80046c4:	2300      	movs	r3, #0
 80046c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046ca:	e052      	b.n	8004772 <UART_SetConfig+0x2fe>
 80046cc:	2302      	movs	r3, #2
 80046ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046d2:	e04e      	b.n	8004772 <UART_SetConfig+0x2fe>
 80046d4:	2304      	movs	r3, #4
 80046d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046da:	e04a      	b.n	8004772 <UART_SetConfig+0x2fe>
 80046dc:	2308      	movs	r3, #8
 80046de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046e2:	e046      	b.n	8004772 <UART_SetConfig+0x2fe>
 80046e4:	2310      	movs	r3, #16
 80046e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046ea:	e042      	b.n	8004772 <UART_SetConfig+0x2fe>
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a17      	ldr	r2, [pc, #92]	@ (8004750 <UART_SetConfig+0x2dc>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d13a      	bne.n	800476c <UART_SetConfig+0x2f8>
 80046f6:	4b18      	ldr	r3, [pc, #96]	@ (8004758 <UART_SetConfig+0x2e4>)
 80046f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004700:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004704:	d01a      	beq.n	800473c <UART_SetConfig+0x2c8>
 8004706:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800470a:	d81b      	bhi.n	8004744 <UART_SetConfig+0x2d0>
 800470c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004710:	d00c      	beq.n	800472c <UART_SetConfig+0x2b8>
 8004712:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004716:	d815      	bhi.n	8004744 <UART_SetConfig+0x2d0>
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <UART_SetConfig+0x2b0>
 800471c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004720:	d008      	beq.n	8004734 <UART_SetConfig+0x2c0>
 8004722:	e00f      	b.n	8004744 <UART_SetConfig+0x2d0>
 8004724:	2300      	movs	r3, #0
 8004726:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800472a:	e022      	b.n	8004772 <UART_SetConfig+0x2fe>
 800472c:	2302      	movs	r3, #2
 800472e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004732:	e01e      	b.n	8004772 <UART_SetConfig+0x2fe>
 8004734:	2304      	movs	r3, #4
 8004736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800473a:	e01a      	b.n	8004772 <UART_SetConfig+0x2fe>
 800473c:	2308      	movs	r3, #8
 800473e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004742:	e016      	b.n	8004772 <UART_SetConfig+0x2fe>
 8004744:	2310      	movs	r3, #16
 8004746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800474a:	e012      	b.n	8004772 <UART_SetConfig+0x2fe>
 800474c:	cfff69f3 	.word	0xcfff69f3
 8004750:	40008000 	.word	0x40008000
 8004754:	40013800 	.word	0x40013800
 8004758:	40021000 	.word	0x40021000
 800475c:	40004400 	.word	0x40004400
 8004760:	40004800 	.word	0x40004800
 8004764:	40004c00 	.word	0x40004c00
 8004768:	40005000 	.word	0x40005000
 800476c:	2310      	movs	r3, #16
 800476e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4aae      	ldr	r2, [pc, #696]	@ (8004a30 <UART_SetConfig+0x5bc>)
 8004778:	4293      	cmp	r3, r2
 800477a:	f040 8097 	bne.w	80048ac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800477e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004782:	2b08      	cmp	r3, #8
 8004784:	d823      	bhi.n	80047ce <UART_SetConfig+0x35a>
 8004786:	a201      	add	r2, pc, #4	@ (adr r2, 800478c <UART_SetConfig+0x318>)
 8004788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478c:	080047b1 	.word	0x080047b1
 8004790:	080047cf 	.word	0x080047cf
 8004794:	080047b9 	.word	0x080047b9
 8004798:	080047cf 	.word	0x080047cf
 800479c:	080047bf 	.word	0x080047bf
 80047a0:	080047cf 	.word	0x080047cf
 80047a4:	080047cf 	.word	0x080047cf
 80047a8:	080047cf 	.word	0x080047cf
 80047ac:	080047c7 	.word	0x080047c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047b0:	f7fe fb08 	bl	8002dc4 <HAL_RCC_GetPCLK1Freq>
 80047b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047b6:	e010      	b.n	80047da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047b8:	4b9e      	ldr	r3, [pc, #632]	@ (8004a34 <UART_SetConfig+0x5c0>)
 80047ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047bc:	e00d      	b.n	80047da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047be:	f7fe fa69 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 80047c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047c4:	e009      	b.n	80047da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047cc:	e005      	b.n	80047da <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80047d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 8130 	beq.w	8004a42 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e6:	4a94      	ldr	r2, [pc, #592]	@ (8004a38 <UART_SetConfig+0x5c4>)
 80047e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047ec:	461a      	mov	r2, r3
 80047ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	4613      	mov	r3, r2
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	4413      	add	r3, r2
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	429a      	cmp	r2, r3
 8004804:	d305      	bcc.n	8004812 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	429a      	cmp	r2, r3
 8004810:	d903      	bls.n	800481a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004818:	e113      	b.n	8004a42 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800481a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481c:	2200      	movs	r2, #0
 800481e:	60bb      	str	r3, [r7, #8]
 8004820:	60fa      	str	r2, [r7, #12]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004826:	4a84      	ldr	r2, [pc, #528]	@ (8004a38 <UART_SetConfig+0x5c4>)
 8004828:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800482c:	b29b      	uxth	r3, r3
 800482e:	2200      	movs	r2, #0
 8004830:	603b      	str	r3, [r7, #0]
 8004832:	607a      	str	r2, [r7, #4]
 8004834:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004838:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800483c:	f7fb fd38 	bl	80002b0 <__aeabi_uldivmod>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4610      	mov	r0, r2
 8004846:	4619      	mov	r1, r3
 8004848:	f04f 0200 	mov.w	r2, #0
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	020b      	lsls	r3, r1, #8
 8004852:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004856:	0202      	lsls	r2, r0, #8
 8004858:	6979      	ldr	r1, [r7, #20]
 800485a:	6849      	ldr	r1, [r1, #4]
 800485c:	0849      	lsrs	r1, r1, #1
 800485e:	2000      	movs	r0, #0
 8004860:	460c      	mov	r4, r1
 8004862:	4605      	mov	r5, r0
 8004864:	eb12 0804 	adds.w	r8, r2, r4
 8004868:	eb43 0905 	adc.w	r9, r3, r5
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	469a      	mov	sl, r3
 8004874:	4693      	mov	fp, r2
 8004876:	4652      	mov	r2, sl
 8004878:	465b      	mov	r3, fp
 800487a:	4640      	mov	r0, r8
 800487c:	4649      	mov	r1, r9
 800487e:	f7fb fd17 	bl	80002b0 <__aeabi_uldivmod>
 8004882:	4602      	mov	r2, r0
 8004884:	460b      	mov	r3, r1
 8004886:	4613      	mov	r3, r2
 8004888:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004890:	d308      	bcc.n	80048a4 <UART_SetConfig+0x430>
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004898:	d204      	bcs.n	80048a4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6a3a      	ldr	r2, [r7, #32]
 80048a0:	60da      	str	r2, [r3, #12]
 80048a2:	e0ce      	b.n	8004a42 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80048aa:	e0ca      	b.n	8004a42 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048b4:	d166      	bne.n	8004984 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80048b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d827      	bhi.n	800490e <UART_SetConfig+0x49a>
 80048be:	a201      	add	r2, pc, #4	@ (adr r2, 80048c4 <UART_SetConfig+0x450>)
 80048c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c4:	080048e9 	.word	0x080048e9
 80048c8:	080048f1 	.word	0x080048f1
 80048cc:	080048f9 	.word	0x080048f9
 80048d0:	0800490f 	.word	0x0800490f
 80048d4:	080048ff 	.word	0x080048ff
 80048d8:	0800490f 	.word	0x0800490f
 80048dc:	0800490f 	.word	0x0800490f
 80048e0:	0800490f 	.word	0x0800490f
 80048e4:	08004907 	.word	0x08004907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048e8:	f7fe fa6c 	bl	8002dc4 <HAL_RCC_GetPCLK1Freq>
 80048ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80048ee:	e014      	b.n	800491a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048f0:	f7fe fa7e 	bl	8002df0 <HAL_RCC_GetPCLK2Freq>
 80048f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80048f6:	e010      	b.n	800491a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048f8:	4b4e      	ldr	r3, [pc, #312]	@ (8004a34 <UART_SetConfig+0x5c0>)
 80048fa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80048fc:	e00d      	b.n	800491a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048fe:	f7fe f9c9 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 8004902:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004904:	e009      	b.n	800491a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004906:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800490a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800490c:	e005      	b.n	800491a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800490e:	2300      	movs	r3, #0
 8004910:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004918:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800491a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 8090 	beq.w	8004a42 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004926:	4a44      	ldr	r2, [pc, #272]	@ (8004a38 <UART_SetConfig+0x5c4>)
 8004928:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800492c:	461a      	mov	r2, r3
 800492e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004930:	fbb3 f3f2 	udiv	r3, r3, r2
 8004934:	005a      	lsls	r2, r3, #1
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	085b      	lsrs	r3, r3, #1
 800493c:	441a      	add	r2, r3
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	fbb2 f3f3 	udiv	r3, r2, r3
 8004946:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	2b0f      	cmp	r3, #15
 800494c:	d916      	bls.n	800497c <UART_SetConfig+0x508>
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004954:	d212      	bcs.n	800497c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	b29b      	uxth	r3, r3
 800495a:	f023 030f 	bic.w	r3, r3, #15
 800495e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	085b      	lsrs	r3, r3, #1
 8004964:	b29b      	uxth	r3, r3
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	b29a      	uxth	r2, r3
 800496c:	8bfb      	ldrh	r3, [r7, #30]
 800496e:	4313      	orrs	r3, r2
 8004970:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	8bfa      	ldrh	r2, [r7, #30]
 8004978:	60da      	str	r2, [r3, #12]
 800497a:	e062      	b.n	8004a42 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004982:	e05e      	b.n	8004a42 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004984:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004988:	2b08      	cmp	r3, #8
 800498a:	d828      	bhi.n	80049de <UART_SetConfig+0x56a>
 800498c:	a201      	add	r2, pc, #4	@ (adr r2, 8004994 <UART_SetConfig+0x520>)
 800498e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004992:	bf00      	nop
 8004994:	080049b9 	.word	0x080049b9
 8004998:	080049c1 	.word	0x080049c1
 800499c:	080049c9 	.word	0x080049c9
 80049a0:	080049df 	.word	0x080049df
 80049a4:	080049cf 	.word	0x080049cf
 80049a8:	080049df 	.word	0x080049df
 80049ac:	080049df 	.word	0x080049df
 80049b0:	080049df 	.word	0x080049df
 80049b4:	080049d7 	.word	0x080049d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049b8:	f7fe fa04 	bl	8002dc4 <HAL_RCC_GetPCLK1Freq>
 80049bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049be:	e014      	b.n	80049ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049c0:	f7fe fa16 	bl	8002df0 <HAL_RCC_GetPCLK2Freq>
 80049c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049c6:	e010      	b.n	80049ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004a34 <UART_SetConfig+0x5c0>)
 80049ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80049cc:	e00d      	b.n	80049ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ce:	f7fe f961 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 80049d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049d4:	e009      	b.n	80049ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80049dc:	e005      	b.n	80049ea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80049e8:	bf00      	nop
    }

    if (pclk != 0U)
 80049ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d028      	beq.n	8004a42 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f4:	4a10      	ldr	r2, [pc, #64]	@ (8004a38 <UART_SetConfig+0x5c4>)
 80049f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049fa:	461a      	mov	r2, r3
 80049fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	085b      	lsrs	r3, r3, #1
 8004a08:	441a      	add	r2, r3
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a12:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	2b0f      	cmp	r3, #15
 8004a18:	d910      	bls.n	8004a3c <UART_SetConfig+0x5c8>
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a20:	d20c      	bcs.n	8004a3c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a22:	6a3b      	ldr	r3, [r7, #32]
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	60da      	str	r2, [r3, #12]
 8004a2c:	e009      	b.n	8004a42 <UART_SetConfig+0x5ce>
 8004a2e:	bf00      	nop
 8004a30:	40008000 	.word	0x40008000
 8004a34:	00f42400 	.word	0x00f42400
 8004a38:	08006630 	.word	0x08006630
      }
      else
      {
        ret = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2200      	movs	r2, #0
 8004a56:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004a5e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3730      	adds	r7, #48	@ 0x30
 8004a66:	46bd      	mov	sp, r7
 8004a68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004a6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a78:	f003 0308 	and.w	r3, r3, #8
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00a      	beq.n	8004ada <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ade:	f003 0304 	and.w	r3, r3, #4
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b00:	f003 0310 	and.w	r3, r3, #16
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00a      	beq.n	8004b1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b22:	f003 0320 	and.w	r3, r3, #32
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01a      	beq.n	8004b82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b6a:	d10a      	bne.n	8004b82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	605a      	str	r2, [r3, #4]
  }
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b098      	sub	sp, #96	@ 0x60
 8004bb4:	af02      	add	r7, sp, #8
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bc0:	f7fc fac8 	bl	8001154 <HAL_GetTick>
 8004bc4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0308 	and.w	r3, r3, #8
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d12f      	bne.n	8004c34 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f88e 	bl	8004d04 <UART_WaitOnFlagUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d022      	beq.n	8004c34 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf6:	e853 3f00 	ldrex	r3, [r3]
 8004bfa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c02:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	461a      	mov	r2, r3
 8004c0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c0e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c14:	e841 2300 	strex	r3, r2, [r1]
 8004c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e6      	bne.n	8004bee <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2220      	movs	r2, #32
 8004c24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e063      	b.n	8004cfc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0304 	and.w	r3, r3, #4
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d149      	bne.n	8004cd6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c42:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f857 	bl	8004d04 <UART_WaitOnFlagUntilTimeout>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d03c      	beq.n	8004cd6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c64:	e853 3f00 	ldrex	r3, [r3]
 8004c68:	623b      	str	r3, [r7, #32]
   return(result);
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	461a      	mov	r2, r3
 8004c78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c82:	e841 2300 	strex	r3, r2, [r1]
 8004c86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1e6      	bne.n	8004c5c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	3308      	adds	r3, #8
 8004c94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	e853 3f00 	ldrex	r3, [r3]
 8004c9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f023 0301 	bic.w	r3, r3, #1
 8004ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	3308      	adds	r3, #8
 8004cac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cae:	61fa      	str	r2, [r7, #28]
 8004cb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb2:	69b9      	ldr	r1, [r7, #24]
 8004cb4:	69fa      	ldr	r2, [r7, #28]
 8004cb6:	e841 2300 	strex	r3, r2, [r1]
 8004cba:	617b      	str	r3, [r7, #20]
   return(result);
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1e5      	bne.n	8004c8e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e012      	b.n	8004cfc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3758      	adds	r7, #88	@ 0x58
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	603b      	str	r3, [r7, #0]
 8004d10:	4613      	mov	r3, r2
 8004d12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d14:	e04f      	b.n	8004db6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1c:	d04b      	beq.n	8004db6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d1e:	f7fc fa19 	bl	8001154 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d302      	bcc.n	8004d34 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e04e      	b.n	8004dd6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0304 	and.w	r3, r3, #4
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d037      	beq.n	8004db6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b80      	cmp	r3, #128	@ 0x80
 8004d4a:	d034      	beq.n	8004db6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	2b40      	cmp	r3, #64	@ 0x40
 8004d50:	d031      	beq.n	8004db6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	f003 0308 	and.w	r3, r3, #8
 8004d5c:	2b08      	cmp	r3, #8
 8004d5e:	d110      	bne.n	8004d82 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2208      	movs	r2, #8
 8004d66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 f879 	bl	8004e60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2208      	movs	r2, #8
 8004d72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e029      	b.n	8004dd6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d90:	d111      	bne.n	8004db6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 f85f 	bl	8004e60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2220      	movs	r2, #32
 8004da6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e00f      	b.n	8004dd6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	69da      	ldr	r2, [r3, #28]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	bf0c      	ite	eq
 8004dc6:	2301      	moveq	r3, #1
 8004dc8:	2300      	movne	r3, #0
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	461a      	mov	r2, r3
 8004dce:	79fb      	ldrb	r3, [r7, #7]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d0a0      	beq.n	8004d16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b08f      	sub	sp, #60	@ 0x3c
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	e853 3f00 	ldrex	r3, [r3]
 8004df2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004dfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	461a      	mov	r2, r3
 8004e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e06:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e0c:	e841 2300 	strex	r3, r2, [r1]
 8004e10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1e6      	bne.n	8004de6 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	3308      	adds	r3, #8
 8004e1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	e853 3f00 	ldrex	r3, [r3]
 8004e26:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004e2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	3308      	adds	r3, #8
 8004e36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e38:	61ba      	str	r2, [r7, #24]
 8004e3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3c:	6979      	ldr	r1, [r7, #20]
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	e841 2300 	strex	r3, r2, [r1]
 8004e44:	613b      	str	r3, [r7, #16]
   return(result);
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1e5      	bne.n	8004e18 <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8004e54:	bf00      	nop
 8004e56:	373c      	adds	r7, #60	@ 0x3c
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b095      	sub	sp, #84	@ 0x54
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e70:	e853 3f00 	ldrex	r3, [r3]
 8004e74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	461a      	mov	r2, r3
 8004e84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e86:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e88:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e8e:	e841 2300 	strex	r3, r2, [r1]
 8004e92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1e6      	bne.n	8004e68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	3308      	adds	r3, #8
 8004ea0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	e853 3f00 	ldrex	r3, [r3]
 8004ea8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eb0:	f023 0301 	bic.w	r3, r3, #1
 8004eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3308      	adds	r3, #8
 8004ebc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ebe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ec4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ec6:	e841 2300 	strex	r3, r2, [r1]
 8004eca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1e3      	bne.n	8004e9a <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d118      	bne.n	8004f0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	e853 3f00 	ldrex	r3, [r3]
 8004ee6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	f023 0310 	bic.w	r3, r3, #16
 8004eee:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ef8:	61bb      	str	r3, [r7, #24]
 8004efa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efc:	6979      	ldr	r1, [r7, #20]
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	e841 2300 	strex	r3, r2, [r1]
 8004f04:	613b      	str	r3, [r7, #16]
   return(result);
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1e6      	bne.n	8004eda <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004f20:	bf00      	nop
 8004f22:	3754      	adds	r7, #84	@ 0x54
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b090      	sub	sp, #64	@ 0x40
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f38:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0320 	and.w	r3, r3, #32
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d137      	bne.n	8004fb8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8004f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3308      	adds	r3, #8
 8004f56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5a:	e853 3f00 	ldrex	r3, [r3]
 8004f5e:	623b      	str	r3, [r7, #32]
   return(result);
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3308      	adds	r3, #8
 8004f6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f70:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f78:	e841 2300 	strex	r3, r2, [r1]
 8004f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1e5      	bne.n	8004f50 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	e853 3f00 	ldrex	r3, [r3]
 8004f90:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f98:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fa2:	61fb      	str	r3, [r7, #28]
 8004fa4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa6:	69b9      	ldr	r1, [r7, #24]
 8004fa8:	69fa      	ldr	r2, [r7, #28]
 8004faa:	e841 2300 	strex	r3, r2, [r1]
 8004fae:	617b      	str	r3, [r7, #20]
   return(result);
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1e6      	bne.n	8004f84 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004fb6:	e002      	b.n	8004fbe <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004fb8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004fba:	f7fb faf1 	bl	80005a0 <HAL_UART_TxCpltCallback>
}
 8004fbe:	bf00      	nop
 8004fc0:	3740      	adds	r7, #64	@ 0x40
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b084      	sub	sp, #16
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f7ff fa2d 	bl	8004434 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fda:	bf00      	nop
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b086      	sub	sp, #24
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fee:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800500a:	2b80      	cmp	r3, #128	@ 0x80
 800500c:	d109      	bne.n	8005022 <UART_DMAError+0x40>
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	2b21      	cmp	r3, #33	@ 0x21
 8005012:	d106      	bne.n	8005022 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	2200      	movs	r2, #0
 8005018:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800501c:	6978      	ldr	r0, [r7, #20]
 800501e:	f7ff fede 	bl	8004dde <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800502c:	2b40      	cmp	r3, #64	@ 0x40
 800502e:	d109      	bne.n	8005044 <UART_DMAError+0x62>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2b22      	cmp	r3, #34	@ 0x22
 8005034:	d106      	bne.n	8005044 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2200      	movs	r2, #0
 800503a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800503e:	6978      	ldr	r0, [r7, #20]
 8005040:	f7ff ff0e 	bl	8004e60 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800504a:	f043 0210 	orr.w	r2, r3, #16
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005054:	6978      	ldr	r0, [r7, #20]
 8005056:	f7ff f9f7 	bl	8004448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800505a:	bf00      	nop
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b084      	sub	sp, #16
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800506e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f7ff f9e1 	bl	8004448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005086:	bf00      	nop
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800508e:	b480      	push	{r7}
 8005090:	b08f      	sub	sp, #60	@ 0x3c
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800509c:	2b21      	cmp	r3, #33	@ 0x21
 800509e:	d14c      	bne.n	800513a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d132      	bne.n	8005112 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	e853 3f00 	ldrex	r3, [r3]
 80050b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	461a      	mov	r2, r3
 80050c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050cc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050d2:	e841 2300 	strex	r3, r2, [r1]
 80050d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1e6      	bne.n	80050ac <UART_TxISR_8BIT+0x1e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	e853 3f00 	ldrex	r3, [r3]
 80050ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	461a      	mov	r2, r3
 80050fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fc:	61bb      	str	r3, [r7, #24]
 80050fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005100:	6979      	ldr	r1, [r7, #20]
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	e841 2300 	strex	r3, r2, [r1]
 8005108:	613b      	str	r3, [r7, #16]
   return(result);
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1e6      	bne.n	80050de <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005110:	e013      	b.n	800513a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005116:	781a      	ldrb	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800512e:	b29b      	uxth	r3, r3
 8005130:	3b01      	subs	r3, #1
 8005132:	b29a      	uxth	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800513a:	bf00      	nop
 800513c:	373c      	adds	r7, #60	@ 0x3c
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005146:	b480      	push	{r7}
 8005148:	b091      	sub	sp, #68	@ 0x44
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005154:	2b21      	cmp	r3, #33	@ 0x21
 8005156:	d151      	bne.n	80051fc <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800515e:	b29b      	uxth	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d132      	bne.n	80051ca <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516c:	e853 3f00 	ldrex	r3, [r3]
 8005170:	623b      	str	r3, [r7, #32]
   return(result);
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005178:	63bb      	str	r3, [r7, #56]	@ 0x38
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	461a      	mov	r2, r3
 8005180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005182:	633b      	str	r3, [r7, #48]	@ 0x30
 8005184:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005186:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005188:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800518a:	e841 2300 	strex	r3, r2, [r1]
 800518e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1e6      	bne.n	8005164 <UART_TxISR_16BIT+0x1e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	e853 3f00 	ldrex	r3, [r3]
 80051a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	461a      	mov	r2, r3
 80051b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b4:	61fb      	str	r3, [r7, #28]
 80051b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b8:	69b9      	ldr	r1, [r7, #24]
 80051ba:	69fa      	ldr	r2, [r7, #28]
 80051bc:	e841 2300 	strex	r3, r2, [r1]
 80051c0:	617b      	str	r3, [r7, #20]
   return(result);
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1e6      	bne.n	8005196 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80051c8:	e018      	b.n	80051fc <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80051d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051d2:	881a      	ldrh	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051dc:	b292      	uxth	r2, r2
 80051de:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051e4:	1c9a      	adds	r2, r3, #2
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	3b01      	subs	r3, #1
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80051fc:	bf00      	nop
 80051fe:	3744      	adds	r7, #68	@ 0x44
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005208:	b480      	push	{r7}
 800520a:	b091      	sub	sp, #68	@ 0x44
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005216:	2b21      	cmp	r3, #33	@ 0x21
 8005218:	d160      	bne.n	80052dc <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005220:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005222:	e057      	b.n	80052d4 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800522a:	b29b      	uxth	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d133      	bne.n	8005298 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3308      	adds	r3, #8
 8005236:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523a:	e853 3f00 	ldrex	r3, [r3]
 800523e:	623b      	str	r3, [r7, #32]
   return(result);
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005246:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3308      	adds	r3, #8
 800524e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005250:	633a      	str	r2, [r7, #48]	@ 0x30
 8005252:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005254:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005258:	e841 2300 	strex	r3, r2, [r1]
 800525c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800525e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1e5      	bne.n	8005230 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	e853 3f00 	ldrex	r3, [r3]
 8005270:	60fb      	str	r3, [r7, #12]
   return(result);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005278:	637b      	str	r3, [r7, #52]	@ 0x34
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	461a      	mov	r2, r3
 8005280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005282:	61fb      	str	r3, [r7, #28]
 8005284:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005286:	69b9      	ldr	r1, [r7, #24]
 8005288:	69fa      	ldr	r2, [r7, #28]
 800528a:	e841 2300 	strex	r3, r2, [r1]
 800528e:	617b      	str	r3, [r7, #20]
   return(result);
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1e6      	bne.n	8005264 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8005296:	e021      	b.n	80052dc <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d013      	beq.n	80052ce <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052aa:	781a      	ldrb	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052b6:	1c5a      	adds	r2, r3, #1
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	3b01      	subs	r3, #1
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80052ce:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80052d0:	3b01      	subs	r3, #1
 80052d2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80052d4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1a4      	bne.n	8005224 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80052da:	e7ff      	b.n	80052dc <UART_TxISR_8BIT_FIFOEN+0xd4>
 80052dc:	bf00      	nop
 80052de:	3744      	adds	r7, #68	@ 0x44
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b091      	sub	sp, #68	@ 0x44
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052f6:	2b21      	cmp	r3, #33	@ 0x21
 80052f8:	d165      	bne.n	80053c6 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005300:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005302:	e05c      	b.n	80053be <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800530a:	b29b      	uxth	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d133      	bne.n	8005378 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3308      	adds	r3, #8
 8005316:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	e853 3f00 	ldrex	r3, [r3]
 800531e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005326:	637b      	str	r3, [r7, #52]	@ 0x34
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3308      	adds	r3, #8
 800532e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005330:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005332:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005336:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005338:	e841 2300 	strex	r3, r2, [r1]
 800533c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800533e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1e5      	bne.n	8005310 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	e853 3f00 	ldrex	r3, [r3]
 8005350:	60bb      	str	r3, [r7, #8]
   return(result);
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005358:	633b      	str	r3, [r7, #48]	@ 0x30
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005362:	61bb      	str	r3, [r7, #24]
 8005364:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005366:	6979      	ldr	r1, [r7, #20]
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	e841 2300 	strex	r3, r2, [r1]
 800536e:	613b      	str	r3, [r7, #16]
   return(result);
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1e6      	bne.n	8005344 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8005376:	e026      	b.n	80053c6 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005382:	2b00      	cmp	r3, #0
 8005384:	d018      	beq.n	80053b8 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800538a:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800538c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800538e:	881a      	ldrh	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005398:	b292      	uxth	r2, r2
 800539a:	851a      	strh	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053a0:	1c9a      	adds	r2, r3, #2
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	3b01      	subs	r3, #1
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80053b8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80053ba:	3b01      	subs	r3, #1
 80053bc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80053be:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d19f      	bne.n	8005304 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80053c4:	e7ff      	b.n	80053c6 <UART_TxISR_16BIT_FIFOEN+0xde>
 80053c6:	bf00      	nop
 80053c8:	3744      	adds	r7, #68	@ 0x44
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b088      	sub	sp, #32
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	e853 3f00 	ldrex	r3, [r3]
 80053e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053ee:	61fb      	str	r3, [r7, #28]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	461a      	mov	r2, r3
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	61bb      	str	r3, [r7, #24]
 80053fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fc:	6979      	ldr	r1, [r7, #20]
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	e841 2300 	strex	r3, r2, [r1]
 8005404:	613b      	str	r3, [r7, #16]
   return(result);
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1e6      	bne.n	80053da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2220      	movs	r2, #32
 8005410:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7fb f8c0 	bl	80005a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005420:	bf00      	nop
 8005422:	3720      	adds	r7, #32
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005472:	2b01      	cmp	r3, #1
 8005474:	d101      	bne.n	800547a <HAL_UARTEx_DisableFifoMode+0x16>
 8005476:	2302      	movs	r3, #2
 8005478:	e027      	b.n	80054ca <HAL_UARTEx_DisableFifoMode+0x66>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2224      	movs	r2, #36	@ 0x24
 8005486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 0201 	bic.w	r2, r2, #1
 80054a0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80054a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2220      	movs	r2, #32
 80054bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b084      	sub	sp, #16
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d101      	bne.n	80054ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80054ea:	2302      	movs	r3, #2
 80054ec:	e02d      	b.n	800554a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2224      	movs	r2, #36	@ 0x24
 80054fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0201 	bic.w	r2, r2, #1
 8005514:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f850 	bl	80055d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2220      	movs	r2, #32
 800553c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b084      	sub	sp, #16
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
 800555a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005562:	2b01      	cmp	r3, #1
 8005564:	d101      	bne.n	800556a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005566:	2302      	movs	r3, #2
 8005568:	e02d      	b.n	80055c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2224      	movs	r2, #36	@ 0x24
 8005576:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 0201 	bic.w	r2, r2, #1
 8005590:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f812 	bl	80055d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
	...

080055d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d108      	bne.n	80055f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80055f0:	e031      	b.n	8005656 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80055f2:	2308      	movs	r3, #8
 80055f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80055f6:	2308      	movs	r3, #8
 80055f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	0e5b      	lsrs	r3, r3, #25
 8005602:	b2db      	uxtb	r3, r3
 8005604:	f003 0307 	and.w	r3, r3, #7
 8005608:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	0f5b      	lsrs	r3, r3, #29
 8005612:	b2db      	uxtb	r3, r3
 8005614:	f003 0307 	and.w	r3, r3, #7
 8005618:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800561a:	7bbb      	ldrb	r3, [r7, #14]
 800561c:	7b3a      	ldrb	r2, [r7, #12]
 800561e:	4911      	ldr	r1, [pc, #68]	@ (8005664 <UARTEx_SetNbDataToProcess+0x94>)
 8005620:	5c8a      	ldrb	r2, [r1, r2]
 8005622:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005626:	7b3a      	ldrb	r2, [r7, #12]
 8005628:	490f      	ldr	r1, [pc, #60]	@ (8005668 <UARTEx_SetNbDataToProcess+0x98>)
 800562a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800562c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005630:	b29a      	uxth	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005638:	7bfb      	ldrb	r3, [r7, #15]
 800563a:	7b7a      	ldrb	r2, [r7, #13]
 800563c:	4909      	ldr	r1, [pc, #36]	@ (8005664 <UARTEx_SetNbDataToProcess+0x94>)
 800563e:	5c8a      	ldrb	r2, [r1, r2]
 8005640:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005644:	7b7a      	ldrb	r2, [r7, #13]
 8005646:	4908      	ldr	r1, [pc, #32]	@ (8005668 <UARTEx_SetNbDataToProcess+0x98>)
 8005648:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800564a:	fb93 f3f2 	sdiv	r3, r3, r2
 800564e:	b29a      	uxth	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005656:	bf00      	nop
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	08006648 	.word	0x08006648
 8005668:	08006650 	.word	0x08006650

0800566c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800566c:	b084      	sub	sp, #16
 800566e:	b580      	push	{r7, lr}
 8005670:	b084      	sub	sp, #16
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
 8005676:	f107 001c 	add.w	r0, r7, #28
 800567a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fa68 	bl	8005b60 <USB_CoreReset>
 8005690:	4603      	mov	r3, r0
 8005692:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005694:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005698:	2b00      	cmp	r3, #0
 800569a:	d106      	bne.n	80056aa <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80056a8:	e005      	b.n	80056b6 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056c2:	b004      	add	sp, #16
 80056c4:	4770      	bx	lr

080056c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f023 0201 	bic.w	r2, r3, #1
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	460b      	mov	r3, r1
 80056f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005704:	78fb      	ldrb	r3, [r7, #3]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d115      	bne.n	8005736 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005716:	200a      	movs	r0, #10
 8005718:	f7fb fd28 	bl	800116c <HAL_Delay>
      ms += 10U;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	330a      	adds	r3, #10
 8005720:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 fa0e 	bl	8005b44 <USB_GetMode>
 8005728:	4603      	mov	r3, r0
 800572a:	2b01      	cmp	r3, #1
 800572c:	d01e      	beq.n	800576c <USB_SetCurrentMode+0x84>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2bc7      	cmp	r3, #199	@ 0xc7
 8005732:	d9f0      	bls.n	8005716 <USB_SetCurrentMode+0x2e>
 8005734:	e01a      	b.n	800576c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005736:	78fb      	ldrb	r3, [r7, #3]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d115      	bne.n	8005768 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005748:	200a      	movs	r0, #10
 800574a:	f7fb fd0f 	bl	800116c <HAL_Delay>
      ms += 10U;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	330a      	adds	r3, #10
 8005752:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f9f5 	bl	8005b44 <USB_GetMode>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d005      	beq.n	800576c <USB_SetCurrentMode+0x84>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2bc7      	cmp	r3, #199	@ 0xc7
 8005764:	d9f0      	bls.n	8005748 <USB_SetCurrentMode+0x60>
 8005766:	e001      	b.n	800576c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e005      	b.n	8005778 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2bc8      	cmp	r3, #200	@ 0xc8
 8005770:	d101      	bne.n	8005776 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e000      	b.n	8005778 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005780:	b084      	sub	sp, #16
 8005782:	b580      	push	{r7, lr}
 8005784:	b086      	sub	sp, #24
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
 800578a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800578e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005792:	2300      	movs	r3, #0
 8005794:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800579a:	2300      	movs	r3, #0
 800579c:	613b      	str	r3, [r7, #16]
 800579e:	e009      	b.n	80057b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	3340      	adds	r3, #64	@ 0x40
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	2200      	movs	r2, #0
 80057ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	3301      	adds	r3, #1
 80057b2:	613b      	str	r3, [r7, #16]
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	2b0e      	cmp	r3, #14
 80057b8:	d9f2      	bls.n	80057a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80057ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d11c      	bne.n	80057fc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057d0:	f043 0302 	orr.w	r3, r3, #2
 80057d4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057da:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	601a      	str	r2, [r3, #0]
 80057fa:	e005      	b.n	8005808 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005800:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800580e:	461a      	mov	r2, r3
 8005810:	2300      	movs	r3, #0
 8005812:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005814:	2103      	movs	r1, #3
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f95a 	bl	8005ad0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800581c:	2110      	movs	r1, #16
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f8f6 	bl	8005a10 <USB_FlushTxFifo>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f920 	bl	8005a74 <USB_FlushRxFifo>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005844:	461a      	mov	r2, r3
 8005846:	2300      	movs	r3, #0
 8005848:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005850:	461a      	mov	r2, r3
 8005852:	2300      	movs	r3, #0
 8005854:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800585c:	461a      	mov	r2, r3
 800585e:	2300      	movs	r3, #0
 8005860:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005862:	2300      	movs	r3, #0
 8005864:	613b      	str	r3, [r7, #16]
 8005866:	e043      	b.n	80058f0 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800587a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800587e:	d118      	bne.n	80058b2 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10a      	bne.n	800589c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005892:	461a      	mov	r2, r3
 8005894:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005898:	6013      	str	r3, [r2, #0]
 800589a:	e013      	b.n	80058c4 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058a8:	461a      	mov	r2, r3
 80058aa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80058ae:	6013      	str	r3, [r2, #0]
 80058b0:	e008      	b.n	80058c4 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058be:	461a      	mov	r2, r3
 80058c0:	2300      	movs	r3, #0
 80058c2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058d0:	461a      	mov	r2, r3
 80058d2:	2300      	movs	r3, #0
 80058d4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058e2:	461a      	mov	r2, r3
 80058e4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80058e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	3301      	adds	r3, #1
 80058ee:	613b      	str	r3, [r7, #16]
 80058f0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80058f4:	461a      	mov	r2, r3
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d3b5      	bcc.n	8005868 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058fc:	2300      	movs	r3, #0
 80058fe:	613b      	str	r3, [r7, #16]
 8005900:	e043      	b.n	800598a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4413      	add	r3, r2
 800590a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005914:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005918:	d118      	bne.n	800594c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10a      	bne.n	8005936 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	015a      	lsls	r2, r3, #5
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4413      	add	r3, r2
 8005928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800592c:	461a      	mov	r2, r3
 800592e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005932:	6013      	str	r3, [r2, #0]
 8005934:	e013      	b.n	800595e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005942:	461a      	mov	r2, r3
 8005944:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005948:	6013      	str	r3, [r2, #0]
 800594a:	e008      	b.n	800595e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005958:	461a      	mov	r2, r3
 800595a:	2300      	movs	r3, #0
 800595c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	015a      	lsls	r2, r3, #5
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	4413      	add	r3, r2
 8005966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800596a:	461a      	mov	r2, r3
 800596c:	2300      	movs	r3, #0
 800596e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4413      	add	r3, r2
 8005978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800597c:	461a      	mov	r2, r3
 800597e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005982:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	3301      	adds	r3, #1
 8005988:	613b      	str	r3, [r7, #16]
 800598a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800598e:	461a      	mov	r2, r3
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	4293      	cmp	r3, r2
 8005994:	d3b5      	bcc.n	8005902 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059a8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80059b6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	f043 0210 	orr.w	r2, r3, #16
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	699a      	ldr	r2, [r3, #24]
 80059c8:	4b10      	ldr	r3, [pc, #64]	@ (8005a0c <USB_DevInit+0x28c>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80059d0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d005      	beq.n	80059e4 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	f043 0208 	orr.w	r2, r3, #8
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80059e4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d107      	bne.n	80059fc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80059f4:	f043 0304 	orr.w	r3, r3, #4
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80059fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a08:	b004      	add	sp, #16
 8005a0a:	4770      	bx	lr
 8005a0c:	803c3800 	.word	0x803c3800

08005a10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	3301      	adds	r3, #1
 8005a22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a2a:	d901      	bls.n	8005a30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e01b      	b.n	8005a68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	daf2      	bge.n	8005a1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	019b      	lsls	r3, r3, #6
 8005a40:	f043 0220 	orr.w	r2, r3, #32
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a54:	d901      	bls.n	8005a5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e006      	b.n	8005a68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	f003 0320 	and.w	r3, r3, #32
 8005a62:	2b20      	cmp	r3, #32
 8005a64:	d0f0      	beq.n	8005a48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	3301      	adds	r3, #1
 8005a84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a8c:	d901      	bls.n	8005a92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e018      	b.n	8005ac4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	daf2      	bge.n	8005a80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2210      	movs	r2, #16
 8005aa2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ab0:	d901      	bls.n	8005ab6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e006      	b.n	8005ac4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	f003 0310 	and.w	r3, r3, #16
 8005abe:	2b10      	cmp	r3, #16
 8005ac0:	d0f0      	beq.n	8005aa4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	78fb      	ldrb	r3, [r7, #3]
 8005aea:	68f9      	ldr	r1, [r7, #12]
 8005aec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005af0:	4313      	orrs	r3, r2
 8005af2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b085      	sub	sp, #20
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005b1c:	f023 0303 	bic.w	r3, r3, #3
 8005b20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b30:	f043 0302 	orr.w	r3, r3, #2
 8005b34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	f003 0301 	and.w	r3, r3, #1
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b78:	d901      	bls.n	8005b7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e01b      	b.n	8005bb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	daf2      	bge.n	8005b6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	f043 0201 	orr.w	r2, r3, #1
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ba2:	d901      	bls.n	8005ba8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e006      	b.n	8005bb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d0f0      	beq.n	8005b96 <USB_CoreReset+0x36>

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
	...

08005bc4 <siprintf>:
 8005bc4:	b40e      	push	{r1, r2, r3}
 8005bc6:	b500      	push	{lr}
 8005bc8:	b09c      	sub	sp, #112	@ 0x70
 8005bca:	ab1d      	add	r3, sp, #116	@ 0x74
 8005bcc:	9002      	str	r0, [sp, #8]
 8005bce:	9006      	str	r0, [sp, #24]
 8005bd0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005bd4:	4809      	ldr	r0, [pc, #36]	@ (8005bfc <siprintf+0x38>)
 8005bd6:	9107      	str	r1, [sp, #28]
 8005bd8:	9104      	str	r1, [sp, #16]
 8005bda:	4909      	ldr	r1, [pc, #36]	@ (8005c00 <siprintf+0x3c>)
 8005bdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005be0:	9105      	str	r1, [sp, #20]
 8005be2:	6800      	ldr	r0, [r0, #0]
 8005be4:	9301      	str	r3, [sp, #4]
 8005be6:	a902      	add	r1, sp, #8
 8005be8:	f000 f994 	bl	8005f14 <_svfiprintf_r>
 8005bec:	9b02      	ldr	r3, [sp, #8]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	701a      	strb	r2, [r3, #0]
 8005bf2:	b01c      	add	sp, #112	@ 0x70
 8005bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bf8:	b003      	add	sp, #12
 8005bfa:	4770      	bx	lr
 8005bfc:	20040010 	.word	0x20040010
 8005c00:	ffff0208 	.word	0xffff0208

08005c04 <memset>:
 8005c04:	4402      	add	r2, r0
 8005c06:	4603      	mov	r3, r0
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d100      	bne.n	8005c0e <memset+0xa>
 8005c0c:	4770      	bx	lr
 8005c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c12:	e7f9      	b.n	8005c08 <memset+0x4>

08005c14 <__errno>:
 8005c14:	4b01      	ldr	r3, [pc, #4]	@ (8005c1c <__errno+0x8>)
 8005c16:	6818      	ldr	r0, [r3, #0]
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	20040010 	.word	0x20040010

08005c20 <__libc_init_array>:
 8005c20:	b570      	push	{r4, r5, r6, lr}
 8005c22:	4d0d      	ldr	r5, [pc, #52]	@ (8005c58 <__libc_init_array+0x38>)
 8005c24:	4c0d      	ldr	r4, [pc, #52]	@ (8005c5c <__libc_init_array+0x3c>)
 8005c26:	1b64      	subs	r4, r4, r5
 8005c28:	10a4      	asrs	r4, r4, #2
 8005c2a:	2600      	movs	r6, #0
 8005c2c:	42a6      	cmp	r6, r4
 8005c2e:	d109      	bne.n	8005c44 <__libc_init_array+0x24>
 8005c30:	4d0b      	ldr	r5, [pc, #44]	@ (8005c60 <__libc_init_array+0x40>)
 8005c32:	4c0c      	ldr	r4, [pc, #48]	@ (8005c64 <__libc_init_array+0x44>)
 8005c34:	f000 fc66 	bl	8006504 <_init>
 8005c38:	1b64      	subs	r4, r4, r5
 8005c3a:	10a4      	asrs	r4, r4, #2
 8005c3c:	2600      	movs	r6, #0
 8005c3e:	42a6      	cmp	r6, r4
 8005c40:	d105      	bne.n	8005c4e <__libc_init_array+0x2e>
 8005c42:	bd70      	pop	{r4, r5, r6, pc}
 8005c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c48:	4798      	blx	r3
 8005c4a:	3601      	adds	r6, #1
 8005c4c:	e7ee      	b.n	8005c2c <__libc_init_array+0xc>
 8005c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c52:	4798      	blx	r3
 8005c54:	3601      	adds	r6, #1
 8005c56:	e7f2      	b.n	8005c3e <__libc_init_array+0x1e>
 8005c58:	08006694 	.word	0x08006694
 8005c5c:	08006694 	.word	0x08006694
 8005c60:	08006694 	.word	0x08006694
 8005c64:	08006698 	.word	0x08006698

08005c68 <__retarget_lock_acquire_recursive>:
 8005c68:	4770      	bx	lr

08005c6a <__retarget_lock_release_recursive>:
 8005c6a:	4770      	bx	lr

08005c6c <_free_r>:
 8005c6c:	b538      	push	{r3, r4, r5, lr}
 8005c6e:	4605      	mov	r5, r0
 8005c70:	2900      	cmp	r1, #0
 8005c72:	d041      	beq.n	8005cf8 <_free_r+0x8c>
 8005c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c78:	1f0c      	subs	r4, r1, #4
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	bfb8      	it	lt
 8005c7e:	18e4      	addlt	r4, r4, r3
 8005c80:	f000 f8e0 	bl	8005e44 <__malloc_lock>
 8005c84:	4a1d      	ldr	r2, [pc, #116]	@ (8005cfc <_free_r+0x90>)
 8005c86:	6813      	ldr	r3, [r2, #0]
 8005c88:	b933      	cbnz	r3, 8005c98 <_free_r+0x2c>
 8005c8a:	6063      	str	r3, [r4, #4]
 8005c8c:	6014      	str	r4, [r2, #0]
 8005c8e:	4628      	mov	r0, r5
 8005c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c94:	f000 b8dc 	b.w	8005e50 <__malloc_unlock>
 8005c98:	42a3      	cmp	r3, r4
 8005c9a:	d908      	bls.n	8005cae <_free_r+0x42>
 8005c9c:	6820      	ldr	r0, [r4, #0]
 8005c9e:	1821      	adds	r1, r4, r0
 8005ca0:	428b      	cmp	r3, r1
 8005ca2:	bf01      	itttt	eq
 8005ca4:	6819      	ldreq	r1, [r3, #0]
 8005ca6:	685b      	ldreq	r3, [r3, #4]
 8005ca8:	1809      	addeq	r1, r1, r0
 8005caa:	6021      	streq	r1, [r4, #0]
 8005cac:	e7ed      	b.n	8005c8a <_free_r+0x1e>
 8005cae:	461a      	mov	r2, r3
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	b10b      	cbz	r3, 8005cb8 <_free_r+0x4c>
 8005cb4:	42a3      	cmp	r3, r4
 8005cb6:	d9fa      	bls.n	8005cae <_free_r+0x42>
 8005cb8:	6811      	ldr	r1, [r2, #0]
 8005cba:	1850      	adds	r0, r2, r1
 8005cbc:	42a0      	cmp	r0, r4
 8005cbe:	d10b      	bne.n	8005cd8 <_free_r+0x6c>
 8005cc0:	6820      	ldr	r0, [r4, #0]
 8005cc2:	4401      	add	r1, r0
 8005cc4:	1850      	adds	r0, r2, r1
 8005cc6:	4283      	cmp	r3, r0
 8005cc8:	6011      	str	r1, [r2, #0]
 8005cca:	d1e0      	bne.n	8005c8e <_free_r+0x22>
 8005ccc:	6818      	ldr	r0, [r3, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	6053      	str	r3, [r2, #4]
 8005cd2:	4408      	add	r0, r1
 8005cd4:	6010      	str	r0, [r2, #0]
 8005cd6:	e7da      	b.n	8005c8e <_free_r+0x22>
 8005cd8:	d902      	bls.n	8005ce0 <_free_r+0x74>
 8005cda:	230c      	movs	r3, #12
 8005cdc:	602b      	str	r3, [r5, #0]
 8005cde:	e7d6      	b.n	8005c8e <_free_r+0x22>
 8005ce0:	6820      	ldr	r0, [r4, #0]
 8005ce2:	1821      	adds	r1, r4, r0
 8005ce4:	428b      	cmp	r3, r1
 8005ce6:	bf04      	itt	eq
 8005ce8:	6819      	ldreq	r1, [r3, #0]
 8005cea:	685b      	ldreq	r3, [r3, #4]
 8005cec:	6063      	str	r3, [r4, #4]
 8005cee:	bf04      	itt	eq
 8005cf0:	1809      	addeq	r1, r1, r0
 8005cf2:	6021      	streq	r1, [r4, #0]
 8005cf4:	6054      	str	r4, [r2, #4]
 8005cf6:	e7ca      	b.n	8005c8e <_free_r+0x22>
 8005cf8:	bd38      	pop	{r3, r4, r5, pc}
 8005cfa:	bf00      	nop
 8005cfc:	2004090c 	.word	0x2004090c

08005d00 <sbrk_aligned>:
 8005d00:	b570      	push	{r4, r5, r6, lr}
 8005d02:	4e0f      	ldr	r6, [pc, #60]	@ (8005d40 <sbrk_aligned+0x40>)
 8005d04:	460c      	mov	r4, r1
 8005d06:	6831      	ldr	r1, [r6, #0]
 8005d08:	4605      	mov	r5, r0
 8005d0a:	b911      	cbnz	r1, 8005d12 <sbrk_aligned+0x12>
 8005d0c:	f000 fba6 	bl	800645c <_sbrk_r>
 8005d10:	6030      	str	r0, [r6, #0]
 8005d12:	4621      	mov	r1, r4
 8005d14:	4628      	mov	r0, r5
 8005d16:	f000 fba1 	bl	800645c <_sbrk_r>
 8005d1a:	1c43      	adds	r3, r0, #1
 8005d1c:	d103      	bne.n	8005d26 <sbrk_aligned+0x26>
 8005d1e:	f04f 34ff 	mov.w	r4, #4294967295
 8005d22:	4620      	mov	r0, r4
 8005d24:	bd70      	pop	{r4, r5, r6, pc}
 8005d26:	1cc4      	adds	r4, r0, #3
 8005d28:	f024 0403 	bic.w	r4, r4, #3
 8005d2c:	42a0      	cmp	r0, r4
 8005d2e:	d0f8      	beq.n	8005d22 <sbrk_aligned+0x22>
 8005d30:	1a21      	subs	r1, r4, r0
 8005d32:	4628      	mov	r0, r5
 8005d34:	f000 fb92 	bl	800645c <_sbrk_r>
 8005d38:	3001      	adds	r0, #1
 8005d3a:	d1f2      	bne.n	8005d22 <sbrk_aligned+0x22>
 8005d3c:	e7ef      	b.n	8005d1e <sbrk_aligned+0x1e>
 8005d3e:	bf00      	nop
 8005d40:	20040908 	.word	0x20040908

08005d44 <_malloc_r>:
 8005d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d48:	1ccd      	adds	r5, r1, #3
 8005d4a:	f025 0503 	bic.w	r5, r5, #3
 8005d4e:	3508      	adds	r5, #8
 8005d50:	2d0c      	cmp	r5, #12
 8005d52:	bf38      	it	cc
 8005d54:	250c      	movcc	r5, #12
 8005d56:	2d00      	cmp	r5, #0
 8005d58:	4606      	mov	r6, r0
 8005d5a:	db01      	blt.n	8005d60 <_malloc_r+0x1c>
 8005d5c:	42a9      	cmp	r1, r5
 8005d5e:	d904      	bls.n	8005d6a <_malloc_r+0x26>
 8005d60:	230c      	movs	r3, #12
 8005d62:	6033      	str	r3, [r6, #0]
 8005d64:	2000      	movs	r0, #0
 8005d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e40 <_malloc_r+0xfc>
 8005d6e:	f000 f869 	bl	8005e44 <__malloc_lock>
 8005d72:	f8d8 3000 	ldr.w	r3, [r8]
 8005d76:	461c      	mov	r4, r3
 8005d78:	bb44      	cbnz	r4, 8005dcc <_malloc_r+0x88>
 8005d7a:	4629      	mov	r1, r5
 8005d7c:	4630      	mov	r0, r6
 8005d7e:	f7ff ffbf 	bl	8005d00 <sbrk_aligned>
 8005d82:	1c43      	adds	r3, r0, #1
 8005d84:	4604      	mov	r4, r0
 8005d86:	d158      	bne.n	8005e3a <_malloc_r+0xf6>
 8005d88:	f8d8 4000 	ldr.w	r4, [r8]
 8005d8c:	4627      	mov	r7, r4
 8005d8e:	2f00      	cmp	r7, #0
 8005d90:	d143      	bne.n	8005e1a <_malloc_r+0xd6>
 8005d92:	2c00      	cmp	r4, #0
 8005d94:	d04b      	beq.n	8005e2e <_malloc_r+0xea>
 8005d96:	6823      	ldr	r3, [r4, #0]
 8005d98:	4639      	mov	r1, r7
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	eb04 0903 	add.w	r9, r4, r3
 8005da0:	f000 fb5c 	bl	800645c <_sbrk_r>
 8005da4:	4581      	cmp	r9, r0
 8005da6:	d142      	bne.n	8005e2e <_malloc_r+0xea>
 8005da8:	6821      	ldr	r1, [r4, #0]
 8005daa:	1a6d      	subs	r5, r5, r1
 8005dac:	4629      	mov	r1, r5
 8005dae:	4630      	mov	r0, r6
 8005db0:	f7ff ffa6 	bl	8005d00 <sbrk_aligned>
 8005db4:	3001      	adds	r0, #1
 8005db6:	d03a      	beq.n	8005e2e <_malloc_r+0xea>
 8005db8:	6823      	ldr	r3, [r4, #0]
 8005dba:	442b      	add	r3, r5
 8005dbc:	6023      	str	r3, [r4, #0]
 8005dbe:	f8d8 3000 	ldr.w	r3, [r8]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	bb62      	cbnz	r2, 8005e20 <_malloc_r+0xdc>
 8005dc6:	f8c8 7000 	str.w	r7, [r8]
 8005dca:	e00f      	b.n	8005dec <_malloc_r+0xa8>
 8005dcc:	6822      	ldr	r2, [r4, #0]
 8005dce:	1b52      	subs	r2, r2, r5
 8005dd0:	d420      	bmi.n	8005e14 <_malloc_r+0xd0>
 8005dd2:	2a0b      	cmp	r2, #11
 8005dd4:	d917      	bls.n	8005e06 <_malloc_r+0xc2>
 8005dd6:	1961      	adds	r1, r4, r5
 8005dd8:	42a3      	cmp	r3, r4
 8005dda:	6025      	str	r5, [r4, #0]
 8005ddc:	bf18      	it	ne
 8005dde:	6059      	strne	r1, [r3, #4]
 8005de0:	6863      	ldr	r3, [r4, #4]
 8005de2:	bf08      	it	eq
 8005de4:	f8c8 1000 	streq.w	r1, [r8]
 8005de8:	5162      	str	r2, [r4, r5]
 8005dea:	604b      	str	r3, [r1, #4]
 8005dec:	4630      	mov	r0, r6
 8005dee:	f000 f82f 	bl	8005e50 <__malloc_unlock>
 8005df2:	f104 000b 	add.w	r0, r4, #11
 8005df6:	1d23      	adds	r3, r4, #4
 8005df8:	f020 0007 	bic.w	r0, r0, #7
 8005dfc:	1ac2      	subs	r2, r0, r3
 8005dfe:	bf1c      	itt	ne
 8005e00:	1a1b      	subne	r3, r3, r0
 8005e02:	50a3      	strne	r3, [r4, r2]
 8005e04:	e7af      	b.n	8005d66 <_malloc_r+0x22>
 8005e06:	6862      	ldr	r2, [r4, #4]
 8005e08:	42a3      	cmp	r3, r4
 8005e0a:	bf0c      	ite	eq
 8005e0c:	f8c8 2000 	streq.w	r2, [r8]
 8005e10:	605a      	strne	r2, [r3, #4]
 8005e12:	e7eb      	b.n	8005dec <_malloc_r+0xa8>
 8005e14:	4623      	mov	r3, r4
 8005e16:	6864      	ldr	r4, [r4, #4]
 8005e18:	e7ae      	b.n	8005d78 <_malloc_r+0x34>
 8005e1a:	463c      	mov	r4, r7
 8005e1c:	687f      	ldr	r7, [r7, #4]
 8005e1e:	e7b6      	b.n	8005d8e <_malloc_r+0x4a>
 8005e20:	461a      	mov	r2, r3
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	42a3      	cmp	r3, r4
 8005e26:	d1fb      	bne.n	8005e20 <_malloc_r+0xdc>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	6053      	str	r3, [r2, #4]
 8005e2c:	e7de      	b.n	8005dec <_malloc_r+0xa8>
 8005e2e:	230c      	movs	r3, #12
 8005e30:	6033      	str	r3, [r6, #0]
 8005e32:	4630      	mov	r0, r6
 8005e34:	f000 f80c 	bl	8005e50 <__malloc_unlock>
 8005e38:	e794      	b.n	8005d64 <_malloc_r+0x20>
 8005e3a:	6005      	str	r5, [r0, #0]
 8005e3c:	e7d6      	b.n	8005dec <_malloc_r+0xa8>
 8005e3e:	bf00      	nop
 8005e40:	2004090c 	.word	0x2004090c

08005e44 <__malloc_lock>:
 8005e44:	4801      	ldr	r0, [pc, #4]	@ (8005e4c <__malloc_lock+0x8>)
 8005e46:	f7ff bf0f 	b.w	8005c68 <__retarget_lock_acquire_recursive>
 8005e4a:	bf00      	nop
 8005e4c:	20040904 	.word	0x20040904

08005e50 <__malloc_unlock>:
 8005e50:	4801      	ldr	r0, [pc, #4]	@ (8005e58 <__malloc_unlock+0x8>)
 8005e52:	f7ff bf0a 	b.w	8005c6a <__retarget_lock_release_recursive>
 8005e56:	bf00      	nop
 8005e58:	20040904 	.word	0x20040904

08005e5c <__ssputs_r>:
 8005e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e60:	688e      	ldr	r6, [r1, #8]
 8005e62:	461f      	mov	r7, r3
 8005e64:	42be      	cmp	r6, r7
 8005e66:	680b      	ldr	r3, [r1, #0]
 8005e68:	4682      	mov	sl, r0
 8005e6a:	460c      	mov	r4, r1
 8005e6c:	4690      	mov	r8, r2
 8005e6e:	d82d      	bhi.n	8005ecc <__ssputs_r+0x70>
 8005e70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005e78:	d026      	beq.n	8005ec8 <__ssputs_r+0x6c>
 8005e7a:	6965      	ldr	r5, [r4, #20]
 8005e7c:	6909      	ldr	r1, [r1, #16]
 8005e7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e82:	eba3 0901 	sub.w	r9, r3, r1
 8005e86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e8a:	1c7b      	adds	r3, r7, #1
 8005e8c:	444b      	add	r3, r9
 8005e8e:	106d      	asrs	r5, r5, #1
 8005e90:	429d      	cmp	r5, r3
 8005e92:	bf38      	it	cc
 8005e94:	461d      	movcc	r5, r3
 8005e96:	0553      	lsls	r3, r2, #21
 8005e98:	d527      	bpl.n	8005eea <__ssputs_r+0x8e>
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	f7ff ff52 	bl	8005d44 <_malloc_r>
 8005ea0:	4606      	mov	r6, r0
 8005ea2:	b360      	cbz	r0, 8005efe <__ssputs_r+0xa2>
 8005ea4:	6921      	ldr	r1, [r4, #16]
 8005ea6:	464a      	mov	r2, r9
 8005ea8:	f000 fae8 	bl	800647c <memcpy>
 8005eac:	89a3      	ldrh	r3, [r4, #12]
 8005eae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eb6:	81a3      	strh	r3, [r4, #12]
 8005eb8:	6126      	str	r6, [r4, #16]
 8005eba:	6165      	str	r5, [r4, #20]
 8005ebc:	444e      	add	r6, r9
 8005ebe:	eba5 0509 	sub.w	r5, r5, r9
 8005ec2:	6026      	str	r6, [r4, #0]
 8005ec4:	60a5      	str	r5, [r4, #8]
 8005ec6:	463e      	mov	r6, r7
 8005ec8:	42be      	cmp	r6, r7
 8005eca:	d900      	bls.n	8005ece <__ssputs_r+0x72>
 8005ecc:	463e      	mov	r6, r7
 8005ece:	6820      	ldr	r0, [r4, #0]
 8005ed0:	4632      	mov	r2, r6
 8005ed2:	4641      	mov	r1, r8
 8005ed4:	f000 faa8 	bl	8006428 <memmove>
 8005ed8:	68a3      	ldr	r3, [r4, #8]
 8005eda:	1b9b      	subs	r3, r3, r6
 8005edc:	60a3      	str	r3, [r4, #8]
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	4433      	add	r3, r6
 8005ee2:	6023      	str	r3, [r4, #0]
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eea:	462a      	mov	r2, r5
 8005eec:	f000 fad4 	bl	8006498 <_realloc_r>
 8005ef0:	4606      	mov	r6, r0
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	d1e0      	bne.n	8005eb8 <__ssputs_r+0x5c>
 8005ef6:	6921      	ldr	r1, [r4, #16]
 8005ef8:	4650      	mov	r0, sl
 8005efa:	f7ff feb7 	bl	8005c6c <_free_r>
 8005efe:	230c      	movs	r3, #12
 8005f00:	f8ca 3000 	str.w	r3, [sl]
 8005f04:	89a3      	ldrh	r3, [r4, #12]
 8005f06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f0a:	81a3      	strh	r3, [r4, #12]
 8005f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f10:	e7e9      	b.n	8005ee6 <__ssputs_r+0x8a>
	...

08005f14 <_svfiprintf_r>:
 8005f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f18:	4698      	mov	r8, r3
 8005f1a:	898b      	ldrh	r3, [r1, #12]
 8005f1c:	061b      	lsls	r3, r3, #24
 8005f1e:	b09d      	sub	sp, #116	@ 0x74
 8005f20:	4607      	mov	r7, r0
 8005f22:	460d      	mov	r5, r1
 8005f24:	4614      	mov	r4, r2
 8005f26:	d510      	bpl.n	8005f4a <_svfiprintf_r+0x36>
 8005f28:	690b      	ldr	r3, [r1, #16]
 8005f2a:	b973      	cbnz	r3, 8005f4a <_svfiprintf_r+0x36>
 8005f2c:	2140      	movs	r1, #64	@ 0x40
 8005f2e:	f7ff ff09 	bl	8005d44 <_malloc_r>
 8005f32:	6028      	str	r0, [r5, #0]
 8005f34:	6128      	str	r0, [r5, #16]
 8005f36:	b930      	cbnz	r0, 8005f46 <_svfiprintf_r+0x32>
 8005f38:	230c      	movs	r3, #12
 8005f3a:	603b      	str	r3, [r7, #0]
 8005f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f40:	b01d      	add	sp, #116	@ 0x74
 8005f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f46:	2340      	movs	r3, #64	@ 0x40
 8005f48:	616b      	str	r3, [r5, #20]
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f4e:	2320      	movs	r3, #32
 8005f50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f54:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f58:	2330      	movs	r3, #48	@ 0x30
 8005f5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80060f8 <_svfiprintf_r+0x1e4>
 8005f5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f62:	f04f 0901 	mov.w	r9, #1
 8005f66:	4623      	mov	r3, r4
 8005f68:	469a      	mov	sl, r3
 8005f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f6e:	b10a      	cbz	r2, 8005f74 <_svfiprintf_r+0x60>
 8005f70:	2a25      	cmp	r2, #37	@ 0x25
 8005f72:	d1f9      	bne.n	8005f68 <_svfiprintf_r+0x54>
 8005f74:	ebba 0b04 	subs.w	fp, sl, r4
 8005f78:	d00b      	beq.n	8005f92 <_svfiprintf_r+0x7e>
 8005f7a:	465b      	mov	r3, fp
 8005f7c:	4622      	mov	r2, r4
 8005f7e:	4629      	mov	r1, r5
 8005f80:	4638      	mov	r0, r7
 8005f82:	f7ff ff6b 	bl	8005e5c <__ssputs_r>
 8005f86:	3001      	adds	r0, #1
 8005f88:	f000 80a7 	beq.w	80060da <_svfiprintf_r+0x1c6>
 8005f8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f8e:	445a      	add	r2, fp
 8005f90:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f92:	f89a 3000 	ldrb.w	r3, [sl]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 809f 	beq.w	80060da <_svfiprintf_r+0x1c6>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fa6:	f10a 0a01 	add.w	sl, sl, #1
 8005faa:	9304      	str	r3, [sp, #16]
 8005fac:	9307      	str	r3, [sp, #28]
 8005fae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005fb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8005fb4:	4654      	mov	r4, sl
 8005fb6:	2205      	movs	r2, #5
 8005fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fbc:	484e      	ldr	r0, [pc, #312]	@ (80060f8 <_svfiprintf_r+0x1e4>)
 8005fbe:	f7fa f927 	bl	8000210 <memchr>
 8005fc2:	9a04      	ldr	r2, [sp, #16]
 8005fc4:	b9d8      	cbnz	r0, 8005ffe <_svfiprintf_r+0xea>
 8005fc6:	06d0      	lsls	r0, r2, #27
 8005fc8:	bf44      	itt	mi
 8005fca:	2320      	movmi	r3, #32
 8005fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fd0:	0711      	lsls	r1, r2, #28
 8005fd2:	bf44      	itt	mi
 8005fd4:	232b      	movmi	r3, #43	@ 0x2b
 8005fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fda:	f89a 3000 	ldrb.w	r3, [sl]
 8005fde:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fe0:	d015      	beq.n	800600e <_svfiprintf_r+0xfa>
 8005fe2:	9a07      	ldr	r2, [sp, #28]
 8005fe4:	4654      	mov	r4, sl
 8005fe6:	2000      	movs	r0, #0
 8005fe8:	f04f 0c0a 	mov.w	ip, #10
 8005fec:	4621      	mov	r1, r4
 8005fee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ff2:	3b30      	subs	r3, #48	@ 0x30
 8005ff4:	2b09      	cmp	r3, #9
 8005ff6:	d94b      	bls.n	8006090 <_svfiprintf_r+0x17c>
 8005ff8:	b1b0      	cbz	r0, 8006028 <_svfiprintf_r+0x114>
 8005ffa:	9207      	str	r2, [sp, #28]
 8005ffc:	e014      	b.n	8006028 <_svfiprintf_r+0x114>
 8005ffe:	eba0 0308 	sub.w	r3, r0, r8
 8006002:	fa09 f303 	lsl.w	r3, r9, r3
 8006006:	4313      	orrs	r3, r2
 8006008:	9304      	str	r3, [sp, #16]
 800600a:	46a2      	mov	sl, r4
 800600c:	e7d2      	b.n	8005fb4 <_svfiprintf_r+0xa0>
 800600e:	9b03      	ldr	r3, [sp, #12]
 8006010:	1d19      	adds	r1, r3, #4
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	9103      	str	r1, [sp, #12]
 8006016:	2b00      	cmp	r3, #0
 8006018:	bfbb      	ittet	lt
 800601a:	425b      	neglt	r3, r3
 800601c:	f042 0202 	orrlt.w	r2, r2, #2
 8006020:	9307      	strge	r3, [sp, #28]
 8006022:	9307      	strlt	r3, [sp, #28]
 8006024:	bfb8      	it	lt
 8006026:	9204      	strlt	r2, [sp, #16]
 8006028:	7823      	ldrb	r3, [r4, #0]
 800602a:	2b2e      	cmp	r3, #46	@ 0x2e
 800602c:	d10a      	bne.n	8006044 <_svfiprintf_r+0x130>
 800602e:	7863      	ldrb	r3, [r4, #1]
 8006030:	2b2a      	cmp	r3, #42	@ 0x2a
 8006032:	d132      	bne.n	800609a <_svfiprintf_r+0x186>
 8006034:	9b03      	ldr	r3, [sp, #12]
 8006036:	1d1a      	adds	r2, r3, #4
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	9203      	str	r2, [sp, #12]
 800603c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006040:	3402      	adds	r4, #2
 8006042:	9305      	str	r3, [sp, #20]
 8006044:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006108 <_svfiprintf_r+0x1f4>
 8006048:	7821      	ldrb	r1, [r4, #0]
 800604a:	2203      	movs	r2, #3
 800604c:	4650      	mov	r0, sl
 800604e:	f7fa f8df 	bl	8000210 <memchr>
 8006052:	b138      	cbz	r0, 8006064 <_svfiprintf_r+0x150>
 8006054:	9b04      	ldr	r3, [sp, #16]
 8006056:	eba0 000a 	sub.w	r0, r0, sl
 800605a:	2240      	movs	r2, #64	@ 0x40
 800605c:	4082      	lsls	r2, r0
 800605e:	4313      	orrs	r3, r2
 8006060:	3401      	adds	r4, #1
 8006062:	9304      	str	r3, [sp, #16]
 8006064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006068:	4824      	ldr	r0, [pc, #144]	@ (80060fc <_svfiprintf_r+0x1e8>)
 800606a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800606e:	2206      	movs	r2, #6
 8006070:	f7fa f8ce 	bl	8000210 <memchr>
 8006074:	2800      	cmp	r0, #0
 8006076:	d036      	beq.n	80060e6 <_svfiprintf_r+0x1d2>
 8006078:	4b21      	ldr	r3, [pc, #132]	@ (8006100 <_svfiprintf_r+0x1ec>)
 800607a:	bb1b      	cbnz	r3, 80060c4 <_svfiprintf_r+0x1b0>
 800607c:	9b03      	ldr	r3, [sp, #12]
 800607e:	3307      	adds	r3, #7
 8006080:	f023 0307 	bic.w	r3, r3, #7
 8006084:	3308      	adds	r3, #8
 8006086:	9303      	str	r3, [sp, #12]
 8006088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800608a:	4433      	add	r3, r6
 800608c:	9309      	str	r3, [sp, #36]	@ 0x24
 800608e:	e76a      	b.n	8005f66 <_svfiprintf_r+0x52>
 8006090:	fb0c 3202 	mla	r2, ip, r2, r3
 8006094:	460c      	mov	r4, r1
 8006096:	2001      	movs	r0, #1
 8006098:	e7a8      	b.n	8005fec <_svfiprintf_r+0xd8>
 800609a:	2300      	movs	r3, #0
 800609c:	3401      	adds	r4, #1
 800609e:	9305      	str	r3, [sp, #20]
 80060a0:	4619      	mov	r1, r3
 80060a2:	f04f 0c0a 	mov.w	ip, #10
 80060a6:	4620      	mov	r0, r4
 80060a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060ac:	3a30      	subs	r2, #48	@ 0x30
 80060ae:	2a09      	cmp	r2, #9
 80060b0:	d903      	bls.n	80060ba <_svfiprintf_r+0x1a6>
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d0c6      	beq.n	8006044 <_svfiprintf_r+0x130>
 80060b6:	9105      	str	r1, [sp, #20]
 80060b8:	e7c4      	b.n	8006044 <_svfiprintf_r+0x130>
 80060ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80060be:	4604      	mov	r4, r0
 80060c0:	2301      	movs	r3, #1
 80060c2:	e7f0      	b.n	80060a6 <_svfiprintf_r+0x192>
 80060c4:	ab03      	add	r3, sp, #12
 80060c6:	9300      	str	r3, [sp, #0]
 80060c8:	462a      	mov	r2, r5
 80060ca:	4b0e      	ldr	r3, [pc, #56]	@ (8006104 <_svfiprintf_r+0x1f0>)
 80060cc:	a904      	add	r1, sp, #16
 80060ce:	4638      	mov	r0, r7
 80060d0:	f3af 8000 	nop.w
 80060d4:	1c42      	adds	r2, r0, #1
 80060d6:	4606      	mov	r6, r0
 80060d8:	d1d6      	bne.n	8006088 <_svfiprintf_r+0x174>
 80060da:	89ab      	ldrh	r3, [r5, #12]
 80060dc:	065b      	lsls	r3, r3, #25
 80060de:	f53f af2d 	bmi.w	8005f3c <_svfiprintf_r+0x28>
 80060e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060e4:	e72c      	b.n	8005f40 <_svfiprintf_r+0x2c>
 80060e6:	ab03      	add	r3, sp, #12
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	462a      	mov	r2, r5
 80060ec:	4b05      	ldr	r3, [pc, #20]	@ (8006104 <_svfiprintf_r+0x1f0>)
 80060ee:	a904      	add	r1, sp, #16
 80060f0:	4638      	mov	r0, r7
 80060f2:	f000 f879 	bl	80061e8 <_printf_i>
 80060f6:	e7ed      	b.n	80060d4 <_svfiprintf_r+0x1c0>
 80060f8:	08006658 	.word	0x08006658
 80060fc:	08006662 	.word	0x08006662
 8006100:	00000000 	.word	0x00000000
 8006104:	08005e5d 	.word	0x08005e5d
 8006108:	0800665e 	.word	0x0800665e

0800610c <_printf_common>:
 800610c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006110:	4616      	mov	r6, r2
 8006112:	4698      	mov	r8, r3
 8006114:	688a      	ldr	r2, [r1, #8]
 8006116:	690b      	ldr	r3, [r1, #16]
 8006118:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800611c:	4293      	cmp	r3, r2
 800611e:	bfb8      	it	lt
 8006120:	4613      	movlt	r3, r2
 8006122:	6033      	str	r3, [r6, #0]
 8006124:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006128:	4607      	mov	r7, r0
 800612a:	460c      	mov	r4, r1
 800612c:	b10a      	cbz	r2, 8006132 <_printf_common+0x26>
 800612e:	3301      	adds	r3, #1
 8006130:	6033      	str	r3, [r6, #0]
 8006132:	6823      	ldr	r3, [r4, #0]
 8006134:	0699      	lsls	r1, r3, #26
 8006136:	bf42      	ittt	mi
 8006138:	6833      	ldrmi	r3, [r6, #0]
 800613a:	3302      	addmi	r3, #2
 800613c:	6033      	strmi	r3, [r6, #0]
 800613e:	6825      	ldr	r5, [r4, #0]
 8006140:	f015 0506 	ands.w	r5, r5, #6
 8006144:	d106      	bne.n	8006154 <_printf_common+0x48>
 8006146:	f104 0a19 	add.w	sl, r4, #25
 800614a:	68e3      	ldr	r3, [r4, #12]
 800614c:	6832      	ldr	r2, [r6, #0]
 800614e:	1a9b      	subs	r3, r3, r2
 8006150:	42ab      	cmp	r3, r5
 8006152:	dc26      	bgt.n	80061a2 <_printf_common+0x96>
 8006154:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006158:	6822      	ldr	r2, [r4, #0]
 800615a:	3b00      	subs	r3, #0
 800615c:	bf18      	it	ne
 800615e:	2301      	movne	r3, #1
 8006160:	0692      	lsls	r2, r2, #26
 8006162:	d42b      	bmi.n	80061bc <_printf_common+0xb0>
 8006164:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006168:	4641      	mov	r1, r8
 800616a:	4638      	mov	r0, r7
 800616c:	47c8      	blx	r9
 800616e:	3001      	adds	r0, #1
 8006170:	d01e      	beq.n	80061b0 <_printf_common+0xa4>
 8006172:	6823      	ldr	r3, [r4, #0]
 8006174:	6922      	ldr	r2, [r4, #16]
 8006176:	f003 0306 	and.w	r3, r3, #6
 800617a:	2b04      	cmp	r3, #4
 800617c:	bf02      	ittt	eq
 800617e:	68e5      	ldreq	r5, [r4, #12]
 8006180:	6833      	ldreq	r3, [r6, #0]
 8006182:	1aed      	subeq	r5, r5, r3
 8006184:	68a3      	ldr	r3, [r4, #8]
 8006186:	bf0c      	ite	eq
 8006188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800618c:	2500      	movne	r5, #0
 800618e:	4293      	cmp	r3, r2
 8006190:	bfc4      	itt	gt
 8006192:	1a9b      	subgt	r3, r3, r2
 8006194:	18ed      	addgt	r5, r5, r3
 8006196:	2600      	movs	r6, #0
 8006198:	341a      	adds	r4, #26
 800619a:	42b5      	cmp	r5, r6
 800619c:	d11a      	bne.n	80061d4 <_printf_common+0xc8>
 800619e:	2000      	movs	r0, #0
 80061a0:	e008      	b.n	80061b4 <_printf_common+0xa8>
 80061a2:	2301      	movs	r3, #1
 80061a4:	4652      	mov	r2, sl
 80061a6:	4641      	mov	r1, r8
 80061a8:	4638      	mov	r0, r7
 80061aa:	47c8      	blx	r9
 80061ac:	3001      	adds	r0, #1
 80061ae:	d103      	bne.n	80061b8 <_printf_common+0xac>
 80061b0:	f04f 30ff 	mov.w	r0, #4294967295
 80061b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b8:	3501      	adds	r5, #1
 80061ba:	e7c6      	b.n	800614a <_printf_common+0x3e>
 80061bc:	18e1      	adds	r1, r4, r3
 80061be:	1c5a      	adds	r2, r3, #1
 80061c0:	2030      	movs	r0, #48	@ 0x30
 80061c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80061c6:	4422      	add	r2, r4
 80061c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80061cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80061d0:	3302      	adds	r3, #2
 80061d2:	e7c7      	b.n	8006164 <_printf_common+0x58>
 80061d4:	2301      	movs	r3, #1
 80061d6:	4622      	mov	r2, r4
 80061d8:	4641      	mov	r1, r8
 80061da:	4638      	mov	r0, r7
 80061dc:	47c8      	blx	r9
 80061de:	3001      	adds	r0, #1
 80061e0:	d0e6      	beq.n	80061b0 <_printf_common+0xa4>
 80061e2:	3601      	adds	r6, #1
 80061e4:	e7d9      	b.n	800619a <_printf_common+0x8e>
	...

080061e8 <_printf_i>:
 80061e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061ec:	7e0f      	ldrb	r7, [r1, #24]
 80061ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061f0:	2f78      	cmp	r7, #120	@ 0x78
 80061f2:	4691      	mov	r9, r2
 80061f4:	4680      	mov	r8, r0
 80061f6:	460c      	mov	r4, r1
 80061f8:	469a      	mov	sl, r3
 80061fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80061fe:	d807      	bhi.n	8006210 <_printf_i+0x28>
 8006200:	2f62      	cmp	r7, #98	@ 0x62
 8006202:	d80a      	bhi.n	800621a <_printf_i+0x32>
 8006204:	2f00      	cmp	r7, #0
 8006206:	f000 80d2 	beq.w	80063ae <_printf_i+0x1c6>
 800620a:	2f58      	cmp	r7, #88	@ 0x58
 800620c:	f000 80b9 	beq.w	8006382 <_printf_i+0x19a>
 8006210:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006214:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006218:	e03a      	b.n	8006290 <_printf_i+0xa8>
 800621a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800621e:	2b15      	cmp	r3, #21
 8006220:	d8f6      	bhi.n	8006210 <_printf_i+0x28>
 8006222:	a101      	add	r1, pc, #4	@ (adr r1, 8006228 <_printf_i+0x40>)
 8006224:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006228:	08006281 	.word	0x08006281
 800622c:	08006295 	.word	0x08006295
 8006230:	08006211 	.word	0x08006211
 8006234:	08006211 	.word	0x08006211
 8006238:	08006211 	.word	0x08006211
 800623c:	08006211 	.word	0x08006211
 8006240:	08006295 	.word	0x08006295
 8006244:	08006211 	.word	0x08006211
 8006248:	08006211 	.word	0x08006211
 800624c:	08006211 	.word	0x08006211
 8006250:	08006211 	.word	0x08006211
 8006254:	08006395 	.word	0x08006395
 8006258:	080062bf 	.word	0x080062bf
 800625c:	0800634f 	.word	0x0800634f
 8006260:	08006211 	.word	0x08006211
 8006264:	08006211 	.word	0x08006211
 8006268:	080063b7 	.word	0x080063b7
 800626c:	08006211 	.word	0x08006211
 8006270:	080062bf 	.word	0x080062bf
 8006274:	08006211 	.word	0x08006211
 8006278:	08006211 	.word	0x08006211
 800627c:	08006357 	.word	0x08006357
 8006280:	6833      	ldr	r3, [r6, #0]
 8006282:	1d1a      	adds	r2, r3, #4
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	6032      	str	r2, [r6, #0]
 8006288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800628c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006290:	2301      	movs	r3, #1
 8006292:	e09d      	b.n	80063d0 <_printf_i+0x1e8>
 8006294:	6833      	ldr	r3, [r6, #0]
 8006296:	6820      	ldr	r0, [r4, #0]
 8006298:	1d19      	adds	r1, r3, #4
 800629a:	6031      	str	r1, [r6, #0]
 800629c:	0606      	lsls	r6, r0, #24
 800629e:	d501      	bpl.n	80062a4 <_printf_i+0xbc>
 80062a0:	681d      	ldr	r5, [r3, #0]
 80062a2:	e003      	b.n	80062ac <_printf_i+0xc4>
 80062a4:	0645      	lsls	r5, r0, #25
 80062a6:	d5fb      	bpl.n	80062a0 <_printf_i+0xb8>
 80062a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80062ac:	2d00      	cmp	r5, #0
 80062ae:	da03      	bge.n	80062b8 <_printf_i+0xd0>
 80062b0:	232d      	movs	r3, #45	@ 0x2d
 80062b2:	426d      	negs	r5, r5
 80062b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062b8:	4859      	ldr	r0, [pc, #356]	@ (8006420 <_printf_i+0x238>)
 80062ba:	230a      	movs	r3, #10
 80062bc:	e011      	b.n	80062e2 <_printf_i+0xfa>
 80062be:	6821      	ldr	r1, [r4, #0]
 80062c0:	6833      	ldr	r3, [r6, #0]
 80062c2:	0608      	lsls	r0, r1, #24
 80062c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80062c8:	d402      	bmi.n	80062d0 <_printf_i+0xe8>
 80062ca:	0649      	lsls	r1, r1, #25
 80062cc:	bf48      	it	mi
 80062ce:	b2ad      	uxthmi	r5, r5
 80062d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80062d2:	4853      	ldr	r0, [pc, #332]	@ (8006420 <_printf_i+0x238>)
 80062d4:	6033      	str	r3, [r6, #0]
 80062d6:	bf14      	ite	ne
 80062d8:	230a      	movne	r3, #10
 80062da:	2308      	moveq	r3, #8
 80062dc:	2100      	movs	r1, #0
 80062de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80062e2:	6866      	ldr	r6, [r4, #4]
 80062e4:	60a6      	str	r6, [r4, #8]
 80062e6:	2e00      	cmp	r6, #0
 80062e8:	bfa2      	ittt	ge
 80062ea:	6821      	ldrge	r1, [r4, #0]
 80062ec:	f021 0104 	bicge.w	r1, r1, #4
 80062f0:	6021      	strge	r1, [r4, #0]
 80062f2:	b90d      	cbnz	r5, 80062f8 <_printf_i+0x110>
 80062f4:	2e00      	cmp	r6, #0
 80062f6:	d04b      	beq.n	8006390 <_printf_i+0x1a8>
 80062f8:	4616      	mov	r6, r2
 80062fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80062fe:	fb03 5711 	mls	r7, r3, r1, r5
 8006302:	5dc7      	ldrb	r7, [r0, r7]
 8006304:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006308:	462f      	mov	r7, r5
 800630a:	42bb      	cmp	r3, r7
 800630c:	460d      	mov	r5, r1
 800630e:	d9f4      	bls.n	80062fa <_printf_i+0x112>
 8006310:	2b08      	cmp	r3, #8
 8006312:	d10b      	bne.n	800632c <_printf_i+0x144>
 8006314:	6823      	ldr	r3, [r4, #0]
 8006316:	07df      	lsls	r7, r3, #31
 8006318:	d508      	bpl.n	800632c <_printf_i+0x144>
 800631a:	6923      	ldr	r3, [r4, #16]
 800631c:	6861      	ldr	r1, [r4, #4]
 800631e:	4299      	cmp	r1, r3
 8006320:	bfde      	ittt	le
 8006322:	2330      	movle	r3, #48	@ 0x30
 8006324:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006328:	f106 36ff 	addle.w	r6, r6, #4294967295
 800632c:	1b92      	subs	r2, r2, r6
 800632e:	6122      	str	r2, [r4, #16]
 8006330:	f8cd a000 	str.w	sl, [sp]
 8006334:	464b      	mov	r3, r9
 8006336:	aa03      	add	r2, sp, #12
 8006338:	4621      	mov	r1, r4
 800633a:	4640      	mov	r0, r8
 800633c:	f7ff fee6 	bl	800610c <_printf_common>
 8006340:	3001      	adds	r0, #1
 8006342:	d14a      	bne.n	80063da <_printf_i+0x1f2>
 8006344:	f04f 30ff 	mov.w	r0, #4294967295
 8006348:	b004      	add	sp, #16
 800634a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800634e:	6823      	ldr	r3, [r4, #0]
 8006350:	f043 0320 	orr.w	r3, r3, #32
 8006354:	6023      	str	r3, [r4, #0]
 8006356:	4833      	ldr	r0, [pc, #204]	@ (8006424 <_printf_i+0x23c>)
 8006358:	2778      	movs	r7, #120	@ 0x78
 800635a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800635e:	6823      	ldr	r3, [r4, #0]
 8006360:	6831      	ldr	r1, [r6, #0]
 8006362:	061f      	lsls	r7, r3, #24
 8006364:	f851 5b04 	ldr.w	r5, [r1], #4
 8006368:	d402      	bmi.n	8006370 <_printf_i+0x188>
 800636a:	065f      	lsls	r7, r3, #25
 800636c:	bf48      	it	mi
 800636e:	b2ad      	uxthmi	r5, r5
 8006370:	6031      	str	r1, [r6, #0]
 8006372:	07d9      	lsls	r1, r3, #31
 8006374:	bf44      	itt	mi
 8006376:	f043 0320 	orrmi.w	r3, r3, #32
 800637a:	6023      	strmi	r3, [r4, #0]
 800637c:	b11d      	cbz	r5, 8006386 <_printf_i+0x19e>
 800637e:	2310      	movs	r3, #16
 8006380:	e7ac      	b.n	80062dc <_printf_i+0xf4>
 8006382:	4827      	ldr	r0, [pc, #156]	@ (8006420 <_printf_i+0x238>)
 8006384:	e7e9      	b.n	800635a <_printf_i+0x172>
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	f023 0320 	bic.w	r3, r3, #32
 800638c:	6023      	str	r3, [r4, #0]
 800638e:	e7f6      	b.n	800637e <_printf_i+0x196>
 8006390:	4616      	mov	r6, r2
 8006392:	e7bd      	b.n	8006310 <_printf_i+0x128>
 8006394:	6833      	ldr	r3, [r6, #0]
 8006396:	6825      	ldr	r5, [r4, #0]
 8006398:	6961      	ldr	r1, [r4, #20]
 800639a:	1d18      	adds	r0, r3, #4
 800639c:	6030      	str	r0, [r6, #0]
 800639e:	062e      	lsls	r6, r5, #24
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	d501      	bpl.n	80063a8 <_printf_i+0x1c0>
 80063a4:	6019      	str	r1, [r3, #0]
 80063a6:	e002      	b.n	80063ae <_printf_i+0x1c6>
 80063a8:	0668      	lsls	r0, r5, #25
 80063aa:	d5fb      	bpl.n	80063a4 <_printf_i+0x1bc>
 80063ac:	8019      	strh	r1, [r3, #0]
 80063ae:	2300      	movs	r3, #0
 80063b0:	6123      	str	r3, [r4, #16]
 80063b2:	4616      	mov	r6, r2
 80063b4:	e7bc      	b.n	8006330 <_printf_i+0x148>
 80063b6:	6833      	ldr	r3, [r6, #0]
 80063b8:	1d1a      	adds	r2, r3, #4
 80063ba:	6032      	str	r2, [r6, #0]
 80063bc:	681e      	ldr	r6, [r3, #0]
 80063be:	6862      	ldr	r2, [r4, #4]
 80063c0:	2100      	movs	r1, #0
 80063c2:	4630      	mov	r0, r6
 80063c4:	f7f9 ff24 	bl	8000210 <memchr>
 80063c8:	b108      	cbz	r0, 80063ce <_printf_i+0x1e6>
 80063ca:	1b80      	subs	r0, r0, r6
 80063cc:	6060      	str	r0, [r4, #4]
 80063ce:	6863      	ldr	r3, [r4, #4]
 80063d0:	6123      	str	r3, [r4, #16]
 80063d2:	2300      	movs	r3, #0
 80063d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063d8:	e7aa      	b.n	8006330 <_printf_i+0x148>
 80063da:	6923      	ldr	r3, [r4, #16]
 80063dc:	4632      	mov	r2, r6
 80063de:	4649      	mov	r1, r9
 80063e0:	4640      	mov	r0, r8
 80063e2:	47d0      	blx	sl
 80063e4:	3001      	adds	r0, #1
 80063e6:	d0ad      	beq.n	8006344 <_printf_i+0x15c>
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	079b      	lsls	r3, r3, #30
 80063ec:	d413      	bmi.n	8006416 <_printf_i+0x22e>
 80063ee:	68e0      	ldr	r0, [r4, #12]
 80063f0:	9b03      	ldr	r3, [sp, #12]
 80063f2:	4298      	cmp	r0, r3
 80063f4:	bfb8      	it	lt
 80063f6:	4618      	movlt	r0, r3
 80063f8:	e7a6      	b.n	8006348 <_printf_i+0x160>
 80063fa:	2301      	movs	r3, #1
 80063fc:	4632      	mov	r2, r6
 80063fe:	4649      	mov	r1, r9
 8006400:	4640      	mov	r0, r8
 8006402:	47d0      	blx	sl
 8006404:	3001      	adds	r0, #1
 8006406:	d09d      	beq.n	8006344 <_printf_i+0x15c>
 8006408:	3501      	adds	r5, #1
 800640a:	68e3      	ldr	r3, [r4, #12]
 800640c:	9903      	ldr	r1, [sp, #12]
 800640e:	1a5b      	subs	r3, r3, r1
 8006410:	42ab      	cmp	r3, r5
 8006412:	dcf2      	bgt.n	80063fa <_printf_i+0x212>
 8006414:	e7eb      	b.n	80063ee <_printf_i+0x206>
 8006416:	2500      	movs	r5, #0
 8006418:	f104 0619 	add.w	r6, r4, #25
 800641c:	e7f5      	b.n	800640a <_printf_i+0x222>
 800641e:	bf00      	nop
 8006420:	08006669 	.word	0x08006669
 8006424:	0800667a 	.word	0x0800667a

08006428 <memmove>:
 8006428:	4288      	cmp	r0, r1
 800642a:	b510      	push	{r4, lr}
 800642c:	eb01 0402 	add.w	r4, r1, r2
 8006430:	d902      	bls.n	8006438 <memmove+0x10>
 8006432:	4284      	cmp	r4, r0
 8006434:	4623      	mov	r3, r4
 8006436:	d807      	bhi.n	8006448 <memmove+0x20>
 8006438:	1e43      	subs	r3, r0, #1
 800643a:	42a1      	cmp	r1, r4
 800643c:	d008      	beq.n	8006450 <memmove+0x28>
 800643e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006442:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006446:	e7f8      	b.n	800643a <memmove+0x12>
 8006448:	4402      	add	r2, r0
 800644a:	4601      	mov	r1, r0
 800644c:	428a      	cmp	r2, r1
 800644e:	d100      	bne.n	8006452 <memmove+0x2a>
 8006450:	bd10      	pop	{r4, pc}
 8006452:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006456:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800645a:	e7f7      	b.n	800644c <memmove+0x24>

0800645c <_sbrk_r>:
 800645c:	b538      	push	{r3, r4, r5, lr}
 800645e:	4d06      	ldr	r5, [pc, #24]	@ (8006478 <_sbrk_r+0x1c>)
 8006460:	2300      	movs	r3, #0
 8006462:	4604      	mov	r4, r0
 8006464:	4608      	mov	r0, r1
 8006466:	602b      	str	r3, [r5, #0]
 8006468:	f7fa fd9a 	bl	8000fa0 <_sbrk>
 800646c:	1c43      	adds	r3, r0, #1
 800646e:	d102      	bne.n	8006476 <_sbrk_r+0x1a>
 8006470:	682b      	ldr	r3, [r5, #0]
 8006472:	b103      	cbz	r3, 8006476 <_sbrk_r+0x1a>
 8006474:	6023      	str	r3, [r4, #0]
 8006476:	bd38      	pop	{r3, r4, r5, pc}
 8006478:	20040900 	.word	0x20040900

0800647c <memcpy>:
 800647c:	440a      	add	r2, r1
 800647e:	4291      	cmp	r1, r2
 8006480:	f100 33ff 	add.w	r3, r0, #4294967295
 8006484:	d100      	bne.n	8006488 <memcpy+0xc>
 8006486:	4770      	bx	lr
 8006488:	b510      	push	{r4, lr}
 800648a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800648e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006492:	4291      	cmp	r1, r2
 8006494:	d1f9      	bne.n	800648a <memcpy+0xe>
 8006496:	bd10      	pop	{r4, pc}

08006498 <_realloc_r>:
 8006498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800649c:	4680      	mov	r8, r0
 800649e:	4615      	mov	r5, r2
 80064a0:	460c      	mov	r4, r1
 80064a2:	b921      	cbnz	r1, 80064ae <_realloc_r+0x16>
 80064a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064a8:	4611      	mov	r1, r2
 80064aa:	f7ff bc4b 	b.w	8005d44 <_malloc_r>
 80064ae:	b92a      	cbnz	r2, 80064bc <_realloc_r+0x24>
 80064b0:	f7ff fbdc 	bl	8005c6c <_free_r>
 80064b4:	2400      	movs	r4, #0
 80064b6:	4620      	mov	r0, r4
 80064b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064bc:	f000 f81a 	bl	80064f4 <_malloc_usable_size_r>
 80064c0:	4285      	cmp	r5, r0
 80064c2:	4606      	mov	r6, r0
 80064c4:	d802      	bhi.n	80064cc <_realloc_r+0x34>
 80064c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80064ca:	d8f4      	bhi.n	80064b6 <_realloc_r+0x1e>
 80064cc:	4629      	mov	r1, r5
 80064ce:	4640      	mov	r0, r8
 80064d0:	f7ff fc38 	bl	8005d44 <_malloc_r>
 80064d4:	4607      	mov	r7, r0
 80064d6:	2800      	cmp	r0, #0
 80064d8:	d0ec      	beq.n	80064b4 <_realloc_r+0x1c>
 80064da:	42b5      	cmp	r5, r6
 80064dc:	462a      	mov	r2, r5
 80064de:	4621      	mov	r1, r4
 80064e0:	bf28      	it	cs
 80064e2:	4632      	movcs	r2, r6
 80064e4:	f7ff ffca 	bl	800647c <memcpy>
 80064e8:	4621      	mov	r1, r4
 80064ea:	4640      	mov	r0, r8
 80064ec:	f7ff fbbe 	bl	8005c6c <_free_r>
 80064f0:	463c      	mov	r4, r7
 80064f2:	e7e0      	b.n	80064b6 <_realloc_r+0x1e>

080064f4 <_malloc_usable_size_r>:
 80064f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064f8:	1f18      	subs	r0, r3, #4
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	bfbc      	itt	lt
 80064fe:	580b      	ldrlt	r3, [r1, r0]
 8006500:	18c0      	addlt	r0, r0, r3
 8006502:	4770      	bx	lr

08006504 <_init>:
 8006504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006506:	bf00      	nop
 8006508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800650a:	bc08      	pop	{r3}
 800650c:	469e      	mov	lr, r3
 800650e:	4770      	bx	lr

08006510 <_fini>:
 8006510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006512:	bf00      	nop
 8006514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006516:	bc08      	pop	{r3}
 8006518:	469e      	mov	lr, r3
 800651a:	4770      	bx	lr
