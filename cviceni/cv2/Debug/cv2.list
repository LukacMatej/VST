
cv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c00  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08005dc0  08005dc0  00006dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ed8  08005ed8  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ed8  08005ed8  00006ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ee0  08005ee0  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee0  08005ee0  00006ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ee4  08005ee4  00006ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20040000  08005ee8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000083c  2004005c  08005f44  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20040898  08005f44  00007898  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122cc  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002765  00000000  00000000  00019358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  0001bac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac8  00000000  00000000  0001c8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029e0d  00000000  00000000  0001d390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a04  00000000  00000000  0004719d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff2d4  00000000  00000000  00058ba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00157e75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f34  00000000  00000000  00157eb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0015bdec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2004005c 	.word	0x2004005c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005da8 	.word	0x08005da8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20040060 	.word	0x20040060
 80001fc:	08005da8 	.word	0x08005da8

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_UART_TxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int tx_in_process;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	tx_in_process = 0;
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <HAL_UART_TxCpltCallback+0x24>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005b4:	4804      	ldr	r0, [pc, #16]	@ (80005c8 <HAL_UART_TxCpltCallback+0x28>)
 80005b6:	f001 fbbd 	bl	8001d34 <HAL_GPIO_WritePin>
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20040744 	.word	0x20040744
 80005c8:	48000400 	.word	0x48000400

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b092      	sub	sp, #72	@ 0x48
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 fde6 	bl	80011a2 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2180      	movs	r1, #128	@ 0x80
 80005da:	48af      	ldr	r0, [pc, #700]	@ (8000898 <main+0x2cc>)
 80005dc:	f001 fbaa 	bl	8001d34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2180      	movs	r1, #128	@ 0x80
 80005e4:	48ac      	ldr	r0, [pc, #688]	@ (8000898 <main+0x2cc>)
 80005e6:	f001 fba5 	bl	8001d34 <HAL_GPIO_WritePin>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 f96b 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f000 fab5 	bl	8000b5c <MX_GPIO_Init>
  MX_DMA_Init();
 80005f2:	f000 fa81 	bl	8000af8 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005f6:	f000 f9b9 	bl	800096c <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 80005fa:	f000 fa03 	bl	8000a04 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005fe:	f000 fa4d 	bl	8000a9c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_StatusTypeDef err = HAL_UART_Transmit(&hlpuart1,(uint8_t *)"Start programu \r\n",16,100);
 8000602:	2364      	movs	r3, #100	@ 0x64
 8000604:	2210      	movs	r2, #16
 8000606:	49a5      	ldr	r1, [pc, #660]	@ (800089c <main+0x2d0>)
 8000608:	48a5      	ldr	r0, [pc, #660]	@ (80008a0 <main+0x2d4>)
 800060a:	f003 fa1d 	bl	8003a48 <HAL_UART_Transmit>
 800060e:	4603      	mov	r3, r0
 8000610:	77fb      	strb	r3, [r7, #31]
  if (err != HAL_OK){
 8000612:	7ffb      	ldrb	r3, [r7, #31]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <main+0x50>
	  Error_Handler();
 8000618:	f000 fb44 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t tickLedB = HAL_GetTick();
 800061c:	f000 fe2a 	bl	8001274 <HAL_GetTick>
 8000620:	6478      	str	r0, [r7, #68]	@ 0x44
  uint32_t tickLedR = HAL_GetTick();
 8000622:	f000 fe27 	bl	8001274 <HAL_GetTick>
 8000626:	6438      	str	r0, [r7, #64]	@ 0x40
  bool button_state = false;
 8000628:	2300      	movs	r3, #0
 800062a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  bool RedBlinking = true;
 800062e:	2301      	movs	r3, #1
 8000630:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  uint32_t tickButton = HAL_GetTick();
 8000634:	f000 fe1e 	bl	8001274 <HAL_GetTick>
 8000638:	63b8      	str	r0, [r7, #56]	@ 0x38
  uint32_t tickButtonPress= 0;
 800063a:	2300      	movs	r3, #0
 800063c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tick = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	61bb      	str	r3, [r7, #24]
  uint8_t state = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  bool stav4 = false;
 8000648:	2300      	movs	r3, #0
 800064a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  uint32_t BlueLDPeriod=250;
 800064e:	23fa      	movs	r3, #250	@ 0xfa
 8000650:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t RedLDPeriod=500;
 8000652:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000656:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t ButtonPressTime;

  uint32_t cntr = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	623b      	str	r3, [r7, #32]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf(str, "Run %08lu\r\n", cntr++);
 800065c:	6a3b      	ldr	r3, [r7, #32]
 800065e:	1c5a      	adds	r2, r3, #1
 8000660:	623a      	str	r2, [r7, #32]
 8000662:	4638      	mov	r0, r7
 8000664:	461a      	mov	r2, r3
 8000666:	498f      	ldr	r1, [pc, #572]	@ (80008a4 <main+0x2d8>)
 8000668:	f004 fefe 	bl	8005468 <siprintf>
	  if (!tx_in_process){
 800066c:	4b8e      	ldr	r3, [pc, #568]	@ (80008a8 <main+0x2dc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d114      	bne.n	800069e <main+0xd2>
		  tx_in_process = 1;
 8000674:	4b8c      	ldr	r3, [pc, #560]	@ (80008a8 <main+0x2dc>)
 8000676:	2201      	movs	r2, #1
 8000678:	601a      	str	r2, [r3, #0]
		  HAL_StatusTypeDef err = HAL_UART_Transmit(&hlpuart1, (uint8_t *)str, strlen(str), 100);
 800067a:	463b      	mov	r3, r7
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff fdbf 	bl	8000200 <strlen>
 8000682:	4603      	mov	r3, r0
 8000684:	b29a      	uxth	r2, r3
 8000686:	4639      	mov	r1, r7
 8000688:	2364      	movs	r3, #100	@ 0x64
 800068a:	4885      	ldr	r0, [pc, #532]	@ (80008a0 <main+0x2d4>)
 800068c:	f003 f9dc 	bl	8003a48 <HAL_UART_Transmit>
 8000690:	4603      	mov	r3, r0
 8000692:	75fb      	strb	r3, [r7, #23]
		  if (err != HAL_OK){
 8000694:	7dfb      	ldrb	r3, [r7, #23]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <main+0xd2>
			  Error_Handler();
 800069a:	f000 fb03 	bl	8000ca4 <Error_Handler>
		  }

	  }


	  tick = HAL_GetTick();
 800069e:	f000 fde9 	bl	8001274 <HAL_GetTick>
 80006a2:	61b8      	str	r0, [r7, #24]
	  switch (state){
 80006a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80006a8:	2b02      	cmp	r3, #2
 80006aa:	d015      	beq.n	80006d8 <main+0x10c>
 80006ac:	2b02      	cmp	r3, #2
 80006ae:	dc1a      	bgt.n	80006e6 <main+0x11a>
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d002      	beq.n	80006ba <main+0xee>
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d009      	beq.n	80006cc <main+0x100>
 80006b8:	e015      	b.n	80006e6 <main+0x11a>
	  case 0:
		  BlueLDPeriod = 250;
 80006ba:	23fa      	movs	r3, #250	@ 0xfa
 80006bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		  RedLDPeriod = 500;
 80006be:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80006c2:	62bb      	str	r3, [r7, #40]	@ 0x28
		  stav4 = false;
 80006c4:	2300      	movs	r3, #0
 80006c6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
		  break;
 80006ca:	e00c      	b.n	80006e6 <main+0x11a>
	  case 1:
		  BlueLDPeriod = 100;
 80006cc:	2364      	movs	r3, #100	@ 0x64
 80006ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
		  RedBlinking = false;
 80006d0:	2300      	movs	r3, #0
 80006d2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		  break;
 80006d6:	e006      	b.n	80006e6 <main+0x11a>
	  case 2:
		  stav4 = true;
 80006d8:	2301      	movs	r3, #1
 80006da:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
		  BlueLDPeriod = 800;
 80006de:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80006e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		  break;
 80006e4:	bf00      	nop
	  }
	  if (tick-tickLedB >= (BlueLDPeriod/2) && !stav4)  {
 80006e6:	69ba      	ldr	r2, [r7, #24]
 80006e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80006ea:	1ad2      	subs	r2, r2, r3
 80006ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006ee:	085b      	lsrs	r3, r3, #1
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d30f      	bcc.n	8000714 <main+0x148>
 80006f4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80006f8:	f083 0301 	eor.w	r3, r3, #1
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d008      	beq.n	8000714 <main+0x148>
		  tickLedB += BlueLDPeriod/2;
 8000702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000704:	085b      	lsrs	r3, r3, #1
 8000706:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000708:	4413      	add	r3, r2
 800070a:	647b      	str	r3, [r7, #68]	@ 0x44
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800070c:	2180      	movs	r1, #128	@ 0x80
 800070e:	4862      	ldr	r0, [pc, #392]	@ (8000898 <main+0x2cc>)
 8000710:	f001 fb28 	bl	8001d64 <HAL_GPIO_TogglePin>
	  }
	  if (tick-tickLedR >= (RedLDPeriod/2) && RedBlinking)  {
 8000714:	69ba      	ldr	r2, [r7, #24]
 8000716:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000718:	1ad2      	subs	r2, r2, r3
 800071a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800071c:	085b      	lsrs	r3, r3, #1
 800071e:	429a      	cmp	r2, r3
 8000720:	d30d      	bcc.n	800073e <main+0x172>
 8000722:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000726:	2b00      	cmp	r3, #0
 8000728:	d009      	beq.n	800073e <main+0x172>
		  tickLedR += RedLDPeriod/2;
 800072a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800072c:	085b      	lsrs	r3, r3, #1
 800072e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000730:	4413      	add	r3, r2
 8000732:	643b      	str	r3, [r7, #64]	@ 0x40
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000734:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000738:	4857      	ldr	r0, [pc, #348]	@ (8000898 <main+0x2cc>)
 800073a:	f001 fb13 	bl	8001d64 <HAL_GPIO_TogglePin>
	  }
	  if (stav4){
 800073e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8000742:	2b00      	cmp	r3, #0
 8000744:	d035      	beq.n	80007b2 <main+0x1e6>
		  if (tick%500 < 100){
 8000746:	69ba      	ldr	r2, [r7, #24]
 8000748:	4b58      	ldr	r3, [pc, #352]	@ (80008ac <main+0x2e0>)
 800074a:	fba3 1302 	umull	r1, r3, r3, r2
 800074e:	095b      	lsrs	r3, r3, #5
 8000750:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000754:	fb01 f303 	mul.w	r3, r1, r3
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	2b63      	cmp	r3, #99	@ 0x63
 800075c:	d805      	bhi.n	800076a <main+0x19e>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800075e:	2201      	movs	r2, #1
 8000760:	2180      	movs	r1, #128	@ 0x80
 8000762:	484d      	ldr	r0, [pc, #308]	@ (8000898 <main+0x2cc>)
 8000764:	f001 fae6 	bl	8001d34 <HAL_GPIO_WritePin>
 8000768:	e004      	b.n	8000774 <main+0x1a8>
		  }else {
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	2180      	movs	r1, #128	@ 0x80
 800076e:	484a      	ldr	r0, [pc, #296]	@ (8000898 <main+0x2cc>)
 8000770:	f001 fae0 	bl	8001d34 <HAL_GPIO_WritePin>
		  }
		  if (tick-tickLedR >= (ButtonPressTime/2))  {
 8000774:	69ba      	ldr	r2, [r7, #24]
 8000776:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000778:	1ad2      	subs	r2, r2, r3
 800077a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	429a      	cmp	r2, r3
 8000780:	d317      	bcc.n	80007b2 <main+0x1e6>
			  tickLedR += ButtonPressTime/2;
 8000782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000788:	4413      	add	r3, r2
 800078a:	643b      	str	r3, [r7, #64]	@ 0x40
			  sprintf(str, "Perioda blikani \r\n", cntr++);
 800078c:	6a3b      	ldr	r3, [r7, #32]
 800078e:	1c5a      	adds	r2, r3, #1
 8000790:	623a      	str	r2, [r7, #32]
 8000792:	4638      	mov	r0, r7
 8000794:	461a      	mov	r2, r3
 8000796:	4946      	ldr	r1, [pc, #280]	@ (80008b0 <main+0x2e4>)
 8000798:	f004 fe66 	bl	8005468 <siprintf>
			  sprintf(str, "Run %08lu\r\n", ButtonPressTime);
 800079c:	463b      	mov	r3, r7
 800079e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007a0:	4940      	ldr	r1, [pc, #256]	@ (80008a4 <main+0x2d8>)
 80007a2:	4618      	mov	r0, r3
 80007a4:	f004 fe60 	bl	8005468 <siprintf>
			  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007ac:	483a      	ldr	r0, [pc, #232]	@ (8000898 <main+0x2cc>)
 80007ae:	f001 fad9 	bl	8001d64 <HAL_GPIO_TogglePin>
		  }
	  }

	  bool button_now = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80007b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007b6:	483f      	ldr	r0, [pc, #252]	@ (80008b4 <main+0x2e8>)
 80007b8:	f001 faa4 	bl	8001d04 <HAL_GPIO_ReadPin>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	bf14      	ite	ne
 80007c2:	2301      	movne	r3, #1
 80007c4:	2300      	moveq	r3, #0
 80007c6:	75bb      	strb	r3, [r7, #22]
	  if (button_state){
 80007c8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d02a      	beq.n	8000826 <main+0x25a>
		  if (button_now)  {
 80007d0:	7dbb      	ldrb	r3, [r7, #22]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d002      	beq.n	80007dc <main+0x210>
			  tickButton = tick;
 80007d6:	69bb      	ldr	r3, [r7, #24]
 80007d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80007da:	e73f      	b.n	800065c <main+0x90>
		  }  else  { // tlacitko uvolneno
			  if (tick-tickButton > 20) { // platne pusteni tlacitka
 80007dc:	69ba      	ldr	r2, [r7, #24]
 80007de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	2b14      	cmp	r3, #20
 80007e4:	f67f af3a 	bls.w	800065c <main+0x90>
				  button_state = false;
 80007e8:	2300      	movs	r3, #0
 80007ea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				  ButtonPressTime = tick-tickButtonPress;
 80007ee:	69ba      	ldr	r2, [r7, #24]
 80007f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007f2:	1ad3      	subs	r3, r2, r3
 80007f4:	627b      	str	r3, [r7, #36]	@ 0x24
				  if (tick-tickButtonPress >= 1000 && state == 1){
 80007f6:	69ba      	ldr	r2, [r7, #24]
 80007f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007fa:	1ad3      	subs	r3, r2, r3
 80007fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000800:	f4ff af2c 	bcc.w	800065c <main+0x90>
 8000804:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000808:	2b01      	cmp	r3, #1
 800080a:	f47f af27 	bne.w	800065c <main+0x90>
					  state = 2;
 800080e:	2302      	movs	r3, #2
 8000810:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
					  sprintf(str, "Zmena stavu na 2 \r\n", cntr++);
 8000814:	6a3b      	ldr	r3, [r7, #32]
 8000816:	1c5a      	adds	r2, r3, #1
 8000818:	623a      	str	r2, [r7, #32]
 800081a:	4638      	mov	r0, r7
 800081c:	461a      	mov	r2, r3
 800081e:	4926      	ldr	r1, [pc, #152]	@ (80008b8 <main+0x2ec>)
 8000820:	f004 fe22 	bl	8005468 <siprintf>
 8000824:	e71a      	b.n	800065c <main+0x90>
				  }
			  }
		  }
	  } else {
		  if (!button_now)  {
 8000826:	7dbb      	ldrb	r3, [r7, #22]
 8000828:	f083 0301 	eor.w	r3, r3, #1
 800082c:	b2db      	uxtb	r3, r3
 800082e:	2b00      	cmp	r3, #0
 8000830:	d002      	beq.n	8000838 <main+0x26c>
			  tickButton = tick;
 8000832:	69bb      	ldr	r3, [r7, #24]
 8000834:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000836:	e711      	b.n	800065c <main+0x90>
		  } else { // tlacitko stisknuto
			  if (tick-tickButton > 20) { // platne stisknuti tlacitka
 8000838:	69ba      	ldr	r2, [r7, #24]
 800083a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	2b14      	cmp	r3, #20
 8000840:	f67f af0c 	bls.w	800065c <main+0x90>
				  button_state = true;
 8000844:	2301      	movs	r3, #1
 8000846:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				  tickButtonPress = tick;
 800084a:	69bb      	ldr	r3, [r7, #24]
 800084c:	637b      	str	r3, [r7, #52]	@ 0x34
				  if (state == 0){
 800084e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000852:	2b00      	cmp	r3, #0
 8000854:	d10a      	bne.n	800086c <main+0x2a0>
					  state = 1;
 8000856:	2301      	movs	r3, #1
 8000858:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
					  sprintf(str, "Zmena stavu na 1 \r\n", cntr++);
 800085c:	6a3b      	ldr	r3, [r7, #32]
 800085e:	1c5a      	adds	r2, r3, #1
 8000860:	623a      	str	r2, [r7, #32]
 8000862:	4638      	mov	r0, r7
 8000864:	461a      	mov	r2, r3
 8000866:	4915      	ldr	r1, [pc, #84]	@ (80008bc <main+0x2f0>)
 8000868:	f004 fdfe 	bl	8005468 <siprintf>
				  }
				  if (!RedBlinking){
 800086c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000870:	f083 0301 	eor.w	r3, r3, #1
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	f43f aef0 	beq.w	800065c <main+0x90>
					  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800087c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000880:	4805      	ldr	r0, [pc, #20]	@ (8000898 <main+0x2cc>)
 8000882:	f001 fa6f 	bl	8001d64 <HAL_GPIO_TogglePin>
					  sprintf(str, "Zmena stavu cer led \r\n", cntr++);
 8000886:	6a3b      	ldr	r3, [r7, #32]
 8000888:	1c5a      	adds	r2, r3, #1
 800088a:	623a      	str	r2, [r7, #32]
 800088c:	4638      	mov	r0, r7
 800088e:	461a      	mov	r2, r3
 8000890:	490b      	ldr	r1, [pc, #44]	@ (80008c0 <main+0x2f4>)
 8000892:	f004 fde9 	bl	8005468 <siprintf>
  {
 8000896:	e6e1      	b.n	800065c <main+0x90>
 8000898:	48000400 	.word	0x48000400
 800089c:	08005dc0 	.word	0x08005dc0
 80008a0:	20040078 	.word	0x20040078
 80008a4:	08005dd4 	.word	0x08005dd4
 80008a8:	20040744 	.word	0x20040744
 80008ac:	10624dd3 	.word	0x10624dd3
 80008b0:	08005de0 	.word	0x08005de0
 80008b4:	48000800 	.word	0x48000800
 80008b8:	08005df4 	.word	0x08005df4
 80008bc:	08005e08 	.word	0x08005e08
 80008c0:	08005e1c 	.word	0x08005e1c

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b096      	sub	sp, #88	@ 0x58
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	2244      	movs	r2, #68	@ 0x44
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f004 fde8 	bl	80054a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	463b      	mov	r3, r7
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80008e6:	2000      	movs	r0, #0
 80008e8:	f001 fbaa 	bl	8002040 <HAL_PWREx_ControlVoltageScaling>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80008f2:	f000 f9d7 	bl	8000ca4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80008f6:	2322      	movs	r3, #34	@ 0x22
 80008f8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000900:	2301      	movs	r3, #1
 8000902:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000904:	2340      	movs	r3, #64	@ 0x40
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000908:	2302      	movs	r3, #2
 800090a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800090c:	2302      	movs	r3, #2
 800090e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000910:	2302      	movs	r3, #2
 8000912:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000914:	231e      	movs	r3, #30
 8000916:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000918:	2302      	movs	r3, #2
 800091a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800091c:	2302      	movs	r3, #2
 800091e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000920:	2302      	movs	r3, #2
 8000922:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4618      	mov	r0, r3
 800092a:	f001 fc4d 	bl	80021c8 <HAL_RCC_OscConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000934:	f000 f9b6 	bl	8000ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000938:	230f      	movs	r3, #15
 800093a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093c:	2303      	movs	r3, #3
 800093e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000944:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000948:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800094e:	463b      	mov	r3, r7
 8000950:	2105      	movs	r1, #5
 8000952:	4618      	mov	r0, r3
 8000954:	f002 f852 	bl	80029fc <HAL_RCC_ClockConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800095e:	f000 f9a1 	bl	8000ca4 <Error_Handler>
  }
}
 8000962:	bf00      	nop
 8000964:	3758      	adds	r7, #88	@ 0x58
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000970:	4b22      	ldr	r3, [pc, #136]	@ (80009fc <MX_LPUART1_UART_Init+0x90>)
 8000972:	4a23      	ldr	r2, [pc, #140]	@ (8000a00 <MX_LPUART1_UART_Init+0x94>)
 8000974:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000976:	4b21      	ldr	r3, [pc, #132]	@ (80009fc <MX_LPUART1_UART_Init+0x90>)
 8000978:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800097c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b1f      	ldr	r3, [pc, #124]	@ (80009fc <MX_LPUART1_UART_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b1d      	ldr	r3, [pc, #116]	@ (80009fc <MX_LPUART1_UART_Init+0x90>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800098a:	4b1c      	ldr	r3, [pc, #112]	@ (80009fc <MX_LPUART1_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b1a      	ldr	r3, [pc, #104]	@ (80009fc <MX_LPUART1_UART_Init+0x90>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b19      	ldr	r3, [pc, #100]	@ (80009fc <MX_LPUART1_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099c:	4b17      	ldr	r3, [pc, #92]	@ (80009fc <MX_LPUART1_UART_Init+0x90>)
 800099e:	2200      	movs	r2, #0
 80009a0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a2:	4b16      	ldr	r3, [pc, #88]	@ (80009fc <MX_LPUART1_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a8:	4b14      	ldr	r3, [pc, #80]	@ (80009fc <MX_LPUART1_UART_Init+0x90>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80009ae:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <MX_LPUART1_UART_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009b4:	4811      	ldr	r0, [pc, #68]	@ (80009fc <MX_LPUART1_UART_Init+0x90>)
 80009b6:	f002 fff7 	bl	80039a8 <HAL_UART_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80009c0:	f000 f970 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c4:	2100      	movs	r1, #0
 80009c6:	480d      	ldr	r0, [pc, #52]	@ (80009fc <MX_LPUART1_UART_Init+0x90>)
 80009c8:	f004 f9d7 	bl	8004d7a <HAL_UARTEx_SetTxFifoThreshold>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009d2:	f000 f967 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d6:	2100      	movs	r1, #0
 80009d8:	4808      	ldr	r0, [pc, #32]	@ (80009fc <MX_LPUART1_UART_Init+0x90>)
 80009da:	f004 fa0c 	bl	8004df6 <HAL_UARTEx_SetRxFifoThreshold>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009e4:	f000 f95e 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80009e8:	4804      	ldr	r0, [pc, #16]	@ (80009fc <MX_LPUART1_UART_Init+0x90>)
 80009ea:	f004 f98d 	bl	8004d08 <HAL_UARTEx_DisableFifoMode>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009f4:	f000 f956 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20040078 	.word	0x20040078
 8000a00:	40008000 	.word	0x40008000

08000a04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a08:	4b22      	ldr	r3, [pc, #136]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a0a:	4a23      	ldr	r2, [pc, #140]	@ (8000a98 <MX_USART3_UART_Init+0x94>)
 8000a0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a0e:	4b21      	ldr	r3, [pc, #132]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b1f      	ldr	r3, [pc, #124]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b1c      	ldr	r3, [pc, #112]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b1a      	ldr	r3, [pc, #104]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2e:	4b19      	ldr	r3, [pc, #100]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a34:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a3a:	4b16      	ldr	r3, [pc, #88]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a40:	4b14      	ldr	r3, [pc, #80]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a46:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a4c:	4811      	ldr	r0, [pc, #68]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a4e:	f002 ffab 	bl	80039a8 <HAL_UART_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a58:	f000 f924 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	480d      	ldr	r0, [pc, #52]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a60:	f004 f98b 	bl	8004d7a <HAL_UARTEx_SetTxFifoThreshold>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a6a:	f000 f91b 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4808      	ldr	r0, [pc, #32]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a72:	f004 f9c0 	bl	8004df6 <HAL_UARTEx_SetRxFifoThreshold>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a7c:	f000 f912 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	@ (8000a94 <MX_USART3_UART_Init+0x90>)
 8000a82:	f004 f941 	bl	8004d08 <HAL_UARTEx_DisableFifoMode>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a8c:	f000 f90a 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	2004010c 	.word	0x2004010c
 8000a98:	40004800 	.word	0x40004800

08000a9c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	@ (8000af4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000aa6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	@ (8000af4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aaa:	2206      	movs	r2, #6
 8000aac:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000aae:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8000af4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000acc:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	@ (8000af4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae0:	f001 f95a 	bl	8001d98 <HAL_PCD_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000aea:	f000 f8db 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20040260 	.word	0x20040260

08000af8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000afe:	4b16      	ldr	r3, [pc, #88]	@ (8000b58 <MX_DMA_Init+0x60>)
 8000b00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b02:	4a15      	ldr	r2, [pc, #84]	@ (8000b58 <MX_DMA_Init+0x60>)
 8000b04:	f043 0304 	orr.w	r3, r3, #4
 8000b08:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b0a:	4b13      	ldr	r3, [pc, #76]	@ (8000b58 <MX_DMA_Init+0x60>)
 8000b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b0e:	f003 0304 	and.w	r3, r3, #4
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b16:	4b10      	ldr	r3, [pc, #64]	@ (8000b58 <MX_DMA_Init+0x60>)
 8000b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b58 <MX_DMA_Init+0x60>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6493      	str	r3, [r2, #72]	@ 0x48
 8000b22:	4b0d      	ldr	r3, [pc, #52]	@ (8000b58 <MX_DMA_Init+0x60>)
 8000b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	200b      	movs	r0, #11
 8000b34:	f000 fca9 	bl	800148a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b38:	200b      	movs	r0, #11
 8000b3a:	f000 fcc2 	bl	80014c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	200c      	movs	r0, #12
 8000b44:	f000 fca1 	bl	800148a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000b48:	200c      	movs	r0, #12
 8000b4a:	f000 fcba 	bl	80014c2 <HAL_NVIC_EnableIRQ>

}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40021000 	.word	0x40021000

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08c      	sub	sp, #48	@ 0x30
 8000b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	4b48      	ldr	r3, [pc, #288]	@ (8000c94 <MX_GPIO_Init+0x138>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b76:	4a47      	ldr	r2, [pc, #284]	@ (8000c94 <MX_GPIO_Init+0x138>)
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b7e:	4b45      	ldr	r3, [pc, #276]	@ (8000c94 <MX_GPIO_Init+0x138>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	61bb      	str	r3, [r7, #24]
 8000b88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8a:	4b42      	ldr	r3, [pc, #264]	@ (8000c94 <MX_GPIO_Init+0x138>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8e:	4a41      	ldr	r2, [pc, #260]	@ (8000c94 <MX_GPIO_Init+0x138>)
 8000b90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b96:	4b3f      	ldr	r3, [pc, #252]	@ (8000c94 <MX_GPIO_Init+0x138>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	4b3c      	ldr	r3, [pc, #240]	@ (8000c94 <MX_GPIO_Init+0x138>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba6:	4a3b      	ldr	r2, [pc, #236]	@ (8000c94 <MX_GPIO_Init+0x138>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bae:	4b39      	ldr	r3, [pc, #228]	@ (8000c94 <MX_GPIO_Init+0x138>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bba:	4b36      	ldr	r3, [pc, #216]	@ (8000c94 <MX_GPIO_Init+0x138>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bbe:	4a35      	ldr	r2, [pc, #212]	@ (8000c94 <MX_GPIO_Init+0x138>)
 8000bc0:	f043 0308 	orr.w	r3, r3, #8
 8000bc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bc6:	4b33      	ldr	r3, [pc, #204]	@ (8000c94 <MX_GPIO_Init+0x138>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bca:	f003 0308 	and.w	r3, r3, #8
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bd2:	4b30      	ldr	r3, [pc, #192]	@ (8000c94 <MX_GPIO_Init+0x138>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd6:	4a2f      	ldr	r2, [pc, #188]	@ (8000c94 <MX_GPIO_Init+0x138>)
 8000bd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bde:	4b2d      	ldr	r3, [pc, #180]	@ (8000c94 <MX_GPIO_Init+0x138>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000bea:	f001 fadd 	bl	80021a8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	4b29      	ldr	r3, [pc, #164]	@ (8000c94 <MX_GPIO_Init+0x138>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf2:	4a28      	ldr	r2, [pc, #160]	@ (8000c94 <MX_GPIO_Init+0x138>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bfa:	4b26      	ldr	r3, [pc, #152]	@ (8000c94 <MX_GPIO_Init+0x138>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000c0c:	4822      	ldr	r0, [pc, #136]	@ (8000c98 <MX_GPIO_Init+0x13c>)
 8000c0e:	f001 f891 	bl	8001d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2140      	movs	r1, #64	@ 0x40
 8000c16:	4821      	ldr	r0, [pc, #132]	@ (8000c9c <MX_GPIO_Init+0x140>)
 8000c18:	f001 f88c 	bl	8001d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c22:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	f107 031c 	add.w	r3, r7, #28
 8000c30:	4619      	mov	r1, r3
 8000c32:	481b      	ldr	r0, [pc, #108]	@ (8000ca0 <MX_GPIO_Init+0x144>)
 8000c34:	f000 fed4 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000c38:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4811      	ldr	r0, [pc, #68]	@ (8000c98 <MX_GPIO_Init+0x13c>)
 8000c52:	f000 fec5 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c56:	2320      	movs	r3, #32
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	4619      	mov	r1, r3
 8000c68:	480c      	ldr	r0, [pc, #48]	@ (8000c9c <MX_GPIO_Init+0x140>)
 8000c6a:	f000 feb9 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c6e:	2340      	movs	r3, #64	@ 0x40
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	@ (8000c9c <MX_GPIO_Init+0x140>)
 8000c86:	f000 feab 	bl	80019e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c8a:	bf00      	nop
 8000c8c:	3730      	adds	r7, #48	@ 0x30
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40021000 	.word	0x40021000
 8000c98:	48000400 	.word	0x48000400
 8000c9c:	48001800 	.word	0x48001800
 8000ca0:	48000800 	.word	0x48000800

08000ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca8:	b672      	cpsid	i
}
 8000caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <Error_Handler+0x8>

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cba:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cce:	4b09      	ldr	r3, [pc, #36]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cd2:	4a08      	ldr	r2, [pc, #32]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cda:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <HAL_MspInit+0x44>)
 8000cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40021000 	.word	0x40021000

08000cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b0b0      	sub	sp, #192	@ 0xc0
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d10:	f107 0318 	add.w	r3, r7, #24
 8000d14:	2294      	movs	r2, #148	@ 0x94
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f004 fbc5 	bl	80054a8 <memset>
  if(huart->Instance==LPUART1)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a71      	ldr	r2, [pc, #452]	@ (8000ee8 <HAL_UART_MspInit+0x1f0>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	f040 809a 	bne.w	8000e5e <HAL_UART_MspInit+0x166>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d2a:	2320      	movs	r3, #32
 8000d2c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d32:	f107 0318 	add.w	r3, r7, #24
 8000d36:	4618      	mov	r0, r3
 8000d38:	f002 f91e 	bl	8002f78 <HAL_RCCEx_PeriphCLKConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d42:	f7ff ffaf 	bl	8000ca4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d46:	4b69      	ldr	r3, [pc, #420]	@ (8000eec <HAL_UART_MspInit+0x1f4>)
 8000d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d4a:	4a68      	ldr	r2, [pc, #416]	@ (8000eec <HAL_UART_MspInit+0x1f4>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000d52:	4b66      	ldr	r3, [pc, #408]	@ (8000eec <HAL_UART_MspInit+0x1f4>)
 8000d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d5e:	4b63      	ldr	r3, [pc, #396]	@ (8000eec <HAL_UART_MspInit+0x1f4>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d62:	4a62      	ldr	r2, [pc, #392]	@ (8000eec <HAL_UART_MspInit+0x1f4>)
 8000d64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d6a:	4b60      	ldr	r3, [pc, #384]	@ (8000eec <HAL_UART_MspInit+0x1f4>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000d76:	f001 fa17 	bl	80021a8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000d7a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000d7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d94:	2308      	movs	r3, #8
 8000d96:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d9a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4853      	ldr	r0, [pc, #332]	@ (8000ef0 <HAL_UART_MspInit+0x1f8>)
 8000da2:	f000 fe1d 	bl	80019e0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000da6:	4b53      	ldr	r3, [pc, #332]	@ (8000ef4 <HAL_UART_MspInit+0x1fc>)
 8000da8:	4a53      	ldr	r2, [pc, #332]	@ (8000ef8 <HAL_UART_MspInit+0x200>)
 8000daa:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000dac:	4b51      	ldr	r3, [pc, #324]	@ (8000ef4 <HAL_UART_MspInit+0x1fc>)
 8000dae:	2222      	movs	r2, #34	@ 0x22
 8000db0:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000db2:	4b50      	ldr	r3, [pc, #320]	@ (8000ef4 <HAL_UART_MspInit+0x1fc>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db8:	4b4e      	ldr	r3, [pc, #312]	@ (8000ef4 <HAL_UART_MspInit+0x1fc>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dbe:	4b4d      	ldr	r3, [pc, #308]	@ (8000ef4 <HAL_UART_MspInit+0x1fc>)
 8000dc0:	2280      	movs	r2, #128	@ 0x80
 8000dc2:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dc4:	4b4b      	ldr	r3, [pc, #300]	@ (8000ef4 <HAL_UART_MspInit+0x1fc>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dca:	4b4a      	ldr	r3, [pc, #296]	@ (8000ef4 <HAL_UART_MspInit+0x1fc>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000dd0:	4b48      	ldr	r3, [pc, #288]	@ (8000ef4 <HAL_UART_MspInit+0x1fc>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000dd6:	4b47      	ldr	r3, [pc, #284]	@ (8000ef4 <HAL_UART_MspInit+0x1fc>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000ddc:	4845      	ldr	r0, [pc, #276]	@ (8000ef4 <HAL_UART_MspInit+0x1fc>)
 8000dde:	f000 fb8b 	bl	80014f8 <HAL_DMA_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8000de8:	f7ff ff5c 	bl	8000ca4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a41      	ldr	r2, [pc, #260]	@ (8000ef4 <HAL_UART_MspInit+0x1fc>)
 8000df0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000df4:	4a3f      	ldr	r2, [pc, #252]	@ (8000ef4 <HAL_UART_MspInit+0x1fc>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000dfa:	4b40      	ldr	r3, [pc, #256]	@ (8000efc <HAL_UART_MspInit+0x204>)
 8000dfc:	4a40      	ldr	r2, [pc, #256]	@ (8000f00 <HAL_UART_MspInit+0x208>)
 8000dfe:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000e00:	4b3e      	ldr	r3, [pc, #248]	@ (8000efc <HAL_UART_MspInit+0x204>)
 8000e02:	2223      	movs	r2, #35	@ 0x23
 8000e04:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e06:	4b3d      	ldr	r3, [pc, #244]	@ (8000efc <HAL_UART_MspInit+0x204>)
 8000e08:	2210      	movs	r2, #16
 8000e0a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e0c:	4b3b      	ldr	r3, [pc, #236]	@ (8000efc <HAL_UART_MspInit+0x204>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e12:	4b3a      	ldr	r3, [pc, #232]	@ (8000efc <HAL_UART_MspInit+0x204>)
 8000e14:	2280      	movs	r2, #128	@ 0x80
 8000e16:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e18:	4b38      	ldr	r3, [pc, #224]	@ (8000efc <HAL_UART_MspInit+0x204>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e1e:	4b37      	ldr	r3, [pc, #220]	@ (8000efc <HAL_UART_MspInit+0x204>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000e24:	4b35      	ldr	r3, [pc, #212]	@ (8000efc <HAL_UART_MspInit+0x204>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e2a:	4b34      	ldr	r3, [pc, #208]	@ (8000efc <HAL_UART_MspInit+0x204>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000e30:	4832      	ldr	r0, [pc, #200]	@ (8000efc <HAL_UART_MspInit+0x204>)
 8000e32:	f000 fb61 	bl	80014f8 <HAL_DMA_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <HAL_UART_MspInit+0x148>
    {
      Error_Handler();
 8000e3c:	f7ff ff32 	bl	8000ca4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a2e      	ldr	r2, [pc, #184]	@ (8000efc <HAL_UART_MspInit+0x204>)
 8000e44:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000e46:	4a2d      	ldr	r2, [pc, #180]	@ (8000efc <HAL_UART_MspInit+0x204>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2046      	movs	r0, #70	@ 0x46
 8000e52:	f000 fb1a 	bl	800148a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000e56:	2046      	movs	r0, #70	@ 0x46
 8000e58:	f000 fb33 	bl	80014c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e5c:	e040      	b.n	8000ee0 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a28      	ldr	r2, [pc, #160]	@ (8000f04 <HAL_UART_MspInit+0x20c>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d13b      	bne.n	8000ee0 <HAL_UART_MspInit+0x1e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e68:	2304      	movs	r3, #4
 8000e6a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e70:	f107 0318 	add.w	r3, r7, #24
 8000e74:	4618      	mov	r0, r3
 8000e76:	f002 f87f 	bl	8002f78 <HAL_RCCEx_PeriphCLKConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8000e80:	f7ff ff10 	bl	8000ca4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e84:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <HAL_UART_MspInit+0x1f4>)
 8000e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e88:	4a18      	ldr	r2, [pc, #96]	@ (8000eec <HAL_UART_MspInit+0x1f4>)
 8000e8a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e90:	4b16      	ldr	r3, [pc, #88]	@ (8000eec <HAL_UART_MspInit+0x1f4>)
 8000e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e9c:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <HAL_UART_MspInit+0x1f4>)
 8000e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea0:	4a12      	ldr	r2, [pc, #72]	@ (8000eec <HAL_UART_MspInit+0x1f4>)
 8000ea2:	f043 0308 	orr.w	r3, r3, #8
 8000ea6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ea8:	4b10      	ldr	r3, [pc, #64]	@ (8000eec <HAL_UART_MspInit+0x1f4>)
 8000eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eac:	f003 0308 	and.w	r3, r3, #8
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000eb4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ece:	2307      	movs	r3, #7
 8000ed0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480b      	ldr	r0, [pc, #44]	@ (8000f08 <HAL_UART_MspInit+0x210>)
 8000edc:	f000 fd80 	bl	80019e0 <HAL_GPIO_Init>
}
 8000ee0:	bf00      	nop
 8000ee2:	37c0      	adds	r7, #192	@ 0xc0
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40008000 	.word	0x40008000
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	48001800 	.word	0x48001800
 8000ef4:	200401a0 	.word	0x200401a0
 8000ef8:	40020008 	.word	0x40020008
 8000efc:	20040200 	.word	0x20040200
 8000f00:	4002001c 	.word	0x4002001c
 8000f04:	40004800 	.word	0x40004800
 8000f08:	48000c00 	.word	0x48000c00

08000f0c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b0b0      	sub	sp, #192	@ 0xc0
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f24:	f107 0318 	add.w	r3, r7, #24
 8000f28:	2294      	movs	r2, #148	@ 0x94
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f004 fabb 	bl	80054a8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f3a:	d16c      	bne.n	8001016 <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f40:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000f42:	2300      	movs	r3, #0
 8000f44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f48:	f107 0318 	add.w	r3, r7, #24
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f002 f813 	bl	8002f78 <HAL_RCCEx_PeriphCLKConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f58:	f7ff fea4 	bl	8000ca4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5c:	4b30      	ldr	r3, [pc, #192]	@ (8001020 <HAL_PCD_MspInit+0x114>)
 8000f5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f60:	4a2f      	ldr	r2, [pc, #188]	@ (8001020 <HAL_PCD_MspInit+0x114>)
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f68:	4b2d      	ldr	r3, [pc, #180]	@ (8001020 <HAL_PCD_MspInit+0x114>)
 8000f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f74:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000f78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f8e:	230a      	movs	r3, #10
 8000f90:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f9e:	f000 fd1f 	bl	80019e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000fa2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fa6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc0:	f000 fd0e 	bl	80019e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fc4:	4b16      	ldr	r3, [pc, #88]	@ (8001020 <HAL_PCD_MspInit+0x114>)
 8000fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc8:	4a15      	ldr	r2, [pc, #84]	@ (8001020 <HAL_PCD_MspInit+0x114>)
 8000fca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fd0:	4b13      	ldr	r3, [pc, #76]	@ (8001020 <HAL_PCD_MspInit+0x114>)
 8000fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fdc:	4b10      	ldr	r3, [pc, #64]	@ (8001020 <HAL_PCD_MspInit+0x114>)
 8000fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d114      	bne.n	8001012 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fe8:	4b0d      	ldr	r3, [pc, #52]	@ (8001020 <HAL_PCD_MspInit+0x114>)
 8000fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fec:	4a0c      	ldr	r2, [pc, #48]	@ (8001020 <HAL_PCD_MspInit+0x114>)
 8000fee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ff2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <HAL_PCD_MspInit+0x114>)
 8000ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ff8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001000:	f001 f8c2 	bl	8002188 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <HAL_PCD_MspInit+0x114>)
 8001006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001008:	4a05      	ldr	r2, [pc, #20]	@ (8001020 <HAL_PCD_MspInit+0x114>)
 800100a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800100e:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001010:	e001      	b.n	8001016 <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 8001012:	f001 f8b9 	bl	8002188 <HAL_PWREx_EnableVddUSB>
}
 8001016:	bf00      	nop
 8001018:	37c0      	adds	r7, #192	@ 0xc0
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40021000 	.word	0x40021000

08001024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <NMI_Handler+0x4>

0800102c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <HardFault_Handler+0x4>

08001034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <MemManage_Handler+0x4>

0800103c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <BusFault_Handler+0x4>

08001044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <UsageFault_Handler+0x4>

0800104c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800107a:	f000 f8e7 	bl	800124c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001088:	4802      	ldr	r0, [pc, #8]	@ (8001094 <DMA1_Channel1_IRQHandler+0x10>)
 800108a:	f000 fb98 	bl	80017be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200401a0 	.word	0x200401a0

08001098 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800109c:	4802      	ldr	r0, [pc, #8]	@ (80010a8 <DMA1_Channel2_IRQHandler+0x10>)
 800109e:	f000 fb8e 	bl	80017be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20040200 	.word	0x20040200

080010ac <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80010b0:	4802      	ldr	r0, [pc, #8]	@ (80010bc <LPUART1_IRQHandler+0x10>)
 80010b2:	f002 fd57 	bl	8003b64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20040078 	.word	0x20040078

080010c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c8:	4a14      	ldr	r2, [pc, #80]	@ (800111c <_sbrk+0x5c>)
 80010ca:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <_sbrk+0x60>)
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d4:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <_sbrk+0x64>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d102      	bne.n	80010e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010dc:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <_sbrk+0x64>)
 80010de:	4a12      	ldr	r2, [pc, #72]	@ (8001128 <_sbrk+0x68>)
 80010e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010e2:	4b10      	ldr	r3, [pc, #64]	@ (8001124 <_sbrk+0x64>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d207      	bcs.n	8001100 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f0:	f004 f9e2 	bl	80054b8 <__errno>
 80010f4:	4603      	mov	r3, r0
 80010f6:	220c      	movs	r2, #12
 80010f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	e009      	b.n	8001114 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001100:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <_sbrk+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001106:	4b07      	ldr	r3, [pc, #28]	@ (8001124 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	4a05      	ldr	r2, [pc, #20]	@ (8001124 <_sbrk+0x64>)
 8001110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200a0000 	.word	0x200a0000
 8001120:	00000400 	.word	0x00000400
 8001124:	20040748 	.word	0x20040748
 8001128:	20040898 	.word	0x20040898

0800112c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <SystemInit+0x20>)
 8001132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001136:	4a05      	ldr	r2, [pc, #20]	@ (800114c <SystemInit+0x20>)
 8001138:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800113c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001150:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001188 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001154:	f7ff ffea 	bl	800112c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001158:	480c      	ldr	r0, [pc, #48]	@ (800118c <LoopForever+0x6>)
  ldr r1, =_edata
 800115a:	490d      	ldr	r1, [pc, #52]	@ (8001190 <LoopForever+0xa>)
  ldr r2, =_sidata
 800115c:	4a0d      	ldr	r2, [pc, #52]	@ (8001194 <LoopForever+0xe>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001160:	e002      	b.n	8001168 <LoopCopyDataInit>

08001162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001166:	3304      	adds	r3, #4

08001168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800116c:	d3f9      	bcc.n	8001162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116e:	4a0a      	ldr	r2, [pc, #40]	@ (8001198 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001170:	4c0a      	ldr	r4, [pc, #40]	@ (800119c <LoopForever+0x16>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001174:	e001      	b.n	800117a <LoopFillZerobss>

08001176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001178:	3204      	adds	r2, #4

0800117a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800117c:	d3fb      	bcc.n	8001176 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800117e:	f004 f9a1 	bl	80054c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001182:	f7ff fa23 	bl	80005cc <main>

08001186 <LoopForever>:

LoopForever:
    b LoopForever
 8001186:	e7fe      	b.n	8001186 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001188:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800118c:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8001190:	2004005c 	.word	0x2004005c
  ldr r2, =_sidata
 8001194:	08005ee8 	.word	0x08005ee8
  ldr r2, =_sbss
 8001198:	2004005c 	.word	0x2004005c
  ldr r4, =_ebss
 800119c:	20040898 	.word	0x20040898

080011a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC1_IRQHandler>

080011a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ac:	2003      	movs	r0, #3
 80011ae:	f000 f961 	bl	8001474 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011b2:	2000      	movs	r0, #0
 80011b4:	f000 f80e 	bl	80011d4 <HAL_InitTick>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d002      	beq.n	80011c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	71fb      	strb	r3, [r7, #7]
 80011c2:	e001      	b.n	80011c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011c4:	f7ff fd74 	bl	8000cb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011c8:	79fb      	ldrb	r3, [r7, #7]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011dc:	2300      	movs	r3, #0
 80011de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011e0:	4b17      	ldr	r3, [pc, #92]	@ (8001240 <HAL_InitTick+0x6c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d023      	beq.n	8001230 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011e8:	4b16      	ldr	r3, [pc, #88]	@ (8001244 <HAL_InitTick+0x70>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b14      	ldr	r3, [pc, #80]	@ (8001240 <HAL_InitTick+0x6c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4619      	mov	r1, r3
 80011f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f96d 	bl	80014de <HAL_SYSTICK_Config>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d10f      	bne.n	800122a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b0f      	cmp	r3, #15
 800120e:	d809      	bhi.n	8001224 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001210:	2200      	movs	r2, #0
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	f04f 30ff 	mov.w	r0, #4294967295
 8001218:	f000 f937 	bl	800148a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800121c:	4a0a      	ldr	r2, [pc, #40]	@ (8001248 <HAL_InitTick+0x74>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	e007      	b.n	8001234 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	e004      	b.n	8001234 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	73fb      	strb	r3, [r7, #15]
 800122e:	e001      	b.n	8001234 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001234:	7bfb      	ldrb	r3, [r7, #15]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20040008 	.word	0x20040008
 8001244:	20040000 	.word	0x20040000
 8001248:	20040004 	.word	0x20040004

0800124c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001250:	4b06      	ldr	r3, [pc, #24]	@ (800126c <HAL_IncTick+0x20>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <HAL_IncTick+0x24>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4413      	add	r3, r2
 800125c:	4a04      	ldr	r2, [pc, #16]	@ (8001270 <HAL_IncTick+0x24>)
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20040008 	.word	0x20040008
 8001270:	2004074c 	.word	0x2004074c

08001274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return uwTick;
 8001278:	4b03      	ldr	r3, [pc, #12]	@ (8001288 <HAL_GetTick+0x14>)
 800127a:	681b      	ldr	r3, [r3, #0]
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	2004074c 	.word	0x2004074c

0800128c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001294:	f7ff ffee 	bl	8001274 <HAL_GetTick>
 8001298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a4:	d005      	beq.n	80012b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012a6:	4b0a      	ldr	r3, [pc, #40]	@ (80012d0 <HAL_Delay+0x44>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4413      	add	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012b2:	bf00      	nop
 80012b4:	f7ff ffde 	bl	8001274 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d8f7      	bhi.n	80012b4 <HAL_Delay+0x28>
  {
  }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20040008 	.word	0x20040008

080012d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012f0:	4013      	ands	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001306:	4a04      	ldr	r2, [pc, #16]	@ (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	60d3      	str	r3, [r2, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001320:	4b04      	ldr	r3, [pc, #16]	@ (8001334 <__NVIC_GetPriorityGrouping+0x18>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	f003 0307 	and.w	r3, r3, #7
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	2b00      	cmp	r3, #0
 8001348:	db0b      	blt.n	8001362 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	f003 021f 	and.w	r2, r3, #31
 8001350:	4907      	ldr	r1, [pc, #28]	@ (8001370 <__NVIC_EnableIRQ+0x38>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	095b      	lsrs	r3, r3, #5
 8001358:	2001      	movs	r0, #1
 800135a:	fa00 f202 	lsl.w	r2, r0, r2
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000e100 	.word	0xe000e100

08001374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	2b00      	cmp	r3, #0
 8001386:	db0a      	blt.n	800139e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	490c      	ldr	r1, [pc, #48]	@ (80013c0 <__NVIC_SetPriority+0x4c>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	0112      	lsls	r2, r2, #4
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	440b      	add	r3, r1
 8001398:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800139c:	e00a      	b.n	80013b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4908      	ldr	r1, [pc, #32]	@ (80013c4 <__NVIC_SetPriority+0x50>)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	3b04      	subs	r3, #4
 80013ac:	0112      	lsls	r2, r2, #4
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	440b      	add	r3, r1
 80013b2:	761a      	strb	r2, [r3, #24]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000e100 	.word	0xe000e100
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b089      	sub	sp, #36	@ 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f1c3 0307 	rsb	r3, r3, #7
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	bf28      	it	cs
 80013e6:	2304      	movcs	r3, #4
 80013e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3304      	adds	r3, #4
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d902      	bls.n	80013f8 <NVIC_EncodePriority+0x30>
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3b03      	subs	r3, #3
 80013f6:	e000      	b.n	80013fa <NVIC_EncodePriority+0x32>
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43da      	mvns	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	401a      	ands	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001410:	f04f 31ff 	mov.w	r1, #4294967295
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	43d9      	mvns	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	4313      	orrs	r3, r2
         );
}
 8001422:	4618      	mov	r0, r3
 8001424:	3724      	adds	r7, #36	@ 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001440:	d301      	bcc.n	8001446 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001442:	2301      	movs	r3, #1
 8001444:	e00f      	b.n	8001466 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001446:	4a0a      	ldr	r2, [pc, #40]	@ (8001470 <SysTick_Config+0x40>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144e:	210f      	movs	r1, #15
 8001450:	f04f 30ff 	mov.w	r0, #4294967295
 8001454:	f7ff ff8e 	bl	8001374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001458:	4b05      	ldr	r3, [pc, #20]	@ (8001470 <SysTick_Config+0x40>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145e:	4b04      	ldr	r3, [pc, #16]	@ (8001470 <SysTick_Config+0x40>)
 8001460:	2207      	movs	r2, #7
 8001462:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	e000e010 	.word	0xe000e010

08001474 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ff29 	bl	80012d4 <__NVIC_SetPriorityGrouping>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af00      	add	r7, sp, #0
 8001490:	4603      	mov	r3, r0
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
 8001496:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800149c:	f7ff ff3e 	bl	800131c <__NVIC_GetPriorityGrouping>
 80014a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	6978      	ldr	r0, [r7, #20]
 80014a8:	f7ff ff8e 	bl	80013c8 <NVIC_EncodePriority>
 80014ac:	4602      	mov	r2, r0
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff5d 	bl	8001374 <__NVIC_SetPriority>
}
 80014ba:	bf00      	nop
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff31 	bl	8001338 <__NVIC_EnableIRQ>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff ffa2 	bl	8001430 <SysTick_Config>
 80014ec:	4603      	mov	r3, r0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e08d      	b.n	8001626 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	461a      	mov	r2, r3
 8001510:	4b47      	ldr	r3, [pc, #284]	@ (8001630 <HAL_DMA_Init+0x138>)
 8001512:	429a      	cmp	r2, r3
 8001514:	d80f      	bhi.n	8001536 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	4b45      	ldr	r3, [pc, #276]	@ (8001634 <HAL_DMA_Init+0x13c>)
 800151e:	4413      	add	r3, r2
 8001520:	4a45      	ldr	r2, [pc, #276]	@ (8001638 <HAL_DMA_Init+0x140>)
 8001522:	fba2 2303 	umull	r2, r3, r2, r3
 8001526:	091b      	lsrs	r3, r3, #4
 8001528:	009a      	lsls	r2, r3, #2
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a42      	ldr	r2, [pc, #264]	@ (800163c <HAL_DMA_Init+0x144>)
 8001532:	641a      	str	r2, [r3, #64]	@ 0x40
 8001534:	e00e      	b.n	8001554 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	4b40      	ldr	r3, [pc, #256]	@ (8001640 <HAL_DMA_Init+0x148>)
 800153e:	4413      	add	r3, r2
 8001540:	4a3d      	ldr	r2, [pc, #244]	@ (8001638 <HAL_DMA_Init+0x140>)
 8001542:	fba2 2303 	umull	r2, r3, r2, r3
 8001546:	091b      	lsrs	r3, r3, #4
 8001548:	009a      	lsls	r2, r3, #2
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a3c      	ldr	r2, [pc, #240]	@ (8001644 <HAL_DMA_Init+0x14c>)
 8001552:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2202      	movs	r2, #2
 8001558:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800156a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800156e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001578:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001584:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001590:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	4313      	orrs	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 f9b8 	bl	800191c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80015b4:	d102      	bne.n	80015bc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80015d0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d010      	beq.n	80015fc <HAL_DMA_Init+0x104>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b04      	cmp	r3, #4
 80015e0:	d80c      	bhi.n	80015fc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 f9d8 	bl	8001998 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	e008      	b.n	800160e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40020407 	.word	0x40020407
 8001634:	bffdfff8 	.word	0xbffdfff8
 8001638:	cccccccd 	.word	0xcccccccd
 800163c:	40020000 	.word	0x40020000
 8001640:	bffdfbf8 	.word	0xbffdfbf8
 8001644:	40020400 	.word	0x40020400

08001648 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d008      	beq.n	8001672 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2204      	movs	r2, #4
 8001664:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e040      	b.n	80016f4 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 020e 	bic.w	r2, r2, #14
 8001680:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800168c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001690:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 0201 	bic.w	r2, r2, #1
 80016a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a6:	f003 021c 	and.w	r2, r3, #28
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	2101      	movs	r1, #1
 80016b0:	fa01 f202 	lsl.w	r2, r1, r2
 80016b4:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80016be:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00c      	beq.n	80016e2 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80016e0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d005      	beq.n	8001724 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2204      	movs	r2, #4
 800171c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	73fb      	strb	r3, [r7, #15]
 8001722:	e047      	b.n	80017b4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 020e 	bic.w	r2, r2, #14
 8001732:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0201 	bic.w	r2, r2, #1
 8001742:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800174e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001752:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001758:	f003 021c 	and.w	r2, r3, #28
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001760:	2101      	movs	r1, #1
 8001762:	fa01 f202 	lsl.w	r2, r1, r2
 8001766:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001770:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00c      	beq.n	8001794 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001784:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001788:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001792:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	4798      	blx	r3
    }
  }
  return status;
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b084      	sub	sp, #16
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017da:	f003 031c 	and.w	r3, r3, #28
 80017de:	2204      	movs	r2, #4
 80017e0:	409a      	lsls	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4013      	ands	r3, r2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d026      	beq.n	8001838 <HAL_DMA_IRQHandler+0x7a>
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d021      	beq.n	8001838 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0320 	and.w	r3, r3, #32
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d107      	bne.n	8001812 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0204 	bic.w	r2, r2, #4
 8001810:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001816:	f003 021c 	and.w	r2, r3, #28
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	2104      	movs	r1, #4
 8001820:	fa01 f202 	lsl.w	r2, r1, r2
 8001824:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	2b00      	cmp	r3, #0
 800182c:	d071      	beq.n	8001912 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001836:	e06c      	b.n	8001912 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183c:	f003 031c 	and.w	r3, r3, #28
 8001840:	2202      	movs	r2, #2
 8001842:	409a      	lsls	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4013      	ands	r3, r2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d02e      	beq.n	80018aa <HAL_DMA_IRQHandler+0xec>
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d029      	beq.n	80018aa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0320 	and.w	r3, r3, #32
 8001860:	2b00      	cmp	r3, #0
 8001862:	d10b      	bne.n	800187c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 020a 	bic.w	r2, r2, #10
 8001872:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001880:	f003 021c 	and.w	r2, r3, #28
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001888:	2102      	movs	r1, #2
 800188a:	fa01 f202 	lsl.w	r2, r1, r2
 800188e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800189c:	2b00      	cmp	r3, #0
 800189e:	d038      	beq.n	8001912 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80018a8:	e033      	b.n	8001912 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ae:	f003 031c 	and.w	r3, r3, #28
 80018b2:	2208      	movs	r2, #8
 80018b4:	409a      	lsls	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d02a      	beq.n	8001914 <HAL_DMA_IRQHandler+0x156>
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d025      	beq.n	8001914 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 020e 	bic.w	r2, r2, #14
 80018d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018dc:	f003 021c 	and.w	r2, r3, #28
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e4:	2101      	movs	r1, #1
 80018e6:	fa01 f202 	lsl.w	r2, r1, r2
 80018ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001906:	2b00      	cmp	r3, #0
 8001908:	d004      	beq.n	8001914 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001912:	bf00      	nop
 8001914:	bf00      	nop
}
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	4b17      	ldr	r3, [pc, #92]	@ (8001988 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800192c:	429a      	cmp	r2, r3
 800192e:	d80a      	bhi.n	8001946 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001934:	089b      	lsrs	r3, r3, #2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800193c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6493      	str	r3, [r2, #72]	@ 0x48
 8001944:	e007      	b.n	8001956 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194a:	089b      	lsrs	r3, r3, #2
 800194c:	009a      	lsls	r2, r3, #2
 800194e:	4b0f      	ldr	r3, [pc, #60]	@ (800198c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001950:	4413      	add	r3, r2
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	3b08      	subs	r3, #8
 800195e:	4a0c      	ldr	r2, [pc, #48]	@ (8001990 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001960:	fba2 2303 	umull	r2, r3, r2, r3
 8001964:	091b      	lsrs	r3, r3, #4
 8001966:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a0a      	ldr	r2, [pc, #40]	@ (8001994 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800196c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	2201      	movs	r2, #1
 8001976:	409a      	lsls	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	40020407 	.word	0x40020407
 800198c:	4002081c 	.word	0x4002081c
 8001990:	cccccccd 	.word	0xcccccccd
 8001994:	40020880 	.word	0x40020880

08001998 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80019ac:	4413      	add	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	461a      	mov	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a08      	ldr	r2, [pc, #32]	@ (80019dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80019ba:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	3b01      	subs	r3, #1
 80019c0:	f003 0303 	and.w	r3, r3, #3
 80019c4:	2201      	movs	r2, #1
 80019c6:	409a      	lsls	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	1000823f 	.word	0x1000823f
 80019dc:	40020940 	.word	0x40020940

080019e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b087      	sub	sp, #28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ee:	e166      	b.n	8001cbe <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	2101      	movs	r1, #1
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	fa01 f303 	lsl.w	r3, r1, r3
 80019fc:	4013      	ands	r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 8158 	beq.w	8001cb8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d005      	beq.n	8001a20 <HAL_GPIO_Init+0x40>
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d130      	bne.n	8001a82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a56:	2201      	movs	r2, #1
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	091b      	lsrs	r3, r3, #4
 8001a6c:	f003 0201 	and.w	r2, r3, #1
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	d017      	beq.n	8001abe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	2203      	movs	r2, #3
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d123      	bne.n	8001b12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	08da      	lsrs	r2, r3, #3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3208      	adds	r2, #8
 8001ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	220f      	movs	r2, #15
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	691a      	ldr	r2, [r3, #16]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	08da      	lsrs	r2, r3, #3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3208      	adds	r2, #8
 8001b0c:	6939      	ldr	r1, [r7, #16]
 8001b0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 0203 	and.w	r2, r3, #3
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 80b2 	beq.w	8001cb8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b54:	4b61      	ldr	r3, [pc, #388]	@ (8001cdc <HAL_GPIO_Init+0x2fc>)
 8001b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b58:	4a60      	ldr	r2, [pc, #384]	@ (8001cdc <HAL_GPIO_Init+0x2fc>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b60:	4b5e      	ldr	r3, [pc, #376]	@ (8001cdc <HAL_GPIO_Init+0x2fc>)
 8001b62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b6c:	4a5c      	ldr	r2, [pc, #368]	@ (8001ce0 <HAL_GPIO_Init+0x300>)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	089b      	lsrs	r3, r3, #2
 8001b72:	3302      	adds	r3, #2
 8001b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	220f      	movs	r2, #15
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b96:	d02b      	beq.n	8001bf0 <HAL_GPIO_Init+0x210>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a52      	ldr	r2, [pc, #328]	@ (8001ce4 <HAL_GPIO_Init+0x304>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d025      	beq.n	8001bec <HAL_GPIO_Init+0x20c>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a51      	ldr	r2, [pc, #324]	@ (8001ce8 <HAL_GPIO_Init+0x308>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d01f      	beq.n	8001be8 <HAL_GPIO_Init+0x208>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a50      	ldr	r2, [pc, #320]	@ (8001cec <HAL_GPIO_Init+0x30c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d019      	beq.n	8001be4 <HAL_GPIO_Init+0x204>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a4f      	ldr	r2, [pc, #316]	@ (8001cf0 <HAL_GPIO_Init+0x310>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d013      	beq.n	8001be0 <HAL_GPIO_Init+0x200>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a4e      	ldr	r2, [pc, #312]	@ (8001cf4 <HAL_GPIO_Init+0x314>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d00d      	beq.n	8001bdc <HAL_GPIO_Init+0x1fc>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a4d      	ldr	r2, [pc, #308]	@ (8001cf8 <HAL_GPIO_Init+0x318>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d007      	beq.n	8001bd8 <HAL_GPIO_Init+0x1f8>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a4c      	ldr	r2, [pc, #304]	@ (8001cfc <HAL_GPIO_Init+0x31c>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d101      	bne.n	8001bd4 <HAL_GPIO_Init+0x1f4>
 8001bd0:	2307      	movs	r3, #7
 8001bd2:	e00e      	b.n	8001bf2 <HAL_GPIO_Init+0x212>
 8001bd4:	2308      	movs	r3, #8
 8001bd6:	e00c      	b.n	8001bf2 <HAL_GPIO_Init+0x212>
 8001bd8:	2306      	movs	r3, #6
 8001bda:	e00a      	b.n	8001bf2 <HAL_GPIO_Init+0x212>
 8001bdc:	2305      	movs	r3, #5
 8001bde:	e008      	b.n	8001bf2 <HAL_GPIO_Init+0x212>
 8001be0:	2304      	movs	r3, #4
 8001be2:	e006      	b.n	8001bf2 <HAL_GPIO_Init+0x212>
 8001be4:	2303      	movs	r3, #3
 8001be6:	e004      	b.n	8001bf2 <HAL_GPIO_Init+0x212>
 8001be8:	2302      	movs	r3, #2
 8001bea:	e002      	b.n	8001bf2 <HAL_GPIO_Init+0x212>
 8001bec:	2301      	movs	r3, #1
 8001bee:	e000      	b.n	8001bf2 <HAL_GPIO_Init+0x212>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	f002 0203 	and.w	r2, r2, #3
 8001bf8:	0092      	lsls	r2, r2, #2
 8001bfa:	4093      	lsls	r3, r2
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c02:	4937      	ldr	r1, [pc, #220]	@ (8001ce0 <HAL_GPIO_Init+0x300>)
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	089b      	lsrs	r3, r3, #2
 8001c08:	3302      	adds	r3, #2
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c10:	4b3b      	ldr	r3, [pc, #236]	@ (8001d00 <HAL_GPIO_Init+0x320>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c34:	4a32      	ldr	r2, [pc, #200]	@ (8001d00 <HAL_GPIO_Init+0x320>)
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c3a:	4b31      	ldr	r3, [pc, #196]	@ (8001d00 <HAL_GPIO_Init+0x320>)
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	4013      	ands	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c5e:	4a28      	ldr	r2, [pc, #160]	@ (8001d00 <HAL_GPIO_Init+0x320>)
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c64:	4b26      	ldr	r3, [pc, #152]	@ (8001d00 <HAL_GPIO_Init+0x320>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c88:	4a1d      	ldr	r2, [pc, #116]	@ (8001d00 <HAL_GPIO_Init+0x320>)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d00 <HAL_GPIO_Init+0x320>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cb2:	4a13      	ldr	r2, [pc, #76]	@ (8001d00 <HAL_GPIO_Init+0x320>)
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f47f ae91 	bne.w	80019f0 <HAL_GPIO_Init+0x10>
  }
}
 8001cce:	bf00      	nop
 8001cd0:	bf00      	nop
 8001cd2:	371c      	adds	r7, #28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40010000 	.word	0x40010000
 8001ce4:	48000400 	.word	0x48000400
 8001ce8:	48000800 	.word	0x48000800
 8001cec:	48000c00 	.word	0x48000c00
 8001cf0:	48001000 	.word	0x48001000
 8001cf4:	48001400 	.word	0x48001400
 8001cf8:	48001800 	.word	0x48001800
 8001cfc:	48001c00 	.word	0x48001c00
 8001d00:	40010400 	.word	0x40010400

08001d04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	887b      	ldrh	r3, [r7, #2]
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d002      	beq.n	8001d22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
 8001d20:	e001      	b.n	8001d26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d22:	2300      	movs	r3, #0
 8001d24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	807b      	strh	r3, [r7, #2]
 8001d40:	4613      	mov	r3, r2
 8001d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d44:	787b      	ldrb	r3, [r7, #1]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d4a:	887a      	ldrh	r2, [r7, #2]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d50:	e002      	b.n	8001d58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d52:	887a      	ldrh	r2, [r7, #2]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d76:	887a      	ldrh	r2, [r7, #2]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	041a      	lsls	r2, r3, #16
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	43d9      	mvns	r1, r3
 8001d82:	887b      	ldrh	r3, [r7, #2]
 8001d84:	400b      	ands	r3, r1
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	619a      	str	r2, [r3, #24]
}
 8001d8c:	bf00      	nop
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af02      	add	r7, sp, #8
 8001d9e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e101      	b.n	8001fae <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d106      	bne.n	8001dc4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff f8a4 	bl	8000f0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f003 f8c7 	bl	8004f6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	7c1a      	ldrb	r2, [r3, #16]
 8001de4:	f88d 2000 	strb.w	r2, [sp]
 8001de8:	3304      	adds	r3, #4
 8001dea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dec:	f003 f890 	bl	8004f10 <USB_CoreInit>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d005      	beq.n	8001e02 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2202      	movs	r2, #2
 8001dfa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e0d5      	b.n	8001fae <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f003 f8bf 	bl	8004f8c <USB_SetCurrentMode>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0c6      	b.n	8001fae <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e20:	2300      	movs	r3, #0
 8001e22:	73fb      	strb	r3, [r7, #15]
 8001e24:	e04a      	b.n	8001ebc <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e26:	7bfa      	ldrb	r2, [r7, #15]
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	4413      	add	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	440b      	add	r3, r1
 8001e34:	3315      	adds	r3, #21
 8001e36:	2201      	movs	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e3a:	7bfa      	ldrb	r2, [r7, #15]
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4413      	add	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	440b      	add	r3, r1
 8001e48:	3314      	adds	r3, #20
 8001e4a:	7bfa      	ldrb	r2, [r7, #15]
 8001e4c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e4e:	7bfa      	ldrb	r2, [r7, #15]
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
 8001e52:	b298      	uxth	r0, r3
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	440b      	add	r3, r1
 8001e60:	332e      	adds	r3, #46	@ 0x2e
 8001e62:	4602      	mov	r2, r0
 8001e64:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e66:	7bfa      	ldrb	r2, [r7, #15]
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	4413      	add	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	440b      	add	r3, r1
 8001e74:	3318      	adds	r3, #24
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4413      	add	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	440b      	add	r3, r1
 8001e88:	331c      	adds	r3, #28
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e8e:	7bfa      	ldrb	r2, [r7, #15]
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4413      	add	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	3320      	adds	r3, #32
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ea2:	7bfa      	ldrb	r2, [r7, #15]
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4413      	add	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	440b      	add	r3, r1
 8001eb0:	3324      	adds	r3, #36	@ 0x24
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	73fb      	strb	r3, [r7, #15]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	791b      	ldrb	r3, [r3, #4]
 8001ec0:	7bfa      	ldrb	r2, [r7, #15]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d3af      	bcc.n	8001e26 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	73fb      	strb	r3, [r7, #15]
 8001eca:	e044      	b.n	8001f56 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ecc:	7bfa      	ldrb	r2, [r7, #15]
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001ede:	2200      	movs	r2, #0
 8001ee0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ee2:	7bfa      	ldrb	r2, [r7, #15]
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4413      	add	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	440b      	add	r3, r1
 8001ef0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001ef4:	7bfa      	ldrb	r2, [r7, #15]
 8001ef6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ef8:	7bfa      	ldrb	r2, [r7, #15]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f0e:	7bfa      	ldrb	r2, [r7, #15]
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4413      	add	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f24:	7bfa      	ldrb	r2, [r7, #15]
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f3a:	7bfa      	ldrb	r2, [r7, #15]
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	4413      	add	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	440b      	add	r3, r1
 8001f48:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	3301      	adds	r3, #1
 8001f54:	73fb      	strb	r3, [r7, #15]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	791b      	ldrb	r3, [r3, #4]
 8001f5a:	7bfa      	ldrb	r2, [r7, #15]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d3b5      	bcc.n	8001ecc <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6818      	ldr	r0, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	7c1a      	ldrb	r2, [r3, #16]
 8001f68:	f88d 2000 	strb.w	r2, [sp]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f70:	f003 f858 	bl	8005024 <USB_DevInit>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d005      	beq.n	8001f86 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e013      	b.n	8001fae <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	7b1b      	ldrb	r3, [r3, #12]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d102      	bne.n	8001fa2 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f80a 	bl	8001fb6 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f003 f9fd 	bl	80053a6 <USB_DevDisconnect>

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b085      	sub	sp, #20
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fe8:	f043 0303 	orr.w	r3, r3, #3
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
	...

08002000 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002004:	4b0d      	ldr	r3, [pc, #52]	@ (800203c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800200c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002010:	d102      	bne.n	8002018 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002012:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002016:	e00b      	b.n	8002030 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002018:	4b08      	ldr	r3, [pc, #32]	@ (800203c <HAL_PWREx_GetVoltageRange+0x3c>)
 800201a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800201e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002022:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002026:	d102      	bne.n	800202e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002028:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800202c:	e000      	b.n	8002030 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800202e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002030:	4618      	mov	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40007000 	.word	0x40007000

08002040 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d141      	bne.n	80020d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800204e:	4b4b      	ldr	r3, [pc, #300]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800205a:	d131      	bne.n	80020c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800205c:	4b47      	ldr	r3, [pc, #284]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002062:	4a46      	ldr	r2, [pc, #280]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002064:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002068:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800206c:	4b43      	ldr	r3, [pc, #268]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002074:	4a41      	ldr	r2, [pc, #260]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002076:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800207a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800207c:	4b40      	ldr	r3, [pc, #256]	@ (8002180 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2232      	movs	r2, #50	@ 0x32
 8002082:	fb02 f303 	mul.w	r3, r2, r3
 8002086:	4a3f      	ldr	r2, [pc, #252]	@ (8002184 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002088:	fba2 2303 	umull	r2, r3, r2, r3
 800208c:	0c9b      	lsrs	r3, r3, #18
 800208e:	3301      	adds	r3, #1
 8002090:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002092:	e002      	b.n	800209a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	3b01      	subs	r3, #1
 8002098:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800209a:	4b38      	ldr	r3, [pc, #224]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020a6:	d102      	bne.n	80020ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f2      	bne.n	8002094 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020ae:	4b33      	ldr	r3, [pc, #204]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ba:	d158      	bne.n	800216e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e057      	b.n	8002170 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020c0:	4b2e      	ldr	r3, [pc, #184]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020c6:	4a2d      	ldr	r2, [pc, #180]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80020d0:	e04d      	b.n	800216e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020d8:	d141      	bne.n	800215e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020da:	4b28      	ldr	r3, [pc, #160]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020e6:	d131      	bne.n	800214c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020e8:	4b24      	ldr	r3, [pc, #144]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020ee:	4a23      	ldr	r2, [pc, #140]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020f8:	4b20      	ldr	r3, [pc, #128]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002100:	4a1e      	ldr	r2, [pc, #120]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002102:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002106:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002108:	4b1d      	ldr	r3, [pc, #116]	@ (8002180 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2232      	movs	r2, #50	@ 0x32
 800210e:	fb02 f303 	mul.w	r3, r2, r3
 8002112:	4a1c      	ldr	r2, [pc, #112]	@ (8002184 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002114:	fba2 2303 	umull	r2, r3, r2, r3
 8002118:	0c9b      	lsrs	r3, r3, #18
 800211a:	3301      	adds	r3, #1
 800211c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800211e:	e002      	b.n	8002126 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	3b01      	subs	r3, #1
 8002124:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002126:	4b15      	ldr	r3, [pc, #84]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800212e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002132:	d102      	bne.n	800213a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f2      	bne.n	8002120 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800213a:	4b10      	ldr	r3, [pc, #64]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002146:	d112      	bne.n	800216e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e011      	b.n	8002170 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800214c:	4b0b      	ldr	r3, [pc, #44]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800214e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002152:	4a0a      	ldr	r2, [pc, #40]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002154:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002158:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800215c:	e007      	b.n	800216e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800215e:	4b07      	ldr	r3, [pc, #28]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002166:	4a05      	ldr	r2, [pc, #20]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002168:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800216c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	40007000 	.word	0x40007000
 8002180:	20040000 	.word	0x20040000
 8002184:	431bde83 	.word	0x431bde83

08002188 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800218c:	4b05      	ldr	r3, [pc, #20]	@ (80021a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4a04      	ldr	r2, [pc, #16]	@ (80021a4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002192:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002196:	6053      	str	r3, [r2, #4]
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40007000 	.word	0x40007000

080021a8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80021ac:	4b05      	ldr	r3, [pc, #20]	@ (80021c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	4a04      	ldr	r2, [pc, #16]	@ (80021c4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80021b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021b6:	6053      	str	r3, [r2, #4]
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40007000 	.word	0x40007000

080021c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d102      	bne.n	80021dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	f000 bc08 	b.w	80029ec <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021dc:	4b96      	ldr	r3, [pc, #600]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 030c 	and.w	r3, r3, #12
 80021e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021e6:	4b94      	ldr	r3, [pc, #592]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 80e4 	beq.w	80023c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d007      	beq.n	8002214 <HAL_RCC_OscConfig+0x4c>
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	2b0c      	cmp	r3, #12
 8002208:	f040 808b 	bne.w	8002322 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	2b01      	cmp	r3, #1
 8002210:	f040 8087 	bne.w	8002322 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002214:	4b88      	ldr	r3, [pc, #544]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <HAL_RCC_OscConfig+0x64>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e3df      	b.n	80029ec <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a1a      	ldr	r2, [r3, #32]
 8002230:	4b81      	ldr	r3, [pc, #516]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b00      	cmp	r3, #0
 800223a:	d004      	beq.n	8002246 <HAL_RCC_OscConfig+0x7e>
 800223c:	4b7e      	ldr	r3, [pc, #504]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002244:	e005      	b.n	8002252 <HAL_RCC_OscConfig+0x8a>
 8002246:	4b7c      	ldr	r3, [pc, #496]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 8002248:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800224c:	091b      	lsrs	r3, r3, #4
 800224e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002252:	4293      	cmp	r3, r2
 8002254:	d223      	bcs.n	800229e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	4618      	mov	r0, r3
 800225c:	f000 fdcc 	bl	8002df8 <RCC_SetFlashLatencyFromMSIRange>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e3c0      	b.n	80029ec <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800226a:	4b73      	ldr	r3, [pc, #460]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a72      	ldr	r2, [pc, #456]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 8002270:	f043 0308 	orr.w	r3, r3, #8
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	4b70      	ldr	r3, [pc, #448]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	496d      	ldr	r1, [pc, #436]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 8002284:	4313      	orrs	r3, r2
 8002286:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002288:	4b6b      	ldr	r3, [pc, #428]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	021b      	lsls	r3, r3, #8
 8002296:	4968      	ldr	r1, [pc, #416]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 8002298:	4313      	orrs	r3, r2
 800229a:	604b      	str	r3, [r1, #4]
 800229c:	e025      	b.n	80022ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800229e:	4b66      	ldr	r3, [pc, #408]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a65      	ldr	r2, [pc, #404]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 80022a4:	f043 0308 	orr.w	r3, r3, #8
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	4b63      	ldr	r3, [pc, #396]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	4960      	ldr	r1, [pc, #384]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022bc:	4b5e      	ldr	r3, [pc, #376]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	021b      	lsls	r3, r3, #8
 80022ca:	495b      	ldr	r1, [pc, #364]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d109      	bne.n	80022ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 fd8c 	bl	8002df8 <RCC_SetFlashLatencyFromMSIRange>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e380      	b.n	80029ec <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022ea:	f000 fcc1 	bl	8002c70 <HAL_RCC_GetSysClockFreq>
 80022ee:	4602      	mov	r2, r0
 80022f0:	4b51      	ldr	r3, [pc, #324]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	091b      	lsrs	r3, r3, #4
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	4950      	ldr	r1, [pc, #320]	@ (800243c <HAL_RCC_OscConfig+0x274>)
 80022fc:	5ccb      	ldrb	r3, [r1, r3]
 80022fe:	f003 031f 	and.w	r3, r3, #31
 8002302:	fa22 f303 	lsr.w	r3, r2, r3
 8002306:	4a4e      	ldr	r2, [pc, #312]	@ (8002440 <HAL_RCC_OscConfig+0x278>)
 8002308:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800230a:	4b4e      	ldr	r3, [pc, #312]	@ (8002444 <HAL_RCC_OscConfig+0x27c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe ff60 	bl	80011d4 <HAL_InitTick>
 8002314:	4603      	mov	r3, r0
 8002316:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d052      	beq.n	80023c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	e364      	b.n	80029ec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d032      	beq.n	8002390 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800232a:	4b43      	ldr	r3, [pc, #268]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a42      	ldr	r2, [pc, #264]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002336:	f7fe ff9d 	bl	8001274 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800233e:	f7fe ff99 	bl	8001274 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e34d      	b.n	80029ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002350:	4b39      	ldr	r3, [pc, #228]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800235c:	4b36      	ldr	r3, [pc, #216]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a35      	ldr	r2, [pc, #212]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 8002362:	f043 0308 	orr.w	r3, r3, #8
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	4b33      	ldr	r3, [pc, #204]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	4930      	ldr	r1, [pc, #192]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 8002376:	4313      	orrs	r3, r2
 8002378:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800237a:	4b2f      	ldr	r3, [pc, #188]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	021b      	lsls	r3, r3, #8
 8002388:	492b      	ldr	r1, [pc, #172]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 800238a:	4313      	orrs	r3, r2
 800238c:	604b      	str	r3, [r1, #4]
 800238e:	e01a      	b.n	80023c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002390:	4b29      	ldr	r3, [pc, #164]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a28      	ldr	r2, [pc, #160]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 8002396:	f023 0301 	bic.w	r3, r3, #1
 800239a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800239c:	f7fe ff6a 	bl	8001274 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023a4:	f7fe ff66 	bl	8001274 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e31a      	b.n	80029ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023b6:	4b20      	ldr	r3, [pc, #128]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0x1dc>
 80023c2:	e000      	b.n	80023c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d073      	beq.n	80024ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	d005      	beq.n	80023e4 <HAL_RCC_OscConfig+0x21c>
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	2b0c      	cmp	r3, #12
 80023dc:	d10e      	bne.n	80023fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d10b      	bne.n	80023fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e4:	4b14      	ldr	r3, [pc, #80]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d063      	beq.n	80024b8 <HAL_RCC_OscConfig+0x2f0>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d15f      	bne.n	80024b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e2f7      	b.n	80029ec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002404:	d106      	bne.n	8002414 <HAL_RCC_OscConfig+0x24c>
 8002406:	4b0c      	ldr	r3, [pc, #48]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a0b      	ldr	r2, [pc, #44]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 800240c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	e025      	b.n	8002460 <HAL_RCC_OscConfig+0x298>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800241c:	d114      	bne.n	8002448 <HAL_RCC_OscConfig+0x280>
 800241e:	4b06      	ldr	r3, [pc, #24]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a05      	ldr	r2, [pc, #20]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 8002424:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	4b03      	ldr	r3, [pc, #12]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a02      	ldr	r2, [pc, #8]	@ (8002438 <HAL_RCC_OscConfig+0x270>)
 8002430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	e013      	b.n	8002460 <HAL_RCC_OscConfig+0x298>
 8002438:	40021000 	.word	0x40021000
 800243c:	08005e34 	.word	0x08005e34
 8002440:	20040000 	.word	0x20040000
 8002444:	20040004 	.word	0x20040004
 8002448:	4ba0      	ldr	r3, [pc, #640]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a9f      	ldr	r2, [pc, #636]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 800244e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	4b9d      	ldr	r3, [pc, #628]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a9c      	ldr	r2, [pc, #624]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 800245a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800245e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d013      	beq.n	8002490 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002468:	f7fe ff04 	bl	8001274 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002470:	f7fe ff00 	bl	8001274 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b64      	cmp	r3, #100	@ 0x64
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e2b4      	b.n	80029ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002482:	4b92      	ldr	r3, [pc, #584]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0x2a8>
 800248e:	e014      	b.n	80024ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7fe fef0 	bl	8001274 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002498:	f7fe feec 	bl	8001274 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	@ 0x64
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e2a0      	b.n	80029ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024aa:	4b88      	ldr	r3, [pc, #544]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f0      	bne.n	8002498 <HAL_RCC_OscConfig+0x2d0>
 80024b6:	e000      	b.n	80024ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d060      	beq.n	8002588 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d005      	beq.n	80024d8 <HAL_RCC_OscConfig+0x310>
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	2b0c      	cmp	r3, #12
 80024d0:	d119      	bne.n	8002506 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d116      	bne.n	8002506 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024d8:	4b7c      	ldr	r3, [pc, #496]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_OscConfig+0x328>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e27d      	b.n	80029ec <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f0:	4b76      	ldr	r3, [pc, #472]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	061b      	lsls	r3, r3, #24
 80024fe:	4973      	ldr	r1, [pc, #460]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 8002500:	4313      	orrs	r3, r2
 8002502:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002504:	e040      	b.n	8002588 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d023      	beq.n	8002556 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800250e:	4b6f      	ldr	r3, [pc, #444]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a6e      	ldr	r2, [pc, #440]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 8002514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002518:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251a:	f7fe feab 	bl	8001274 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002522:	f7fe fea7 	bl	8001274 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e25b      	b.n	80029ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002534:	4b65      	ldr	r3, [pc, #404]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0f0      	beq.n	8002522 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002540:	4b62      	ldr	r3, [pc, #392]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	061b      	lsls	r3, r3, #24
 800254e:	495f      	ldr	r1, [pc, #380]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 8002550:	4313      	orrs	r3, r2
 8002552:	604b      	str	r3, [r1, #4]
 8002554:	e018      	b.n	8002588 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002556:	4b5d      	ldr	r3, [pc, #372]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a5c      	ldr	r2, [pc, #368]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 800255c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002562:	f7fe fe87 	bl	8001274 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800256a:	f7fe fe83 	bl	8001274 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e237      	b.n	80029ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800257c:	4b53      	ldr	r3, [pc, #332]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1f0      	bne.n	800256a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b00      	cmp	r3, #0
 8002592:	d03c      	beq.n	800260e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d01c      	beq.n	80025d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800259c:	4b4b      	ldr	r3, [pc, #300]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 800259e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025a2:	4a4a      	ldr	r2, [pc, #296]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ac:	f7fe fe62 	bl	8001274 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b4:	f7fe fe5e 	bl	8001274 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e212      	b.n	80029ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025c6:	4b41      	ldr	r3, [pc, #260]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 80025c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0ef      	beq.n	80025b4 <HAL_RCC_OscConfig+0x3ec>
 80025d4:	e01b      	b.n	800260e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025d6:	4b3d      	ldr	r3, [pc, #244]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 80025d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025dc:	4a3b      	ldr	r2, [pc, #236]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 80025de:	f023 0301 	bic.w	r3, r3, #1
 80025e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e6:	f7fe fe45 	bl	8001274 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ee:	f7fe fe41 	bl	8001274 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e1f5      	b.n	80029ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002600:	4b32      	ldr	r3, [pc, #200]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 8002602:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1ef      	bne.n	80025ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 80a6 	beq.w	8002768 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800261c:	2300      	movs	r3, #0
 800261e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002620:	4b2a      	ldr	r3, [pc, #168]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 8002622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10d      	bne.n	8002648 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800262c:	4b27      	ldr	r3, [pc, #156]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 800262e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002630:	4a26      	ldr	r2, [pc, #152]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 8002632:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002636:	6593      	str	r3, [r2, #88]	@ 0x58
 8002638:	4b24      	ldr	r3, [pc, #144]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 800263a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002644:	2301      	movs	r3, #1
 8002646:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002648:	4b21      	ldr	r3, [pc, #132]	@ (80026d0 <HAL_RCC_OscConfig+0x508>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002650:	2b00      	cmp	r3, #0
 8002652:	d118      	bne.n	8002686 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002654:	4b1e      	ldr	r3, [pc, #120]	@ (80026d0 <HAL_RCC_OscConfig+0x508>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a1d      	ldr	r2, [pc, #116]	@ (80026d0 <HAL_RCC_OscConfig+0x508>)
 800265a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800265e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002660:	f7fe fe08 	bl	8001274 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002668:	f7fe fe04 	bl	8001274 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e1b8      	b.n	80029ec <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800267a:	4b15      	ldr	r3, [pc, #84]	@ (80026d0 <HAL_RCC_OscConfig+0x508>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d108      	bne.n	80026a0 <HAL_RCC_OscConfig+0x4d8>
 800268e:	4b0f      	ldr	r3, [pc, #60]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 8002690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002694:	4a0d      	ldr	r2, [pc, #52]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800269e:	e029      	b.n	80026f4 <HAL_RCC_OscConfig+0x52c>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b05      	cmp	r3, #5
 80026a6:	d115      	bne.n	80026d4 <HAL_RCC_OscConfig+0x50c>
 80026a8:	4b08      	ldr	r3, [pc, #32]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 80026aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ae:	4a07      	ldr	r2, [pc, #28]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 80026b0:	f043 0304 	orr.w	r3, r3, #4
 80026b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026b8:	4b04      	ldr	r3, [pc, #16]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 80026ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026be:	4a03      	ldr	r2, [pc, #12]	@ (80026cc <HAL_RCC_OscConfig+0x504>)
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026c8:	e014      	b.n	80026f4 <HAL_RCC_OscConfig+0x52c>
 80026ca:	bf00      	nop
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40007000 	.word	0x40007000
 80026d4:	4b9d      	ldr	r3, [pc, #628]	@ (800294c <HAL_RCC_OscConfig+0x784>)
 80026d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026da:	4a9c      	ldr	r2, [pc, #624]	@ (800294c <HAL_RCC_OscConfig+0x784>)
 80026dc:	f023 0301 	bic.w	r3, r3, #1
 80026e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026e4:	4b99      	ldr	r3, [pc, #612]	@ (800294c <HAL_RCC_OscConfig+0x784>)
 80026e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ea:	4a98      	ldr	r2, [pc, #608]	@ (800294c <HAL_RCC_OscConfig+0x784>)
 80026ec:	f023 0304 	bic.w	r3, r3, #4
 80026f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d016      	beq.n	800272a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fc:	f7fe fdba 	bl	8001274 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002702:	e00a      	b.n	800271a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002704:	f7fe fdb6 	bl	8001274 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e168      	b.n	80029ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800271a:	4b8c      	ldr	r3, [pc, #560]	@ (800294c <HAL_RCC_OscConfig+0x784>)
 800271c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0ed      	beq.n	8002704 <HAL_RCC_OscConfig+0x53c>
 8002728:	e015      	b.n	8002756 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272a:	f7fe fda3 	bl	8001274 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002730:	e00a      	b.n	8002748 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002732:	f7fe fd9f 	bl	8001274 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002740:	4293      	cmp	r3, r2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e151      	b.n	80029ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002748:	4b80      	ldr	r3, [pc, #512]	@ (800294c <HAL_RCC_OscConfig+0x784>)
 800274a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1ed      	bne.n	8002732 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002756:	7ffb      	ldrb	r3, [r7, #31]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d105      	bne.n	8002768 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800275c:	4b7b      	ldr	r3, [pc, #492]	@ (800294c <HAL_RCC_OscConfig+0x784>)
 800275e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002760:	4a7a      	ldr	r2, [pc, #488]	@ (800294c <HAL_RCC_OscConfig+0x784>)
 8002762:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002766:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0320 	and.w	r3, r3, #32
 8002770:	2b00      	cmp	r3, #0
 8002772:	d03c      	beq.n	80027ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002778:	2b00      	cmp	r3, #0
 800277a:	d01c      	beq.n	80027b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800277c:	4b73      	ldr	r3, [pc, #460]	@ (800294c <HAL_RCC_OscConfig+0x784>)
 800277e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002782:	4a72      	ldr	r2, [pc, #456]	@ (800294c <HAL_RCC_OscConfig+0x784>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278c:	f7fe fd72 	bl	8001274 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002794:	f7fe fd6e 	bl	8001274 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e122      	b.n	80029ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027a6:	4b69      	ldr	r3, [pc, #420]	@ (800294c <HAL_RCC_OscConfig+0x784>)
 80027a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0ef      	beq.n	8002794 <HAL_RCC_OscConfig+0x5cc>
 80027b4:	e01b      	b.n	80027ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027b6:	4b65      	ldr	r3, [pc, #404]	@ (800294c <HAL_RCC_OscConfig+0x784>)
 80027b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027bc:	4a63      	ldr	r2, [pc, #396]	@ (800294c <HAL_RCC_OscConfig+0x784>)
 80027be:	f023 0301 	bic.w	r3, r3, #1
 80027c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c6:	f7fe fd55 	bl	8001274 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027ce:	f7fe fd51 	bl	8001274 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e105      	b.n	80029ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027e0:	4b5a      	ldr	r3, [pc, #360]	@ (800294c <HAL_RCC_OscConfig+0x784>)
 80027e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1ef      	bne.n	80027ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 80f9 	beq.w	80029ea <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	f040 80cf 	bne.w	80029a0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002802:	4b52      	ldr	r3, [pc, #328]	@ (800294c <HAL_RCC_OscConfig+0x784>)
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f003 0203 	and.w	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002812:	429a      	cmp	r2, r3
 8002814:	d12c      	bne.n	8002870 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002820:	3b01      	subs	r3, #1
 8002822:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002824:	429a      	cmp	r2, r3
 8002826:	d123      	bne.n	8002870 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002832:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002834:	429a      	cmp	r2, r3
 8002836:	d11b      	bne.n	8002870 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002842:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002844:	429a      	cmp	r2, r3
 8002846:	d113      	bne.n	8002870 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002852:	085b      	lsrs	r3, r3, #1
 8002854:	3b01      	subs	r3, #1
 8002856:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002858:	429a      	cmp	r2, r3
 800285a:	d109      	bne.n	8002870 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	085b      	lsrs	r3, r3, #1
 8002868:	3b01      	subs	r3, #1
 800286a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800286c:	429a      	cmp	r2, r3
 800286e:	d071      	beq.n	8002954 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	2b0c      	cmp	r3, #12
 8002874:	d068      	beq.n	8002948 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002876:	4b35      	ldr	r3, [pc, #212]	@ (800294c <HAL_RCC_OscConfig+0x784>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d105      	bne.n	800288e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002882:	4b32      	ldr	r3, [pc, #200]	@ (800294c <HAL_RCC_OscConfig+0x784>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e0ac      	b.n	80029ec <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002892:	4b2e      	ldr	r3, [pc, #184]	@ (800294c <HAL_RCC_OscConfig+0x784>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a2d      	ldr	r2, [pc, #180]	@ (800294c <HAL_RCC_OscConfig+0x784>)
 8002898:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800289c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800289e:	f7fe fce9 	bl	8001274 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a6:	f7fe fce5 	bl	8001274 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e099      	b.n	80029ec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028b8:	4b24      	ldr	r3, [pc, #144]	@ (800294c <HAL_RCC_OscConfig+0x784>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1f0      	bne.n	80028a6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c4:	4b21      	ldr	r3, [pc, #132]	@ (800294c <HAL_RCC_OscConfig+0x784>)
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	4b21      	ldr	r3, [pc, #132]	@ (8002950 <HAL_RCC_OscConfig+0x788>)
 80028ca:	4013      	ands	r3, r2
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80028d4:	3a01      	subs	r2, #1
 80028d6:	0112      	lsls	r2, r2, #4
 80028d8:	4311      	orrs	r1, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80028de:	0212      	lsls	r2, r2, #8
 80028e0:	4311      	orrs	r1, r2
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80028e6:	0852      	lsrs	r2, r2, #1
 80028e8:	3a01      	subs	r2, #1
 80028ea:	0552      	lsls	r2, r2, #21
 80028ec:	4311      	orrs	r1, r2
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80028f2:	0852      	lsrs	r2, r2, #1
 80028f4:	3a01      	subs	r2, #1
 80028f6:	0652      	lsls	r2, r2, #25
 80028f8:	4311      	orrs	r1, r2
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028fe:	06d2      	lsls	r2, r2, #27
 8002900:	430a      	orrs	r2, r1
 8002902:	4912      	ldr	r1, [pc, #72]	@ (800294c <HAL_RCC_OscConfig+0x784>)
 8002904:	4313      	orrs	r3, r2
 8002906:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002908:	4b10      	ldr	r3, [pc, #64]	@ (800294c <HAL_RCC_OscConfig+0x784>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a0f      	ldr	r2, [pc, #60]	@ (800294c <HAL_RCC_OscConfig+0x784>)
 800290e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002912:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002914:	4b0d      	ldr	r3, [pc, #52]	@ (800294c <HAL_RCC_OscConfig+0x784>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4a0c      	ldr	r2, [pc, #48]	@ (800294c <HAL_RCC_OscConfig+0x784>)
 800291a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800291e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002920:	f7fe fca8 	bl	8001274 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002928:	f7fe fca4 	bl	8001274 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e058      	b.n	80029ec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800293a:	4b04      	ldr	r3, [pc, #16]	@ (800294c <HAL_RCC_OscConfig+0x784>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002946:	e050      	b.n	80029ea <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e04f      	b.n	80029ec <HAL_RCC_OscConfig+0x824>
 800294c:	40021000 	.word	0x40021000
 8002950:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002954:	4b27      	ldr	r3, [pc, #156]	@ (80029f4 <HAL_RCC_OscConfig+0x82c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d144      	bne.n	80029ea <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002960:	4b24      	ldr	r3, [pc, #144]	@ (80029f4 <HAL_RCC_OscConfig+0x82c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a23      	ldr	r2, [pc, #140]	@ (80029f4 <HAL_RCC_OscConfig+0x82c>)
 8002966:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800296a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800296c:	4b21      	ldr	r3, [pc, #132]	@ (80029f4 <HAL_RCC_OscConfig+0x82c>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	4a20      	ldr	r2, [pc, #128]	@ (80029f4 <HAL_RCC_OscConfig+0x82c>)
 8002972:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002976:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002978:	f7fe fc7c 	bl	8001274 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002980:	f7fe fc78 	bl	8001274 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e02c      	b.n	80029ec <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002992:	4b18      	ldr	r3, [pc, #96]	@ (80029f4 <HAL_RCC_OscConfig+0x82c>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f0      	beq.n	8002980 <HAL_RCC_OscConfig+0x7b8>
 800299e:	e024      	b.n	80029ea <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	2b0c      	cmp	r3, #12
 80029a4:	d01f      	beq.n	80029e6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a6:	4b13      	ldr	r3, [pc, #76]	@ (80029f4 <HAL_RCC_OscConfig+0x82c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a12      	ldr	r2, [pc, #72]	@ (80029f4 <HAL_RCC_OscConfig+0x82c>)
 80029ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b2:	f7fe fc5f 	bl	8001274 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ba:	f7fe fc5b 	bl	8001274 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e00f      	b.n	80029ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029cc:	4b09      	ldr	r3, [pc, #36]	@ (80029f4 <HAL_RCC_OscConfig+0x82c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1f0      	bne.n	80029ba <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029d8:	4b06      	ldr	r3, [pc, #24]	@ (80029f4 <HAL_RCC_OscConfig+0x82c>)
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	4905      	ldr	r1, [pc, #20]	@ (80029f4 <HAL_RCC_OscConfig+0x82c>)
 80029de:	4b06      	ldr	r3, [pc, #24]	@ (80029f8 <HAL_RCC_OscConfig+0x830>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	60cb      	str	r3, [r1, #12]
 80029e4:	e001      	b.n	80029ea <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3720      	adds	r7, #32
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40021000 	.word	0x40021000
 80029f8:	feeefffc 	.word	0xfeeefffc

080029fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e11d      	b.n	8002c50 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a14:	4b90      	ldr	r3, [pc, #576]	@ (8002c58 <HAL_RCC_ClockConfig+0x25c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 030f 	and.w	r3, r3, #15
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d910      	bls.n	8002a44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a22:	4b8d      	ldr	r3, [pc, #564]	@ (8002c58 <HAL_RCC_ClockConfig+0x25c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f023 020f 	bic.w	r2, r3, #15
 8002a2a:	498b      	ldr	r1, [pc, #556]	@ (8002c58 <HAL_RCC_ClockConfig+0x25c>)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a32:	4b89      	ldr	r3, [pc, #548]	@ (8002c58 <HAL_RCC_ClockConfig+0x25c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e105      	b.n	8002c50 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d010      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	4b81      	ldr	r3, [pc, #516]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d908      	bls.n	8002a72 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a60:	4b7e      	ldr	r3, [pc, #504]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	497b      	ldr	r1, [pc, #492]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d079      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d11e      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a86:	4b75      	ldr	r3, [pc, #468]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e0dc      	b.n	8002c50 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002a96:	f000 fa09 	bl	8002eac <RCC_GetSysClockFreqFromPLLSource>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4a70      	ldr	r2, [pc, #448]	@ (8002c60 <HAL_RCC_ClockConfig+0x264>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d946      	bls.n	8002b30 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002aa2:	4b6e      	ldr	r3, [pc, #440]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d140      	bne.n	8002b30 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002aae:	4b6b      	ldr	r3, [pc, #428]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ab6:	4a69      	ldr	r2, [pc, #420]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002ab8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002abc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002abe:	2380      	movs	r3, #128	@ 0x80
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	e035      	b.n	8002b30 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d107      	bne.n	8002adc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002acc:	4b63      	ldr	r3, [pc, #396]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d115      	bne.n	8002b04 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0b9      	b.n	8002c50 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d107      	bne.n	8002af4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ae4:	4b5d      	ldr	r3, [pc, #372]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d109      	bne.n	8002b04 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e0ad      	b.n	8002c50 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002af4:	4b59      	ldr	r3, [pc, #356]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0a5      	b.n	8002c50 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002b04:	f000 f8b4 	bl	8002c70 <HAL_RCC_GetSysClockFreq>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	4a55      	ldr	r2, [pc, #340]	@ (8002c60 <HAL_RCC_ClockConfig+0x264>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d90f      	bls.n	8002b30 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002b10:	4b52      	ldr	r3, [pc, #328]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d109      	bne.n	8002b30 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b1c:	4b4f      	ldr	r3, [pc, #316]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b24:	4a4d      	ldr	r2, [pc, #308]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002b26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b2a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b2c:	2380      	movs	r3, #128	@ 0x80
 8002b2e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b30:	4b4a      	ldr	r3, [pc, #296]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f023 0203 	bic.w	r2, r3, #3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	4947      	ldr	r1, [pc, #284]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b42:	f7fe fb97 	bl	8001274 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b48:	e00a      	b.n	8002b60 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b4a:	f7fe fb93 	bl	8001274 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e077      	b.n	8002c50 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b60:	4b3e      	ldr	r3, [pc, #248]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 020c 	and.w	r2, r3, #12
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d1eb      	bne.n	8002b4a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2b80      	cmp	r3, #128	@ 0x80
 8002b76:	d105      	bne.n	8002b84 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b78:	4b38      	ldr	r3, [pc, #224]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	4a37      	ldr	r2, [pc, #220]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002b7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b82:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d010      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	4b31      	ldr	r3, [pc, #196]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d208      	bcs.n	8002bb2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba0:	4b2e      	ldr	r3, [pc, #184]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	492b      	ldr	r1, [pc, #172]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb2:	4b29      	ldr	r3, [pc, #164]	@ (8002c58 <HAL_RCC_ClockConfig+0x25c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d210      	bcs.n	8002be2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc0:	4b25      	ldr	r3, [pc, #148]	@ (8002c58 <HAL_RCC_ClockConfig+0x25c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f023 020f 	bic.w	r2, r3, #15
 8002bc8:	4923      	ldr	r1, [pc, #140]	@ (8002c58 <HAL_RCC_ClockConfig+0x25c>)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd0:	4b21      	ldr	r3, [pc, #132]	@ (8002c58 <HAL_RCC_ClockConfig+0x25c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 030f 	and.w	r3, r3, #15
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d001      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e036      	b.n	8002c50 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d008      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bee:	4b1b      	ldr	r3, [pc, #108]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	4918      	ldr	r1, [pc, #96]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d009      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c0c:	4b13      	ldr	r3, [pc, #76]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	4910      	ldr	r1, [pc, #64]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c20:	f000 f826 	bl	8002c70 <HAL_RCC_GetSysClockFreq>
 8002c24:	4602      	mov	r2, r0
 8002c26:	4b0d      	ldr	r3, [pc, #52]	@ (8002c5c <HAL_RCC_ClockConfig+0x260>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	091b      	lsrs	r3, r3, #4
 8002c2c:	f003 030f 	and.w	r3, r3, #15
 8002c30:	490c      	ldr	r1, [pc, #48]	@ (8002c64 <HAL_RCC_ClockConfig+0x268>)
 8002c32:	5ccb      	ldrb	r3, [r1, r3]
 8002c34:	f003 031f 	and.w	r3, r3, #31
 8002c38:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3c:	4a0a      	ldr	r2, [pc, #40]	@ (8002c68 <HAL_RCC_ClockConfig+0x26c>)
 8002c3e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c40:	4b0a      	ldr	r3, [pc, #40]	@ (8002c6c <HAL_RCC_ClockConfig+0x270>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fe fac5 	bl	80011d4 <HAL_InitTick>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	73fb      	strb	r3, [r7, #15]

  return status;
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40022000 	.word	0x40022000
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	04c4b400 	.word	0x04c4b400
 8002c64:	08005e34 	.word	0x08005e34
 8002c68:	20040000 	.word	0x20040000
 8002c6c:	20040004 	.word	0x20040004

08002c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b089      	sub	sp, #36	@ 0x24
 8002c74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c7e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c88:	4b3b      	ldr	r3, [pc, #236]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0303 	and.w	r3, r3, #3
 8002c90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d005      	beq.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	2b0c      	cmp	r3, #12
 8002c9c:	d121      	bne.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d11e      	bne.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ca4:	4b34      	ldr	r3, [pc, #208]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0308 	and.w	r3, r3, #8
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d107      	bne.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cb0:	4b31      	ldr	r3, [pc, #196]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cb6:	0a1b      	lsrs	r3, r3, #8
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	61fb      	str	r3, [r7, #28]
 8002cbe:	e005      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002cc0:	4b2d      	ldr	r3, [pc, #180]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	091b      	lsrs	r3, r3, #4
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ccc:	4a2b      	ldr	r2, [pc, #172]	@ (8002d7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10d      	bne.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ce0:	e00a      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d102      	bne.n	8002cee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ce8:	4b25      	ldr	r3, [pc, #148]	@ (8002d80 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cea:	61bb      	str	r3, [r7, #24]
 8002cec:	e004      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d101      	bne.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cf4:	4b23      	ldr	r3, [pc, #140]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cf6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	2b0c      	cmp	r3, #12
 8002cfc:	d134      	bne.n	8002d68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d003      	beq.n	8002d16 <HAL_RCC_GetSysClockFreq+0xa6>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	d003      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0xac>
 8002d14:	e005      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d16:	4b1a      	ldr	r3, [pc, #104]	@ (8002d80 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d18:	617b      	str	r3, [r7, #20]
      break;
 8002d1a:	e005      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d1c:	4b19      	ldr	r3, [pc, #100]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0x114>)
 8002d1e:	617b      	str	r3, [r7, #20]
      break;
 8002d20:	e002      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	617b      	str	r3, [r7, #20]
      break;
 8002d26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d28:	4b13      	ldr	r3, [pc, #76]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	3301      	adds	r3, #1
 8002d34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d36:	4b10      	ldr	r3, [pc, #64]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	0a1b      	lsrs	r3, r3, #8
 8002d3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	fb03 f202 	mul.w	r2, r3, r2
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	0e5b      	lsrs	r3, r3, #25
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	3301      	adds	r3, #1
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d68:	69bb      	ldr	r3, [r7, #24]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3724      	adds	r7, #36	@ 0x24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	08005e4c 	.word	0x08005e4c
 8002d80:	00f42400 	.word	0x00f42400
 8002d84:	007a1200 	.word	0x007a1200

08002d88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d8c:	4b03      	ldr	r3, [pc, #12]	@ (8002d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	20040000 	.word	0x20040000

08002da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002da4:	f7ff fff0 	bl	8002d88 <HAL_RCC_GetHCLKFreq>
 8002da8:	4602      	mov	r2, r0
 8002daa:	4b06      	ldr	r3, [pc, #24]	@ (8002dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	0a1b      	lsrs	r3, r3, #8
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	4904      	ldr	r1, [pc, #16]	@ (8002dc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002db6:	5ccb      	ldrb	r3, [r1, r3]
 8002db8:	f003 031f 	and.w	r3, r3, #31
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	08005e44 	.word	0x08005e44

08002dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002dd0:	f7ff ffda 	bl	8002d88 <HAL_RCC_GetHCLKFreq>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	0adb      	lsrs	r3, r3, #11
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	4904      	ldr	r1, [pc, #16]	@ (8002df4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002de2:	5ccb      	ldrb	r3, [r1, r3]
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000
 8002df4:	08005e44 	.word	0x08005e44

08002df8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e00:	2300      	movs	r3, #0
 8002e02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e04:	4b27      	ldr	r3, [pc, #156]	@ (8002ea4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d003      	beq.n	8002e18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e10:	f7ff f8f6 	bl	8002000 <HAL_PWREx_GetVoltageRange>
 8002e14:	6178      	str	r0, [r7, #20]
 8002e16:	e014      	b.n	8002e42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e18:	4b22      	ldr	r3, [pc, #136]	@ (8002ea4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1c:	4a21      	ldr	r2, [pc, #132]	@ (8002ea4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e22:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e24:	4b1f      	ldr	r3, [pc, #124]	@ (8002ea4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e30:	f7ff f8e6 	bl	8002000 <HAL_PWREx_GetVoltageRange>
 8002e34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e36:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3a:	4a1a      	ldr	r2, [pc, #104]	@ (8002ea4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e40:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e48:	d10b      	bne.n	8002e62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b80      	cmp	r3, #128	@ 0x80
 8002e4e:	d913      	bls.n	8002e78 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e54:	d902      	bls.n	8002e5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e56:	2302      	movs	r3, #2
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	e00d      	b.n	8002e78 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	613b      	str	r3, [r7, #16]
 8002e60:	e00a      	b.n	8002e78 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e66:	d902      	bls.n	8002e6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002e68:	2302      	movs	r3, #2
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	e004      	b.n	8002e78 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b70      	cmp	r3, #112	@ 0x70
 8002e72:	d101      	bne.n	8002e78 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e74:	2301      	movs	r3, #1
 8002e76:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f023 020f 	bic.w	r2, r3, #15
 8002e80:	4909      	ldr	r1, [pc, #36]	@ (8002ea8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e88:	4b07      	ldr	r3, [pc, #28]	@ (8002ea8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d001      	beq.n	8002e9a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40022000 	.word	0x40022000

08002eac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002eb2:	4b2d      	ldr	r3, [pc, #180]	@ (8002f68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d00b      	beq.n	8002eda <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2b03      	cmp	r3, #3
 8002ec6:	d825      	bhi.n	8002f14 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d008      	beq.n	8002ee0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d11f      	bne.n	8002f14 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002ed4:	4b25      	ldr	r3, [pc, #148]	@ (8002f6c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ed6:	613b      	str	r3, [r7, #16]
    break;
 8002ed8:	e01f      	b.n	8002f1a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002eda:	4b25      	ldr	r3, [pc, #148]	@ (8002f70 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002edc:	613b      	str	r3, [r7, #16]
    break;
 8002ede:	e01c      	b.n	8002f1a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ee0:	4b21      	ldr	r3, [pc, #132]	@ (8002f68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d107      	bne.n	8002efc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002eec:	4b1e      	ldr	r3, [pc, #120]	@ (8002f68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ef2:	0a1b      	lsrs	r3, r3, #8
 8002ef4:	f003 030f 	and.w	r3, r3, #15
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	e005      	b.n	8002f08 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002efc:	4b1a      	ldr	r3, [pc, #104]	@ (8002f68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	091b      	lsrs	r3, r3, #4
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002f08:	4a1a      	ldr	r2, [pc, #104]	@ (8002f74 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f10:	613b      	str	r3, [r7, #16]
    break;
 8002f12:	e002      	b.n	8002f1a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002f14:	2300      	movs	r3, #0
 8002f16:	613b      	str	r3, [r7, #16]
    break;
 8002f18:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f1a:	4b13      	ldr	r3, [pc, #76]	@ (8002f68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	091b      	lsrs	r3, r3, #4
 8002f20:	f003 030f 	and.w	r3, r3, #15
 8002f24:	3301      	adds	r3, #1
 8002f26:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f28:	4b0f      	ldr	r3, [pc, #60]	@ (8002f68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	0a1b      	lsrs	r3, r3, #8
 8002f2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	fb03 f202 	mul.w	r2, r3, r2
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f40:	4b09      	ldr	r3, [pc, #36]	@ (8002f68 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	0e5b      	lsrs	r3, r3, #25
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f58:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002f5a:	683b      	ldr	r3, [r7, #0]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	371c      	adds	r7, #28
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	00f42400 	.word	0x00f42400
 8002f70:	007a1200 	.word	0x007a1200
 8002f74:	08005e4c 	.word	0x08005e4c

08002f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f80:	2300      	movs	r3, #0
 8002f82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f84:	2300      	movs	r3, #0
 8002f86:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d040      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f98:	2b80      	cmp	r3, #128	@ 0x80
 8002f9a:	d02a      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002f9c:	2b80      	cmp	r3, #128	@ 0x80
 8002f9e:	d825      	bhi.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002fa0:	2b60      	cmp	r3, #96	@ 0x60
 8002fa2:	d026      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002fa4:	2b60      	cmp	r3, #96	@ 0x60
 8002fa6:	d821      	bhi.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002fa8:	2b40      	cmp	r3, #64	@ 0x40
 8002faa:	d006      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002fac:	2b40      	cmp	r3, #64	@ 0x40
 8002fae:	d81d      	bhi.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d009      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002fb4:	2b20      	cmp	r3, #32
 8002fb6:	d010      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002fb8:	e018      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fba:	4b89      	ldr	r3, [pc, #548]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	4a88      	ldr	r2, [pc, #544]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fc4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fc6:	e015      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3304      	adds	r3, #4
 8002fcc:	2100      	movs	r1, #0
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 fb02 	bl	80035d8 <RCCEx_PLLSAI1_Config>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fd8:	e00c      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3320      	adds	r3, #32
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 fbed 	bl	80037c0 <RCCEx_PLLSAI2_Config>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fea:	e003      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	74fb      	strb	r3, [r7, #19]
      break;
 8002ff0:	e000      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002ff2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ff4:	7cfb      	ldrb	r3, [r7, #19]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10b      	bne.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ffa:	4b79      	ldr	r3, [pc, #484]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ffc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003000:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003008:	4975      	ldr	r1, [pc, #468]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800300a:	4313      	orrs	r3, r2
 800300c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003010:	e001      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003012:	7cfb      	ldrb	r3, [r7, #19]
 8003014:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d047      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800302a:	d030      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800302c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003030:	d82a      	bhi.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003032:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003036:	d02a      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003038:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800303c:	d824      	bhi.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800303e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003042:	d008      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003044:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003048:	d81e      	bhi.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800304e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003052:	d010      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003054:	e018      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003056:	4b62      	ldr	r3, [pc, #392]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	4a61      	ldr	r2, [pc, #388]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800305c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003060:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003062:	e015      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3304      	adds	r3, #4
 8003068:	2100      	movs	r1, #0
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fab4 	bl	80035d8 <RCCEx_PLLSAI1_Config>
 8003070:	4603      	mov	r3, r0
 8003072:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003074:	e00c      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3320      	adds	r3, #32
 800307a:	2100      	movs	r1, #0
 800307c:	4618      	mov	r0, r3
 800307e:	f000 fb9f 	bl	80037c0 <RCCEx_PLLSAI2_Config>
 8003082:	4603      	mov	r3, r0
 8003084:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003086:	e003      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	74fb      	strb	r3, [r7, #19]
      break;
 800308c:	e000      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800308e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003090:	7cfb      	ldrb	r3, [r7, #19]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10b      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003096:	4b52      	ldr	r3, [pc, #328]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003098:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800309c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a4:	494e      	ldr	r1, [pc, #312]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80030ac:	e001      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ae:	7cfb      	ldrb	r3, [r7, #19]
 80030b0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 809f 	beq.w	80031fe <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c0:	2300      	movs	r3, #0
 80030c2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030c4:	4b46      	ldr	r3, [pc, #280]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80030d0:	2301      	movs	r3, #1
 80030d2:	e000      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80030d4:	2300      	movs	r3, #0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00d      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030da:	4b41      	ldr	r3, [pc, #260]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030de:	4a40      	ldr	r2, [pc, #256]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80030e6:	4b3e      	ldr	r3, [pc, #248]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ee:	60bb      	str	r3, [r7, #8]
 80030f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f2:	2301      	movs	r3, #1
 80030f4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030f6:	4b3b      	ldr	r3, [pc, #236]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a3a      	ldr	r2, [pc, #232]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80030fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003100:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003102:	f7fe f8b7 	bl	8001274 <HAL_GetTick>
 8003106:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003108:	e009      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310a:	f7fe f8b3 	bl	8001274 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d902      	bls.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	74fb      	strb	r3, [r7, #19]
        break;
 800311c:	e005      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800311e:	4b31      	ldr	r3, [pc, #196]	@ (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0ef      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800312a:	7cfb      	ldrb	r3, [r7, #19]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d15b      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003130:	4b2b      	ldr	r3, [pc, #172]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003136:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800313a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d01f      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	429a      	cmp	r2, r3
 800314c:	d019      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800314e:	4b24      	ldr	r3, [pc, #144]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003154:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003158:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800315a:	4b21      	ldr	r3, [pc, #132]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800315c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003160:	4a1f      	ldr	r2, [pc, #124]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003162:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003166:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800316a:	4b1d      	ldr	r3, [pc, #116]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800316c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003170:	4a1b      	ldr	r2, [pc, #108]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003172:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003176:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800317a:	4a19      	ldr	r2, [pc, #100]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d016      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318c:	f7fe f872 	bl	8001274 <HAL_GetTick>
 8003190:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003192:	e00b      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003194:	f7fe f86e 	bl	8001274 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d902      	bls.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	74fb      	strb	r3, [r7, #19]
            break;
 80031aa:	e006      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ac:	4b0c      	ldr	r3, [pc, #48]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0ec      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80031ba:	7cfb      	ldrb	r3, [r7, #19]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10c      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031c0:	4b07      	ldr	r3, [pc, #28]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d0:	4903      	ldr	r1, [pc, #12]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80031d8:	e008      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031da:	7cfb      	ldrb	r3, [r7, #19]
 80031dc:	74bb      	strb	r3, [r7, #18]
 80031de:	e005      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x274>
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e8:	7cfb      	ldrb	r3, [r7, #19]
 80031ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031ec:	7c7b      	ldrb	r3, [r7, #17]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d105      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f2:	4ba0      	ldr	r3, [pc, #640]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f6:	4a9f      	ldr	r2, [pc, #636]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031fc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00a      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800320a:	4b9a      	ldr	r3, [pc, #616]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800320c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003210:	f023 0203 	bic.w	r2, r3, #3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003218:	4996      	ldr	r1, [pc, #600]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800321a:	4313      	orrs	r3, r2
 800321c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00a      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800322c:	4b91      	ldr	r3, [pc, #580]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800322e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003232:	f023 020c 	bic.w	r2, r3, #12
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323a:	498e      	ldr	r1, [pc, #568]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800323c:	4313      	orrs	r3, r2
 800323e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00a      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800324e:	4b89      	ldr	r3, [pc, #548]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003254:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325c:	4985      	ldr	r1, [pc, #532]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800325e:	4313      	orrs	r3, r2
 8003260:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00a      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003270:	4b80      	ldr	r3, [pc, #512]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003276:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800327e:	497d      	ldr	r1, [pc, #500]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003280:	4313      	orrs	r3, r2
 8003282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0310 	and.w	r3, r3, #16
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003292:	4b78      	ldr	r3, [pc, #480]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003298:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a0:	4974      	ldr	r1, [pc, #464]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0320 	and.w	r3, r3, #32
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00a      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032b4:	4b6f      	ldr	r3, [pc, #444]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032c2:	496c      	ldr	r1, [pc, #432]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032d6:	4b67      	ldr	r3, [pc, #412]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032e4:	4963      	ldr	r1, [pc, #396]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00a      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032f8:	4b5e      	ldr	r3, [pc, #376]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003306:	495b      	ldr	r1, [pc, #364]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800331a:	4b56      	ldr	r3, [pc, #344]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800331c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003320:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003328:	4952      	ldr	r1, [pc, #328]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800333c:	4b4d      	ldr	r3, [pc, #308]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800333e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003342:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334a:	494a      	ldr	r1, [pc, #296]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800334c:	4313      	orrs	r3, r2
 800334e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800335e:	4b45      	ldr	r3, [pc, #276]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003364:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800336c:	4941      	ldr	r1, [pc, #260]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003380:	4b3c      	ldr	r3, [pc, #240]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003382:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003386:	f023 0203 	bic.w	r2, r3, #3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800338e:	4939      	ldr	r1, [pc, #228]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d028      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033a2:	4b34      	ldr	r3, [pc, #208]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033a8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033b0:	4930      	ldr	r1, [pc, #192]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033c0:	d106      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033c2:	4b2c      	ldr	r3, [pc, #176]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	4a2b      	ldr	r2, [pc, #172]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033cc:	60d3      	str	r3, [r2, #12]
 80033ce:	e011      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033d8:	d10c      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3304      	adds	r3, #4
 80033de:	2101      	movs	r1, #1
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 f8f9 	bl	80035d8 <RCCEx_PLLSAI1_Config>
 80033e6:	4603      	mov	r3, r0
 80033e8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033ea:	7cfb      	ldrb	r3, [r7, #19]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80033f0:	7cfb      	ldrb	r3, [r7, #19]
 80033f2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d04d      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003404:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003408:	d108      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800340a:	4b1a      	ldr	r3, [pc, #104]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800340c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003410:	4a18      	ldr	r2, [pc, #96]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003412:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003416:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800341a:	e012      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800341c:	4b15      	ldr	r3, [pc, #84]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800341e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003422:	4a14      	ldr	r2, [pc, #80]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003424:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003428:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800342c:	4b11      	ldr	r3, [pc, #68]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800342e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003432:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800343a:	490e      	ldr	r1, [pc, #56]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003446:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800344a:	d106      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800344c:	4b09      	ldr	r3, [pc, #36]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	4a08      	ldr	r2, [pc, #32]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003452:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003456:	60d3      	str	r3, [r2, #12]
 8003458:	e020      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800345e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003462:	d109      	bne.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003464:	4b03      	ldr	r3, [pc, #12]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	4a02      	ldr	r2, [pc, #8]	@ (8003474 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800346a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800346e:	60d3      	str	r3, [r2, #12]
 8003470:	e014      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003472:	bf00      	nop
 8003474:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800347c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003480:	d10c      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3304      	adds	r3, #4
 8003486:	2101      	movs	r1, #1
 8003488:	4618      	mov	r0, r3
 800348a:	f000 f8a5 	bl	80035d8 <RCCEx_PLLSAI1_Config>
 800348e:	4603      	mov	r3, r0
 8003490:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003492:	7cfb      	ldrb	r3, [r7, #19]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003498:	7cfb      	ldrb	r3, [r7, #19]
 800349a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d028      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034a8:	4b4a      	ldr	r3, [pc, #296]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034b6:	4947      	ldr	r1, [pc, #284]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034c6:	d106      	bne.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034c8:	4b42      	ldr	r3, [pc, #264]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	4a41      	ldr	r2, [pc, #260]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034d2:	60d3      	str	r3, [r2, #12]
 80034d4:	e011      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034de:	d10c      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3304      	adds	r3, #4
 80034e4:	2101      	movs	r1, #1
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 f876 	bl	80035d8 <RCCEx_PLLSAI1_Config>
 80034ec:	4603      	mov	r3, r0
 80034ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034f0:	7cfb      	ldrb	r3, [r7, #19]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80034f6:	7cfb      	ldrb	r3, [r7, #19]
 80034f8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d01e      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003506:	4b33      	ldr	r3, [pc, #204]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800350c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003516:	492f      	ldr	r1, [pc, #188]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003524:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003528:	d10c      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3304      	adds	r3, #4
 800352e:	2102      	movs	r1, #2
 8003530:	4618      	mov	r0, r3
 8003532:	f000 f851 	bl	80035d8 <RCCEx_PLLSAI1_Config>
 8003536:	4603      	mov	r3, r0
 8003538:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800353a:	7cfb      	ldrb	r3, [r7, #19]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003540:	7cfb      	ldrb	r3, [r7, #19]
 8003542:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00b      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003550:	4b20      	ldr	r3, [pc, #128]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003552:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003556:	f023 0204 	bic.w	r2, r3, #4
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003560:	491c      	ldr	r1, [pc, #112]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00b      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003574:	4b17      	ldr	r3, [pc, #92]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003576:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800357a:	f023 0218 	bic.w	r2, r3, #24
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003584:	4913      	ldr	r1, [pc, #76]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d017      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003598:	4b0e      	ldr	r3, [pc, #56]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800359a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800359e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035a8:	490a      	ldr	r1, [pc, #40]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035ba:	d105      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035bc:	4b05      	ldr	r3, [pc, #20]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	4a04      	ldr	r2, [pc, #16]	@ (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40021000 	.word	0x40021000

080035d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035e2:	2300      	movs	r3, #0
 80035e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035e6:	4b72      	ldr	r3, [pc, #456]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00e      	beq.n	8003610 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035f2:	4b6f      	ldr	r3, [pc, #444]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f003 0203 	and.w	r2, r3, #3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d103      	bne.n	800360a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
       ||
 8003606:	2b00      	cmp	r3, #0
 8003608:	d142      	bne.n	8003690 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	73fb      	strb	r3, [r7, #15]
 800360e:	e03f      	b.n	8003690 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b03      	cmp	r3, #3
 8003616:	d018      	beq.n	800364a <RCCEx_PLLSAI1_Config+0x72>
 8003618:	2b03      	cmp	r3, #3
 800361a:	d825      	bhi.n	8003668 <RCCEx_PLLSAI1_Config+0x90>
 800361c:	2b01      	cmp	r3, #1
 800361e:	d002      	beq.n	8003626 <RCCEx_PLLSAI1_Config+0x4e>
 8003620:	2b02      	cmp	r3, #2
 8003622:	d009      	beq.n	8003638 <RCCEx_PLLSAI1_Config+0x60>
 8003624:	e020      	b.n	8003668 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003626:	4b62      	ldr	r3, [pc, #392]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d11d      	bne.n	800366e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003636:	e01a      	b.n	800366e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003638:	4b5d      	ldr	r3, [pc, #372]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003640:	2b00      	cmp	r3, #0
 8003642:	d116      	bne.n	8003672 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003648:	e013      	b.n	8003672 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800364a:	4b59      	ldr	r3, [pc, #356]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10f      	bne.n	8003676 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003656:	4b56      	ldr	r3, [pc, #344]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d109      	bne.n	8003676 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003666:	e006      	b.n	8003676 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	73fb      	strb	r3, [r7, #15]
      break;
 800366c:	e004      	b.n	8003678 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800366e:	bf00      	nop
 8003670:	e002      	b.n	8003678 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003672:	bf00      	nop
 8003674:	e000      	b.n	8003678 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003676:	bf00      	nop
    }

    if(status == HAL_OK)
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d108      	bne.n	8003690 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800367e:	4b4c      	ldr	r3, [pc, #304]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f023 0203 	bic.w	r2, r3, #3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4949      	ldr	r1, [pc, #292]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800368c:	4313      	orrs	r3, r2
 800368e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003690:	7bfb      	ldrb	r3, [r7, #15]
 8003692:	2b00      	cmp	r3, #0
 8003694:	f040 8086 	bne.w	80037a4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003698:	4b45      	ldr	r3, [pc, #276]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a44      	ldr	r2, [pc, #272]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800369e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80036a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a4:	f7fd fde6 	bl	8001274 <HAL_GetTick>
 80036a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036aa:	e009      	b.n	80036c0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036ac:	f7fd fde2 	bl	8001274 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d902      	bls.n	80036c0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	73fb      	strb	r3, [r7, #15]
        break;
 80036be:	e005      	b.n	80036cc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036c0:	4b3b      	ldr	r3, [pc, #236]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1ef      	bne.n	80036ac <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d168      	bne.n	80037a4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d113      	bne.n	8003700 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036d8:	4b35      	ldr	r3, [pc, #212]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	4b35      	ldr	r3, [pc, #212]	@ (80037b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036de:	4013      	ands	r3, r2
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6892      	ldr	r2, [r2, #8]
 80036e4:	0211      	lsls	r1, r2, #8
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	68d2      	ldr	r2, [r2, #12]
 80036ea:	06d2      	lsls	r2, r2, #27
 80036ec:	4311      	orrs	r1, r2
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6852      	ldr	r2, [r2, #4]
 80036f2:	3a01      	subs	r2, #1
 80036f4:	0112      	lsls	r2, r2, #4
 80036f6:	430a      	orrs	r2, r1
 80036f8:	492d      	ldr	r1, [pc, #180]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	610b      	str	r3, [r1, #16]
 80036fe:	e02d      	b.n	800375c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d115      	bne.n	8003732 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003706:	4b2a      	ldr	r3, [pc, #168]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003708:	691a      	ldr	r2, [r3, #16]
 800370a:	4b2b      	ldr	r3, [pc, #172]	@ (80037b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800370c:	4013      	ands	r3, r2
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6892      	ldr	r2, [r2, #8]
 8003712:	0211      	lsls	r1, r2, #8
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6912      	ldr	r2, [r2, #16]
 8003718:	0852      	lsrs	r2, r2, #1
 800371a:	3a01      	subs	r2, #1
 800371c:	0552      	lsls	r2, r2, #21
 800371e:	4311      	orrs	r1, r2
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6852      	ldr	r2, [r2, #4]
 8003724:	3a01      	subs	r2, #1
 8003726:	0112      	lsls	r2, r2, #4
 8003728:	430a      	orrs	r2, r1
 800372a:	4921      	ldr	r1, [pc, #132]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800372c:	4313      	orrs	r3, r2
 800372e:	610b      	str	r3, [r1, #16]
 8003730:	e014      	b.n	800375c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003732:	4b1f      	ldr	r3, [pc, #124]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003734:	691a      	ldr	r2, [r3, #16]
 8003736:	4b21      	ldr	r3, [pc, #132]	@ (80037bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003738:	4013      	ands	r3, r2
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6892      	ldr	r2, [r2, #8]
 800373e:	0211      	lsls	r1, r2, #8
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6952      	ldr	r2, [r2, #20]
 8003744:	0852      	lsrs	r2, r2, #1
 8003746:	3a01      	subs	r2, #1
 8003748:	0652      	lsls	r2, r2, #25
 800374a:	4311      	orrs	r1, r2
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6852      	ldr	r2, [r2, #4]
 8003750:	3a01      	subs	r2, #1
 8003752:	0112      	lsls	r2, r2, #4
 8003754:	430a      	orrs	r2, r1
 8003756:	4916      	ldr	r1, [pc, #88]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003758:	4313      	orrs	r3, r2
 800375a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800375c:	4b14      	ldr	r3, [pc, #80]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a13      	ldr	r2, [pc, #76]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003762:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003766:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003768:	f7fd fd84 	bl	8001274 <HAL_GetTick>
 800376c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800376e:	e009      	b.n	8003784 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003770:	f7fd fd80 	bl	8001274 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d902      	bls.n	8003784 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	73fb      	strb	r3, [r7, #15]
          break;
 8003782:	e005      	b.n	8003790 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003784:	4b0a      	ldr	r3, [pc, #40]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0ef      	beq.n	8003770 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003790:	7bfb      	ldrb	r3, [r7, #15]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003796:	4b06      	ldr	r3, [pc, #24]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003798:	691a      	ldr	r2, [r3, #16]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	4904      	ldr	r1, [pc, #16]	@ (80037b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40021000 	.word	0x40021000
 80037b4:	07ff800f 	.word	0x07ff800f
 80037b8:	ff9f800f 	.word	0xff9f800f
 80037bc:	f9ff800f 	.word	0xf9ff800f

080037c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037ce:	4b72      	ldr	r3, [pc, #456]	@ (8003998 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00e      	beq.n	80037f8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037da:	4b6f      	ldr	r3, [pc, #444]	@ (8003998 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f003 0203 	and.w	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d103      	bne.n	80037f2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
       ||
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d142      	bne.n	8003878 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	73fb      	strb	r3, [r7, #15]
 80037f6:	e03f      	b.n	8003878 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d018      	beq.n	8003832 <RCCEx_PLLSAI2_Config+0x72>
 8003800:	2b03      	cmp	r3, #3
 8003802:	d825      	bhi.n	8003850 <RCCEx_PLLSAI2_Config+0x90>
 8003804:	2b01      	cmp	r3, #1
 8003806:	d002      	beq.n	800380e <RCCEx_PLLSAI2_Config+0x4e>
 8003808:	2b02      	cmp	r3, #2
 800380a:	d009      	beq.n	8003820 <RCCEx_PLLSAI2_Config+0x60>
 800380c:	e020      	b.n	8003850 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800380e:	4b62      	ldr	r3, [pc, #392]	@ (8003998 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d11d      	bne.n	8003856 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800381e:	e01a      	b.n	8003856 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003820:	4b5d      	ldr	r3, [pc, #372]	@ (8003998 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003828:	2b00      	cmp	r3, #0
 800382a:	d116      	bne.n	800385a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003830:	e013      	b.n	800385a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003832:	4b59      	ldr	r3, [pc, #356]	@ (8003998 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10f      	bne.n	800385e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800383e:	4b56      	ldr	r3, [pc, #344]	@ (8003998 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d109      	bne.n	800385e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800384e:	e006      	b.n	800385e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	73fb      	strb	r3, [r7, #15]
      break;
 8003854:	e004      	b.n	8003860 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003856:	bf00      	nop
 8003858:	e002      	b.n	8003860 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800385a:	bf00      	nop
 800385c:	e000      	b.n	8003860 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800385e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003860:	7bfb      	ldrb	r3, [r7, #15]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d108      	bne.n	8003878 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003866:	4b4c      	ldr	r3, [pc, #304]	@ (8003998 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f023 0203 	bic.w	r2, r3, #3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4949      	ldr	r1, [pc, #292]	@ (8003998 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003874:	4313      	orrs	r3, r2
 8003876:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003878:	7bfb      	ldrb	r3, [r7, #15]
 800387a:	2b00      	cmp	r3, #0
 800387c:	f040 8086 	bne.w	800398c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003880:	4b45      	ldr	r3, [pc, #276]	@ (8003998 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a44      	ldr	r2, [pc, #272]	@ (8003998 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003886:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800388a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800388c:	f7fd fcf2 	bl	8001274 <HAL_GetTick>
 8003890:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003892:	e009      	b.n	80038a8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003894:	f7fd fcee 	bl	8001274 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d902      	bls.n	80038a8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	73fb      	strb	r3, [r7, #15]
        break;
 80038a6:	e005      	b.n	80038b4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003998 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1ef      	bne.n	8003894 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d168      	bne.n	800398c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d113      	bne.n	80038e8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038c0:	4b35      	ldr	r3, [pc, #212]	@ (8003998 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	4b35      	ldr	r3, [pc, #212]	@ (800399c <RCCEx_PLLSAI2_Config+0x1dc>)
 80038c6:	4013      	ands	r3, r2
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6892      	ldr	r2, [r2, #8]
 80038cc:	0211      	lsls	r1, r2, #8
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	68d2      	ldr	r2, [r2, #12]
 80038d2:	06d2      	lsls	r2, r2, #27
 80038d4:	4311      	orrs	r1, r2
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	6852      	ldr	r2, [r2, #4]
 80038da:	3a01      	subs	r2, #1
 80038dc:	0112      	lsls	r2, r2, #4
 80038de:	430a      	orrs	r2, r1
 80038e0:	492d      	ldr	r1, [pc, #180]	@ (8003998 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	614b      	str	r3, [r1, #20]
 80038e6:	e02d      	b.n	8003944 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d115      	bne.n	800391a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038ee:	4b2a      	ldr	r3, [pc, #168]	@ (8003998 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038f0:	695a      	ldr	r2, [r3, #20]
 80038f2:	4b2b      	ldr	r3, [pc, #172]	@ (80039a0 <RCCEx_PLLSAI2_Config+0x1e0>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6892      	ldr	r2, [r2, #8]
 80038fa:	0211      	lsls	r1, r2, #8
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6912      	ldr	r2, [r2, #16]
 8003900:	0852      	lsrs	r2, r2, #1
 8003902:	3a01      	subs	r2, #1
 8003904:	0552      	lsls	r2, r2, #21
 8003906:	4311      	orrs	r1, r2
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6852      	ldr	r2, [r2, #4]
 800390c:	3a01      	subs	r2, #1
 800390e:	0112      	lsls	r2, r2, #4
 8003910:	430a      	orrs	r2, r1
 8003912:	4921      	ldr	r1, [pc, #132]	@ (8003998 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003914:	4313      	orrs	r3, r2
 8003916:	614b      	str	r3, [r1, #20]
 8003918:	e014      	b.n	8003944 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800391a:	4b1f      	ldr	r3, [pc, #124]	@ (8003998 <RCCEx_PLLSAI2_Config+0x1d8>)
 800391c:	695a      	ldr	r2, [r3, #20]
 800391e:	4b21      	ldr	r3, [pc, #132]	@ (80039a4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003920:	4013      	ands	r3, r2
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6892      	ldr	r2, [r2, #8]
 8003926:	0211      	lsls	r1, r2, #8
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6952      	ldr	r2, [r2, #20]
 800392c:	0852      	lsrs	r2, r2, #1
 800392e:	3a01      	subs	r2, #1
 8003930:	0652      	lsls	r2, r2, #25
 8003932:	4311      	orrs	r1, r2
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6852      	ldr	r2, [r2, #4]
 8003938:	3a01      	subs	r2, #1
 800393a:	0112      	lsls	r2, r2, #4
 800393c:	430a      	orrs	r2, r1
 800393e:	4916      	ldr	r1, [pc, #88]	@ (8003998 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003940:	4313      	orrs	r3, r2
 8003942:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003944:	4b14      	ldr	r3, [pc, #80]	@ (8003998 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a13      	ldr	r2, [pc, #76]	@ (8003998 <RCCEx_PLLSAI2_Config+0x1d8>)
 800394a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800394e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003950:	f7fd fc90 	bl	8001274 <HAL_GetTick>
 8003954:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003956:	e009      	b.n	800396c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003958:	f7fd fc8c 	bl	8001274 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d902      	bls.n	800396c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	73fb      	strb	r3, [r7, #15]
          break;
 800396a:	e005      	b.n	8003978 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800396c:	4b0a      	ldr	r3, [pc, #40]	@ (8003998 <RCCEx_PLLSAI2_Config+0x1d8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0ef      	beq.n	8003958 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d106      	bne.n	800398c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800397e:	4b06      	ldr	r3, [pc, #24]	@ (8003998 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003980:	695a      	ldr	r2, [r3, #20]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	4904      	ldr	r1, [pc, #16]	@ (8003998 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003988:	4313      	orrs	r3, r2
 800398a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800398c:	7bfb      	ldrb	r3, [r7, #15]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40021000 	.word	0x40021000
 800399c:	07ff800f 	.word	0x07ff800f
 80039a0:	ff9f800f 	.word	0xff9f800f
 80039a4:	f9ff800f 	.word	0xf9ff800f

080039a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e042      	b.n	8003a40 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d106      	bne.n	80039d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7fd f993 	bl	8000cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2224      	movs	r2, #36	@ 0x24
 80039d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0201 	bic.w	r2, r2, #1
 80039e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 ff0a 	bl	800480c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 fc0b 	bl	8004214 <UART_SetConfig>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d101      	bne.n	8003a08 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e01b      	b.n	8003a40 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 ff89 	bl	8004950 <UART_CheckIdleState>
 8003a3e:	4603      	mov	r3, r0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08a      	sub	sp, #40	@ 0x28
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	4613      	mov	r3, r2
 8003a56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a5e:	2b20      	cmp	r3, #32
 8003a60:	d17b      	bne.n	8003b5a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <HAL_UART_Transmit+0x26>
 8003a68:	88fb      	ldrh	r3, [r7, #6]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e074      	b.n	8003b5c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2221      	movs	r2, #33	@ 0x21
 8003a7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a82:	f7fd fbf7 	bl	8001274 <HAL_GetTick>
 8003a86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	88fa      	ldrh	r2, [r7, #6]
 8003a8c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	88fa      	ldrh	r2, [r7, #6]
 8003a94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aa0:	d108      	bne.n	8003ab4 <HAL_UART_Transmit+0x6c>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d104      	bne.n	8003ab4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	61bb      	str	r3, [r7, #24]
 8003ab2:	e003      	b.n	8003abc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003abc:	e030      	b.n	8003b20 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2180      	movs	r1, #128	@ 0x80
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 ffeb 	bl	8004aa4 <UART_WaitOnFlagUntilTimeout>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d005      	beq.n	8003ae0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e03d      	b.n	8003b5c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10b      	bne.n	8003afe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	881a      	ldrh	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003af2:	b292      	uxth	r2, r2
 8003af4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	3302      	adds	r3, #2
 8003afa:	61bb      	str	r3, [r7, #24]
 8003afc:	e007      	b.n	8003b0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	781a      	ldrb	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1c8      	bne.n	8003abe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	2200      	movs	r2, #0
 8003b34:	2140      	movs	r1, #64	@ 0x40
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 ffb4 	bl	8004aa4 <UART_WaitOnFlagUntilTimeout>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d005      	beq.n	8003b4e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e006      	b.n	8003b5c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	e000      	b.n	8003b5c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003b5a:	2302      	movs	r3, #2
  }
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3720      	adds	r7, #32
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b0ba      	sub	sp, #232	@ 0xe8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003b8e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003b92:	4013      	ands	r3, r2
 8003b94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003b98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d11b      	bne.n	8003bd8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d015      	beq.n	8003bd8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bb0:	f003 0320 	and.w	r3, r3, #32
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d105      	bne.n	8003bc4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d009      	beq.n	8003bd8 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 8300 	beq.w	80041ce <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	4798      	blx	r3
      }
      return;
 8003bd6:	e2fa      	b.n	80041ce <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8003bd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 8123 	beq.w	8003e28 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003be2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003be6:	4b8d      	ldr	r3, [pc, #564]	@ (8003e1c <HAL_UART_IRQHandler+0x2b8>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d106      	bne.n	8003bfc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003bee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003bf2:	4b8b      	ldr	r3, [pc, #556]	@ (8003e20 <HAL_UART_IRQHandler+0x2bc>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f000 8116 	beq.w	8003e28 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d011      	beq.n	8003c2c <HAL_UART_IRQHandler+0xc8>
 8003c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00b      	beq.n	8003c2c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c22:	f043 0201 	orr.w	r2, r3, #1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d011      	beq.n	8003c5c <HAL_UART_IRQHandler+0xf8>
 8003c38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00b      	beq.n	8003c5c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2202      	movs	r2, #2
 8003c4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c52:	f043 0204 	orr.w	r2, r3, #4
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d011      	beq.n	8003c8c <HAL_UART_IRQHandler+0x128>
 8003c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00b      	beq.n	8003c8c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2204      	movs	r2, #4
 8003c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c82:	f043 0202 	orr.w	r2, r3, #2
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d017      	beq.n	8003cc8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d105      	bne.n	8003cb0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003ca4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003ca8:	4b5c      	ldr	r3, [pc, #368]	@ (8003e1c <HAL_UART_IRQHandler+0x2b8>)
 8003caa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00b      	beq.n	8003cc8 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2208      	movs	r2, #8
 8003cb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cbe:	f043 0208 	orr.w	r2, r3, #8
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ccc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d012      	beq.n	8003cfa <HAL_UART_IRQHandler+0x196>
 8003cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cd8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00c      	beq.n	8003cfa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ce8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf0:	f043 0220 	orr.w	r2, r3, #32
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 8266 	beq.w	80041d2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d013      	beq.n	8003d3a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d105      	bne.n	8003d2a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d007      	beq.n	8003d3a <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d40:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d4e:	2b40      	cmp	r3, #64	@ 0x40
 8003d50:	d005      	beq.n	8003d5e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d56:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d054      	beq.n	8003e08 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 ff0d 	bl	8004b7e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d6e:	2b40      	cmp	r3, #64	@ 0x40
 8003d70:	d146      	bne.n	8003e00 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	3308      	adds	r3, #8
 8003d78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d80:	e853 3f00 	ldrex	r3, [r3]
 8003d84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3308      	adds	r3, #8
 8003d9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003da2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003daa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003dae:	e841 2300 	strex	r3, r2, [r1]
 8003db2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003db6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1d9      	bne.n	8003d72 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d017      	beq.n	8003df8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dce:	4a15      	ldr	r2, [pc, #84]	@ (8003e24 <HAL_UART_IRQHandler+0x2c0>)
 8003dd0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fd fc91 	bl	8001700 <HAL_DMA_Abort_IT>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d019      	beq.n	8003e18 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8003df2:	4610      	mov	r0, r2
 8003df4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df6:	e00f      	b.n	8003e18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f9f5 	bl	80041e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dfe:	e00b      	b.n	8003e18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f9f1 	bl	80041e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e06:	e007      	b.n	8003e18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f9ed 	bl	80041e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003e16:	e1dc      	b.n	80041d2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e18:	bf00      	nop
    return;
 8003e1a:	e1da      	b.n	80041d2 <HAL_UART_IRQHandler+0x66e>
 8003e1c:	10000001 	.word	0x10000001
 8003e20:	04000120 	.word	0x04000120
 8003e24:	08004c4b 	.word	0x08004c4b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	f040 8170 	bne.w	8004112 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e36:	f003 0310 	and.w	r3, r3, #16
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 8169 	beq.w	8004112 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e44:	f003 0310 	and.w	r3, r3, #16
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8162 	beq.w	8004112 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2210      	movs	r2, #16
 8003e54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e60:	2b40      	cmp	r3, #64	@ 0x40
 8003e62:	f040 80d8 	bne.w	8004016 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 80af 	beq.w	8003fdc <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003e84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	f080 80a7 	bcs.w	8003fdc <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e94:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0320 	and.w	r3, r3, #32
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f040 8087 	bne.w	8003fba <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003eb8:	e853 3f00 	ldrex	r3, [r3]
 8003ebc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003ec0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ec4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ec8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003ed6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003eda:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ede:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ee2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ee6:	e841 2300 	strex	r3, r2, [r1]
 8003eea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003eee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1da      	bne.n	8003eac <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3308      	adds	r3, #8
 8003efc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f08:	f023 0301 	bic.w	r3, r3, #1
 8003f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3308      	adds	r3, #8
 8003f16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f1a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f26:	e841 2300 	strex	r3, r2, [r1]
 8003f2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1e1      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3308      	adds	r3, #8
 8003f38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f3c:	e853 3f00 	ldrex	r3, [r3]
 8003f40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3308      	adds	r3, #8
 8003f52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f56:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f58:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f5e:	e841 2300 	strex	r3, r2, [r1]
 8003f62:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1e3      	bne.n	8003f32 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f80:	e853 3f00 	ldrex	r3, [r3]
 8003f84:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f88:	f023 0310 	bic.w	r3, r3, #16
 8003f8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	461a      	mov	r2, r3
 8003f96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f9c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fa0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003fa2:	e841 2300 	strex	r3, r2, [r1]
 8003fa6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003fa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1e4      	bne.n	8003f78 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fd fb47 	bl	8001648 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f911 	bl	80041fc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003fda:	e0fc      	b.n	80041d6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003fe2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	f040 80f5 	bne.w	80041d6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0320 	and.w	r3, r3, #32
 8003ffa:	2b20      	cmp	r3, #32
 8003ffc:	f040 80eb 	bne.w	80041d6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800400c:	4619      	mov	r1, r3
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f8f4 	bl	80041fc <HAL_UARTEx_RxEventCallback>
      return;
 8004014:	e0df      	b.n	80041d6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004022:	b29b      	uxth	r3, r3
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004030:	b29b      	uxth	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 80d1 	beq.w	80041da <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004038:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 80cc 	beq.w	80041da <HAL_UART_IRQHandler+0x676>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800404a:	e853 3f00 	ldrex	r3, [r3]
 800404e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004052:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004056:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004064:	647b      	str	r3, [r7, #68]	@ 0x44
 8004066:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004068:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800406a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800406c:	e841 2300 	strex	r3, r2, [r1]
 8004070:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1e4      	bne.n	8004042 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3308      	adds	r3, #8
 800407e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004082:	e853 3f00 	ldrex	r3, [r3]
 8004086:	623b      	str	r3, [r7, #32]
   return(result);
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800408e:	f023 0301 	bic.w	r3, r3, #1
 8004092:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3308      	adds	r3, #8
 800409c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80040a0:	633a      	str	r2, [r7, #48]	@ 0x30
 80040a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040a8:	e841 2300 	strex	r3, r2, [r1]
 80040ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1e1      	bne.n	8004078 <HAL_UART_IRQHandler+0x514>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	e853 3f00 	ldrex	r3, [r3]
 80040d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f023 0310 	bic.w	r3, r3, #16
 80040dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	461a      	mov	r2, r3
 80040e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80040ea:	61fb      	str	r3, [r7, #28]
 80040ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ee:	69b9      	ldr	r1, [r7, #24]
 80040f0:	69fa      	ldr	r2, [r7, #28]
 80040f2:	e841 2300 	strex	r3, r2, [r1]
 80040f6:	617b      	str	r3, [r7, #20]
   return(result);
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1e4      	bne.n	80040c8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2202      	movs	r2, #2
 8004102:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004104:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004108:	4619      	mov	r1, r3
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f876 	bl	80041fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004110:	e063      	b.n	80041da <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004116:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00e      	beq.n	800413c <HAL_UART_IRQHandler+0x5d8>
 800411e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004122:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d008      	beq.n	800413c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004132:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 fdc9 	bl	8004ccc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800413a:	e051      	b.n	80041e0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800413c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004144:	2b00      	cmp	r3, #0
 8004146:	d014      	beq.n	8004172 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800414c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004150:	2b00      	cmp	r3, #0
 8004152:	d105      	bne.n	8004160 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004154:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004158:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <HAL_UART_IRQHandler+0x60e>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004164:	2b00      	cmp	r3, #0
 8004166:	d03a      	beq.n	80041de <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	4798      	blx	r3
    }
    return;
 8004170:	e035      	b.n	80041de <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	d009      	beq.n	8004192 <HAL_UART_IRQHandler+0x62e>
 800417e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 fd73 	bl	8004c76 <UART_EndTransmit_IT>
    return;
 8004190:	e026      	b.n	80041e0 <HAL_UART_IRQHandler+0x67c>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004196:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d009      	beq.n	80041b2 <HAL_UART_IRQHandler+0x64e>
 800419e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041a2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fda2 	bl	8004cf4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041b0:	e016      	b.n	80041e0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80041b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d010      	beq.n	80041e0 <HAL_UART_IRQHandler+0x67c>
 80041be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	da0c      	bge.n	80041e0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 fd8a 	bl	8004ce0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041cc:	e008      	b.n	80041e0 <HAL_UART_IRQHandler+0x67c>
      return;
 80041ce:	bf00      	nop
 80041d0:	e006      	b.n	80041e0 <HAL_UART_IRQHandler+0x67c>
    return;
 80041d2:	bf00      	nop
 80041d4:	e004      	b.n	80041e0 <HAL_UART_IRQHandler+0x67c>
      return;
 80041d6:	bf00      	nop
 80041d8:	e002      	b.n	80041e0 <HAL_UART_IRQHandler+0x67c>
      return;
 80041da:	bf00      	nop
 80041dc:	e000      	b.n	80041e0 <HAL_UART_IRQHandler+0x67c>
    return;
 80041de:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80041e0:	37e8      	adds	r7, #232	@ 0xe8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop

080041e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	460b      	mov	r3, r1
 8004206:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004218:	b08c      	sub	sp, #48	@ 0x30
 800421a:	af00      	add	r7, sp, #0
 800421c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	431a      	orrs	r2, r3
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	431a      	orrs	r2, r3
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	4313      	orrs	r3, r2
 800423a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	4baa      	ldr	r3, [pc, #680]	@ (80044ec <UART_SetConfig+0x2d8>)
 8004244:	4013      	ands	r3, r2
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	6812      	ldr	r2, [r2, #0]
 800424a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800424c:	430b      	orrs	r3, r1
 800424e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a9f      	ldr	r2, [pc, #636]	@ (80044f0 <UART_SetConfig+0x2dc>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d004      	beq.n	8004280 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800427c:	4313      	orrs	r3, r2
 800427e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800428a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	6812      	ldr	r2, [r2, #0]
 8004292:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004294:	430b      	orrs	r3, r1
 8004296:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429e:	f023 010f 	bic.w	r1, r3, #15
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a90      	ldr	r2, [pc, #576]	@ (80044f4 <UART_SetConfig+0x2e0>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d125      	bne.n	8004304 <UART_SetConfig+0xf0>
 80042b8:	4b8f      	ldr	r3, [pc, #572]	@ (80044f8 <UART_SetConfig+0x2e4>)
 80042ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d81a      	bhi.n	80042fc <UART_SetConfig+0xe8>
 80042c6:	a201      	add	r2, pc, #4	@ (adr r2, 80042cc <UART_SetConfig+0xb8>)
 80042c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042cc:	080042dd 	.word	0x080042dd
 80042d0:	080042ed 	.word	0x080042ed
 80042d4:	080042e5 	.word	0x080042e5
 80042d8:	080042f5 	.word	0x080042f5
 80042dc:	2301      	movs	r3, #1
 80042de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042e2:	e116      	b.n	8004512 <UART_SetConfig+0x2fe>
 80042e4:	2302      	movs	r3, #2
 80042e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042ea:	e112      	b.n	8004512 <UART_SetConfig+0x2fe>
 80042ec:	2304      	movs	r3, #4
 80042ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042f2:	e10e      	b.n	8004512 <UART_SetConfig+0x2fe>
 80042f4:	2308      	movs	r3, #8
 80042f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042fa:	e10a      	b.n	8004512 <UART_SetConfig+0x2fe>
 80042fc:	2310      	movs	r3, #16
 80042fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004302:	e106      	b.n	8004512 <UART_SetConfig+0x2fe>
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a7c      	ldr	r2, [pc, #496]	@ (80044fc <UART_SetConfig+0x2e8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d138      	bne.n	8004380 <UART_SetConfig+0x16c>
 800430e:	4b7a      	ldr	r3, [pc, #488]	@ (80044f8 <UART_SetConfig+0x2e4>)
 8004310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004314:	f003 030c 	and.w	r3, r3, #12
 8004318:	2b0c      	cmp	r3, #12
 800431a:	d82d      	bhi.n	8004378 <UART_SetConfig+0x164>
 800431c:	a201      	add	r2, pc, #4	@ (adr r2, 8004324 <UART_SetConfig+0x110>)
 800431e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004322:	bf00      	nop
 8004324:	08004359 	.word	0x08004359
 8004328:	08004379 	.word	0x08004379
 800432c:	08004379 	.word	0x08004379
 8004330:	08004379 	.word	0x08004379
 8004334:	08004369 	.word	0x08004369
 8004338:	08004379 	.word	0x08004379
 800433c:	08004379 	.word	0x08004379
 8004340:	08004379 	.word	0x08004379
 8004344:	08004361 	.word	0x08004361
 8004348:	08004379 	.word	0x08004379
 800434c:	08004379 	.word	0x08004379
 8004350:	08004379 	.word	0x08004379
 8004354:	08004371 	.word	0x08004371
 8004358:	2300      	movs	r3, #0
 800435a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800435e:	e0d8      	b.n	8004512 <UART_SetConfig+0x2fe>
 8004360:	2302      	movs	r3, #2
 8004362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004366:	e0d4      	b.n	8004512 <UART_SetConfig+0x2fe>
 8004368:	2304      	movs	r3, #4
 800436a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800436e:	e0d0      	b.n	8004512 <UART_SetConfig+0x2fe>
 8004370:	2308      	movs	r3, #8
 8004372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004376:	e0cc      	b.n	8004512 <UART_SetConfig+0x2fe>
 8004378:	2310      	movs	r3, #16
 800437a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800437e:	e0c8      	b.n	8004512 <UART_SetConfig+0x2fe>
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a5e      	ldr	r2, [pc, #376]	@ (8004500 <UART_SetConfig+0x2ec>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d125      	bne.n	80043d6 <UART_SetConfig+0x1c2>
 800438a:	4b5b      	ldr	r3, [pc, #364]	@ (80044f8 <UART_SetConfig+0x2e4>)
 800438c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004390:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004394:	2b30      	cmp	r3, #48	@ 0x30
 8004396:	d016      	beq.n	80043c6 <UART_SetConfig+0x1b2>
 8004398:	2b30      	cmp	r3, #48	@ 0x30
 800439a:	d818      	bhi.n	80043ce <UART_SetConfig+0x1ba>
 800439c:	2b20      	cmp	r3, #32
 800439e:	d00a      	beq.n	80043b6 <UART_SetConfig+0x1a2>
 80043a0:	2b20      	cmp	r3, #32
 80043a2:	d814      	bhi.n	80043ce <UART_SetConfig+0x1ba>
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <UART_SetConfig+0x19a>
 80043a8:	2b10      	cmp	r3, #16
 80043aa:	d008      	beq.n	80043be <UART_SetConfig+0x1aa>
 80043ac:	e00f      	b.n	80043ce <UART_SetConfig+0x1ba>
 80043ae:	2300      	movs	r3, #0
 80043b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043b4:	e0ad      	b.n	8004512 <UART_SetConfig+0x2fe>
 80043b6:	2302      	movs	r3, #2
 80043b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043bc:	e0a9      	b.n	8004512 <UART_SetConfig+0x2fe>
 80043be:	2304      	movs	r3, #4
 80043c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043c4:	e0a5      	b.n	8004512 <UART_SetConfig+0x2fe>
 80043c6:	2308      	movs	r3, #8
 80043c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043cc:	e0a1      	b.n	8004512 <UART_SetConfig+0x2fe>
 80043ce:	2310      	movs	r3, #16
 80043d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043d4:	e09d      	b.n	8004512 <UART_SetConfig+0x2fe>
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a4a      	ldr	r2, [pc, #296]	@ (8004504 <UART_SetConfig+0x2f0>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d125      	bne.n	800442c <UART_SetConfig+0x218>
 80043e0:	4b45      	ldr	r3, [pc, #276]	@ (80044f8 <UART_SetConfig+0x2e4>)
 80043e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80043ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80043ec:	d016      	beq.n	800441c <UART_SetConfig+0x208>
 80043ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80043f0:	d818      	bhi.n	8004424 <UART_SetConfig+0x210>
 80043f2:	2b80      	cmp	r3, #128	@ 0x80
 80043f4:	d00a      	beq.n	800440c <UART_SetConfig+0x1f8>
 80043f6:	2b80      	cmp	r3, #128	@ 0x80
 80043f8:	d814      	bhi.n	8004424 <UART_SetConfig+0x210>
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <UART_SetConfig+0x1f0>
 80043fe:	2b40      	cmp	r3, #64	@ 0x40
 8004400:	d008      	beq.n	8004414 <UART_SetConfig+0x200>
 8004402:	e00f      	b.n	8004424 <UART_SetConfig+0x210>
 8004404:	2300      	movs	r3, #0
 8004406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800440a:	e082      	b.n	8004512 <UART_SetConfig+0x2fe>
 800440c:	2302      	movs	r3, #2
 800440e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004412:	e07e      	b.n	8004512 <UART_SetConfig+0x2fe>
 8004414:	2304      	movs	r3, #4
 8004416:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800441a:	e07a      	b.n	8004512 <UART_SetConfig+0x2fe>
 800441c:	2308      	movs	r3, #8
 800441e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004422:	e076      	b.n	8004512 <UART_SetConfig+0x2fe>
 8004424:	2310      	movs	r3, #16
 8004426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800442a:	e072      	b.n	8004512 <UART_SetConfig+0x2fe>
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a35      	ldr	r2, [pc, #212]	@ (8004508 <UART_SetConfig+0x2f4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d12a      	bne.n	800448c <UART_SetConfig+0x278>
 8004436:	4b30      	ldr	r3, [pc, #192]	@ (80044f8 <UART_SetConfig+0x2e4>)
 8004438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800443c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004440:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004444:	d01a      	beq.n	800447c <UART_SetConfig+0x268>
 8004446:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800444a:	d81b      	bhi.n	8004484 <UART_SetConfig+0x270>
 800444c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004450:	d00c      	beq.n	800446c <UART_SetConfig+0x258>
 8004452:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004456:	d815      	bhi.n	8004484 <UART_SetConfig+0x270>
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <UART_SetConfig+0x250>
 800445c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004460:	d008      	beq.n	8004474 <UART_SetConfig+0x260>
 8004462:	e00f      	b.n	8004484 <UART_SetConfig+0x270>
 8004464:	2300      	movs	r3, #0
 8004466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800446a:	e052      	b.n	8004512 <UART_SetConfig+0x2fe>
 800446c:	2302      	movs	r3, #2
 800446e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004472:	e04e      	b.n	8004512 <UART_SetConfig+0x2fe>
 8004474:	2304      	movs	r3, #4
 8004476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800447a:	e04a      	b.n	8004512 <UART_SetConfig+0x2fe>
 800447c:	2308      	movs	r3, #8
 800447e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004482:	e046      	b.n	8004512 <UART_SetConfig+0x2fe>
 8004484:	2310      	movs	r3, #16
 8004486:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800448a:	e042      	b.n	8004512 <UART_SetConfig+0x2fe>
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a17      	ldr	r2, [pc, #92]	@ (80044f0 <UART_SetConfig+0x2dc>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d13a      	bne.n	800450c <UART_SetConfig+0x2f8>
 8004496:	4b18      	ldr	r3, [pc, #96]	@ (80044f8 <UART_SetConfig+0x2e4>)
 8004498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800449c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80044a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044a4:	d01a      	beq.n	80044dc <UART_SetConfig+0x2c8>
 80044a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044aa:	d81b      	bhi.n	80044e4 <UART_SetConfig+0x2d0>
 80044ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044b0:	d00c      	beq.n	80044cc <UART_SetConfig+0x2b8>
 80044b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044b6:	d815      	bhi.n	80044e4 <UART_SetConfig+0x2d0>
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <UART_SetConfig+0x2b0>
 80044bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044c0:	d008      	beq.n	80044d4 <UART_SetConfig+0x2c0>
 80044c2:	e00f      	b.n	80044e4 <UART_SetConfig+0x2d0>
 80044c4:	2300      	movs	r3, #0
 80044c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044ca:	e022      	b.n	8004512 <UART_SetConfig+0x2fe>
 80044cc:	2302      	movs	r3, #2
 80044ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044d2:	e01e      	b.n	8004512 <UART_SetConfig+0x2fe>
 80044d4:	2304      	movs	r3, #4
 80044d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044da:	e01a      	b.n	8004512 <UART_SetConfig+0x2fe>
 80044dc:	2308      	movs	r3, #8
 80044de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044e2:	e016      	b.n	8004512 <UART_SetConfig+0x2fe>
 80044e4:	2310      	movs	r3, #16
 80044e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044ea:	e012      	b.n	8004512 <UART_SetConfig+0x2fe>
 80044ec:	cfff69f3 	.word	0xcfff69f3
 80044f0:	40008000 	.word	0x40008000
 80044f4:	40013800 	.word	0x40013800
 80044f8:	40021000 	.word	0x40021000
 80044fc:	40004400 	.word	0x40004400
 8004500:	40004800 	.word	0x40004800
 8004504:	40004c00 	.word	0x40004c00
 8004508:	40005000 	.word	0x40005000
 800450c:	2310      	movs	r3, #16
 800450e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4aae      	ldr	r2, [pc, #696]	@ (80047d0 <UART_SetConfig+0x5bc>)
 8004518:	4293      	cmp	r3, r2
 800451a:	f040 8097 	bne.w	800464c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800451e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004522:	2b08      	cmp	r3, #8
 8004524:	d823      	bhi.n	800456e <UART_SetConfig+0x35a>
 8004526:	a201      	add	r2, pc, #4	@ (adr r2, 800452c <UART_SetConfig+0x318>)
 8004528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452c:	08004551 	.word	0x08004551
 8004530:	0800456f 	.word	0x0800456f
 8004534:	08004559 	.word	0x08004559
 8004538:	0800456f 	.word	0x0800456f
 800453c:	0800455f 	.word	0x0800455f
 8004540:	0800456f 	.word	0x0800456f
 8004544:	0800456f 	.word	0x0800456f
 8004548:	0800456f 	.word	0x0800456f
 800454c:	08004567 	.word	0x08004567
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004550:	f7fe fc26 	bl	8002da0 <HAL_RCC_GetPCLK1Freq>
 8004554:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004556:	e010      	b.n	800457a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004558:	4b9e      	ldr	r3, [pc, #632]	@ (80047d4 <UART_SetConfig+0x5c0>)
 800455a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800455c:	e00d      	b.n	800457a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800455e:	f7fe fb87 	bl	8002c70 <HAL_RCC_GetSysClockFreq>
 8004562:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004564:	e009      	b.n	800457a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004566:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800456a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800456c:	e005      	b.n	800457a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004578:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800457a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 8130 	beq.w	80047e2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004586:	4a94      	ldr	r2, [pc, #592]	@ (80047d8 <UART_SetConfig+0x5c4>)
 8004588:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800458c:	461a      	mov	r2, r3
 800458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004590:	fbb3 f3f2 	udiv	r3, r3, r2
 8004594:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	4413      	add	r3, r2
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d305      	bcc.n	80045b2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d903      	bls.n	80045ba <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80045b8:	e113      	b.n	80047e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045bc:	2200      	movs	r2, #0
 80045be:	60bb      	str	r3, [r7, #8]
 80045c0:	60fa      	str	r2, [r7, #12]
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c6:	4a84      	ldr	r2, [pc, #528]	@ (80047d8 <UART_SetConfig+0x5c4>)
 80045c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2200      	movs	r2, #0
 80045d0:	603b      	str	r3, [r7, #0]
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045dc:	f7fb fe68 	bl	80002b0 <__aeabi_uldivmod>
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	4610      	mov	r0, r2
 80045e6:	4619      	mov	r1, r3
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	020b      	lsls	r3, r1, #8
 80045f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80045f6:	0202      	lsls	r2, r0, #8
 80045f8:	6979      	ldr	r1, [r7, #20]
 80045fa:	6849      	ldr	r1, [r1, #4]
 80045fc:	0849      	lsrs	r1, r1, #1
 80045fe:	2000      	movs	r0, #0
 8004600:	460c      	mov	r4, r1
 8004602:	4605      	mov	r5, r0
 8004604:	eb12 0804 	adds.w	r8, r2, r4
 8004608:	eb43 0905 	adc.w	r9, r3, r5
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	469a      	mov	sl, r3
 8004614:	4693      	mov	fp, r2
 8004616:	4652      	mov	r2, sl
 8004618:	465b      	mov	r3, fp
 800461a:	4640      	mov	r0, r8
 800461c:	4649      	mov	r1, r9
 800461e:	f7fb fe47 	bl	80002b0 <__aeabi_uldivmod>
 8004622:	4602      	mov	r2, r0
 8004624:	460b      	mov	r3, r1
 8004626:	4613      	mov	r3, r2
 8004628:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004630:	d308      	bcc.n	8004644 <UART_SetConfig+0x430>
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004638:	d204      	bcs.n	8004644 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6a3a      	ldr	r2, [r7, #32]
 8004640:	60da      	str	r2, [r3, #12]
 8004642:	e0ce      	b.n	80047e2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800464a:	e0ca      	b.n	80047e2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004654:	d166      	bne.n	8004724 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004656:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800465a:	2b08      	cmp	r3, #8
 800465c:	d827      	bhi.n	80046ae <UART_SetConfig+0x49a>
 800465e:	a201      	add	r2, pc, #4	@ (adr r2, 8004664 <UART_SetConfig+0x450>)
 8004660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004664:	08004689 	.word	0x08004689
 8004668:	08004691 	.word	0x08004691
 800466c:	08004699 	.word	0x08004699
 8004670:	080046af 	.word	0x080046af
 8004674:	0800469f 	.word	0x0800469f
 8004678:	080046af 	.word	0x080046af
 800467c:	080046af 	.word	0x080046af
 8004680:	080046af 	.word	0x080046af
 8004684:	080046a7 	.word	0x080046a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004688:	f7fe fb8a 	bl	8002da0 <HAL_RCC_GetPCLK1Freq>
 800468c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800468e:	e014      	b.n	80046ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004690:	f7fe fb9c 	bl	8002dcc <HAL_RCC_GetPCLK2Freq>
 8004694:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004696:	e010      	b.n	80046ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004698:	4b4e      	ldr	r3, [pc, #312]	@ (80047d4 <UART_SetConfig+0x5c0>)
 800469a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800469c:	e00d      	b.n	80046ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800469e:	f7fe fae7 	bl	8002c70 <HAL_RCC_GetSysClockFreq>
 80046a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046a4:	e009      	b.n	80046ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80046ac:	e005      	b.n	80046ba <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80046b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 8090 	beq.w	80047e2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c6:	4a44      	ldr	r2, [pc, #272]	@ (80047d8 <UART_SetConfig+0x5c4>)
 80046c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046cc:	461a      	mov	r2, r3
 80046ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80046d4:	005a      	lsls	r2, r3, #1
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	085b      	lsrs	r3, r3, #1
 80046dc:	441a      	add	r2, r3
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	2b0f      	cmp	r3, #15
 80046ec:	d916      	bls.n	800471c <UART_SetConfig+0x508>
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046f4:	d212      	bcs.n	800471c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	f023 030f 	bic.w	r3, r3, #15
 80046fe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004700:	6a3b      	ldr	r3, [r7, #32]
 8004702:	085b      	lsrs	r3, r3, #1
 8004704:	b29b      	uxth	r3, r3
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	b29a      	uxth	r2, r3
 800470c:	8bfb      	ldrh	r3, [r7, #30]
 800470e:	4313      	orrs	r3, r2
 8004710:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	8bfa      	ldrh	r2, [r7, #30]
 8004718:	60da      	str	r2, [r3, #12]
 800471a:	e062      	b.n	80047e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004722:	e05e      	b.n	80047e2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004724:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004728:	2b08      	cmp	r3, #8
 800472a:	d828      	bhi.n	800477e <UART_SetConfig+0x56a>
 800472c:	a201      	add	r2, pc, #4	@ (adr r2, 8004734 <UART_SetConfig+0x520>)
 800472e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004732:	bf00      	nop
 8004734:	08004759 	.word	0x08004759
 8004738:	08004761 	.word	0x08004761
 800473c:	08004769 	.word	0x08004769
 8004740:	0800477f 	.word	0x0800477f
 8004744:	0800476f 	.word	0x0800476f
 8004748:	0800477f 	.word	0x0800477f
 800474c:	0800477f 	.word	0x0800477f
 8004750:	0800477f 	.word	0x0800477f
 8004754:	08004777 	.word	0x08004777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004758:	f7fe fb22 	bl	8002da0 <HAL_RCC_GetPCLK1Freq>
 800475c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800475e:	e014      	b.n	800478a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004760:	f7fe fb34 	bl	8002dcc <HAL_RCC_GetPCLK2Freq>
 8004764:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004766:	e010      	b.n	800478a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004768:	4b1a      	ldr	r3, [pc, #104]	@ (80047d4 <UART_SetConfig+0x5c0>)
 800476a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800476c:	e00d      	b.n	800478a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800476e:	f7fe fa7f 	bl	8002c70 <HAL_RCC_GetSysClockFreq>
 8004772:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004774:	e009      	b.n	800478a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004776:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800477a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800477c:	e005      	b.n	800478a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004788:	bf00      	nop
    }

    if (pclk != 0U)
 800478a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478c:	2b00      	cmp	r3, #0
 800478e:	d028      	beq.n	80047e2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004794:	4a10      	ldr	r2, [pc, #64]	@ (80047d8 <UART_SetConfig+0x5c4>)
 8004796:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800479a:	461a      	mov	r2, r3
 800479c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479e:	fbb3 f2f2 	udiv	r2, r3, r2
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	085b      	lsrs	r3, r3, #1
 80047a8:	441a      	add	r2, r3
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	2b0f      	cmp	r3, #15
 80047b8:	d910      	bls.n	80047dc <UART_SetConfig+0x5c8>
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047c0:	d20c      	bcs.n	80047dc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	60da      	str	r2, [r3, #12]
 80047cc:	e009      	b.n	80047e2 <UART_SetConfig+0x5ce>
 80047ce:	bf00      	nop
 80047d0:	40008000 	.word	0x40008000
 80047d4:	00f42400 	.word	0x00f42400
 80047d8:	08005e7c 	.word	0x08005e7c
      }
      else
      {
        ret = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2200      	movs	r2, #0
 80047f6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	2200      	movs	r2, #0
 80047fc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80047fe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004802:	4618      	mov	r0, r3
 8004804:	3730      	adds	r7, #48	@ 0x30
 8004806:	46bd      	mov	sp, r7
 8004808:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800480c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004818:	f003 0308 	and.w	r3, r3, #8
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00a      	beq.n	8004836 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00a      	beq.n	8004858 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	430a      	orrs	r2, r1
 8004856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00a      	beq.n	800487a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487e:	f003 0304 	and.w	r3, r3, #4
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a0:	f003 0310 	and.w	r3, r3, #16
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d01a      	beq.n	8004922 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004906:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800490a:	d10a      	bne.n	8004922 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	605a      	str	r2, [r3, #4]
  }
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b098      	sub	sp, #96	@ 0x60
 8004954:	af02      	add	r7, sp, #8
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004960:	f7fc fc88 	bl	8001274 <HAL_GetTick>
 8004964:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0308 	and.w	r3, r3, #8
 8004970:	2b08      	cmp	r3, #8
 8004972:	d12f      	bne.n	80049d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004974:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800497c:	2200      	movs	r2, #0
 800497e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f88e 	bl	8004aa4 <UART_WaitOnFlagUntilTimeout>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d022      	beq.n	80049d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004996:	e853 3f00 	ldrex	r3, [r3]
 800499a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800499c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800499e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	461a      	mov	r2, r3
 80049aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80049ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049b4:	e841 2300 	strex	r3, r2, [r1]
 80049b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e6      	bne.n	800498e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e063      	b.n	8004a9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0304 	and.w	r3, r3, #4
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d149      	bne.n	8004a76 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049ea:	2200      	movs	r2, #0
 80049ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f857 	bl	8004aa4 <UART_WaitOnFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d03c      	beq.n	8004a76 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a04:	e853 3f00 	ldrex	r3, [r3]
 8004a08:	623b      	str	r3, [r7, #32]
   return(result);
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	461a      	mov	r2, r3
 8004a18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a22:	e841 2300 	strex	r3, r2, [r1]
 8004a26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1e6      	bne.n	80049fc <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	3308      	adds	r3, #8
 8004a34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	e853 3f00 	ldrex	r3, [r3]
 8004a3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f023 0301 	bic.w	r3, r3, #1
 8004a44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3308      	adds	r3, #8
 8004a4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a4e:	61fa      	str	r2, [r7, #28]
 8004a50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a52:	69b9      	ldr	r1, [r7, #24]
 8004a54:	69fa      	ldr	r2, [r7, #28]
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	617b      	str	r3, [r7, #20]
   return(result);
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e5      	bne.n	8004a2e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2220      	movs	r2, #32
 8004a66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e012      	b.n	8004a9c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2220      	movs	r2, #32
 8004a82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3758      	adds	r7, #88	@ 0x58
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	603b      	str	r3, [r7, #0]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ab4:	e04f      	b.n	8004b56 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abc:	d04b      	beq.n	8004b56 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004abe:	f7fc fbd9 	bl	8001274 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d302      	bcc.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e04e      	b.n	8004b76 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0304 	and.w	r3, r3, #4
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d037      	beq.n	8004b56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b80      	cmp	r3, #128	@ 0x80
 8004aea:	d034      	beq.n	8004b56 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2b40      	cmp	r3, #64	@ 0x40
 8004af0:	d031      	beq.n	8004b56 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	f003 0308 	and.w	r3, r3, #8
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d110      	bne.n	8004b22 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2208      	movs	r2, #8
 8004b06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f838 	bl	8004b7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2208      	movs	r2, #8
 8004b12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e029      	b.n	8004b76 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b30:	d111      	bne.n	8004b56 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 f81e 	bl	8004b7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2220      	movs	r2, #32
 8004b46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e00f      	b.n	8004b76 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69da      	ldr	r2, [r3, #28]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	bf0c      	ite	eq
 8004b66:	2301      	moveq	r3, #1
 8004b68:	2300      	movne	r3, #0
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	79fb      	ldrb	r3, [r7, #7]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d0a0      	beq.n	8004ab6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b095      	sub	sp, #84	@ 0x54
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b8e:	e853 3f00 	ldrex	r3, [r3]
 8004b92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ba4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ba6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004baa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004bac:	e841 2300 	strex	r3, r2, [r1]
 8004bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1e6      	bne.n	8004b86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3308      	adds	r3, #8
 8004bbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	e853 3f00 	ldrex	r3, [r3]
 8004bc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bce:	f023 0301 	bic.w	r3, r3, #1
 8004bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3308      	adds	r3, #8
 8004bda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004be2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004be4:	e841 2300 	strex	r3, r2, [r1]
 8004be8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1e3      	bne.n	8004bb8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d118      	bne.n	8004c2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	e853 3f00 	ldrex	r3, [r3]
 8004c04:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f023 0310 	bic.w	r3, r3, #16
 8004c0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	461a      	mov	r2, r3
 8004c14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c16:	61bb      	str	r3, [r7, #24]
 8004c18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1a:	6979      	ldr	r1, [r7, #20]
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	e841 2300 	strex	r3, r2, [r1]
 8004c22:	613b      	str	r3, [r7, #16]
   return(result);
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1e6      	bne.n	8004bf8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004c3e:	bf00      	nop
 8004c40:	3754      	adds	r7, #84	@ 0x54
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b084      	sub	sp, #16
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f7ff fabd 	bl	80041e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c6e:	bf00      	nop
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b088      	sub	sp, #32
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	e853 3f00 	ldrex	r3, [r3]
 8004c8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c92:	61fb      	str	r3, [r7, #28]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	61bb      	str	r3, [r7, #24]
 8004c9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca0:	6979      	ldr	r1, [r7, #20]
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	e841 2300 	strex	r3, r2, [r1]
 8004ca8:	613b      	str	r3, [r7, #16]
   return(result);
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e6      	bne.n	8004c7e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7fb fc6e 	bl	80005a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cc4:	bf00      	nop
 8004cc6:	3720      	adds	r7, #32
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d101      	bne.n	8004d1e <HAL_UARTEx_DisableFifoMode+0x16>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e027      	b.n	8004d6e <HAL_UARTEx_DisableFifoMode+0x66>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2224      	movs	r2, #36	@ 0x24
 8004d2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0201 	bic.w	r2, r2, #1
 8004d44:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004d4c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b084      	sub	sp, #16
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d101      	bne.n	8004d92 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d8e:	2302      	movs	r3, #2
 8004d90:	e02d      	b.n	8004dee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2224      	movs	r2, #36	@ 0x24
 8004d9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0201 	bic.w	r2, r2, #1
 8004db8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f850 	bl	8004e74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b084      	sub	sp, #16
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
 8004dfe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d101      	bne.n	8004e0e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e02d      	b.n	8004e6a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2224      	movs	r2, #36	@ 0x24
 8004e1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 0201 	bic.w	r2, r2, #1
 8004e34:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f812 	bl	8004e74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
	...

08004e74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d108      	bne.n	8004e96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e94:	e031      	b.n	8004efa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e96:	2308      	movs	r3, #8
 8004e98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e9a:	2308      	movs	r3, #8
 8004e9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	0e5b      	lsrs	r3, r3, #25
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	0f5b      	lsrs	r3, r3, #29
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ebe:	7bbb      	ldrb	r3, [r7, #14]
 8004ec0:	7b3a      	ldrb	r2, [r7, #12]
 8004ec2:	4911      	ldr	r1, [pc, #68]	@ (8004f08 <UARTEx_SetNbDataToProcess+0x94>)
 8004ec4:	5c8a      	ldrb	r2, [r1, r2]
 8004ec6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004eca:	7b3a      	ldrb	r2, [r7, #12]
 8004ecc:	490f      	ldr	r1, [pc, #60]	@ (8004f0c <UARTEx_SetNbDataToProcess+0x98>)
 8004ece:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ed0:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
 8004ede:	7b7a      	ldrb	r2, [r7, #13]
 8004ee0:	4909      	ldr	r1, [pc, #36]	@ (8004f08 <UARTEx_SetNbDataToProcess+0x94>)
 8004ee2:	5c8a      	ldrb	r2, [r1, r2]
 8004ee4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ee8:	7b7a      	ldrb	r2, [r7, #13]
 8004eea:	4908      	ldr	r1, [pc, #32]	@ (8004f0c <UARTEx_SetNbDataToProcess+0x98>)
 8004eec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004eee:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004efa:	bf00      	nop
 8004efc:	3714      	adds	r7, #20
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	08005e94 	.word	0x08005e94
 8004f0c:	08005e9c 	.word	0x08005e9c

08004f10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f10:	b084      	sub	sp, #16
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b084      	sub	sp, #16
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
 8004f1a:	f107 001c 	add.w	r0, r7, #28
 8004f1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 fa68 	bl	8005404 <USB_CoreReset>
 8004f34:	4603      	mov	r3, r0
 8004f36:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004f38:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d106      	bne.n	8004f4e <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f44:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f4c:	e005      	b.n	8004f5a <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f52:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f66:	b004      	add	sp, #16
 8004f68:	4770      	bx	lr

08004f6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b083      	sub	sp, #12
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f023 0201 	bic.w	r2, r3, #1
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	460b      	mov	r3, r1
 8004f96:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fa8:	78fb      	ldrb	r3, [r7, #3]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d115      	bne.n	8004fda <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004fba:	200a      	movs	r0, #10
 8004fbc:	f7fc f966 	bl	800128c <HAL_Delay>
      ms += 10U;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	330a      	adds	r3, #10
 8004fc4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fa0e 	bl	80053e8 <USB_GetMode>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d01e      	beq.n	8005010 <USB_SetCurrentMode+0x84>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2bc7      	cmp	r3, #199	@ 0xc7
 8004fd6:	d9f0      	bls.n	8004fba <USB_SetCurrentMode+0x2e>
 8004fd8:	e01a      	b.n	8005010 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fda:	78fb      	ldrb	r3, [r7, #3]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d115      	bne.n	800500c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004fec:	200a      	movs	r0, #10
 8004fee:	f7fc f94d 	bl	800128c <HAL_Delay>
      ms += 10U;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	330a      	adds	r3, #10
 8004ff6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f9f5 	bl	80053e8 <USB_GetMode>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d005      	beq.n	8005010 <USB_SetCurrentMode+0x84>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2bc7      	cmp	r3, #199	@ 0xc7
 8005008:	d9f0      	bls.n	8004fec <USB_SetCurrentMode+0x60>
 800500a:	e001      	b.n	8005010 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e005      	b.n	800501c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2bc8      	cmp	r3, #200	@ 0xc8
 8005014:	d101      	bne.n	800501a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e000      	b.n	800501c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005024:	b084      	sub	sp, #16
 8005026:	b580      	push	{r7, lr}
 8005028:	b086      	sub	sp, #24
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800503e:	2300      	movs	r3, #0
 8005040:	613b      	str	r3, [r7, #16]
 8005042:	e009      	b.n	8005058 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	3340      	adds	r3, #64	@ 0x40
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	2200      	movs	r2, #0
 8005050:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	3301      	adds	r3, #1
 8005056:	613b      	str	r3, [r7, #16]
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	2b0e      	cmp	r3, #14
 800505c:	d9f2      	bls.n	8005044 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800505e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005062:	2b00      	cmp	r3, #0
 8005064:	d11c      	bne.n	80050a0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005074:	f043 0302 	orr.w	r3, r3, #2
 8005078:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800507e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	e005      	b.n	80050ac <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80050b2:	461a      	mov	r2, r3
 80050b4:	2300      	movs	r3, #0
 80050b6:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050b8:	2103      	movs	r1, #3
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f95a 	bl	8005374 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050c0:	2110      	movs	r1, #16
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f8f6 	bl	80052b4 <USB_FlushTxFifo>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f920 	bl	8005318 <USB_FlushRxFifo>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050e8:	461a      	mov	r2, r3
 80050ea:	2300      	movs	r3, #0
 80050ec:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050f4:	461a      	mov	r2, r3
 80050f6:	2300      	movs	r3, #0
 80050f8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005100:	461a      	mov	r2, r3
 8005102:	2300      	movs	r3, #0
 8005104:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005106:	2300      	movs	r3, #0
 8005108:	613b      	str	r3, [r7, #16]
 800510a:	e043      	b.n	8005194 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800511e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005122:	d118      	bne.n	8005156 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d10a      	bne.n	8005140 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005136:	461a      	mov	r2, r3
 8005138:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800513c:	6013      	str	r3, [r2, #0]
 800513e:	e013      	b.n	8005168 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4413      	add	r3, r2
 8005148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800514c:	461a      	mov	r2, r3
 800514e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005152:	6013      	str	r3, [r2, #0]
 8005154:	e008      	b.n	8005168 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005162:	461a      	mov	r2, r3
 8005164:	2300      	movs	r3, #0
 8005166:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005174:	461a      	mov	r2, r3
 8005176:	2300      	movs	r3, #0
 8005178:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	4413      	add	r3, r2
 8005182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005186:	461a      	mov	r2, r3
 8005188:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800518c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	3301      	adds	r3, #1
 8005192:	613b      	str	r3, [r7, #16]
 8005194:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005198:	461a      	mov	r2, r3
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	4293      	cmp	r3, r2
 800519e:	d3b5      	bcc.n	800510c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051a0:	2300      	movs	r3, #0
 80051a2:	613b      	str	r3, [r7, #16]
 80051a4:	e043      	b.n	800522e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051bc:	d118      	bne.n	80051f0 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10a      	bne.n	80051da <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051d0:	461a      	mov	r2, r3
 80051d2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80051d6:	6013      	str	r3, [r2, #0]
 80051d8:	e013      	b.n	8005202 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051e6:	461a      	mov	r2, r3
 80051e8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80051ec:	6013      	str	r3, [r2, #0]
 80051ee:	e008      	b.n	8005202 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051fc:	461a      	mov	r2, r3
 80051fe:	2300      	movs	r3, #0
 8005200:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800520e:	461a      	mov	r2, r3
 8005210:	2300      	movs	r3, #0
 8005212:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005220:	461a      	mov	r2, r3
 8005222:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005226:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	3301      	adds	r3, #1
 800522c:	613b      	str	r3, [r7, #16]
 800522e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005232:	461a      	mov	r2, r3
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	4293      	cmp	r3, r2
 8005238:	d3b5      	bcc.n	80051a6 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005248:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800524c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800525a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	f043 0210 	orr.w	r2, r3, #16
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	699a      	ldr	r2, [r3, #24]
 800526c:	4b10      	ldr	r3, [pc, #64]	@ (80052b0 <USB_DevInit+0x28c>)
 800526e:	4313      	orrs	r3, r2
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005274:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	f043 0208 	orr.w	r2, r3, #8
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005288:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800528c:	2b01      	cmp	r3, #1
 800528e:	d107      	bne.n	80052a0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005298:	f043 0304 	orr.w	r3, r3, #4
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052ac:	b004      	add	sp, #16
 80052ae:	4770      	bx	lr
 80052b0:	803c3800 	.word	0x803c3800

080052b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	3301      	adds	r3, #1
 80052c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052ce:	d901      	bls.n	80052d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e01b      	b.n	800530c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	daf2      	bge.n	80052c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	019b      	lsls	r3, r3, #6
 80052e4:	f043 0220 	orr.w	r2, r3, #32
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	3301      	adds	r3, #1
 80052f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052f8:	d901      	bls.n	80052fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e006      	b.n	800530c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	f003 0320 	and.w	r3, r3, #32
 8005306:	2b20      	cmp	r3, #32
 8005308:	d0f0      	beq.n	80052ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3714      	adds	r7, #20
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	3301      	adds	r3, #1
 8005328:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005330:	d901      	bls.n	8005336 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e018      	b.n	8005368 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	daf2      	bge.n	8005324 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800533e:	2300      	movs	r3, #0
 8005340:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2210      	movs	r2, #16
 8005346:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	3301      	adds	r3, #1
 800534c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005354:	d901      	bls.n	800535a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e006      	b.n	8005368 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f003 0310 	and.w	r3, r3, #16
 8005362:	2b10      	cmp	r3, #16
 8005364:	d0f0      	beq.n	8005348 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	460b      	mov	r3, r1
 800537e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	78fb      	ldrb	r3, [r7, #3]
 800538e:	68f9      	ldr	r1, [r7, #12]
 8005390:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005394:	4313      	orrs	r3, r2
 8005396:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b085      	sub	sp, #20
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80053c0:	f023 0303 	bic.w	r3, r3, #3
 80053c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053d4:	f043 0302 	orr.w	r3, r3, #2
 80053d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	f003 0301 	and.w	r3, r3, #1
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800540c:	2300      	movs	r3, #0
 800540e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	3301      	adds	r3, #1
 8005414:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800541c:	d901      	bls.n	8005422 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e01b      	b.n	800545a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	2b00      	cmp	r3, #0
 8005428:	daf2      	bge.n	8005410 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800542a:	2300      	movs	r3, #0
 800542c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f043 0201 	orr.w	r2, r3, #1
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	3301      	adds	r3, #1
 800543e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005446:	d901      	bls.n	800544c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e006      	b.n	800545a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b01      	cmp	r3, #1
 8005456:	d0f0      	beq.n	800543a <USB_CoreReset+0x36>

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
	...

08005468 <siprintf>:
 8005468:	b40e      	push	{r1, r2, r3}
 800546a:	b500      	push	{lr}
 800546c:	b09c      	sub	sp, #112	@ 0x70
 800546e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005470:	9002      	str	r0, [sp, #8]
 8005472:	9006      	str	r0, [sp, #24]
 8005474:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005478:	4809      	ldr	r0, [pc, #36]	@ (80054a0 <siprintf+0x38>)
 800547a:	9107      	str	r1, [sp, #28]
 800547c:	9104      	str	r1, [sp, #16]
 800547e:	4909      	ldr	r1, [pc, #36]	@ (80054a4 <siprintf+0x3c>)
 8005480:	f853 2b04 	ldr.w	r2, [r3], #4
 8005484:	9105      	str	r1, [sp, #20]
 8005486:	6800      	ldr	r0, [r0, #0]
 8005488:	9301      	str	r3, [sp, #4]
 800548a:	a902      	add	r1, sp, #8
 800548c:	f000 f994 	bl	80057b8 <_svfiprintf_r>
 8005490:	9b02      	ldr	r3, [sp, #8]
 8005492:	2200      	movs	r2, #0
 8005494:	701a      	strb	r2, [r3, #0]
 8005496:	b01c      	add	sp, #112	@ 0x70
 8005498:	f85d eb04 	ldr.w	lr, [sp], #4
 800549c:	b003      	add	sp, #12
 800549e:	4770      	bx	lr
 80054a0:	2004000c 	.word	0x2004000c
 80054a4:	ffff0208 	.word	0xffff0208

080054a8 <memset>:
 80054a8:	4402      	add	r2, r0
 80054aa:	4603      	mov	r3, r0
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d100      	bne.n	80054b2 <memset+0xa>
 80054b0:	4770      	bx	lr
 80054b2:	f803 1b01 	strb.w	r1, [r3], #1
 80054b6:	e7f9      	b.n	80054ac <memset+0x4>

080054b8 <__errno>:
 80054b8:	4b01      	ldr	r3, [pc, #4]	@ (80054c0 <__errno+0x8>)
 80054ba:	6818      	ldr	r0, [r3, #0]
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	2004000c 	.word	0x2004000c

080054c4 <__libc_init_array>:
 80054c4:	b570      	push	{r4, r5, r6, lr}
 80054c6:	4d0d      	ldr	r5, [pc, #52]	@ (80054fc <__libc_init_array+0x38>)
 80054c8:	4c0d      	ldr	r4, [pc, #52]	@ (8005500 <__libc_init_array+0x3c>)
 80054ca:	1b64      	subs	r4, r4, r5
 80054cc:	10a4      	asrs	r4, r4, #2
 80054ce:	2600      	movs	r6, #0
 80054d0:	42a6      	cmp	r6, r4
 80054d2:	d109      	bne.n	80054e8 <__libc_init_array+0x24>
 80054d4:	4d0b      	ldr	r5, [pc, #44]	@ (8005504 <__libc_init_array+0x40>)
 80054d6:	4c0c      	ldr	r4, [pc, #48]	@ (8005508 <__libc_init_array+0x44>)
 80054d8:	f000 fc66 	bl	8005da8 <_init>
 80054dc:	1b64      	subs	r4, r4, r5
 80054de:	10a4      	asrs	r4, r4, #2
 80054e0:	2600      	movs	r6, #0
 80054e2:	42a6      	cmp	r6, r4
 80054e4:	d105      	bne.n	80054f2 <__libc_init_array+0x2e>
 80054e6:	bd70      	pop	{r4, r5, r6, pc}
 80054e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ec:	4798      	blx	r3
 80054ee:	3601      	adds	r6, #1
 80054f0:	e7ee      	b.n	80054d0 <__libc_init_array+0xc>
 80054f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054f6:	4798      	blx	r3
 80054f8:	3601      	adds	r6, #1
 80054fa:	e7f2      	b.n	80054e2 <__libc_init_array+0x1e>
 80054fc:	08005ee0 	.word	0x08005ee0
 8005500:	08005ee0 	.word	0x08005ee0
 8005504:	08005ee0 	.word	0x08005ee0
 8005508:	08005ee4 	.word	0x08005ee4

0800550c <__retarget_lock_acquire_recursive>:
 800550c:	4770      	bx	lr

0800550e <__retarget_lock_release_recursive>:
 800550e:	4770      	bx	lr

08005510 <_free_r>:
 8005510:	b538      	push	{r3, r4, r5, lr}
 8005512:	4605      	mov	r5, r0
 8005514:	2900      	cmp	r1, #0
 8005516:	d041      	beq.n	800559c <_free_r+0x8c>
 8005518:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800551c:	1f0c      	subs	r4, r1, #4
 800551e:	2b00      	cmp	r3, #0
 8005520:	bfb8      	it	lt
 8005522:	18e4      	addlt	r4, r4, r3
 8005524:	f000 f8e0 	bl	80056e8 <__malloc_lock>
 8005528:	4a1d      	ldr	r2, [pc, #116]	@ (80055a0 <_free_r+0x90>)
 800552a:	6813      	ldr	r3, [r2, #0]
 800552c:	b933      	cbnz	r3, 800553c <_free_r+0x2c>
 800552e:	6063      	str	r3, [r4, #4]
 8005530:	6014      	str	r4, [r2, #0]
 8005532:	4628      	mov	r0, r5
 8005534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005538:	f000 b8dc 	b.w	80056f4 <__malloc_unlock>
 800553c:	42a3      	cmp	r3, r4
 800553e:	d908      	bls.n	8005552 <_free_r+0x42>
 8005540:	6820      	ldr	r0, [r4, #0]
 8005542:	1821      	adds	r1, r4, r0
 8005544:	428b      	cmp	r3, r1
 8005546:	bf01      	itttt	eq
 8005548:	6819      	ldreq	r1, [r3, #0]
 800554a:	685b      	ldreq	r3, [r3, #4]
 800554c:	1809      	addeq	r1, r1, r0
 800554e:	6021      	streq	r1, [r4, #0]
 8005550:	e7ed      	b.n	800552e <_free_r+0x1e>
 8005552:	461a      	mov	r2, r3
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	b10b      	cbz	r3, 800555c <_free_r+0x4c>
 8005558:	42a3      	cmp	r3, r4
 800555a:	d9fa      	bls.n	8005552 <_free_r+0x42>
 800555c:	6811      	ldr	r1, [r2, #0]
 800555e:	1850      	adds	r0, r2, r1
 8005560:	42a0      	cmp	r0, r4
 8005562:	d10b      	bne.n	800557c <_free_r+0x6c>
 8005564:	6820      	ldr	r0, [r4, #0]
 8005566:	4401      	add	r1, r0
 8005568:	1850      	adds	r0, r2, r1
 800556a:	4283      	cmp	r3, r0
 800556c:	6011      	str	r1, [r2, #0]
 800556e:	d1e0      	bne.n	8005532 <_free_r+0x22>
 8005570:	6818      	ldr	r0, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	6053      	str	r3, [r2, #4]
 8005576:	4408      	add	r0, r1
 8005578:	6010      	str	r0, [r2, #0]
 800557a:	e7da      	b.n	8005532 <_free_r+0x22>
 800557c:	d902      	bls.n	8005584 <_free_r+0x74>
 800557e:	230c      	movs	r3, #12
 8005580:	602b      	str	r3, [r5, #0]
 8005582:	e7d6      	b.n	8005532 <_free_r+0x22>
 8005584:	6820      	ldr	r0, [r4, #0]
 8005586:	1821      	adds	r1, r4, r0
 8005588:	428b      	cmp	r3, r1
 800558a:	bf04      	itt	eq
 800558c:	6819      	ldreq	r1, [r3, #0]
 800558e:	685b      	ldreq	r3, [r3, #4]
 8005590:	6063      	str	r3, [r4, #4]
 8005592:	bf04      	itt	eq
 8005594:	1809      	addeq	r1, r1, r0
 8005596:	6021      	streq	r1, [r4, #0]
 8005598:	6054      	str	r4, [r2, #4]
 800559a:	e7ca      	b.n	8005532 <_free_r+0x22>
 800559c:	bd38      	pop	{r3, r4, r5, pc}
 800559e:	bf00      	nop
 80055a0:	20040894 	.word	0x20040894

080055a4 <sbrk_aligned>:
 80055a4:	b570      	push	{r4, r5, r6, lr}
 80055a6:	4e0f      	ldr	r6, [pc, #60]	@ (80055e4 <sbrk_aligned+0x40>)
 80055a8:	460c      	mov	r4, r1
 80055aa:	6831      	ldr	r1, [r6, #0]
 80055ac:	4605      	mov	r5, r0
 80055ae:	b911      	cbnz	r1, 80055b6 <sbrk_aligned+0x12>
 80055b0:	f000 fba6 	bl	8005d00 <_sbrk_r>
 80055b4:	6030      	str	r0, [r6, #0]
 80055b6:	4621      	mov	r1, r4
 80055b8:	4628      	mov	r0, r5
 80055ba:	f000 fba1 	bl	8005d00 <_sbrk_r>
 80055be:	1c43      	adds	r3, r0, #1
 80055c0:	d103      	bne.n	80055ca <sbrk_aligned+0x26>
 80055c2:	f04f 34ff 	mov.w	r4, #4294967295
 80055c6:	4620      	mov	r0, r4
 80055c8:	bd70      	pop	{r4, r5, r6, pc}
 80055ca:	1cc4      	adds	r4, r0, #3
 80055cc:	f024 0403 	bic.w	r4, r4, #3
 80055d0:	42a0      	cmp	r0, r4
 80055d2:	d0f8      	beq.n	80055c6 <sbrk_aligned+0x22>
 80055d4:	1a21      	subs	r1, r4, r0
 80055d6:	4628      	mov	r0, r5
 80055d8:	f000 fb92 	bl	8005d00 <_sbrk_r>
 80055dc:	3001      	adds	r0, #1
 80055de:	d1f2      	bne.n	80055c6 <sbrk_aligned+0x22>
 80055e0:	e7ef      	b.n	80055c2 <sbrk_aligned+0x1e>
 80055e2:	bf00      	nop
 80055e4:	20040890 	.word	0x20040890

080055e8 <_malloc_r>:
 80055e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055ec:	1ccd      	adds	r5, r1, #3
 80055ee:	f025 0503 	bic.w	r5, r5, #3
 80055f2:	3508      	adds	r5, #8
 80055f4:	2d0c      	cmp	r5, #12
 80055f6:	bf38      	it	cc
 80055f8:	250c      	movcc	r5, #12
 80055fa:	2d00      	cmp	r5, #0
 80055fc:	4606      	mov	r6, r0
 80055fe:	db01      	blt.n	8005604 <_malloc_r+0x1c>
 8005600:	42a9      	cmp	r1, r5
 8005602:	d904      	bls.n	800560e <_malloc_r+0x26>
 8005604:	230c      	movs	r3, #12
 8005606:	6033      	str	r3, [r6, #0]
 8005608:	2000      	movs	r0, #0
 800560a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800560e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80056e4 <_malloc_r+0xfc>
 8005612:	f000 f869 	bl	80056e8 <__malloc_lock>
 8005616:	f8d8 3000 	ldr.w	r3, [r8]
 800561a:	461c      	mov	r4, r3
 800561c:	bb44      	cbnz	r4, 8005670 <_malloc_r+0x88>
 800561e:	4629      	mov	r1, r5
 8005620:	4630      	mov	r0, r6
 8005622:	f7ff ffbf 	bl	80055a4 <sbrk_aligned>
 8005626:	1c43      	adds	r3, r0, #1
 8005628:	4604      	mov	r4, r0
 800562a:	d158      	bne.n	80056de <_malloc_r+0xf6>
 800562c:	f8d8 4000 	ldr.w	r4, [r8]
 8005630:	4627      	mov	r7, r4
 8005632:	2f00      	cmp	r7, #0
 8005634:	d143      	bne.n	80056be <_malloc_r+0xd6>
 8005636:	2c00      	cmp	r4, #0
 8005638:	d04b      	beq.n	80056d2 <_malloc_r+0xea>
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	4639      	mov	r1, r7
 800563e:	4630      	mov	r0, r6
 8005640:	eb04 0903 	add.w	r9, r4, r3
 8005644:	f000 fb5c 	bl	8005d00 <_sbrk_r>
 8005648:	4581      	cmp	r9, r0
 800564a:	d142      	bne.n	80056d2 <_malloc_r+0xea>
 800564c:	6821      	ldr	r1, [r4, #0]
 800564e:	1a6d      	subs	r5, r5, r1
 8005650:	4629      	mov	r1, r5
 8005652:	4630      	mov	r0, r6
 8005654:	f7ff ffa6 	bl	80055a4 <sbrk_aligned>
 8005658:	3001      	adds	r0, #1
 800565a:	d03a      	beq.n	80056d2 <_malloc_r+0xea>
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	442b      	add	r3, r5
 8005660:	6023      	str	r3, [r4, #0]
 8005662:	f8d8 3000 	ldr.w	r3, [r8]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	bb62      	cbnz	r2, 80056c4 <_malloc_r+0xdc>
 800566a:	f8c8 7000 	str.w	r7, [r8]
 800566e:	e00f      	b.n	8005690 <_malloc_r+0xa8>
 8005670:	6822      	ldr	r2, [r4, #0]
 8005672:	1b52      	subs	r2, r2, r5
 8005674:	d420      	bmi.n	80056b8 <_malloc_r+0xd0>
 8005676:	2a0b      	cmp	r2, #11
 8005678:	d917      	bls.n	80056aa <_malloc_r+0xc2>
 800567a:	1961      	adds	r1, r4, r5
 800567c:	42a3      	cmp	r3, r4
 800567e:	6025      	str	r5, [r4, #0]
 8005680:	bf18      	it	ne
 8005682:	6059      	strne	r1, [r3, #4]
 8005684:	6863      	ldr	r3, [r4, #4]
 8005686:	bf08      	it	eq
 8005688:	f8c8 1000 	streq.w	r1, [r8]
 800568c:	5162      	str	r2, [r4, r5]
 800568e:	604b      	str	r3, [r1, #4]
 8005690:	4630      	mov	r0, r6
 8005692:	f000 f82f 	bl	80056f4 <__malloc_unlock>
 8005696:	f104 000b 	add.w	r0, r4, #11
 800569a:	1d23      	adds	r3, r4, #4
 800569c:	f020 0007 	bic.w	r0, r0, #7
 80056a0:	1ac2      	subs	r2, r0, r3
 80056a2:	bf1c      	itt	ne
 80056a4:	1a1b      	subne	r3, r3, r0
 80056a6:	50a3      	strne	r3, [r4, r2]
 80056a8:	e7af      	b.n	800560a <_malloc_r+0x22>
 80056aa:	6862      	ldr	r2, [r4, #4]
 80056ac:	42a3      	cmp	r3, r4
 80056ae:	bf0c      	ite	eq
 80056b0:	f8c8 2000 	streq.w	r2, [r8]
 80056b4:	605a      	strne	r2, [r3, #4]
 80056b6:	e7eb      	b.n	8005690 <_malloc_r+0xa8>
 80056b8:	4623      	mov	r3, r4
 80056ba:	6864      	ldr	r4, [r4, #4]
 80056bc:	e7ae      	b.n	800561c <_malloc_r+0x34>
 80056be:	463c      	mov	r4, r7
 80056c0:	687f      	ldr	r7, [r7, #4]
 80056c2:	e7b6      	b.n	8005632 <_malloc_r+0x4a>
 80056c4:	461a      	mov	r2, r3
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	42a3      	cmp	r3, r4
 80056ca:	d1fb      	bne.n	80056c4 <_malloc_r+0xdc>
 80056cc:	2300      	movs	r3, #0
 80056ce:	6053      	str	r3, [r2, #4]
 80056d0:	e7de      	b.n	8005690 <_malloc_r+0xa8>
 80056d2:	230c      	movs	r3, #12
 80056d4:	6033      	str	r3, [r6, #0]
 80056d6:	4630      	mov	r0, r6
 80056d8:	f000 f80c 	bl	80056f4 <__malloc_unlock>
 80056dc:	e794      	b.n	8005608 <_malloc_r+0x20>
 80056de:	6005      	str	r5, [r0, #0]
 80056e0:	e7d6      	b.n	8005690 <_malloc_r+0xa8>
 80056e2:	bf00      	nop
 80056e4:	20040894 	.word	0x20040894

080056e8 <__malloc_lock>:
 80056e8:	4801      	ldr	r0, [pc, #4]	@ (80056f0 <__malloc_lock+0x8>)
 80056ea:	f7ff bf0f 	b.w	800550c <__retarget_lock_acquire_recursive>
 80056ee:	bf00      	nop
 80056f0:	2004088c 	.word	0x2004088c

080056f4 <__malloc_unlock>:
 80056f4:	4801      	ldr	r0, [pc, #4]	@ (80056fc <__malloc_unlock+0x8>)
 80056f6:	f7ff bf0a 	b.w	800550e <__retarget_lock_release_recursive>
 80056fa:	bf00      	nop
 80056fc:	2004088c 	.word	0x2004088c

08005700 <__ssputs_r>:
 8005700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005704:	688e      	ldr	r6, [r1, #8]
 8005706:	461f      	mov	r7, r3
 8005708:	42be      	cmp	r6, r7
 800570a:	680b      	ldr	r3, [r1, #0]
 800570c:	4682      	mov	sl, r0
 800570e:	460c      	mov	r4, r1
 8005710:	4690      	mov	r8, r2
 8005712:	d82d      	bhi.n	8005770 <__ssputs_r+0x70>
 8005714:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005718:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800571c:	d026      	beq.n	800576c <__ssputs_r+0x6c>
 800571e:	6965      	ldr	r5, [r4, #20]
 8005720:	6909      	ldr	r1, [r1, #16]
 8005722:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005726:	eba3 0901 	sub.w	r9, r3, r1
 800572a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800572e:	1c7b      	adds	r3, r7, #1
 8005730:	444b      	add	r3, r9
 8005732:	106d      	asrs	r5, r5, #1
 8005734:	429d      	cmp	r5, r3
 8005736:	bf38      	it	cc
 8005738:	461d      	movcc	r5, r3
 800573a:	0553      	lsls	r3, r2, #21
 800573c:	d527      	bpl.n	800578e <__ssputs_r+0x8e>
 800573e:	4629      	mov	r1, r5
 8005740:	f7ff ff52 	bl	80055e8 <_malloc_r>
 8005744:	4606      	mov	r6, r0
 8005746:	b360      	cbz	r0, 80057a2 <__ssputs_r+0xa2>
 8005748:	6921      	ldr	r1, [r4, #16]
 800574a:	464a      	mov	r2, r9
 800574c:	f000 fae8 	bl	8005d20 <memcpy>
 8005750:	89a3      	ldrh	r3, [r4, #12]
 8005752:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800575a:	81a3      	strh	r3, [r4, #12]
 800575c:	6126      	str	r6, [r4, #16]
 800575e:	6165      	str	r5, [r4, #20]
 8005760:	444e      	add	r6, r9
 8005762:	eba5 0509 	sub.w	r5, r5, r9
 8005766:	6026      	str	r6, [r4, #0]
 8005768:	60a5      	str	r5, [r4, #8]
 800576a:	463e      	mov	r6, r7
 800576c:	42be      	cmp	r6, r7
 800576e:	d900      	bls.n	8005772 <__ssputs_r+0x72>
 8005770:	463e      	mov	r6, r7
 8005772:	6820      	ldr	r0, [r4, #0]
 8005774:	4632      	mov	r2, r6
 8005776:	4641      	mov	r1, r8
 8005778:	f000 faa8 	bl	8005ccc <memmove>
 800577c:	68a3      	ldr	r3, [r4, #8]
 800577e:	1b9b      	subs	r3, r3, r6
 8005780:	60a3      	str	r3, [r4, #8]
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	4433      	add	r3, r6
 8005786:	6023      	str	r3, [r4, #0]
 8005788:	2000      	movs	r0, #0
 800578a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800578e:	462a      	mov	r2, r5
 8005790:	f000 fad4 	bl	8005d3c <_realloc_r>
 8005794:	4606      	mov	r6, r0
 8005796:	2800      	cmp	r0, #0
 8005798:	d1e0      	bne.n	800575c <__ssputs_r+0x5c>
 800579a:	6921      	ldr	r1, [r4, #16]
 800579c:	4650      	mov	r0, sl
 800579e:	f7ff feb7 	bl	8005510 <_free_r>
 80057a2:	230c      	movs	r3, #12
 80057a4:	f8ca 3000 	str.w	r3, [sl]
 80057a8:	89a3      	ldrh	r3, [r4, #12]
 80057aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057ae:	81a3      	strh	r3, [r4, #12]
 80057b0:	f04f 30ff 	mov.w	r0, #4294967295
 80057b4:	e7e9      	b.n	800578a <__ssputs_r+0x8a>
	...

080057b8 <_svfiprintf_r>:
 80057b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057bc:	4698      	mov	r8, r3
 80057be:	898b      	ldrh	r3, [r1, #12]
 80057c0:	061b      	lsls	r3, r3, #24
 80057c2:	b09d      	sub	sp, #116	@ 0x74
 80057c4:	4607      	mov	r7, r0
 80057c6:	460d      	mov	r5, r1
 80057c8:	4614      	mov	r4, r2
 80057ca:	d510      	bpl.n	80057ee <_svfiprintf_r+0x36>
 80057cc:	690b      	ldr	r3, [r1, #16]
 80057ce:	b973      	cbnz	r3, 80057ee <_svfiprintf_r+0x36>
 80057d0:	2140      	movs	r1, #64	@ 0x40
 80057d2:	f7ff ff09 	bl	80055e8 <_malloc_r>
 80057d6:	6028      	str	r0, [r5, #0]
 80057d8:	6128      	str	r0, [r5, #16]
 80057da:	b930      	cbnz	r0, 80057ea <_svfiprintf_r+0x32>
 80057dc:	230c      	movs	r3, #12
 80057de:	603b      	str	r3, [r7, #0]
 80057e0:	f04f 30ff 	mov.w	r0, #4294967295
 80057e4:	b01d      	add	sp, #116	@ 0x74
 80057e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ea:	2340      	movs	r3, #64	@ 0x40
 80057ec:	616b      	str	r3, [r5, #20]
 80057ee:	2300      	movs	r3, #0
 80057f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80057f2:	2320      	movs	r3, #32
 80057f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80057f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80057fc:	2330      	movs	r3, #48	@ 0x30
 80057fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800599c <_svfiprintf_r+0x1e4>
 8005802:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005806:	f04f 0901 	mov.w	r9, #1
 800580a:	4623      	mov	r3, r4
 800580c:	469a      	mov	sl, r3
 800580e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005812:	b10a      	cbz	r2, 8005818 <_svfiprintf_r+0x60>
 8005814:	2a25      	cmp	r2, #37	@ 0x25
 8005816:	d1f9      	bne.n	800580c <_svfiprintf_r+0x54>
 8005818:	ebba 0b04 	subs.w	fp, sl, r4
 800581c:	d00b      	beq.n	8005836 <_svfiprintf_r+0x7e>
 800581e:	465b      	mov	r3, fp
 8005820:	4622      	mov	r2, r4
 8005822:	4629      	mov	r1, r5
 8005824:	4638      	mov	r0, r7
 8005826:	f7ff ff6b 	bl	8005700 <__ssputs_r>
 800582a:	3001      	adds	r0, #1
 800582c:	f000 80a7 	beq.w	800597e <_svfiprintf_r+0x1c6>
 8005830:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005832:	445a      	add	r2, fp
 8005834:	9209      	str	r2, [sp, #36]	@ 0x24
 8005836:	f89a 3000 	ldrb.w	r3, [sl]
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 809f 	beq.w	800597e <_svfiprintf_r+0x1c6>
 8005840:	2300      	movs	r3, #0
 8005842:	f04f 32ff 	mov.w	r2, #4294967295
 8005846:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800584a:	f10a 0a01 	add.w	sl, sl, #1
 800584e:	9304      	str	r3, [sp, #16]
 8005850:	9307      	str	r3, [sp, #28]
 8005852:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005856:	931a      	str	r3, [sp, #104]	@ 0x68
 8005858:	4654      	mov	r4, sl
 800585a:	2205      	movs	r2, #5
 800585c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005860:	484e      	ldr	r0, [pc, #312]	@ (800599c <_svfiprintf_r+0x1e4>)
 8005862:	f7fa fcd5 	bl	8000210 <memchr>
 8005866:	9a04      	ldr	r2, [sp, #16]
 8005868:	b9d8      	cbnz	r0, 80058a2 <_svfiprintf_r+0xea>
 800586a:	06d0      	lsls	r0, r2, #27
 800586c:	bf44      	itt	mi
 800586e:	2320      	movmi	r3, #32
 8005870:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005874:	0711      	lsls	r1, r2, #28
 8005876:	bf44      	itt	mi
 8005878:	232b      	movmi	r3, #43	@ 0x2b
 800587a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800587e:	f89a 3000 	ldrb.w	r3, [sl]
 8005882:	2b2a      	cmp	r3, #42	@ 0x2a
 8005884:	d015      	beq.n	80058b2 <_svfiprintf_r+0xfa>
 8005886:	9a07      	ldr	r2, [sp, #28]
 8005888:	4654      	mov	r4, sl
 800588a:	2000      	movs	r0, #0
 800588c:	f04f 0c0a 	mov.w	ip, #10
 8005890:	4621      	mov	r1, r4
 8005892:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005896:	3b30      	subs	r3, #48	@ 0x30
 8005898:	2b09      	cmp	r3, #9
 800589a:	d94b      	bls.n	8005934 <_svfiprintf_r+0x17c>
 800589c:	b1b0      	cbz	r0, 80058cc <_svfiprintf_r+0x114>
 800589e:	9207      	str	r2, [sp, #28]
 80058a0:	e014      	b.n	80058cc <_svfiprintf_r+0x114>
 80058a2:	eba0 0308 	sub.w	r3, r0, r8
 80058a6:	fa09 f303 	lsl.w	r3, r9, r3
 80058aa:	4313      	orrs	r3, r2
 80058ac:	9304      	str	r3, [sp, #16]
 80058ae:	46a2      	mov	sl, r4
 80058b0:	e7d2      	b.n	8005858 <_svfiprintf_r+0xa0>
 80058b2:	9b03      	ldr	r3, [sp, #12]
 80058b4:	1d19      	adds	r1, r3, #4
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	9103      	str	r1, [sp, #12]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	bfbb      	ittet	lt
 80058be:	425b      	neglt	r3, r3
 80058c0:	f042 0202 	orrlt.w	r2, r2, #2
 80058c4:	9307      	strge	r3, [sp, #28]
 80058c6:	9307      	strlt	r3, [sp, #28]
 80058c8:	bfb8      	it	lt
 80058ca:	9204      	strlt	r2, [sp, #16]
 80058cc:	7823      	ldrb	r3, [r4, #0]
 80058ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80058d0:	d10a      	bne.n	80058e8 <_svfiprintf_r+0x130>
 80058d2:	7863      	ldrb	r3, [r4, #1]
 80058d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80058d6:	d132      	bne.n	800593e <_svfiprintf_r+0x186>
 80058d8:	9b03      	ldr	r3, [sp, #12]
 80058da:	1d1a      	adds	r2, r3, #4
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	9203      	str	r2, [sp, #12]
 80058e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80058e4:	3402      	adds	r4, #2
 80058e6:	9305      	str	r3, [sp, #20]
 80058e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80059ac <_svfiprintf_r+0x1f4>
 80058ec:	7821      	ldrb	r1, [r4, #0]
 80058ee:	2203      	movs	r2, #3
 80058f0:	4650      	mov	r0, sl
 80058f2:	f7fa fc8d 	bl	8000210 <memchr>
 80058f6:	b138      	cbz	r0, 8005908 <_svfiprintf_r+0x150>
 80058f8:	9b04      	ldr	r3, [sp, #16]
 80058fa:	eba0 000a 	sub.w	r0, r0, sl
 80058fe:	2240      	movs	r2, #64	@ 0x40
 8005900:	4082      	lsls	r2, r0
 8005902:	4313      	orrs	r3, r2
 8005904:	3401      	adds	r4, #1
 8005906:	9304      	str	r3, [sp, #16]
 8005908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800590c:	4824      	ldr	r0, [pc, #144]	@ (80059a0 <_svfiprintf_r+0x1e8>)
 800590e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005912:	2206      	movs	r2, #6
 8005914:	f7fa fc7c 	bl	8000210 <memchr>
 8005918:	2800      	cmp	r0, #0
 800591a:	d036      	beq.n	800598a <_svfiprintf_r+0x1d2>
 800591c:	4b21      	ldr	r3, [pc, #132]	@ (80059a4 <_svfiprintf_r+0x1ec>)
 800591e:	bb1b      	cbnz	r3, 8005968 <_svfiprintf_r+0x1b0>
 8005920:	9b03      	ldr	r3, [sp, #12]
 8005922:	3307      	adds	r3, #7
 8005924:	f023 0307 	bic.w	r3, r3, #7
 8005928:	3308      	adds	r3, #8
 800592a:	9303      	str	r3, [sp, #12]
 800592c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800592e:	4433      	add	r3, r6
 8005930:	9309      	str	r3, [sp, #36]	@ 0x24
 8005932:	e76a      	b.n	800580a <_svfiprintf_r+0x52>
 8005934:	fb0c 3202 	mla	r2, ip, r2, r3
 8005938:	460c      	mov	r4, r1
 800593a:	2001      	movs	r0, #1
 800593c:	e7a8      	b.n	8005890 <_svfiprintf_r+0xd8>
 800593e:	2300      	movs	r3, #0
 8005940:	3401      	adds	r4, #1
 8005942:	9305      	str	r3, [sp, #20]
 8005944:	4619      	mov	r1, r3
 8005946:	f04f 0c0a 	mov.w	ip, #10
 800594a:	4620      	mov	r0, r4
 800594c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005950:	3a30      	subs	r2, #48	@ 0x30
 8005952:	2a09      	cmp	r2, #9
 8005954:	d903      	bls.n	800595e <_svfiprintf_r+0x1a6>
 8005956:	2b00      	cmp	r3, #0
 8005958:	d0c6      	beq.n	80058e8 <_svfiprintf_r+0x130>
 800595a:	9105      	str	r1, [sp, #20]
 800595c:	e7c4      	b.n	80058e8 <_svfiprintf_r+0x130>
 800595e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005962:	4604      	mov	r4, r0
 8005964:	2301      	movs	r3, #1
 8005966:	e7f0      	b.n	800594a <_svfiprintf_r+0x192>
 8005968:	ab03      	add	r3, sp, #12
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	462a      	mov	r2, r5
 800596e:	4b0e      	ldr	r3, [pc, #56]	@ (80059a8 <_svfiprintf_r+0x1f0>)
 8005970:	a904      	add	r1, sp, #16
 8005972:	4638      	mov	r0, r7
 8005974:	f3af 8000 	nop.w
 8005978:	1c42      	adds	r2, r0, #1
 800597a:	4606      	mov	r6, r0
 800597c:	d1d6      	bne.n	800592c <_svfiprintf_r+0x174>
 800597e:	89ab      	ldrh	r3, [r5, #12]
 8005980:	065b      	lsls	r3, r3, #25
 8005982:	f53f af2d 	bmi.w	80057e0 <_svfiprintf_r+0x28>
 8005986:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005988:	e72c      	b.n	80057e4 <_svfiprintf_r+0x2c>
 800598a:	ab03      	add	r3, sp, #12
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	462a      	mov	r2, r5
 8005990:	4b05      	ldr	r3, [pc, #20]	@ (80059a8 <_svfiprintf_r+0x1f0>)
 8005992:	a904      	add	r1, sp, #16
 8005994:	4638      	mov	r0, r7
 8005996:	f000 f879 	bl	8005a8c <_printf_i>
 800599a:	e7ed      	b.n	8005978 <_svfiprintf_r+0x1c0>
 800599c:	08005ea4 	.word	0x08005ea4
 80059a0:	08005eae 	.word	0x08005eae
 80059a4:	00000000 	.word	0x00000000
 80059a8:	08005701 	.word	0x08005701
 80059ac:	08005eaa 	.word	0x08005eaa

080059b0 <_printf_common>:
 80059b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059b4:	4616      	mov	r6, r2
 80059b6:	4698      	mov	r8, r3
 80059b8:	688a      	ldr	r2, [r1, #8]
 80059ba:	690b      	ldr	r3, [r1, #16]
 80059bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80059c0:	4293      	cmp	r3, r2
 80059c2:	bfb8      	it	lt
 80059c4:	4613      	movlt	r3, r2
 80059c6:	6033      	str	r3, [r6, #0]
 80059c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80059cc:	4607      	mov	r7, r0
 80059ce:	460c      	mov	r4, r1
 80059d0:	b10a      	cbz	r2, 80059d6 <_printf_common+0x26>
 80059d2:	3301      	adds	r3, #1
 80059d4:	6033      	str	r3, [r6, #0]
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	0699      	lsls	r1, r3, #26
 80059da:	bf42      	ittt	mi
 80059dc:	6833      	ldrmi	r3, [r6, #0]
 80059de:	3302      	addmi	r3, #2
 80059e0:	6033      	strmi	r3, [r6, #0]
 80059e2:	6825      	ldr	r5, [r4, #0]
 80059e4:	f015 0506 	ands.w	r5, r5, #6
 80059e8:	d106      	bne.n	80059f8 <_printf_common+0x48>
 80059ea:	f104 0a19 	add.w	sl, r4, #25
 80059ee:	68e3      	ldr	r3, [r4, #12]
 80059f0:	6832      	ldr	r2, [r6, #0]
 80059f2:	1a9b      	subs	r3, r3, r2
 80059f4:	42ab      	cmp	r3, r5
 80059f6:	dc26      	bgt.n	8005a46 <_printf_common+0x96>
 80059f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80059fc:	6822      	ldr	r2, [r4, #0]
 80059fe:	3b00      	subs	r3, #0
 8005a00:	bf18      	it	ne
 8005a02:	2301      	movne	r3, #1
 8005a04:	0692      	lsls	r2, r2, #26
 8005a06:	d42b      	bmi.n	8005a60 <_printf_common+0xb0>
 8005a08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a0c:	4641      	mov	r1, r8
 8005a0e:	4638      	mov	r0, r7
 8005a10:	47c8      	blx	r9
 8005a12:	3001      	adds	r0, #1
 8005a14:	d01e      	beq.n	8005a54 <_printf_common+0xa4>
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	6922      	ldr	r2, [r4, #16]
 8005a1a:	f003 0306 	and.w	r3, r3, #6
 8005a1e:	2b04      	cmp	r3, #4
 8005a20:	bf02      	ittt	eq
 8005a22:	68e5      	ldreq	r5, [r4, #12]
 8005a24:	6833      	ldreq	r3, [r6, #0]
 8005a26:	1aed      	subeq	r5, r5, r3
 8005a28:	68a3      	ldr	r3, [r4, #8]
 8005a2a:	bf0c      	ite	eq
 8005a2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a30:	2500      	movne	r5, #0
 8005a32:	4293      	cmp	r3, r2
 8005a34:	bfc4      	itt	gt
 8005a36:	1a9b      	subgt	r3, r3, r2
 8005a38:	18ed      	addgt	r5, r5, r3
 8005a3a:	2600      	movs	r6, #0
 8005a3c:	341a      	adds	r4, #26
 8005a3e:	42b5      	cmp	r5, r6
 8005a40:	d11a      	bne.n	8005a78 <_printf_common+0xc8>
 8005a42:	2000      	movs	r0, #0
 8005a44:	e008      	b.n	8005a58 <_printf_common+0xa8>
 8005a46:	2301      	movs	r3, #1
 8005a48:	4652      	mov	r2, sl
 8005a4a:	4641      	mov	r1, r8
 8005a4c:	4638      	mov	r0, r7
 8005a4e:	47c8      	blx	r9
 8005a50:	3001      	adds	r0, #1
 8005a52:	d103      	bne.n	8005a5c <_printf_common+0xac>
 8005a54:	f04f 30ff 	mov.w	r0, #4294967295
 8005a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a5c:	3501      	adds	r5, #1
 8005a5e:	e7c6      	b.n	80059ee <_printf_common+0x3e>
 8005a60:	18e1      	adds	r1, r4, r3
 8005a62:	1c5a      	adds	r2, r3, #1
 8005a64:	2030      	movs	r0, #48	@ 0x30
 8005a66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a6a:	4422      	add	r2, r4
 8005a6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a74:	3302      	adds	r3, #2
 8005a76:	e7c7      	b.n	8005a08 <_printf_common+0x58>
 8005a78:	2301      	movs	r3, #1
 8005a7a:	4622      	mov	r2, r4
 8005a7c:	4641      	mov	r1, r8
 8005a7e:	4638      	mov	r0, r7
 8005a80:	47c8      	blx	r9
 8005a82:	3001      	adds	r0, #1
 8005a84:	d0e6      	beq.n	8005a54 <_printf_common+0xa4>
 8005a86:	3601      	adds	r6, #1
 8005a88:	e7d9      	b.n	8005a3e <_printf_common+0x8e>
	...

08005a8c <_printf_i>:
 8005a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a90:	7e0f      	ldrb	r7, [r1, #24]
 8005a92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a94:	2f78      	cmp	r7, #120	@ 0x78
 8005a96:	4691      	mov	r9, r2
 8005a98:	4680      	mov	r8, r0
 8005a9a:	460c      	mov	r4, r1
 8005a9c:	469a      	mov	sl, r3
 8005a9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005aa2:	d807      	bhi.n	8005ab4 <_printf_i+0x28>
 8005aa4:	2f62      	cmp	r7, #98	@ 0x62
 8005aa6:	d80a      	bhi.n	8005abe <_printf_i+0x32>
 8005aa8:	2f00      	cmp	r7, #0
 8005aaa:	f000 80d2 	beq.w	8005c52 <_printf_i+0x1c6>
 8005aae:	2f58      	cmp	r7, #88	@ 0x58
 8005ab0:	f000 80b9 	beq.w	8005c26 <_printf_i+0x19a>
 8005ab4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ab8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005abc:	e03a      	b.n	8005b34 <_printf_i+0xa8>
 8005abe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ac2:	2b15      	cmp	r3, #21
 8005ac4:	d8f6      	bhi.n	8005ab4 <_printf_i+0x28>
 8005ac6:	a101      	add	r1, pc, #4	@ (adr r1, 8005acc <_printf_i+0x40>)
 8005ac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005acc:	08005b25 	.word	0x08005b25
 8005ad0:	08005b39 	.word	0x08005b39
 8005ad4:	08005ab5 	.word	0x08005ab5
 8005ad8:	08005ab5 	.word	0x08005ab5
 8005adc:	08005ab5 	.word	0x08005ab5
 8005ae0:	08005ab5 	.word	0x08005ab5
 8005ae4:	08005b39 	.word	0x08005b39
 8005ae8:	08005ab5 	.word	0x08005ab5
 8005aec:	08005ab5 	.word	0x08005ab5
 8005af0:	08005ab5 	.word	0x08005ab5
 8005af4:	08005ab5 	.word	0x08005ab5
 8005af8:	08005c39 	.word	0x08005c39
 8005afc:	08005b63 	.word	0x08005b63
 8005b00:	08005bf3 	.word	0x08005bf3
 8005b04:	08005ab5 	.word	0x08005ab5
 8005b08:	08005ab5 	.word	0x08005ab5
 8005b0c:	08005c5b 	.word	0x08005c5b
 8005b10:	08005ab5 	.word	0x08005ab5
 8005b14:	08005b63 	.word	0x08005b63
 8005b18:	08005ab5 	.word	0x08005ab5
 8005b1c:	08005ab5 	.word	0x08005ab5
 8005b20:	08005bfb 	.word	0x08005bfb
 8005b24:	6833      	ldr	r3, [r6, #0]
 8005b26:	1d1a      	adds	r2, r3, #4
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6032      	str	r2, [r6, #0]
 8005b2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b34:	2301      	movs	r3, #1
 8005b36:	e09d      	b.n	8005c74 <_printf_i+0x1e8>
 8005b38:	6833      	ldr	r3, [r6, #0]
 8005b3a:	6820      	ldr	r0, [r4, #0]
 8005b3c:	1d19      	adds	r1, r3, #4
 8005b3e:	6031      	str	r1, [r6, #0]
 8005b40:	0606      	lsls	r6, r0, #24
 8005b42:	d501      	bpl.n	8005b48 <_printf_i+0xbc>
 8005b44:	681d      	ldr	r5, [r3, #0]
 8005b46:	e003      	b.n	8005b50 <_printf_i+0xc4>
 8005b48:	0645      	lsls	r5, r0, #25
 8005b4a:	d5fb      	bpl.n	8005b44 <_printf_i+0xb8>
 8005b4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b50:	2d00      	cmp	r5, #0
 8005b52:	da03      	bge.n	8005b5c <_printf_i+0xd0>
 8005b54:	232d      	movs	r3, #45	@ 0x2d
 8005b56:	426d      	negs	r5, r5
 8005b58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b5c:	4859      	ldr	r0, [pc, #356]	@ (8005cc4 <_printf_i+0x238>)
 8005b5e:	230a      	movs	r3, #10
 8005b60:	e011      	b.n	8005b86 <_printf_i+0xfa>
 8005b62:	6821      	ldr	r1, [r4, #0]
 8005b64:	6833      	ldr	r3, [r6, #0]
 8005b66:	0608      	lsls	r0, r1, #24
 8005b68:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b6c:	d402      	bmi.n	8005b74 <_printf_i+0xe8>
 8005b6e:	0649      	lsls	r1, r1, #25
 8005b70:	bf48      	it	mi
 8005b72:	b2ad      	uxthmi	r5, r5
 8005b74:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b76:	4853      	ldr	r0, [pc, #332]	@ (8005cc4 <_printf_i+0x238>)
 8005b78:	6033      	str	r3, [r6, #0]
 8005b7a:	bf14      	ite	ne
 8005b7c:	230a      	movne	r3, #10
 8005b7e:	2308      	moveq	r3, #8
 8005b80:	2100      	movs	r1, #0
 8005b82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b86:	6866      	ldr	r6, [r4, #4]
 8005b88:	60a6      	str	r6, [r4, #8]
 8005b8a:	2e00      	cmp	r6, #0
 8005b8c:	bfa2      	ittt	ge
 8005b8e:	6821      	ldrge	r1, [r4, #0]
 8005b90:	f021 0104 	bicge.w	r1, r1, #4
 8005b94:	6021      	strge	r1, [r4, #0]
 8005b96:	b90d      	cbnz	r5, 8005b9c <_printf_i+0x110>
 8005b98:	2e00      	cmp	r6, #0
 8005b9a:	d04b      	beq.n	8005c34 <_printf_i+0x1a8>
 8005b9c:	4616      	mov	r6, r2
 8005b9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ba2:	fb03 5711 	mls	r7, r3, r1, r5
 8005ba6:	5dc7      	ldrb	r7, [r0, r7]
 8005ba8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bac:	462f      	mov	r7, r5
 8005bae:	42bb      	cmp	r3, r7
 8005bb0:	460d      	mov	r5, r1
 8005bb2:	d9f4      	bls.n	8005b9e <_printf_i+0x112>
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d10b      	bne.n	8005bd0 <_printf_i+0x144>
 8005bb8:	6823      	ldr	r3, [r4, #0]
 8005bba:	07df      	lsls	r7, r3, #31
 8005bbc:	d508      	bpl.n	8005bd0 <_printf_i+0x144>
 8005bbe:	6923      	ldr	r3, [r4, #16]
 8005bc0:	6861      	ldr	r1, [r4, #4]
 8005bc2:	4299      	cmp	r1, r3
 8005bc4:	bfde      	ittt	le
 8005bc6:	2330      	movle	r3, #48	@ 0x30
 8005bc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005bcc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005bd0:	1b92      	subs	r2, r2, r6
 8005bd2:	6122      	str	r2, [r4, #16]
 8005bd4:	f8cd a000 	str.w	sl, [sp]
 8005bd8:	464b      	mov	r3, r9
 8005bda:	aa03      	add	r2, sp, #12
 8005bdc:	4621      	mov	r1, r4
 8005bde:	4640      	mov	r0, r8
 8005be0:	f7ff fee6 	bl	80059b0 <_printf_common>
 8005be4:	3001      	adds	r0, #1
 8005be6:	d14a      	bne.n	8005c7e <_printf_i+0x1f2>
 8005be8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bec:	b004      	add	sp, #16
 8005bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	f043 0320 	orr.w	r3, r3, #32
 8005bf8:	6023      	str	r3, [r4, #0]
 8005bfa:	4833      	ldr	r0, [pc, #204]	@ (8005cc8 <_printf_i+0x23c>)
 8005bfc:	2778      	movs	r7, #120	@ 0x78
 8005bfe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c02:	6823      	ldr	r3, [r4, #0]
 8005c04:	6831      	ldr	r1, [r6, #0]
 8005c06:	061f      	lsls	r7, r3, #24
 8005c08:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c0c:	d402      	bmi.n	8005c14 <_printf_i+0x188>
 8005c0e:	065f      	lsls	r7, r3, #25
 8005c10:	bf48      	it	mi
 8005c12:	b2ad      	uxthmi	r5, r5
 8005c14:	6031      	str	r1, [r6, #0]
 8005c16:	07d9      	lsls	r1, r3, #31
 8005c18:	bf44      	itt	mi
 8005c1a:	f043 0320 	orrmi.w	r3, r3, #32
 8005c1e:	6023      	strmi	r3, [r4, #0]
 8005c20:	b11d      	cbz	r5, 8005c2a <_printf_i+0x19e>
 8005c22:	2310      	movs	r3, #16
 8005c24:	e7ac      	b.n	8005b80 <_printf_i+0xf4>
 8005c26:	4827      	ldr	r0, [pc, #156]	@ (8005cc4 <_printf_i+0x238>)
 8005c28:	e7e9      	b.n	8005bfe <_printf_i+0x172>
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	f023 0320 	bic.w	r3, r3, #32
 8005c30:	6023      	str	r3, [r4, #0]
 8005c32:	e7f6      	b.n	8005c22 <_printf_i+0x196>
 8005c34:	4616      	mov	r6, r2
 8005c36:	e7bd      	b.n	8005bb4 <_printf_i+0x128>
 8005c38:	6833      	ldr	r3, [r6, #0]
 8005c3a:	6825      	ldr	r5, [r4, #0]
 8005c3c:	6961      	ldr	r1, [r4, #20]
 8005c3e:	1d18      	adds	r0, r3, #4
 8005c40:	6030      	str	r0, [r6, #0]
 8005c42:	062e      	lsls	r6, r5, #24
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	d501      	bpl.n	8005c4c <_printf_i+0x1c0>
 8005c48:	6019      	str	r1, [r3, #0]
 8005c4a:	e002      	b.n	8005c52 <_printf_i+0x1c6>
 8005c4c:	0668      	lsls	r0, r5, #25
 8005c4e:	d5fb      	bpl.n	8005c48 <_printf_i+0x1bc>
 8005c50:	8019      	strh	r1, [r3, #0]
 8005c52:	2300      	movs	r3, #0
 8005c54:	6123      	str	r3, [r4, #16]
 8005c56:	4616      	mov	r6, r2
 8005c58:	e7bc      	b.n	8005bd4 <_printf_i+0x148>
 8005c5a:	6833      	ldr	r3, [r6, #0]
 8005c5c:	1d1a      	adds	r2, r3, #4
 8005c5e:	6032      	str	r2, [r6, #0]
 8005c60:	681e      	ldr	r6, [r3, #0]
 8005c62:	6862      	ldr	r2, [r4, #4]
 8005c64:	2100      	movs	r1, #0
 8005c66:	4630      	mov	r0, r6
 8005c68:	f7fa fad2 	bl	8000210 <memchr>
 8005c6c:	b108      	cbz	r0, 8005c72 <_printf_i+0x1e6>
 8005c6e:	1b80      	subs	r0, r0, r6
 8005c70:	6060      	str	r0, [r4, #4]
 8005c72:	6863      	ldr	r3, [r4, #4]
 8005c74:	6123      	str	r3, [r4, #16]
 8005c76:	2300      	movs	r3, #0
 8005c78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c7c:	e7aa      	b.n	8005bd4 <_printf_i+0x148>
 8005c7e:	6923      	ldr	r3, [r4, #16]
 8005c80:	4632      	mov	r2, r6
 8005c82:	4649      	mov	r1, r9
 8005c84:	4640      	mov	r0, r8
 8005c86:	47d0      	blx	sl
 8005c88:	3001      	adds	r0, #1
 8005c8a:	d0ad      	beq.n	8005be8 <_printf_i+0x15c>
 8005c8c:	6823      	ldr	r3, [r4, #0]
 8005c8e:	079b      	lsls	r3, r3, #30
 8005c90:	d413      	bmi.n	8005cba <_printf_i+0x22e>
 8005c92:	68e0      	ldr	r0, [r4, #12]
 8005c94:	9b03      	ldr	r3, [sp, #12]
 8005c96:	4298      	cmp	r0, r3
 8005c98:	bfb8      	it	lt
 8005c9a:	4618      	movlt	r0, r3
 8005c9c:	e7a6      	b.n	8005bec <_printf_i+0x160>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	4632      	mov	r2, r6
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	4640      	mov	r0, r8
 8005ca6:	47d0      	blx	sl
 8005ca8:	3001      	adds	r0, #1
 8005caa:	d09d      	beq.n	8005be8 <_printf_i+0x15c>
 8005cac:	3501      	adds	r5, #1
 8005cae:	68e3      	ldr	r3, [r4, #12]
 8005cb0:	9903      	ldr	r1, [sp, #12]
 8005cb2:	1a5b      	subs	r3, r3, r1
 8005cb4:	42ab      	cmp	r3, r5
 8005cb6:	dcf2      	bgt.n	8005c9e <_printf_i+0x212>
 8005cb8:	e7eb      	b.n	8005c92 <_printf_i+0x206>
 8005cba:	2500      	movs	r5, #0
 8005cbc:	f104 0619 	add.w	r6, r4, #25
 8005cc0:	e7f5      	b.n	8005cae <_printf_i+0x222>
 8005cc2:	bf00      	nop
 8005cc4:	08005eb5 	.word	0x08005eb5
 8005cc8:	08005ec6 	.word	0x08005ec6

08005ccc <memmove>:
 8005ccc:	4288      	cmp	r0, r1
 8005cce:	b510      	push	{r4, lr}
 8005cd0:	eb01 0402 	add.w	r4, r1, r2
 8005cd4:	d902      	bls.n	8005cdc <memmove+0x10>
 8005cd6:	4284      	cmp	r4, r0
 8005cd8:	4623      	mov	r3, r4
 8005cda:	d807      	bhi.n	8005cec <memmove+0x20>
 8005cdc:	1e43      	subs	r3, r0, #1
 8005cde:	42a1      	cmp	r1, r4
 8005ce0:	d008      	beq.n	8005cf4 <memmove+0x28>
 8005ce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ce6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005cea:	e7f8      	b.n	8005cde <memmove+0x12>
 8005cec:	4402      	add	r2, r0
 8005cee:	4601      	mov	r1, r0
 8005cf0:	428a      	cmp	r2, r1
 8005cf2:	d100      	bne.n	8005cf6 <memmove+0x2a>
 8005cf4:	bd10      	pop	{r4, pc}
 8005cf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005cfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005cfe:	e7f7      	b.n	8005cf0 <memmove+0x24>

08005d00 <_sbrk_r>:
 8005d00:	b538      	push	{r3, r4, r5, lr}
 8005d02:	4d06      	ldr	r5, [pc, #24]	@ (8005d1c <_sbrk_r+0x1c>)
 8005d04:	2300      	movs	r3, #0
 8005d06:	4604      	mov	r4, r0
 8005d08:	4608      	mov	r0, r1
 8005d0a:	602b      	str	r3, [r5, #0]
 8005d0c:	f7fb f9d8 	bl	80010c0 <_sbrk>
 8005d10:	1c43      	adds	r3, r0, #1
 8005d12:	d102      	bne.n	8005d1a <_sbrk_r+0x1a>
 8005d14:	682b      	ldr	r3, [r5, #0]
 8005d16:	b103      	cbz	r3, 8005d1a <_sbrk_r+0x1a>
 8005d18:	6023      	str	r3, [r4, #0]
 8005d1a:	bd38      	pop	{r3, r4, r5, pc}
 8005d1c:	20040888 	.word	0x20040888

08005d20 <memcpy>:
 8005d20:	440a      	add	r2, r1
 8005d22:	4291      	cmp	r1, r2
 8005d24:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d28:	d100      	bne.n	8005d2c <memcpy+0xc>
 8005d2a:	4770      	bx	lr
 8005d2c:	b510      	push	{r4, lr}
 8005d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d36:	4291      	cmp	r1, r2
 8005d38:	d1f9      	bne.n	8005d2e <memcpy+0xe>
 8005d3a:	bd10      	pop	{r4, pc}

08005d3c <_realloc_r>:
 8005d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d40:	4680      	mov	r8, r0
 8005d42:	4615      	mov	r5, r2
 8005d44:	460c      	mov	r4, r1
 8005d46:	b921      	cbnz	r1, 8005d52 <_realloc_r+0x16>
 8005d48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	f7ff bc4b 	b.w	80055e8 <_malloc_r>
 8005d52:	b92a      	cbnz	r2, 8005d60 <_realloc_r+0x24>
 8005d54:	f7ff fbdc 	bl	8005510 <_free_r>
 8005d58:	2400      	movs	r4, #0
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d60:	f000 f81a 	bl	8005d98 <_malloc_usable_size_r>
 8005d64:	4285      	cmp	r5, r0
 8005d66:	4606      	mov	r6, r0
 8005d68:	d802      	bhi.n	8005d70 <_realloc_r+0x34>
 8005d6a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005d6e:	d8f4      	bhi.n	8005d5a <_realloc_r+0x1e>
 8005d70:	4629      	mov	r1, r5
 8005d72:	4640      	mov	r0, r8
 8005d74:	f7ff fc38 	bl	80055e8 <_malloc_r>
 8005d78:	4607      	mov	r7, r0
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	d0ec      	beq.n	8005d58 <_realloc_r+0x1c>
 8005d7e:	42b5      	cmp	r5, r6
 8005d80:	462a      	mov	r2, r5
 8005d82:	4621      	mov	r1, r4
 8005d84:	bf28      	it	cs
 8005d86:	4632      	movcs	r2, r6
 8005d88:	f7ff ffca 	bl	8005d20 <memcpy>
 8005d8c:	4621      	mov	r1, r4
 8005d8e:	4640      	mov	r0, r8
 8005d90:	f7ff fbbe 	bl	8005510 <_free_r>
 8005d94:	463c      	mov	r4, r7
 8005d96:	e7e0      	b.n	8005d5a <_realloc_r+0x1e>

08005d98 <_malloc_usable_size_r>:
 8005d98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d9c:	1f18      	subs	r0, r3, #4
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	bfbc      	itt	lt
 8005da2:	580b      	ldrlt	r3, [r1, r0]
 8005da4:	18c0      	addlt	r0, r0, r3
 8005da6:	4770      	bx	lr

08005da8 <_init>:
 8005da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005daa:	bf00      	nop
 8005dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dae:	bc08      	pop	{r3}
 8005db0:	469e      	mov	lr, r3
 8005db2:	4770      	bx	lr

08005db4 <_fini>:
 8005db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db6:	bf00      	nop
 8005db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dba:	bc08      	pop	{r3}
 8005dbc:	469e      	mov	lr, r3
 8005dbe:	4770      	bx	lr
