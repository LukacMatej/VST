
cv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b94  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08005d54  08005d54  00006d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e18  08005e18  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e18  08005e18  00006e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e20  08005e20  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e20  08005e20  00006e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e24  08005e24  00006e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20040000  08005e28  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000083c  2004005c  08005e84  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20040898  08005e84  00007898  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122c2  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002765  00000000  00000000  0001934e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  0001bab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac8  00000000  00000000  0001c8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029e0d  00000000  00000000  0001d388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119f2  00000000  00000000  00047195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff2d4  00000000  00000000  00058b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00157e5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f34  00000000  00000000  00157ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0015bdd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2004005c 	.word	0x2004005c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005d3c 	.word	0x08005d3c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20040060 	.word	0x20040060
 80001fc:	08005d3c 	.word	0x08005d3c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_UART_TxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int tx_in_process;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	tx_in_process = 0;
 80005a8:	4b06      	ldr	r3, [pc, #24]	@ (80005c4 <HAL_UART_TxCpltCallback+0x24>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005b4:	4804      	ldr	r0, [pc, #16]	@ (80005c8 <HAL_UART_TxCpltCallback+0x28>)
 80005b6:	f001 fb87 	bl	8001cc8 <HAL_GPIO_WritePin>
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20040744 	.word	0x20040744
 80005c8:	48000400 	.word	0x48000400

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b092      	sub	sp, #72	@ 0x48
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 fdb0 	bl	8001136 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2180      	movs	r1, #128	@ 0x80
 80005da:	4899      	ldr	r0, [pc, #612]	@ (8000840 <main+0x274>)
 80005dc:	f001 fb74 	bl	8001cc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	2180      	movs	r1, #128	@ 0x80
 80005e4:	4896      	ldr	r0, [pc, #600]	@ (8000840 <main+0x274>)
 80005e6:	f001 fb6f 	bl	8001cc8 <HAL_GPIO_WritePin>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 f935 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f000 fa7f 	bl	8000af0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005f2:	f000 fa4b 	bl	8000a8c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005f6:	f000 f983 	bl	8000900 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 80005fa:	f000 f9cd 	bl	8000998 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005fe:	f000 fa17 	bl	8000a30 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_StatusTypeDef err = HAL_UART_Transmit(&hlpuart1,(uint8_t *)"Start programu \r\n",16,100);
 8000602:	2364      	movs	r3, #100	@ 0x64
 8000604:	2210      	movs	r2, #16
 8000606:	498f      	ldr	r1, [pc, #572]	@ (8000844 <main+0x278>)
 8000608:	488f      	ldr	r0, [pc, #572]	@ (8000848 <main+0x27c>)
 800060a:	f003 f9e7 	bl	80039dc <HAL_UART_Transmit>
 800060e:	4603      	mov	r3, r0
 8000610:	77fb      	strb	r3, [r7, #31]
  if (err != HAL_OK){
 8000612:	7ffb      	ldrb	r3, [r7, #31]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <main+0x50>
	  Error_Handler();
 8000618:	f000 fb0e 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t tickLedB = HAL_GetTick();
 800061c:	f000 fdf4 	bl	8001208 <HAL_GetTick>
 8000620:	6478      	str	r0, [r7, #68]	@ 0x44
  uint32_t tickLedR = HAL_GetTick();
 8000622:	f000 fdf1 	bl	8001208 <HAL_GetTick>
 8000626:	6438      	str	r0, [r7, #64]	@ 0x40
  bool button_state = false;
 8000628:	2300      	movs	r3, #0
 800062a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  bool RedBlinking = true;
 800062e:	2301      	movs	r3, #1
 8000630:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  uint32_t tickButton = HAL_GetTick();
 8000634:	f000 fde8 	bl	8001208 <HAL_GetTick>
 8000638:	63b8      	str	r0, [r7, #56]	@ 0x38
  uint32_t tickButtonPress= 0;
 800063a:	2300      	movs	r3, #0
 800063c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tick = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	61bb      	str	r3, [r7, #24]
  uint8_t state = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  bool stav4 = false;
 8000648:	2300      	movs	r3, #0
 800064a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  uint32_t BlueLDPeriod=250;
 800064e:	23fa      	movs	r3, #250	@ 0xfa
 8000650:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t RedLDPeriod=500;
 8000652:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000656:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t ButtonPressTime;

  uint32_t cntr = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	623b      	str	r3, [r7, #32]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf(str, "Run %08lu\r\n", cntr++);
 800065c:	6a3b      	ldr	r3, [r7, #32]
 800065e:	1c5a      	adds	r2, r3, #1
 8000660:	623a      	str	r2, [r7, #32]
 8000662:	4638      	mov	r0, r7
 8000664:	461a      	mov	r2, r3
 8000666:	4979      	ldr	r1, [pc, #484]	@ (800084c <main+0x280>)
 8000668:	f004 fec8 	bl	80053fc <siprintf>
	  HAL_StatusTypeDef err = HAL_UART_Transmit(&hlpuart1, (uint8_t *)str, strlen(str), 100);
 800066c:	463b      	mov	r3, r7
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff fdc6 	bl	8000200 <strlen>
 8000674:	4603      	mov	r3, r0
 8000676:	b29a      	uxth	r2, r3
 8000678:	4639      	mov	r1, r7
 800067a:	2364      	movs	r3, #100	@ 0x64
 800067c:	4872      	ldr	r0, [pc, #456]	@ (8000848 <main+0x27c>)
 800067e:	f003 f9ad 	bl	80039dc <HAL_UART_Transmit>
 8000682:	4603      	mov	r3, r0
 8000684:	75fb      	strb	r3, [r7, #23]
	  if (err != HAL_OK){
 8000686:	7dfb      	ldrb	r3, [r7, #23]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <main+0xc4>
		  Error_Handler();
 800068c:	f000 fad4 	bl	8000c38 <Error_Handler>
	  }
	  tick = HAL_GetTick();
 8000690:	f000 fdba 	bl	8001208 <HAL_GetTick>
 8000694:	61b8      	str	r0, [r7, #24]
	  switch (state){
 8000696:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800069a:	2b02      	cmp	r3, #2
 800069c:	d015      	beq.n	80006ca <main+0xfe>
 800069e:	2b02      	cmp	r3, #2
 80006a0:	dc1a      	bgt.n	80006d8 <main+0x10c>
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d002      	beq.n	80006ac <main+0xe0>
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d009      	beq.n	80006be <main+0xf2>
 80006aa:	e015      	b.n	80006d8 <main+0x10c>
	  case 0:
		  BlueLDPeriod = 250;
 80006ac:	23fa      	movs	r3, #250	@ 0xfa
 80006ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
		  RedLDPeriod = 500;
 80006b0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80006b4:	62bb      	str	r3, [r7, #40]	@ 0x28
		  stav4 = false;
 80006b6:	2300      	movs	r3, #0
 80006b8:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
		  break;
 80006bc:	e00c      	b.n	80006d8 <main+0x10c>
	  case 1:
		  BlueLDPeriod = 100;
 80006be:	2364      	movs	r3, #100	@ 0x64
 80006c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		  RedBlinking = false;
 80006c2:	2300      	movs	r3, #0
 80006c4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		  break;
 80006c8:	e006      	b.n	80006d8 <main+0x10c>
	  case 2:
		  stav4 = true;
 80006ca:	2301      	movs	r3, #1
 80006cc:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
		  BlueLDPeriod = 800;
 80006d0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80006d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		  break;
 80006d6:	bf00      	nop
	  }
	  if (tick-tickLedB >= (BlueLDPeriod/2) && !stav4)  {
 80006d8:	69ba      	ldr	r2, [r7, #24]
 80006da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80006dc:	1ad2      	subs	r2, r2, r3
 80006de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006e0:	085b      	lsrs	r3, r3, #1
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d30f      	bcc.n	8000706 <main+0x13a>
 80006e6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80006ea:	f083 0301 	eor.w	r3, r3, #1
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d008      	beq.n	8000706 <main+0x13a>
		  tickLedB += BlueLDPeriod/2;
 80006f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006f6:	085b      	lsrs	r3, r3, #1
 80006f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80006fa:	4413      	add	r3, r2
 80006fc:	647b      	str	r3, [r7, #68]	@ 0x44
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006fe:	2180      	movs	r1, #128	@ 0x80
 8000700:	484f      	ldr	r0, [pc, #316]	@ (8000840 <main+0x274>)
 8000702:	f001 faf9 	bl	8001cf8 <HAL_GPIO_TogglePin>
	  }
	  if (tick-tickLedR >= (RedLDPeriod/2) && RedBlinking)  {
 8000706:	69ba      	ldr	r2, [r7, #24]
 8000708:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800070a:	1ad2      	subs	r2, r2, r3
 800070c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800070e:	085b      	lsrs	r3, r3, #1
 8000710:	429a      	cmp	r2, r3
 8000712:	d30d      	bcc.n	8000730 <main+0x164>
 8000714:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000718:	2b00      	cmp	r3, #0
 800071a:	d009      	beq.n	8000730 <main+0x164>
		  tickLedR += RedLDPeriod/2;
 800071c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800071e:	085b      	lsrs	r3, r3, #1
 8000720:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000722:	4413      	add	r3, r2
 8000724:	643b      	str	r3, [r7, #64]	@ 0x40
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000726:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800072a:	4845      	ldr	r0, [pc, #276]	@ (8000840 <main+0x274>)
 800072c:	f001 fae4 	bl	8001cf8 <HAL_GPIO_TogglePin>
	  }
	  if (stav4){
 8000730:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8000734:	2b00      	cmp	r3, #0
 8000736:	d027      	beq.n	8000788 <main+0x1bc>
		  if (tick%500 < 100){
 8000738:	69ba      	ldr	r2, [r7, #24]
 800073a:	4b45      	ldr	r3, [pc, #276]	@ (8000850 <main+0x284>)
 800073c:	fba3 1302 	umull	r1, r3, r3, r2
 8000740:	095b      	lsrs	r3, r3, #5
 8000742:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000746:	fb01 f303 	mul.w	r3, r1, r3
 800074a:	1ad3      	subs	r3, r2, r3
 800074c:	2b63      	cmp	r3, #99	@ 0x63
 800074e:	d805      	bhi.n	800075c <main+0x190>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	2180      	movs	r1, #128	@ 0x80
 8000754:	483a      	ldr	r0, [pc, #232]	@ (8000840 <main+0x274>)
 8000756:	f001 fab7 	bl	8001cc8 <HAL_GPIO_WritePin>
 800075a:	e004      	b.n	8000766 <main+0x19a>
		  }else {
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2180      	movs	r1, #128	@ 0x80
 8000760:	4837      	ldr	r0, [pc, #220]	@ (8000840 <main+0x274>)
 8000762:	f001 fab1 	bl	8001cc8 <HAL_GPIO_WritePin>
		  }
		  if (tick-tickLedR >= (ButtonPressTime/2))  {
 8000766:	69ba      	ldr	r2, [r7, #24]
 8000768:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800076a:	1ad2      	subs	r2, r2, r3
 800076c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800076e:	085b      	lsrs	r3, r3, #1
 8000770:	429a      	cmp	r2, r3
 8000772:	d309      	bcc.n	8000788 <main+0x1bc>
			  tickLedR += ButtonPressTime/2;
 8000774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000776:	085b      	lsrs	r3, r3, #1
 8000778:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800077a:	4413      	add	r3, r2
 800077c:	643b      	str	r3, [r7, #64]	@ 0x40
			  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800077e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000782:	482f      	ldr	r0, [pc, #188]	@ (8000840 <main+0x274>)
 8000784:	f001 fab8 	bl	8001cf8 <HAL_GPIO_TogglePin>
		  }
	  }

	  bool button_now = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000788:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800078c:	4831      	ldr	r0, [pc, #196]	@ (8000854 <main+0x288>)
 800078e:	f001 fa83 	bl	8001c98 <HAL_GPIO_ReadPin>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	bf14      	ite	ne
 8000798:	2301      	movne	r3, #1
 800079a:	2300      	moveq	r3, #0
 800079c:	75bb      	strb	r3, [r7, #22]
	  if (button_state){
 800079e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d022      	beq.n	80007ec <main+0x220>
		  if (button_now)  {
 80007a6:	7dbb      	ldrb	r3, [r7, #22]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d002      	beq.n	80007b2 <main+0x1e6>
			  tickButton = tick;
 80007ac:	69bb      	ldr	r3, [r7, #24]
 80007ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80007b0:	e754      	b.n	800065c <main+0x90>
		  }  else  { // tlacitko uvolneno
			  if (tick-tickButton > 20) { // platne pusteni tlacitka
 80007b2:	69ba      	ldr	r2, [r7, #24]
 80007b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	2b14      	cmp	r3, #20
 80007ba:	f67f af4f 	bls.w	800065c <main+0x90>
				  button_state = false;
 80007be:	2300      	movs	r3, #0
 80007c0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				  ButtonPressTime = tick-tickButtonPress;
 80007c4:	69ba      	ldr	r2, [r7, #24]
 80007c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	627b      	str	r3, [r7, #36]	@ 0x24
				  if (tick-tickButtonPress >= 1000 && state == 1){
 80007cc:	69ba      	ldr	r2, [r7, #24]
 80007ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80007d6:	f4ff af41 	bcc.w	800065c <main+0x90>
 80007da:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80007de:	2b01      	cmp	r3, #1
 80007e0:	f47f af3c 	bne.w	800065c <main+0x90>
					  state = 2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80007ea:	e737      	b.n	800065c <main+0x90>
				  }
			  }
		  }
	  } else {
		  if (!button_now)  {
 80007ec:	7dbb      	ldrb	r3, [r7, #22]
 80007ee:	f083 0301 	eor.w	r3, r3, #1
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d002      	beq.n	80007fe <main+0x232>
			  tickButton = tick;
 80007f8:	69bb      	ldr	r3, [r7, #24]
 80007fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80007fc:	e72e      	b.n	800065c <main+0x90>
		  } else { // tlacitko stisknuto
			  if (tick-tickButton > 20) { // platne stisknuti tlacitka
 80007fe:	69ba      	ldr	r2, [r7, #24]
 8000800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000802:	1ad3      	subs	r3, r2, r3
 8000804:	2b14      	cmp	r3, #20
 8000806:	f67f af29 	bls.w	800065c <main+0x90>
				  button_state = true;
 800080a:	2301      	movs	r3, #1
 800080c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				  tickButtonPress = tick;
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	637b      	str	r3, [r7, #52]	@ 0x34
				  if (state == 0){
 8000814:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000818:	2b00      	cmp	r3, #0
 800081a:	d102      	bne.n	8000822 <main+0x256>
					  state = 1;
 800081c:	2301      	movs	r3, #1
 800081e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
				  }
				  if (!RedBlinking){
 8000822:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000826:	f083 0301 	eor.w	r3, r3, #1
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2b00      	cmp	r3, #0
 800082e:	f43f af15 	beq.w	800065c <main+0x90>
					  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000832:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000836:	4802      	ldr	r0, [pc, #8]	@ (8000840 <main+0x274>)
 8000838:	f001 fa5e 	bl	8001cf8 <HAL_GPIO_TogglePin>
  {
 800083c:	e70e      	b.n	800065c <main+0x90>
 800083e:	bf00      	nop
 8000840:	48000400 	.word	0x48000400
 8000844:	08005d54 	.word	0x08005d54
 8000848:	20040078 	.word	0x20040078
 800084c:	08005d68 	.word	0x08005d68
 8000850:	10624dd3 	.word	0x10624dd3
 8000854:	48000800 	.word	0x48000800

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b096      	sub	sp, #88	@ 0x58
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	2244      	movs	r2, #68	@ 0x44
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f004 fde8 	bl	800543c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	463b      	mov	r3, r7
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800087a:	2000      	movs	r0, #0
 800087c:	f001 fbaa 	bl	8001fd4 <HAL_PWREx_ControlVoltageScaling>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000886:	f000 f9d7 	bl	8000c38 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800088a:	2322      	movs	r3, #34	@ 0x22
 800088c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800088e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000892:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000894:	2301      	movs	r3, #1
 8000896:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000898:	2340      	movs	r3, #64	@ 0x40
 800089a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089c:	2302      	movs	r3, #2
 800089e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008a0:	2302      	movs	r3, #2
 80008a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80008a4:	2302      	movs	r3, #2
 80008a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80008a8:	231e      	movs	r3, #30
 80008aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ac:	2302      	movs	r3, #2
 80008ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4618      	mov	r0, r3
 80008be:	f001 fc4d 	bl	800215c <HAL_RCC_OscConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80008c8:	f000 f9b6 	bl	8000c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008cc:	230f      	movs	r3, #15
 80008ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d0:	2303      	movs	r3, #3
 80008d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008e2:	463b      	mov	r3, r7
 80008e4:	2105      	movs	r1, #5
 80008e6:	4618      	mov	r0, r3
 80008e8:	f002 f852 	bl	8002990 <HAL_RCC_ClockConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008f2:	f000 f9a1 	bl	8000c38 <Error_Handler>
  }
}
 80008f6:	bf00      	nop
 80008f8:	3758      	adds	r7, #88	@ 0x58
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000904:	4b22      	ldr	r3, [pc, #136]	@ (8000990 <MX_LPUART1_UART_Init+0x90>)
 8000906:	4a23      	ldr	r2, [pc, #140]	@ (8000994 <MX_LPUART1_UART_Init+0x94>)
 8000908:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800090a:	4b21      	ldr	r3, [pc, #132]	@ (8000990 <MX_LPUART1_UART_Init+0x90>)
 800090c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000910:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b1f      	ldr	r3, [pc, #124]	@ (8000990 <MX_LPUART1_UART_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b1d      	ldr	r3, [pc, #116]	@ (8000990 <MX_LPUART1_UART_Init+0x90>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800091e:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <MX_LPUART1_UART_Init+0x90>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b1a      	ldr	r3, [pc, #104]	@ (8000990 <MX_LPUART1_UART_Init+0x90>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <MX_LPUART1_UART_Init+0x90>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000930:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <MX_LPUART1_UART_Init+0x90>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000936:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <MX_LPUART1_UART_Init+0x90>)
 8000938:	2200      	movs	r2, #0
 800093a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800093c:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <MX_LPUART1_UART_Init+0x90>)
 800093e:	2200      	movs	r2, #0
 8000940:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000942:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <MX_LPUART1_UART_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000948:	4811      	ldr	r0, [pc, #68]	@ (8000990 <MX_LPUART1_UART_Init+0x90>)
 800094a:	f002 fff7 	bl	800393c <HAL_UART_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000954:	f000 f970 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000958:	2100      	movs	r1, #0
 800095a:	480d      	ldr	r0, [pc, #52]	@ (8000990 <MX_LPUART1_UART_Init+0x90>)
 800095c:	f004 f9d7 	bl	8004d0e <HAL_UARTEx_SetTxFifoThreshold>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000966:	f000 f967 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800096a:	2100      	movs	r1, #0
 800096c:	4808      	ldr	r0, [pc, #32]	@ (8000990 <MX_LPUART1_UART_Init+0x90>)
 800096e:	f004 fa0c 	bl	8004d8a <HAL_UARTEx_SetRxFifoThreshold>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000978:	f000 f95e 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800097c:	4804      	ldr	r0, [pc, #16]	@ (8000990 <MX_LPUART1_UART_Init+0x90>)
 800097e:	f004 f98d 	bl	8004c9c <HAL_UARTEx_DisableFifoMode>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000988:	f000 f956 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20040078 	.word	0x20040078
 8000994:	40008000 	.word	0x40008000

08000998 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800099c:	4b22      	ldr	r3, [pc, #136]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 800099e:	4a23      	ldr	r2, [pc, #140]	@ (8000a2c <MX_USART3_UART_Init+0x94>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009a2:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d4:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009da:	4b13      	ldr	r3, [pc, #76]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009e0:	4811      	ldr	r0, [pc, #68]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 80009e2:	f002 ffab 	bl	800393c <HAL_UART_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009ec:	f000 f924 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f0:	2100      	movs	r1, #0
 80009f2:	480d      	ldr	r0, [pc, #52]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 80009f4:	f004 f98b 	bl	8004d0e <HAL_UARTEx_SetTxFifoThreshold>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009fe:	f000 f91b 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a02:	2100      	movs	r1, #0
 8000a04:	4808      	ldr	r0, [pc, #32]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 8000a06:	f004 f9c0 	bl	8004d8a <HAL_UARTEx_SetRxFifoThreshold>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a10:	f000 f912 	bl	8000c38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a14:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 8000a16:	f004 f941 	bl	8004c9c <HAL_UARTEx_DisableFifoMode>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a20:	f000 f90a 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	2004010c 	.word	0x2004010c
 8000a2c:	40004800 	.word	0x40004800

08000a30 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a34:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a36:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000a3a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3e:	2206      	movs	r2, #6
 8000a40:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a42:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a44:	2202      	movs	r2, #2
 8000a46:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a60:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a66:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a72:	4805      	ldr	r0, [pc, #20]	@ (8000a88 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a74:	f001 f95a 	bl	8001d2c <HAL_PCD_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a7e:	f000 f8db 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20040260 	.word	0x20040260

08000a8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a92:	4b16      	ldr	r3, [pc, #88]	@ (8000aec <MX_DMA_Init+0x60>)
 8000a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a96:	4a15      	ldr	r2, [pc, #84]	@ (8000aec <MX_DMA_Init+0x60>)
 8000a98:	f043 0304 	orr.w	r3, r3, #4
 8000a9c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a9e:	4b13      	ldr	r3, [pc, #76]	@ (8000aec <MX_DMA_Init+0x60>)
 8000aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000aa2:	f003 0304 	and.w	r3, r3, #4
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aaa:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <MX_DMA_Init+0x60>)
 8000aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000aae:	4a0f      	ldr	r2, [pc, #60]	@ (8000aec <MX_DMA_Init+0x60>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8000aec <MX_DMA_Init+0x60>)
 8000ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	200b      	movs	r0, #11
 8000ac8:	f000 fca9 	bl	800141e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000acc:	200b      	movs	r0, #11
 8000ace:	f000 fcc2 	bl	8001456 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	200c      	movs	r0, #12
 8000ad8:	f000 fca1 	bl	800141e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000adc:	200c      	movs	r0, #12
 8000ade:	f000 fcba 	bl	8001456 <HAL_NVIC_EnableIRQ>

}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40021000 	.word	0x40021000

08000af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	@ 0x30
 8000af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b06:	4b48      	ldr	r3, [pc, #288]	@ (8000c28 <MX_GPIO_Init+0x138>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0a:	4a47      	ldr	r2, [pc, #284]	@ (8000c28 <MX_GPIO_Init+0x138>)
 8000b0c:	f043 0304 	orr.w	r3, r3, #4
 8000b10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b12:	4b45      	ldr	r3, [pc, #276]	@ (8000c28 <MX_GPIO_Init+0x138>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	61bb      	str	r3, [r7, #24]
 8000b1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1e:	4b42      	ldr	r3, [pc, #264]	@ (8000c28 <MX_GPIO_Init+0x138>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b22:	4a41      	ldr	r2, [pc, #260]	@ (8000c28 <MX_GPIO_Init+0x138>)
 8000b24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b2a:	4b3f      	ldr	r3, [pc, #252]	@ (8000c28 <MX_GPIO_Init+0x138>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b36:	4b3c      	ldr	r3, [pc, #240]	@ (8000c28 <MX_GPIO_Init+0x138>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3a:	4a3b      	ldr	r2, [pc, #236]	@ (8000c28 <MX_GPIO_Init+0x138>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b42:	4b39      	ldr	r3, [pc, #228]	@ (8000c28 <MX_GPIO_Init+0x138>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4e:	4b36      	ldr	r3, [pc, #216]	@ (8000c28 <MX_GPIO_Init+0x138>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b52:	4a35      	ldr	r2, [pc, #212]	@ (8000c28 <MX_GPIO_Init+0x138>)
 8000b54:	f043 0308 	orr.w	r3, r3, #8
 8000b58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b5a:	4b33      	ldr	r3, [pc, #204]	@ (8000c28 <MX_GPIO_Init+0x138>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5e:	f003 0308 	and.w	r3, r3, #8
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b66:	4b30      	ldr	r3, [pc, #192]	@ (8000c28 <MX_GPIO_Init+0x138>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6a:	4a2f      	ldr	r2, [pc, #188]	@ (8000c28 <MX_GPIO_Init+0x138>)
 8000b6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b72:	4b2d      	ldr	r3, [pc, #180]	@ (8000c28 <MX_GPIO_Init+0x138>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000b7e:	f001 fadd 	bl	800213c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	4b29      	ldr	r3, [pc, #164]	@ (8000c28 <MX_GPIO_Init+0x138>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b86:	4a28      	ldr	r2, [pc, #160]	@ (8000c28 <MX_GPIO_Init+0x138>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b8e:	4b26      	ldr	r3, [pc, #152]	@ (8000c28 <MX_GPIO_Init+0x138>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000ba0:	4822      	ldr	r0, [pc, #136]	@ (8000c2c <MX_GPIO_Init+0x13c>)
 8000ba2:	f001 f891 	bl	8001cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2140      	movs	r1, #64	@ 0x40
 8000baa:	4821      	ldr	r0, [pc, #132]	@ (8000c30 <MX_GPIO_Init+0x140>)
 8000bac:	f001 f88c 	bl	8001cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bb6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	481b      	ldr	r0, [pc, #108]	@ (8000c34 <MX_GPIO_Init+0x144>)
 8000bc8:	f000 fed4 	bl	8001974 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000bcc:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	4811      	ldr	r0, [pc, #68]	@ (8000c2c <MX_GPIO_Init+0x13c>)
 8000be6:	f000 fec5 	bl	8001974 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bea:	2320      	movs	r3, #32
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480c      	ldr	r0, [pc, #48]	@ (8000c30 <MX_GPIO_Init+0x140>)
 8000bfe:	f000 feb9 	bl	8001974 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c02:	2340      	movs	r3, #64	@ 0x40
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 031c 	add.w	r3, r7, #28
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <MX_GPIO_Init+0x140>)
 8000c1a:	f000 feab 	bl	8001974 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c1e:	bf00      	nop
 8000c20:	3730      	adds	r7, #48	@ 0x30
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	48000400 	.word	0x48000400
 8000c30:	48001800 	.word	0x48001800
 8000c34:	48000800 	.word	0x48000800

08000c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
}
 8000c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <Error_Handler+0x8>

08000c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <HAL_MspInit+0x44>)
 8000c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c88 <HAL_MspInit+0x44>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c56:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <HAL_MspInit+0x44>)
 8000c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c62:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <HAL_MspInit+0x44>)
 8000c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c66:	4a08      	ldr	r2, [pc, #32]	@ (8000c88 <HAL_MspInit+0x44>)
 8000c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c6e:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <HAL_MspInit+0x44>)
 8000c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40021000 	.word	0x40021000

08000c8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b0b0      	sub	sp, #192	@ 0xc0
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca4:	f107 0318 	add.w	r3, r7, #24
 8000ca8:	2294      	movs	r2, #148	@ 0x94
 8000caa:	2100      	movs	r1, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f004 fbc5 	bl	800543c <memset>
  if(huart->Instance==LPUART1)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a71      	ldr	r2, [pc, #452]	@ (8000e7c <HAL_UART_MspInit+0x1f0>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	f040 809a 	bne.w	8000df2 <HAL_UART_MspInit+0x166>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000cbe:	2320      	movs	r3, #32
 8000cc0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc6:	f107 0318 	add.w	r3, r7, #24
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f002 f91e 	bl	8002f0c <HAL_RCCEx_PeriphCLKConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cd6:	f7ff ffaf 	bl	8000c38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000cda:	4b69      	ldr	r3, [pc, #420]	@ (8000e80 <HAL_UART_MspInit+0x1f4>)
 8000cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000cde:	4a68      	ldr	r2, [pc, #416]	@ (8000e80 <HAL_UART_MspInit+0x1f4>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000ce6:	4b66      	ldr	r3, [pc, #408]	@ (8000e80 <HAL_UART_MspInit+0x1f4>)
 8000ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cf2:	4b63      	ldr	r3, [pc, #396]	@ (8000e80 <HAL_UART_MspInit+0x1f4>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf6:	4a62      	ldr	r2, [pc, #392]	@ (8000e80 <HAL_UART_MspInit+0x1f4>)
 8000cf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cfe:	4b60      	ldr	r3, [pc, #384]	@ (8000e80 <HAL_UART_MspInit+0x1f4>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000d0a:	f001 fa17 	bl	800213c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000d0e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000d12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d28:	2308      	movs	r3, #8
 8000d2a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d2e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d32:	4619      	mov	r1, r3
 8000d34:	4853      	ldr	r0, [pc, #332]	@ (8000e84 <HAL_UART_MspInit+0x1f8>)
 8000d36:	f000 fe1d 	bl	8001974 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000d3a:	4b53      	ldr	r3, [pc, #332]	@ (8000e88 <HAL_UART_MspInit+0x1fc>)
 8000d3c:	4a53      	ldr	r2, [pc, #332]	@ (8000e8c <HAL_UART_MspInit+0x200>)
 8000d3e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000d40:	4b51      	ldr	r3, [pc, #324]	@ (8000e88 <HAL_UART_MspInit+0x1fc>)
 8000d42:	2222      	movs	r2, #34	@ 0x22
 8000d44:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d46:	4b50      	ldr	r3, [pc, #320]	@ (8000e88 <HAL_UART_MspInit+0x1fc>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d4c:	4b4e      	ldr	r3, [pc, #312]	@ (8000e88 <HAL_UART_MspInit+0x1fc>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d52:	4b4d      	ldr	r3, [pc, #308]	@ (8000e88 <HAL_UART_MspInit+0x1fc>)
 8000d54:	2280      	movs	r2, #128	@ 0x80
 8000d56:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d58:	4b4b      	ldr	r3, [pc, #300]	@ (8000e88 <HAL_UART_MspInit+0x1fc>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8000e88 <HAL_UART_MspInit+0x1fc>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000d64:	4b48      	ldr	r3, [pc, #288]	@ (8000e88 <HAL_UART_MspInit+0x1fc>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d6a:	4b47      	ldr	r3, [pc, #284]	@ (8000e88 <HAL_UART_MspInit+0x1fc>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000d70:	4845      	ldr	r0, [pc, #276]	@ (8000e88 <HAL_UART_MspInit+0x1fc>)
 8000d72:	f000 fb8b 	bl	800148c <HAL_DMA_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8000d7c:	f7ff ff5c 	bl	8000c38 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a41      	ldr	r2, [pc, #260]	@ (8000e88 <HAL_UART_MspInit+0x1fc>)
 8000d84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000d88:	4a3f      	ldr	r2, [pc, #252]	@ (8000e88 <HAL_UART_MspInit+0x1fc>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000d8e:	4b40      	ldr	r3, [pc, #256]	@ (8000e90 <HAL_UART_MspInit+0x204>)
 8000d90:	4a40      	ldr	r2, [pc, #256]	@ (8000e94 <HAL_UART_MspInit+0x208>)
 8000d92:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000d94:	4b3e      	ldr	r3, [pc, #248]	@ (8000e90 <HAL_UART_MspInit+0x204>)
 8000d96:	2223      	movs	r2, #35	@ 0x23
 8000d98:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d9a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e90 <HAL_UART_MspInit+0x204>)
 8000d9c:	2210      	movs	r2, #16
 8000d9e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da0:	4b3b      	ldr	r3, [pc, #236]	@ (8000e90 <HAL_UART_MspInit+0x204>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000da6:	4b3a      	ldr	r3, [pc, #232]	@ (8000e90 <HAL_UART_MspInit+0x204>)
 8000da8:	2280      	movs	r2, #128	@ 0x80
 8000daa:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dac:	4b38      	ldr	r3, [pc, #224]	@ (8000e90 <HAL_UART_MspInit+0x204>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000db2:	4b37      	ldr	r3, [pc, #220]	@ (8000e90 <HAL_UART_MspInit+0x204>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000db8:	4b35      	ldr	r3, [pc, #212]	@ (8000e90 <HAL_UART_MspInit+0x204>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dbe:	4b34      	ldr	r3, [pc, #208]	@ (8000e90 <HAL_UART_MspInit+0x204>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000dc4:	4832      	ldr	r0, [pc, #200]	@ (8000e90 <HAL_UART_MspInit+0x204>)
 8000dc6:	f000 fb61 	bl	800148c <HAL_DMA_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <HAL_UART_MspInit+0x148>
    {
      Error_Handler();
 8000dd0:	f7ff ff32 	bl	8000c38 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a2e      	ldr	r2, [pc, #184]	@ (8000e90 <HAL_UART_MspInit+0x204>)
 8000dd8:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000dda:	4a2d      	ldr	r2, [pc, #180]	@ (8000e90 <HAL_UART_MspInit+0x204>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2100      	movs	r1, #0
 8000de4:	2046      	movs	r0, #70	@ 0x46
 8000de6:	f000 fb1a 	bl	800141e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000dea:	2046      	movs	r0, #70	@ 0x46
 8000dec:	f000 fb33 	bl	8001456 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000df0:	e040      	b.n	8000e74 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a28      	ldr	r2, [pc, #160]	@ (8000e98 <HAL_UART_MspInit+0x20c>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d13b      	bne.n	8000e74 <HAL_UART_MspInit+0x1e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e04:	f107 0318 	add.w	r3, r7, #24
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f002 f87f 	bl	8002f0c <HAL_RCCEx_PeriphCLKConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8000e14:	f7ff ff10 	bl	8000c38 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e18:	4b19      	ldr	r3, [pc, #100]	@ (8000e80 <HAL_UART_MspInit+0x1f4>)
 8000e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e1c:	4a18      	ldr	r2, [pc, #96]	@ (8000e80 <HAL_UART_MspInit+0x1f4>)
 8000e1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e22:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e24:	4b16      	ldr	r3, [pc, #88]	@ (8000e80 <HAL_UART_MspInit+0x1f4>)
 8000e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e30:	4b13      	ldr	r3, [pc, #76]	@ (8000e80 <HAL_UART_MspInit+0x1f4>)
 8000e32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e34:	4a12      	ldr	r2, [pc, #72]	@ (8000e80 <HAL_UART_MspInit+0x1f4>)
 8000e36:	f043 0308 	orr.w	r3, r3, #8
 8000e3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e3c:	4b10      	ldr	r3, [pc, #64]	@ (8000e80 <HAL_UART_MspInit+0x1f4>)
 8000e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e40:	f003 0308 	and.w	r3, r3, #8
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e48:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e62:	2307      	movs	r3, #7
 8000e64:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e68:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	480b      	ldr	r0, [pc, #44]	@ (8000e9c <HAL_UART_MspInit+0x210>)
 8000e70:	f000 fd80 	bl	8001974 <HAL_GPIO_Init>
}
 8000e74:	bf00      	nop
 8000e76:	37c0      	adds	r7, #192	@ 0xc0
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40008000 	.word	0x40008000
 8000e80:	40021000 	.word	0x40021000
 8000e84:	48001800 	.word	0x48001800
 8000e88:	200401a0 	.word	0x200401a0
 8000e8c:	40020008 	.word	0x40020008
 8000e90:	20040200 	.word	0x20040200
 8000e94:	4002001c 	.word	0x4002001c
 8000e98:	40004800 	.word	0x40004800
 8000e9c:	48000c00 	.word	0x48000c00

08000ea0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b0b0      	sub	sp, #192	@ 0xc0
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eb8:	f107 0318 	add.w	r3, r7, #24
 8000ebc:	2294      	movs	r2, #148	@ 0x94
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f004 fabb 	bl	800543c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ece:	d16c      	bne.n	8000faa <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000ed0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ed4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000edc:	f107 0318 	add.w	r3, r7, #24
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f002 f813 	bl	8002f0c <HAL_RCCEx_PeriphCLKConfig>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000eec:	f7ff fea4 	bl	8000c38 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef0:	4b30      	ldr	r3, [pc, #192]	@ (8000fb4 <HAL_PCD_MspInit+0x114>)
 8000ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef4:	4a2f      	ldr	r2, [pc, #188]	@ (8000fb4 <HAL_PCD_MspInit+0x114>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000efc:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb4 <HAL_PCD_MspInit+0x114>)
 8000efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	617b      	str	r3, [r7, #20]
 8000f06:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f08:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f22:	230a      	movs	r3, #10
 8000f24:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f28:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f32:	f000 fd1f 	bl	8001974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f54:	f000 fd0e 	bl	8001974 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f58:	4b16      	ldr	r3, [pc, #88]	@ (8000fb4 <HAL_PCD_MspInit+0x114>)
 8000f5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5c:	4a15      	ldr	r2, [pc, #84]	@ (8000fb4 <HAL_PCD_MspInit+0x114>)
 8000f5e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f64:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <HAL_PCD_MspInit+0x114>)
 8000f66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f70:	4b10      	ldr	r3, [pc, #64]	@ (8000fb4 <HAL_PCD_MspInit+0x114>)
 8000f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d114      	bne.n	8000fa6 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb4 <HAL_PCD_MspInit+0x114>)
 8000f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f80:	4a0c      	ldr	r2, [pc, #48]	@ (8000fb4 <HAL_PCD_MspInit+0x114>)
 8000f82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f86:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f88:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb4 <HAL_PCD_MspInit+0x114>)
 8000f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000f94:	f001 f8c2 	bl	800211c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f98:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <HAL_PCD_MspInit+0x114>)
 8000f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f9c:	4a05      	ldr	r2, [pc, #20]	@ (8000fb4 <HAL_PCD_MspInit+0x114>)
 8000f9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000fa2:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000fa4:	e001      	b.n	8000faa <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 8000fa6:	f001 f8b9 	bl	800211c <HAL_PWREx_EnableVddUSB>
}
 8000faa:	bf00      	nop
 8000fac:	37c0      	adds	r7, #192	@ 0xc0
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <NMI_Handler+0x4>

08000fc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <HardFault_Handler+0x4>

08000fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <MemManage_Handler+0x4>

08000fd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fe0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800100e:	f000 f8e7 	bl	80011e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800101c:	4802      	ldr	r0, [pc, #8]	@ (8001028 <DMA1_Channel1_IRQHandler+0x10>)
 800101e:	f000 fb98 	bl	8001752 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200401a0 	.word	0x200401a0

0800102c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001030:	4802      	ldr	r0, [pc, #8]	@ (800103c <DMA1_Channel2_IRQHandler+0x10>)
 8001032:	f000 fb8e 	bl	8001752 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20040200 	.word	0x20040200

08001040 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001044:	4802      	ldr	r0, [pc, #8]	@ (8001050 <LPUART1_IRQHandler+0x10>)
 8001046:	f002 fd57 	bl	8003af8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20040078 	.word	0x20040078

08001054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800105c:	4a14      	ldr	r2, [pc, #80]	@ (80010b0 <_sbrk+0x5c>)
 800105e:	4b15      	ldr	r3, [pc, #84]	@ (80010b4 <_sbrk+0x60>)
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001068:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <_sbrk+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d102      	bne.n	8001076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001070:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <_sbrk+0x64>)
 8001072:	4a12      	ldr	r2, [pc, #72]	@ (80010bc <_sbrk+0x68>)
 8001074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001076:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <_sbrk+0x64>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	429a      	cmp	r2, r3
 8001082:	d207      	bcs.n	8001094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001084:	f004 f9e2 	bl	800544c <__errno>
 8001088:	4603      	mov	r3, r0
 800108a:	220c      	movs	r2, #12
 800108c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
 8001092:	e009      	b.n	80010a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001094:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <_sbrk+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800109a:	4b07      	ldr	r3, [pc, #28]	@ (80010b8 <_sbrk+0x64>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	4a05      	ldr	r2, [pc, #20]	@ (80010b8 <_sbrk+0x64>)
 80010a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010a6:	68fb      	ldr	r3, [r7, #12]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200a0000 	.word	0x200a0000
 80010b4:	00000400 	.word	0x00000400
 80010b8:	20040748 	.word	0x20040748
 80010bc:	20040898 	.word	0x20040898

080010c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010c4:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <SystemInit+0x20>)
 80010c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ca:	4a05      	ldr	r2, [pc, #20]	@ (80010e0 <SystemInit+0x20>)
 80010cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800111c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010e8:	f7ff ffea 	bl	80010c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010ec:	480c      	ldr	r0, [pc, #48]	@ (8001120 <LoopForever+0x6>)
  ldr r1, =_edata
 80010ee:	490d      	ldr	r1, [pc, #52]	@ (8001124 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001128 <LoopForever+0xe>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f4:	e002      	b.n	80010fc <LoopCopyDataInit>

080010f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fa:	3304      	adds	r3, #4

080010fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001100:	d3f9      	bcc.n	80010f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001102:	4a0a      	ldr	r2, [pc, #40]	@ (800112c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001104:	4c0a      	ldr	r4, [pc, #40]	@ (8001130 <LoopForever+0x16>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001108:	e001      	b.n	800110e <LoopFillZerobss>

0800110a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800110c:	3204      	adds	r2, #4

0800110e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001110:	d3fb      	bcc.n	800110a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001112:	f004 f9a1 	bl	8005458 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001116:	f7ff fa59 	bl	80005cc <main>

0800111a <LoopForever>:

LoopForever:
    b LoopForever
 800111a:	e7fe      	b.n	800111a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800111c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001120:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8001124:	2004005c 	.word	0x2004005c
  ldr r2, =_sidata
 8001128:	08005e28 	.word	0x08005e28
  ldr r2, =_sbss
 800112c:	2004005c 	.word	0x2004005c
  ldr r4, =_ebss
 8001130:	20040898 	.word	0x20040898

08001134 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001134:	e7fe      	b.n	8001134 <ADC1_IRQHandler>

08001136 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800113c:	2300      	movs	r3, #0
 800113e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001140:	2003      	movs	r0, #3
 8001142:	f000 f961 	bl	8001408 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001146:	2000      	movs	r0, #0
 8001148:	f000 f80e 	bl	8001168 <HAL_InitTick>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d002      	beq.n	8001158 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	71fb      	strb	r3, [r7, #7]
 8001156:	e001      	b.n	800115c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001158:	f7ff fd74 	bl	8000c44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800115c:	79fb      	ldrb	r3, [r7, #7]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001170:	2300      	movs	r3, #0
 8001172:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001174:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <HAL_InitTick+0x6c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d023      	beq.n	80011c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800117c:	4b16      	ldr	r3, [pc, #88]	@ (80011d8 <HAL_InitTick+0x70>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <HAL_InitTick+0x6c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800118a:	fbb3 f3f1 	udiv	r3, r3, r1
 800118e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f96d 	bl	8001472 <HAL_SYSTICK_Config>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10f      	bne.n	80011be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b0f      	cmp	r3, #15
 80011a2:	d809      	bhi.n	80011b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a4:	2200      	movs	r2, #0
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f000 f937 	bl	800141e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011b0:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <HAL_InitTick+0x74>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	e007      	b.n	80011c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	e004      	b.n	80011c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	73fb      	strb	r3, [r7, #15]
 80011c2:	e001      	b.n	80011c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20040008 	.word	0x20040008
 80011d8:	20040000 	.word	0x20040000
 80011dc:	20040004 	.word	0x20040004

080011e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <HAL_IncTick+0x20>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <HAL_IncTick+0x24>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a04      	ldr	r2, [pc, #16]	@ (8001204 <HAL_IncTick+0x24>)
 80011f2:	6013      	str	r3, [r2, #0]
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20040008 	.word	0x20040008
 8001204:	2004074c 	.word	0x2004074c

08001208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return uwTick;
 800120c:	4b03      	ldr	r3, [pc, #12]	@ (800121c <HAL_GetTick+0x14>)
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	2004074c 	.word	0x2004074c

08001220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001228:	f7ff ffee 	bl	8001208 <HAL_GetTick>
 800122c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001238:	d005      	beq.n	8001246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800123a:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <HAL_Delay+0x44>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4413      	add	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001246:	bf00      	nop
 8001248:	f7ff ffde 	bl	8001208 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	429a      	cmp	r2, r3
 8001256:	d8f7      	bhi.n	8001248 <HAL_Delay+0x28>
  {
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20040008 	.word	0x20040008

08001268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001278:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001284:	4013      	ands	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001290:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001294:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129a:	4a04      	ldr	r2, [pc, #16]	@ (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	60d3      	str	r3, [r2, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b4:	4b04      	ldr	r3, [pc, #16]	@ (80012c8 <__NVIC_GetPriorityGrouping+0x18>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	f003 0307 	and.w	r3, r3, #7
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	db0b      	blt.n	80012f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	f003 021f 	and.w	r2, r3, #31
 80012e4:	4907      	ldr	r1, [pc, #28]	@ (8001304 <__NVIC_EnableIRQ+0x38>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	095b      	lsrs	r3, r3, #5
 80012ec:	2001      	movs	r0, #1
 80012ee:	fa00 f202 	lsl.w	r2, r0, r2
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e100 	.word	0xe000e100

08001308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	2b00      	cmp	r3, #0
 800131a:	db0a      	blt.n	8001332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	490c      	ldr	r1, [pc, #48]	@ (8001354 <__NVIC_SetPriority+0x4c>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	0112      	lsls	r2, r2, #4
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	440b      	add	r3, r1
 800132c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001330:	e00a      	b.n	8001348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4908      	ldr	r1, [pc, #32]	@ (8001358 <__NVIC_SetPriority+0x50>)
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	3b04      	subs	r3, #4
 8001340:	0112      	lsls	r2, r2, #4
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	440b      	add	r3, r1
 8001346:	761a      	strb	r2, [r3, #24]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000e100 	.word	0xe000e100
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	@ 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f1c3 0307 	rsb	r3, r3, #7
 8001376:	2b04      	cmp	r3, #4
 8001378:	bf28      	it	cs
 800137a:	2304      	movcs	r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3304      	adds	r3, #4
 8001382:	2b06      	cmp	r3, #6
 8001384:	d902      	bls.n	800138c <NVIC_EncodePriority+0x30>
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3b03      	subs	r3, #3
 800138a:	e000      	b.n	800138e <NVIC_EncodePriority+0x32>
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	f04f 32ff 	mov.w	r2, #4294967295
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	401a      	ands	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a4:	f04f 31ff 	mov.w	r1, #4294967295
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	43d9      	mvns	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	4313      	orrs	r3, r2
         );
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3724      	adds	r7, #36	@ 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013d4:	d301      	bcc.n	80013da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00f      	b.n	80013fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013da:	4a0a      	ldr	r2, [pc, #40]	@ (8001404 <SysTick_Config+0x40>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e2:	210f      	movs	r1, #15
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	f7ff ff8e 	bl	8001308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ec:	4b05      	ldr	r3, [pc, #20]	@ (8001404 <SysTick_Config+0x40>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f2:	4b04      	ldr	r3, [pc, #16]	@ (8001404 <SysTick_Config+0x40>)
 80013f4:	2207      	movs	r2, #7
 80013f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	e000e010 	.word	0xe000e010

08001408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ff29 	bl	8001268 <__NVIC_SetPriorityGrouping>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
 800142a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001430:	f7ff ff3e 	bl	80012b0 <__NVIC_GetPriorityGrouping>
 8001434:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	68b9      	ldr	r1, [r7, #8]
 800143a:	6978      	ldr	r0, [r7, #20]
 800143c:	f7ff ff8e 	bl	800135c <NVIC_EncodePriority>
 8001440:	4602      	mov	r2, r0
 8001442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff5d 	bl	8001308 <__NVIC_SetPriority>
}
 800144e:	bf00      	nop
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff31 	bl	80012cc <__NVIC_EnableIRQ>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ffa2 	bl	80013c4 <SysTick_Config>
 8001480:	4603      	mov	r3, r0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e08d      	b.n	80015ba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b47      	ldr	r3, [pc, #284]	@ (80015c4 <HAL_DMA_Init+0x138>)
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d80f      	bhi.n	80014ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b45      	ldr	r3, [pc, #276]	@ (80015c8 <HAL_DMA_Init+0x13c>)
 80014b2:	4413      	add	r3, r2
 80014b4:	4a45      	ldr	r2, [pc, #276]	@ (80015cc <HAL_DMA_Init+0x140>)
 80014b6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ba:	091b      	lsrs	r3, r3, #4
 80014bc:	009a      	lsls	r2, r3, #2
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a42      	ldr	r2, [pc, #264]	@ (80015d0 <HAL_DMA_Init+0x144>)
 80014c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80014c8:	e00e      	b.n	80014e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	4b40      	ldr	r3, [pc, #256]	@ (80015d4 <HAL_DMA_Init+0x148>)
 80014d2:	4413      	add	r3, r2
 80014d4:	4a3d      	ldr	r2, [pc, #244]	@ (80015cc <HAL_DMA_Init+0x140>)
 80014d6:	fba2 2303 	umull	r2, r3, r2, r3
 80014da:	091b      	lsrs	r3, r3, #4
 80014dc:	009a      	lsls	r2, r3, #2
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a3c      	ldr	r2, [pc, #240]	@ (80015d8 <HAL_DMA_Init+0x14c>)
 80014e6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2202      	movs	r2, #2
 80014ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80014fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001502:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800150c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001518:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001524:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	4313      	orrs	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 f9b8 	bl	80018b0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001548:	d102      	bne.n	8001550 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001564:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d010      	beq.n	8001590 <HAL_DMA_Init+0x104>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b04      	cmp	r3, #4
 8001574:	d80c      	bhi.n	8001590 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 f9d8 	bl	800192c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	e008      	b.n	80015a2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40020407 	.word	0x40020407
 80015c8:	bffdfff8 	.word	0xbffdfff8
 80015cc:	cccccccd 	.word	0xcccccccd
 80015d0:	40020000 	.word	0x40020000
 80015d4:	bffdfbf8 	.word	0xbffdfbf8
 80015d8:	40020400 	.word	0x40020400

080015dc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d008      	beq.n	8001606 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2204      	movs	r2, #4
 80015f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e040      	b.n	8001688 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 020e 	bic.w	r2, r2, #14
 8001614:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001620:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001624:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0201 	bic.w	r2, r2, #1
 8001634:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163a:	f003 021c 	and.w	r2, r3, #28
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	2101      	movs	r1, #1
 8001644:	fa01 f202 	lsl.w	r2, r1, r2
 8001648:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001652:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00c      	beq.n	8001676 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001666:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800166a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001674:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001686:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001688:	4618      	mov	r0, r3
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d005      	beq.n	80016b8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2204      	movs	r2, #4
 80016b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	73fb      	strb	r3, [r7, #15]
 80016b6:	e047      	b.n	8001748 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 020e 	bic.w	r2, r2, #14
 80016c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0201 	bic.w	r2, r2, #1
 80016d6:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ec:	f003 021c 	and.w	r2, r3, #28
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f4:	2101      	movs	r1, #1
 80016f6:	fa01 f202 	lsl.w	r2, r1, r2
 80016fa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001704:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00c      	beq.n	8001728 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001718:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800171c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001726:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	4798      	blx	r3
    }
  }
  return status;
 8001748:	7bfb      	ldrb	r3, [r7, #15]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b084      	sub	sp, #16
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176e:	f003 031c 	and.w	r3, r3, #28
 8001772:	2204      	movs	r2, #4
 8001774:	409a      	lsls	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4013      	ands	r3, r2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d026      	beq.n	80017cc <HAL_DMA_IRQHandler+0x7a>
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	d021      	beq.n	80017cc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0320 	and.w	r3, r3, #32
 8001792:	2b00      	cmp	r3, #0
 8001794:	d107      	bne.n	80017a6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 0204 	bic.w	r2, r2, #4
 80017a4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017aa:	f003 021c 	and.w	r2, r3, #28
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	2104      	movs	r1, #4
 80017b4:	fa01 f202 	lsl.w	r2, r1, r2
 80017b8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d071      	beq.n	80018a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80017ca:	e06c      	b.n	80018a6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d0:	f003 031c 	and.w	r3, r3, #28
 80017d4:	2202      	movs	r2, #2
 80017d6:	409a      	lsls	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4013      	ands	r3, r2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d02e      	beq.n	800183e <HAL_DMA_IRQHandler+0xec>
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d029      	beq.n	800183e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0320 	and.w	r3, r3, #32
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10b      	bne.n	8001810 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 020a 	bic.w	r2, r2, #10
 8001806:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001814:	f003 021c 	and.w	r2, r3, #28
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181c:	2102      	movs	r1, #2
 800181e:	fa01 f202 	lsl.w	r2, r1, r2
 8001822:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001830:	2b00      	cmp	r3, #0
 8001832:	d038      	beq.n	80018a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800183c:	e033      	b.n	80018a6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001842:	f003 031c 	and.w	r3, r3, #28
 8001846:	2208      	movs	r2, #8
 8001848:	409a      	lsls	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4013      	ands	r3, r2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d02a      	beq.n	80018a8 <HAL_DMA_IRQHandler+0x156>
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	2b00      	cmp	r3, #0
 800185a:	d025      	beq.n	80018a8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 020e 	bic.w	r2, r2, #14
 800186a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001870:	f003 021c 	and.w	r2, r3, #28
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001878:	2101      	movs	r1, #1
 800187a:	fa01 f202 	lsl.w	r2, r1, r2
 800187e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800189a:	2b00      	cmp	r3, #0
 800189c:	d004      	beq.n	80018a8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018a6:	bf00      	nop
 80018a8:	bf00      	nop
}
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	4b17      	ldr	r3, [pc, #92]	@ (800191c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d80a      	bhi.n	80018da <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c8:	089b      	lsrs	r3, r3, #2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80018d0:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6493      	str	r3, [r2, #72]	@ 0x48
 80018d8:	e007      	b.n	80018ea <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018de:	089b      	lsrs	r3, r3, #2
 80018e0:	009a      	lsls	r2, r3, #2
 80018e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001920 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80018e4:	4413      	add	r3, r2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	3b08      	subs	r3, #8
 80018f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001924 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80018f4:	fba2 2303 	umull	r2, r3, r2, r3
 80018f8:	091b      	lsrs	r3, r3, #4
 80018fa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001928 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001900:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f003 031f 	and.w	r3, r3, #31
 8001908:	2201      	movs	r2, #1
 800190a:	409a      	lsls	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	40020407 	.word	0x40020407
 8001920:	4002081c 	.word	0x4002081c
 8001924:	cccccccd 	.word	0xcccccccd
 8001928:	40020880 	.word	0x40020880

0800192c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	4b0b      	ldr	r3, [pc, #44]	@ (800196c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001940:	4413      	add	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	461a      	mov	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a08      	ldr	r2, [pc, #32]	@ (8001970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800194e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	3b01      	subs	r3, #1
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	2201      	movs	r2, #1
 800195a:	409a      	lsls	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	1000823f 	.word	0x1000823f
 8001970:	40020940 	.word	0x40020940

08001974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001974:	b480      	push	{r7}
 8001976:	b087      	sub	sp, #28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001982:	e166      	b.n	8001c52 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2101      	movs	r1, #1
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	fa01 f303 	lsl.w	r3, r1, r3
 8001990:	4013      	ands	r3, r2
 8001992:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2b00      	cmp	r3, #0
 8001998:	f000 8158 	beq.w	8001c4c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d005      	beq.n	80019b4 <HAL_GPIO_Init+0x40>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d130      	bne.n	8001a16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	2203      	movs	r2, #3
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	68da      	ldr	r2, [r3, #12]
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019ea:	2201      	movs	r2, #1
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	091b      	lsrs	r3, r3, #4
 8001a00:	f003 0201 	and.w	r2, r3, #1
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d017      	beq.n	8001a52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4013      	ands	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d123      	bne.n	8001aa6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	08da      	lsrs	r2, r3, #3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3208      	adds	r2, #8
 8001a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	220f      	movs	r2, #15
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	691a      	ldr	r2, [r3, #16]
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	08da      	lsrs	r2, r3, #3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3208      	adds	r2, #8
 8001aa0:	6939      	ldr	r1, [r7, #16]
 8001aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0203 	and.w	r2, r3, #3
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 80b2 	beq.w	8001c4c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae8:	4b61      	ldr	r3, [pc, #388]	@ (8001c70 <HAL_GPIO_Init+0x2fc>)
 8001aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aec:	4a60      	ldr	r2, [pc, #384]	@ (8001c70 <HAL_GPIO_Init+0x2fc>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6613      	str	r3, [r2, #96]	@ 0x60
 8001af4:	4b5e      	ldr	r3, [pc, #376]	@ (8001c70 <HAL_GPIO_Init+0x2fc>)
 8001af6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b00:	4a5c      	ldr	r2, [pc, #368]	@ (8001c74 <HAL_GPIO_Init+0x300>)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	089b      	lsrs	r3, r3, #2
 8001b06:	3302      	adds	r3, #2
 8001b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	220f      	movs	r2, #15
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b2a:	d02b      	beq.n	8001b84 <HAL_GPIO_Init+0x210>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a52      	ldr	r2, [pc, #328]	@ (8001c78 <HAL_GPIO_Init+0x304>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d025      	beq.n	8001b80 <HAL_GPIO_Init+0x20c>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a51      	ldr	r2, [pc, #324]	@ (8001c7c <HAL_GPIO_Init+0x308>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d01f      	beq.n	8001b7c <HAL_GPIO_Init+0x208>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a50      	ldr	r2, [pc, #320]	@ (8001c80 <HAL_GPIO_Init+0x30c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d019      	beq.n	8001b78 <HAL_GPIO_Init+0x204>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a4f      	ldr	r2, [pc, #316]	@ (8001c84 <HAL_GPIO_Init+0x310>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d013      	beq.n	8001b74 <HAL_GPIO_Init+0x200>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a4e      	ldr	r2, [pc, #312]	@ (8001c88 <HAL_GPIO_Init+0x314>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d00d      	beq.n	8001b70 <HAL_GPIO_Init+0x1fc>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a4d      	ldr	r2, [pc, #308]	@ (8001c8c <HAL_GPIO_Init+0x318>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d007      	beq.n	8001b6c <HAL_GPIO_Init+0x1f8>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a4c      	ldr	r2, [pc, #304]	@ (8001c90 <HAL_GPIO_Init+0x31c>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d101      	bne.n	8001b68 <HAL_GPIO_Init+0x1f4>
 8001b64:	2307      	movs	r3, #7
 8001b66:	e00e      	b.n	8001b86 <HAL_GPIO_Init+0x212>
 8001b68:	2308      	movs	r3, #8
 8001b6a:	e00c      	b.n	8001b86 <HAL_GPIO_Init+0x212>
 8001b6c:	2306      	movs	r3, #6
 8001b6e:	e00a      	b.n	8001b86 <HAL_GPIO_Init+0x212>
 8001b70:	2305      	movs	r3, #5
 8001b72:	e008      	b.n	8001b86 <HAL_GPIO_Init+0x212>
 8001b74:	2304      	movs	r3, #4
 8001b76:	e006      	b.n	8001b86 <HAL_GPIO_Init+0x212>
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e004      	b.n	8001b86 <HAL_GPIO_Init+0x212>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e002      	b.n	8001b86 <HAL_GPIO_Init+0x212>
 8001b80:	2301      	movs	r3, #1
 8001b82:	e000      	b.n	8001b86 <HAL_GPIO_Init+0x212>
 8001b84:	2300      	movs	r3, #0
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	f002 0203 	and.w	r2, r2, #3
 8001b8c:	0092      	lsls	r2, r2, #2
 8001b8e:	4093      	lsls	r3, r2
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b96:	4937      	ldr	r1, [pc, #220]	@ (8001c74 <HAL_GPIO_Init+0x300>)
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	089b      	lsrs	r3, r3, #2
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ba4:	4b3b      	ldr	r3, [pc, #236]	@ (8001c94 <HAL_GPIO_Init+0x320>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bc8:	4a32      	ldr	r2, [pc, #200]	@ (8001c94 <HAL_GPIO_Init+0x320>)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bce:	4b31      	ldr	r3, [pc, #196]	@ (8001c94 <HAL_GPIO_Init+0x320>)
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bf2:	4a28      	ldr	r2, [pc, #160]	@ (8001c94 <HAL_GPIO_Init+0x320>)
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bf8:	4b26      	ldr	r3, [pc, #152]	@ (8001c94 <HAL_GPIO_Init+0x320>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4013      	ands	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001c94 <HAL_GPIO_Init+0x320>)
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c22:	4b1c      	ldr	r3, [pc, #112]	@ (8001c94 <HAL_GPIO_Init+0x320>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c46:	4a13      	ldr	r2, [pc, #76]	@ (8001c94 <HAL_GPIO_Init+0x320>)
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f47f ae91 	bne.w	8001984 <HAL_GPIO_Init+0x10>
  }
}
 8001c62:	bf00      	nop
 8001c64:	bf00      	nop
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40010000 	.word	0x40010000
 8001c78:	48000400 	.word	0x48000400
 8001c7c:	48000800 	.word	0x48000800
 8001c80:	48000c00 	.word	0x48000c00
 8001c84:	48001000 	.word	0x48001000
 8001c88:	48001400 	.word	0x48001400
 8001c8c:	48001800 	.word	0x48001800
 8001c90:	48001c00 	.word	0x48001c00
 8001c94:	40010400 	.word	0x40010400

08001c98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691a      	ldr	r2, [r3, #16]
 8001ca8:	887b      	ldrh	r3, [r7, #2]
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
 8001cb4:	e001      	b.n	8001cba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	807b      	strh	r3, [r7, #2]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cd8:	787b      	ldrb	r3, [r7, #1]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cde:	887a      	ldrh	r2, [r7, #2]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ce4:	e002      	b.n	8001cec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ce6:	887a      	ldrh	r2, [r7, #2]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d0a:	887a      	ldrh	r2, [r7, #2]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	041a      	lsls	r2, r3, #16
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	43d9      	mvns	r1, r3
 8001d16:	887b      	ldrh	r3, [r7, #2]
 8001d18:	400b      	ands	r3, r1
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	619a      	str	r2, [r3, #24]
}
 8001d20:	bf00      	nop
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af02      	add	r7, sp, #8
 8001d32:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e101      	b.n	8001f42 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d106      	bne.n	8001d58 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff f8a4 	bl	8000ea0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f003 f8c7 	bl	8004efe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	7c1a      	ldrb	r2, [r3, #16]
 8001d78:	f88d 2000 	strb.w	r2, [sp]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d80:	f003 f890 	bl	8004ea4 <USB_CoreInit>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e0d5      	b.n	8001f42 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f003 f8bf 	bl	8004f20 <USB_SetCurrentMode>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2202      	movs	r2, #2
 8001dac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0c6      	b.n	8001f42 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db4:	2300      	movs	r3, #0
 8001db6:	73fb      	strb	r3, [r7, #15]
 8001db8:	e04a      	b.n	8001e50 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001dba:	7bfa      	ldrb	r2, [r7, #15]
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	3315      	adds	r3, #21
 8001dca:	2201      	movs	r2, #1
 8001dcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	440b      	add	r3, r1
 8001ddc:	3314      	adds	r3, #20
 8001dde:	7bfa      	ldrb	r2, [r7, #15]
 8001de0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001de2:	7bfa      	ldrb	r2, [r7, #15]
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	b298      	uxth	r0, r3
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	4613      	mov	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4413      	add	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	440b      	add	r3, r1
 8001df4:	332e      	adds	r3, #46	@ 0x2e
 8001df6:	4602      	mov	r2, r0
 8001df8:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001dfa:	7bfa      	ldrb	r2, [r7, #15]
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	4413      	add	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	440b      	add	r3, r1
 8001e08:	3318      	adds	r3, #24
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e0e:	7bfa      	ldrb	r2, [r7, #15]
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	4613      	mov	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4413      	add	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	331c      	adds	r3, #28
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e22:	7bfa      	ldrb	r2, [r7, #15]
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	440b      	add	r3, r1
 8001e30:	3320      	adds	r3, #32
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e36:	7bfa      	ldrb	r2, [r7, #15]
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	440b      	add	r3, r1
 8001e44:	3324      	adds	r3, #36	@ 0x24
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	73fb      	strb	r3, [r7, #15]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	791b      	ldrb	r3, [r3, #4]
 8001e54:	7bfa      	ldrb	r2, [r7, #15]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d3af      	bcc.n	8001dba <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	73fb      	strb	r3, [r7, #15]
 8001e5e:	e044      	b.n	8001eea <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e60:	7bfa      	ldrb	r2, [r7, #15]
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001e72:	2200      	movs	r2, #0
 8001e74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e76:	7bfa      	ldrb	r2, [r7, #15]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001e88:	7bfa      	ldrb	r2, [r7, #15]
 8001e8a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e8c:	7bfa      	ldrb	r2, [r7, #15]
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	4613      	mov	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	4413      	add	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ea2:	7bfa      	ldrb	r2, [r7, #15]
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4413      	add	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	440b      	add	r3, r1
 8001eb0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001eb8:	7bfa      	ldrb	r2, [r7, #15]
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ece:	7bfa      	ldrb	r2, [r7, #15]
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	440b      	add	r3, r1
 8001edc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	73fb      	strb	r3, [r7, #15]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	791b      	ldrb	r3, [r3, #4]
 8001eee:	7bfa      	ldrb	r2, [r7, #15]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d3b5      	bcc.n	8001e60 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	7c1a      	ldrb	r2, [r3, #16]
 8001efc:	f88d 2000 	strb.w	r2, [sp]
 8001f00:	3304      	adds	r3, #4
 8001f02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f04:	f003 f858 	bl	8004fb8 <USB_DevInit>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d005      	beq.n	8001f1a <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2202      	movs	r2, #2
 8001f12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e013      	b.n	8001f42 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	7b1b      	ldrb	r3, [r3, #12]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d102      	bne.n	8001f36 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f80a 	bl	8001f4a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f003 f9fd 	bl	800533a <USB_DevDisconnect>

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b085      	sub	sp, #20
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f7c:	f043 0303 	orr.w	r3, r3, #3
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f98:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fa4:	d102      	bne.n	8001fac <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001fa6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001faa:	e00b      	b.n	8001fc4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001fac:	4b08      	ldr	r3, [pc, #32]	@ (8001fd0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fba:	d102      	bne.n	8001fc2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001fbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fc0:	e000      	b.n	8001fc4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001fc2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40007000 	.word	0x40007000

08001fd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d141      	bne.n	8002066 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fe2:	4b4b      	ldr	r3, [pc, #300]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fee:	d131      	bne.n	8002054 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ff0:	4b47      	ldr	r3, [pc, #284]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ff6:	4a46      	ldr	r2, [pc, #280]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ffc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002000:	4b43      	ldr	r3, [pc, #268]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002008:	4a41      	ldr	r2, [pc, #260]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800200a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800200e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002010:	4b40      	ldr	r3, [pc, #256]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2232      	movs	r2, #50	@ 0x32
 8002016:	fb02 f303 	mul.w	r3, r2, r3
 800201a:	4a3f      	ldr	r2, [pc, #252]	@ (8002118 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800201c:	fba2 2303 	umull	r2, r3, r2, r3
 8002020:	0c9b      	lsrs	r3, r3, #18
 8002022:	3301      	adds	r3, #1
 8002024:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002026:	e002      	b.n	800202e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	3b01      	subs	r3, #1
 800202c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800202e:	4b38      	ldr	r3, [pc, #224]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800203a:	d102      	bne.n	8002042 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f2      	bne.n	8002028 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002042:	4b33      	ldr	r3, [pc, #204]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800204a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800204e:	d158      	bne.n	8002102 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e057      	b.n	8002104 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002054:	4b2e      	ldr	r3, [pc, #184]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002056:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800205a:	4a2d      	ldr	r2, [pc, #180]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002060:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002064:	e04d      	b.n	8002102 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800206c:	d141      	bne.n	80020f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800206e:	4b28      	ldr	r3, [pc, #160]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800207a:	d131      	bne.n	80020e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800207c:	4b24      	ldr	r3, [pc, #144]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800207e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002082:	4a23      	ldr	r2, [pc, #140]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002088:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800208c:	4b20      	ldr	r3, [pc, #128]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002094:	4a1e      	ldr	r2, [pc, #120]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002096:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800209a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800209c:	4b1d      	ldr	r3, [pc, #116]	@ (8002114 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2232      	movs	r2, #50	@ 0x32
 80020a2:	fb02 f303 	mul.w	r3, r2, r3
 80020a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002118 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020a8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ac:	0c9b      	lsrs	r3, r3, #18
 80020ae:	3301      	adds	r3, #1
 80020b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020b2:	e002      	b.n	80020ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020ba:	4b15      	ldr	r3, [pc, #84]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020c6:	d102      	bne.n	80020ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f2      	bne.n	80020b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020ce:	4b10      	ldr	r3, [pc, #64]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020da:	d112      	bne.n	8002102 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e011      	b.n	8002104 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80020f0:	e007      	b.n	8002102 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020f2:	4b07      	ldr	r3, [pc, #28]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020fa:	4a05      	ldr	r2, [pc, #20]	@ (8002110 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002100:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	40007000 	.word	0x40007000
 8002114:	20040000 	.word	0x20040000
 8002118:	431bde83 	.word	0x431bde83

0800211c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002120:	4b05      	ldr	r3, [pc, #20]	@ (8002138 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	4a04      	ldr	r2, [pc, #16]	@ (8002138 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002126:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800212a:	6053      	str	r3, [r2, #4]
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40007000 	.word	0x40007000

0800213c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002140:	4b05      	ldr	r3, [pc, #20]	@ (8002158 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4a04      	ldr	r2, [pc, #16]	@ (8002158 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002146:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800214a:	6053      	str	r3, [r2, #4]
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40007000 	.word	0x40007000

0800215c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b088      	sub	sp, #32
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d102      	bne.n	8002170 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	f000 bc08 	b.w	8002980 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002170:	4b96      	ldr	r3, [pc, #600]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 030c 	and.w	r3, r3, #12
 8002178:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800217a:	4b94      	ldr	r3, [pc, #592]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0310 	and.w	r3, r3, #16
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 80e4 	beq.w	800235a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d007      	beq.n	80021a8 <HAL_RCC_OscConfig+0x4c>
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	2b0c      	cmp	r3, #12
 800219c:	f040 808b 	bne.w	80022b6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	f040 8087 	bne.w	80022b6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021a8:	4b88      	ldr	r3, [pc, #544]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_RCC_OscConfig+0x64>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e3df      	b.n	8002980 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a1a      	ldr	r2, [r3, #32]
 80021c4:	4b81      	ldr	r3, [pc, #516]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d004      	beq.n	80021da <HAL_RCC_OscConfig+0x7e>
 80021d0:	4b7e      	ldr	r3, [pc, #504]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021d8:	e005      	b.n	80021e6 <HAL_RCC_OscConfig+0x8a>
 80021da:	4b7c      	ldr	r3, [pc, #496]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 80021dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021e0:	091b      	lsrs	r3, r3, #4
 80021e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d223      	bcs.n	8002232 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 fdcc 	bl	8002d8c <RCC_SetFlashLatencyFromMSIRange>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e3c0      	b.n	8002980 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021fe:	4b73      	ldr	r3, [pc, #460]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a72      	ldr	r2, [pc, #456]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 8002204:	f043 0308 	orr.w	r3, r3, #8
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	4b70      	ldr	r3, [pc, #448]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	496d      	ldr	r1, [pc, #436]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 8002218:	4313      	orrs	r3, r2
 800221a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800221c:	4b6b      	ldr	r3, [pc, #428]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	021b      	lsls	r3, r3, #8
 800222a:	4968      	ldr	r1, [pc, #416]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 800222c:	4313      	orrs	r3, r2
 800222e:	604b      	str	r3, [r1, #4]
 8002230:	e025      	b.n	800227e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002232:	4b66      	ldr	r3, [pc, #408]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a65      	ldr	r2, [pc, #404]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 8002238:	f043 0308 	orr.w	r3, r3, #8
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	4b63      	ldr	r3, [pc, #396]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	4960      	ldr	r1, [pc, #384]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 800224c:	4313      	orrs	r3, r2
 800224e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002250:	4b5e      	ldr	r3, [pc, #376]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	021b      	lsls	r3, r3, #8
 800225e:	495b      	ldr	r1, [pc, #364]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d109      	bne.n	800227e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	4618      	mov	r0, r3
 8002270:	f000 fd8c 	bl	8002d8c <RCC_SetFlashLatencyFromMSIRange>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e380      	b.n	8002980 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800227e:	f000 fcc1 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8002282:	4602      	mov	r2, r0
 8002284:	4b51      	ldr	r3, [pc, #324]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	4950      	ldr	r1, [pc, #320]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 8002290:	5ccb      	ldrb	r3, [r1, r3]
 8002292:	f003 031f 	and.w	r3, r3, #31
 8002296:	fa22 f303 	lsr.w	r3, r2, r3
 800229a:	4a4e      	ldr	r2, [pc, #312]	@ (80023d4 <HAL_RCC_OscConfig+0x278>)
 800229c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800229e:	4b4e      	ldr	r3, [pc, #312]	@ (80023d8 <HAL_RCC_OscConfig+0x27c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fe ff60 	bl	8001168 <HAL_InitTick>
 80022a8:	4603      	mov	r3, r0
 80022aa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d052      	beq.n	8002358 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
 80022b4:	e364      	b.n	8002980 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d032      	beq.n	8002324 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022be:	4b43      	ldr	r3, [pc, #268]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a42      	ldr	r2, [pc, #264]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022ca:	f7fe ff9d 	bl	8001208 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022d2:	f7fe ff99 	bl	8001208 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e34d      	b.n	8002980 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022e4:	4b39      	ldr	r3, [pc, #228]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0f0      	beq.n	80022d2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022f0:	4b36      	ldr	r3, [pc, #216]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a35      	ldr	r2, [pc, #212]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 80022f6:	f043 0308 	orr.w	r3, r3, #8
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	4b33      	ldr	r3, [pc, #204]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	4930      	ldr	r1, [pc, #192]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800230e:	4b2f      	ldr	r3, [pc, #188]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	021b      	lsls	r3, r3, #8
 800231c:	492b      	ldr	r1, [pc, #172]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 800231e:	4313      	orrs	r3, r2
 8002320:	604b      	str	r3, [r1, #4]
 8002322:	e01a      	b.n	800235a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002324:	4b29      	ldr	r3, [pc, #164]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a28      	ldr	r2, [pc, #160]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 800232a:	f023 0301 	bic.w	r3, r3, #1
 800232e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002330:	f7fe ff6a 	bl	8001208 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002338:	f7fe ff66 	bl	8001208 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e31a      	b.n	8002980 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800234a:	4b20      	ldr	r3, [pc, #128]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f0      	bne.n	8002338 <HAL_RCC_OscConfig+0x1dc>
 8002356:	e000      	b.n	800235a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002358:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d073      	beq.n	800244e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	2b08      	cmp	r3, #8
 800236a:	d005      	beq.n	8002378 <HAL_RCC_OscConfig+0x21c>
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	2b0c      	cmp	r3, #12
 8002370:	d10e      	bne.n	8002390 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	2b03      	cmp	r3, #3
 8002376:	d10b      	bne.n	8002390 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002378:	4b14      	ldr	r3, [pc, #80]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d063      	beq.n	800244c <HAL_RCC_OscConfig+0x2f0>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d15f      	bne.n	800244c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e2f7      	b.n	8002980 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002398:	d106      	bne.n	80023a8 <HAL_RCC_OscConfig+0x24c>
 800239a:	4b0c      	ldr	r3, [pc, #48]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a0b      	ldr	r2, [pc, #44]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 80023a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	e025      	b.n	80023f4 <HAL_RCC_OscConfig+0x298>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023b0:	d114      	bne.n	80023dc <HAL_RCC_OscConfig+0x280>
 80023b2:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a05      	ldr	r2, [pc, #20]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 80023b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	4b03      	ldr	r3, [pc, #12]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a02      	ldr	r2, [pc, #8]	@ (80023cc <HAL_RCC_OscConfig+0x270>)
 80023c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	e013      	b.n	80023f4 <HAL_RCC_OscConfig+0x298>
 80023cc:	40021000 	.word	0x40021000
 80023d0:	08005d74 	.word	0x08005d74
 80023d4:	20040000 	.word	0x20040000
 80023d8:	20040004 	.word	0x20040004
 80023dc:	4ba0      	ldr	r3, [pc, #640]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a9f      	ldr	r2, [pc, #636]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 80023e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	4b9d      	ldr	r3, [pc, #628]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a9c      	ldr	r2, [pc, #624]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 80023ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d013      	beq.n	8002424 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fc:	f7fe ff04 	bl	8001208 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002404:	f7fe ff00 	bl	8001208 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b64      	cmp	r3, #100	@ 0x64
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e2b4      	b.n	8002980 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002416:	4b92      	ldr	r3, [pc, #584]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <HAL_RCC_OscConfig+0x2a8>
 8002422:	e014      	b.n	800244e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002424:	f7fe fef0 	bl	8001208 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800242c:	f7fe feec 	bl	8001208 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b64      	cmp	r3, #100	@ 0x64
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e2a0      	b.n	8002980 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800243e:	4b88      	ldr	r3, [pc, #544]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x2d0>
 800244a:	e000      	b.n	800244e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800244c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d060      	beq.n	800251c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	2b04      	cmp	r3, #4
 800245e:	d005      	beq.n	800246c <HAL_RCC_OscConfig+0x310>
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	2b0c      	cmp	r3, #12
 8002464:	d119      	bne.n	800249a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d116      	bne.n	800249a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800246c:	4b7c      	ldr	r3, [pc, #496]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002474:	2b00      	cmp	r3, #0
 8002476:	d005      	beq.n	8002484 <HAL_RCC_OscConfig+0x328>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e27d      	b.n	8002980 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002484:	4b76      	ldr	r3, [pc, #472]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	061b      	lsls	r3, r3, #24
 8002492:	4973      	ldr	r1, [pc, #460]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 8002494:	4313      	orrs	r3, r2
 8002496:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002498:	e040      	b.n	800251c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d023      	beq.n	80024ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a2:	4b6f      	ldr	r3, [pc, #444]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a6e      	ldr	r2, [pc, #440]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 80024a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe feab 	bl	8001208 <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b6:	f7fe fea7 	bl	8001208 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e25b      	b.n	8002980 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024c8:	4b65      	ldr	r3, [pc, #404]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b62      	ldr	r3, [pc, #392]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	061b      	lsls	r3, r3, #24
 80024e2:	495f      	ldr	r1, [pc, #380]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
 80024e8:	e018      	b.n	800251c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a5c      	ldr	r2, [pc, #368]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 80024f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f6:	f7fe fe87 	bl	8001208 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024fe:	f7fe fe83 	bl	8001208 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e237      	b.n	8002980 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002510:	4b53      	ldr	r3, [pc, #332]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f0      	bne.n	80024fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b00      	cmp	r3, #0
 8002526:	d03c      	beq.n	80025a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d01c      	beq.n	800256a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002530:	4b4b      	ldr	r3, [pc, #300]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 8002532:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002536:	4a4a      	ldr	r2, [pc, #296]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002540:	f7fe fe62 	bl	8001208 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002548:	f7fe fe5e 	bl	8001208 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e212      	b.n	8002980 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800255a:	4b41      	ldr	r3, [pc, #260]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 800255c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0ef      	beq.n	8002548 <HAL_RCC_OscConfig+0x3ec>
 8002568:	e01b      	b.n	80025a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800256a:	4b3d      	ldr	r3, [pc, #244]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 800256c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002570:	4a3b      	ldr	r2, [pc, #236]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 8002572:	f023 0301 	bic.w	r3, r3, #1
 8002576:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257a:	f7fe fe45 	bl	8001208 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002582:	f7fe fe41 	bl	8001208 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e1f5      	b.n	8002980 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002594:	4b32      	ldr	r3, [pc, #200]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 8002596:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1ef      	bne.n	8002582 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 80a6 	beq.w	80026fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025b0:	2300      	movs	r3, #0
 80025b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 80025b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10d      	bne.n	80025dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c0:	4b27      	ldr	r3, [pc, #156]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 80025c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c4:	4a26      	ldr	r2, [pc, #152]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 80025c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80025cc:	4b24      	ldr	r3, [pc, #144]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 80025ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d8:	2301      	movs	r3, #1
 80025da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025dc:	4b21      	ldr	r3, [pc, #132]	@ (8002664 <HAL_RCC_OscConfig+0x508>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d118      	bne.n	800261a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002664 <HAL_RCC_OscConfig+0x508>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002664 <HAL_RCC_OscConfig+0x508>)
 80025ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025f4:	f7fe fe08 	bl	8001208 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025fc:	f7fe fe04 	bl	8001208 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e1b8      	b.n	8002980 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800260e:	4b15      	ldr	r3, [pc, #84]	@ (8002664 <HAL_RCC_OscConfig+0x508>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d108      	bne.n	8002634 <HAL_RCC_OscConfig+0x4d8>
 8002622:	4b0f      	ldr	r3, [pc, #60]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 8002624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002628:	4a0d      	ldr	r2, [pc, #52]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002632:	e029      	b.n	8002688 <HAL_RCC_OscConfig+0x52c>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b05      	cmp	r3, #5
 800263a:	d115      	bne.n	8002668 <HAL_RCC_OscConfig+0x50c>
 800263c:	4b08      	ldr	r3, [pc, #32]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 800263e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002642:	4a07      	ldr	r2, [pc, #28]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 8002644:	f043 0304 	orr.w	r3, r3, #4
 8002648:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800264c:	4b04      	ldr	r3, [pc, #16]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 800264e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002652:	4a03      	ldr	r2, [pc, #12]	@ (8002660 <HAL_RCC_OscConfig+0x504>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800265c:	e014      	b.n	8002688 <HAL_RCC_OscConfig+0x52c>
 800265e:	bf00      	nop
 8002660:	40021000 	.word	0x40021000
 8002664:	40007000 	.word	0x40007000
 8002668:	4b9d      	ldr	r3, [pc, #628]	@ (80028e0 <HAL_RCC_OscConfig+0x784>)
 800266a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800266e:	4a9c      	ldr	r2, [pc, #624]	@ (80028e0 <HAL_RCC_OscConfig+0x784>)
 8002670:	f023 0301 	bic.w	r3, r3, #1
 8002674:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002678:	4b99      	ldr	r3, [pc, #612]	@ (80028e0 <HAL_RCC_OscConfig+0x784>)
 800267a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800267e:	4a98      	ldr	r2, [pc, #608]	@ (80028e0 <HAL_RCC_OscConfig+0x784>)
 8002680:	f023 0304 	bic.w	r3, r3, #4
 8002684:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d016      	beq.n	80026be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002690:	f7fe fdba 	bl	8001208 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002696:	e00a      	b.n	80026ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002698:	f7fe fdb6 	bl	8001208 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e168      	b.n	8002980 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ae:	4b8c      	ldr	r3, [pc, #560]	@ (80028e0 <HAL_RCC_OscConfig+0x784>)
 80026b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0ed      	beq.n	8002698 <HAL_RCC_OscConfig+0x53c>
 80026bc:	e015      	b.n	80026ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026be:	f7fe fda3 	bl	8001208 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026c4:	e00a      	b.n	80026dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c6:	f7fe fd9f 	bl	8001208 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e151      	b.n	8002980 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026dc:	4b80      	ldr	r3, [pc, #512]	@ (80028e0 <HAL_RCC_OscConfig+0x784>)
 80026de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1ed      	bne.n	80026c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026ea:	7ffb      	ldrb	r3, [r7, #31]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d105      	bne.n	80026fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f0:	4b7b      	ldr	r3, [pc, #492]	@ (80028e0 <HAL_RCC_OscConfig+0x784>)
 80026f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f4:	4a7a      	ldr	r2, [pc, #488]	@ (80028e0 <HAL_RCC_OscConfig+0x784>)
 80026f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026fa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	2b00      	cmp	r3, #0
 8002706:	d03c      	beq.n	8002782 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270c:	2b00      	cmp	r3, #0
 800270e:	d01c      	beq.n	800274a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002710:	4b73      	ldr	r3, [pc, #460]	@ (80028e0 <HAL_RCC_OscConfig+0x784>)
 8002712:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002716:	4a72      	ldr	r2, [pc, #456]	@ (80028e0 <HAL_RCC_OscConfig+0x784>)
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002720:	f7fe fd72 	bl	8001208 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002728:	f7fe fd6e 	bl	8001208 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e122      	b.n	8002980 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800273a:	4b69      	ldr	r3, [pc, #420]	@ (80028e0 <HAL_RCC_OscConfig+0x784>)
 800273c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0ef      	beq.n	8002728 <HAL_RCC_OscConfig+0x5cc>
 8002748:	e01b      	b.n	8002782 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800274a:	4b65      	ldr	r3, [pc, #404]	@ (80028e0 <HAL_RCC_OscConfig+0x784>)
 800274c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002750:	4a63      	ldr	r2, [pc, #396]	@ (80028e0 <HAL_RCC_OscConfig+0x784>)
 8002752:	f023 0301 	bic.w	r3, r3, #1
 8002756:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275a:	f7fe fd55 	bl	8001208 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002762:	f7fe fd51 	bl	8001208 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e105      	b.n	8002980 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002774:	4b5a      	ldr	r3, [pc, #360]	@ (80028e0 <HAL_RCC_OscConfig+0x784>)
 8002776:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1ef      	bne.n	8002762 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 80f9 	beq.w	800297e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002790:	2b02      	cmp	r3, #2
 8002792:	f040 80cf 	bne.w	8002934 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002796:	4b52      	ldr	r3, [pc, #328]	@ (80028e0 <HAL_RCC_OscConfig+0x784>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f003 0203 	and.w	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d12c      	bne.n	8002804 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b4:	3b01      	subs	r3, #1
 80027b6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d123      	bne.n	8002804 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027c6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d11b      	bne.n	8002804 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027d8:	429a      	cmp	r2, r3
 80027da:	d113      	bne.n	8002804 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027e6:	085b      	lsrs	r3, r3, #1
 80027e8:	3b01      	subs	r3, #1
 80027ea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d109      	bne.n	8002804 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	085b      	lsrs	r3, r3, #1
 80027fc:	3b01      	subs	r3, #1
 80027fe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002800:	429a      	cmp	r2, r3
 8002802:	d071      	beq.n	80028e8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	2b0c      	cmp	r3, #12
 8002808:	d068      	beq.n	80028dc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800280a:	4b35      	ldr	r3, [pc, #212]	@ (80028e0 <HAL_RCC_OscConfig+0x784>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d105      	bne.n	8002822 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002816:	4b32      	ldr	r3, [pc, #200]	@ (80028e0 <HAL_RCC_OscConfig+0x784>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e0ac      	b.n	8002980 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002826:	4b2e      	ldr	r3, [pc, #184]	@ (80028e0 <HAL_RCC_OscConfig+0x784>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a2d      	ldr	r2, [pc, #180]	@ (80028e0 <HAL_RCC_OscConfig+0x784>)
 800282c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002830:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002832:	f7fe fce9 	bl	8001208 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283a:	f7fe fce5 	bl	8001208 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e099      	b.n	8002980 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800284c:	4b24      	ldr	r3, [pc, #144]	@ (80028e0 <HAL_RCC_OscConfig+0x784>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1f0      	bne.n	800283a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002858:	4b21      	ldr	r3, [pc, #132]	@ (80028e0 <HAL_RCC_OscConfig+0x784>)
 800285a:	68da      	ldr	r2, [r3, #12]
 800285c:	4b21      	ldr	r3, [pc, #132]	@ (80028e4 <HAL_RCC_OscConfig+0x788>)
 800285e:	4013      	ands	r3, r2
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002868:	3a01      	subs	r2, #1
 800286a:	0112      	lsls	r2, r2, #4
 800286c:	4311      	orrs	r1, r2
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002872:	0212      	lsls	r2, r2, #8
 8002874:	4311      	orrs	r1, r2
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800287a:	0852      	lsrs	r2, r2, #1
 800287c:	3a01      	subs	r2, #1
 800287e:	0552      	lsls	r2, r2, #21
 8002880:	4311      	orrs	r1, r2
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002886:	0852      	lsrs	r2, r2, #1
 8002888:	3a01      	subs	r2, #1
 800288a:	0652      	lsls	r2, r2, #25
 800288c:	4311      	orrs	r1, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002892:	06d2      	lsls	r2, r2, #27
 8002894:	430a      	orrs	r2, r1
 8002896:	4912      	ldr	r1, [pc, #72]	@ (80028e0 <HAL_RCC_OscConfig+0x784>)
 8002898:	4313      	orrs	r3, r2
 800289a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800289c:	4b10      	ldr	r3, [pc, #64]	@ (80028e0 <HAL_RCC_OscConfig+0x784>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a0f      	ldr	r2, [pc, #60]	@ (80028e0 <HAL_RCC_OscConfig+0x784>)
 80028a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028a8:	4b0d      	ldr	r3, [pc, #52]	@ (80028e0 <HAL_RCC_OscConfig+0x784>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4a0c      	ldr	r2, [pc, #48]	@ (80028e0 <HAL_RCC_OscConfig+0x784>)
 80028ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028b4:	f7fe fca8 	bl	8001208 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028bc:	f7fe fca4 	bl	8001208 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e058      	b.n	8002980 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ce:	4b04      	ldr	r3, [pc, #16]	@ (80028e0 <HAL_RCC_OscConfig+0x784>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028da:	e050      	b.n	800297e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e04f      	b.n	8002980 <HAL_RCC_OscConfig+0x824>
 80028e0:	40021000 	.word	0x40021000
 80028e4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028e8:	4b27      	ldr	r3, [pc, #156]	@ (8002988 <HAL_RCC_OscConfig+0x82c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d144      	bne.n	800297e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028f4:	4b24      	ldr	r3, [pc, #144]	@ (8002988 <HAL_RCC_OscConfig+0x82c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a23      	ldr	r2, [pc, #140]	@ (8002988 <HAL_RCC_OscConfig+0x82c>)
 80028fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002900:	4b21      	ldr	r3, [pc, #132]	@ (8002988 <HAL_RCC_OscConfig+0x82c>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	4a20      	ldr	r2, [pc, #128]	@ (8002988 <HAL_RCC_OscConfig+0x82c>)
 8002906:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800290a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800290c:	f7fe fc7c 	bl	8001208 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002914:	f7fe fc78 	bl	8001208 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e02c      	b.n	8002980 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002926:	4b18      	ldr	r3, [pc, #96]	@ (8002988 <HAL_RCC_OscConfig+0x82c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0f0      	beq.n	8002914 <HAL_RCC_OscConfig+0x7b8>
 8002932:	e024      	b.n	800297e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	2b0c      	cmp	r3, #12
 8002938:	d01f      	beq.n	800297a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293a:	4b13      	ldr	r3, [pc, #76]	@ (8002988 <HAL_RCC_OscConfig+0x82c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a12      	ldr	r2, [pc, #72]	@ (8002988 <HAL_RCC_OscConfig+0x82c>)
 8002940:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002946:	f7fe fc5f 	bl	8001208 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294e:	f7fe fc5b 	bl	8001208 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e00f      	b.n	8002980 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002960:	4b09      	ldr	r3, [pc, #36]	@ (8002988 <HAL_RCC_OscConfig+0x82c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1f0      	bne.n	800294e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800296c:	4b06      	ldr	r3, [pc, #24]	@ (8002988 <HAL_RCC_OscConfig+0x82c>)
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	4905      	ldr	r1, [pc, #20]	@ (8002988 <HAL_RCC_OscConfig+0x82c>)
 8002972:	4b06      	ldr	r3, [pc, #24]	@ (800298c <HAL_RCC_OscConfig+0x830>)
 8002974:	4013      	ands	r3, r2
 8002976:	60cb      	str	r3, [r1, #12]
 8002978:	e001      	b.n	800297e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3720      	adds	r7, #32
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40021000 	.word	0x40021000
 800298c:	feeefffc 	.word	0xfeeefffc

08002990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e11d      	b.n	8002be4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a8:	4b90      	ldr	r3, [pc, #576]	@ (8002bec <HAL_RCC_ClockConfig+0x25c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 030f 	and.w	r3, r3, #15
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d910      	bls.n	80029d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b6:	4b8d      	ldr	r3, [pc, #564]	@ (8002bec <HAL_RCC_ClockConfig+0x25c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f023 020f 	bic.w	r2, r3, #15
 80029be:	498b      	ldr	r1, [pc, #556]	@ (8002bec <HAL_RCC_ClockConfig+0x25c>)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c6:	4b89      	ldr	r3, [pc, #548]	@ (8002bec <HAL_RCC_ClockConfig+0x25c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d001      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e105      	b.n	8002be4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d010      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	4b81      	ldr	r3, [pc, #516]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d908      	bls.n	8002a06 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f4:	4b7e      	ldr	r3, [pc, #504]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	497b      	ldr	r1, [pc, #492]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d079      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d11e      	bne.n	8002a58 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a1a:	4b75      	ldr	r3, [pc, #468]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e0dc      	b.n	8002be4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002a2a:	f000 fa09 	bl	8002e40 <RCC_GetSysClockFreqFromPLLSource>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	4a70      	ldr	r2, [pc, #448]	@ (8002bf4 <HAL_RCC_ClockConfig+0x264>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d946      	bls.n	8002ac4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a36:	4b6e      	ldr	r3, [pc, #440]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d140      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a42:	4b6b      	ldr	r3, [pc, #428]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a4a:	4a69      	ldr	r2, [pc, #420]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002a4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a50:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a52:	2380      	movs	r3, #128	@ 0x80
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	e035      	b.n	8002ac4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d107      	bne.n	8002a70 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a60:	4b63      	ldr	r3, [pc, #396]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d115      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0b9      	b.n	8002be4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d107      	bne.n	8002a88 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a78:	4b5d      	ldr	r3, [pc, #372]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d109      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0ad      	b.n	8002be4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a88:	4b59      	ldr	r3, [pc, #356]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0a5      	b.n	8002be4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002a98:	f000 f8b4 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	4a55      	ldr	r2, [pc, #340]	@ (8002bf4 <HAL_RCC_ClockConfig+0x264>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d90f      	bls.n	8002ac4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002aa4:	4b52      	ldr	r3, [pc, #328]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d109      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ab0:	4b4f      	ldr	r3, [pc, #316]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002ab8:	4a4d      	ldr	r2, [pc, #308]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002aba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002abe:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ac0:	2380      	movs	r3, #128	@ 0x80
 8002ac2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ac4:	4b4a      	ldr	r3, [pc, #296]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f023 0203 	bic.w	r2, r3, #3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	4947      	ldr	r1, [pc, #284]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ad6:	f7fe fb97 	bl	8001208 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002adc:	e00a      	b.n	8002af4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ade:	f7fe fb93 	bl	8001208 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e077      	b.n	8002be4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af4:	4b3e      	ldr	r3, [pc, #248]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 020c 	and.w	r2, r3, #12
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d1eb      	bne.n	8002ade <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2b80      	cmp	r3, #128	@ 0x80
 8002b0a:	d105      	bne.n	8002b18 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b0c:	4b38      	ldr	r3, [pc, #224]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	4a37      	ldr	r2, [pc, #220]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002b12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b16:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d010      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	4b31      	ldr	r3, [pc, #196]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d208      	bcs.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b34:	4b2e      	ldr	r3, [pc, #184]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	492b      	ldr	r1, [pc, #172]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b46:	4b29      	ldr	r3, [pc, #164]	@ (8002bec <HAL_RCC_ClockConfig+0x25c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d210      	bcs.n	8002b76 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b54:	4b25      	ldr	r3, [pc, #148]	@ (8002bec <HAL_RCC_ClockConfig+0x25c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f023 020f 	bic.w	r2, r3, #15
 8002b5c:	4923      	ldr	r1, [pc, #140]	@ (8002bec <HAL_RCC_ClockConfig+0x25c>)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b64:	4b21      	ldr	r3, [pc, #132]	@ (8002bec <HAL_RCC_ClockConfig+0x25c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 030f 	and.w	r3, r3, #15
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d001      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e036      	b.n	8002be4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d008      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b82:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	4918      	ldr	r1, [pc, #96]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d009      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ba0:	4b13      	ldr	r3, [pc, #76]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4910      	ldr	r1, [pc, #64]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bb4:	f000 f826 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf0 <HAL_RCC_ClockConfig+0x260>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	091b      	lsrs	r3, r3, #4
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	490c      	ldr	r1, [pc, #48]	@ (8002bf8 <HAL_RCC_ClockConfig+0x268>)
 8002bc6:	5ccb      	ldrb	r3, [r1, r3]
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8002bfc <HAL_RCC_ClockConfig+0x26c>)
 8002bd2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8002c00 <HAL_RCC_ClockConfig+0x270>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fe fac5 	bl	8001168 <HAL_InitTick>
 8002bde:	4603      	mov	r3, r0
 8002be0:	73fb      	strb	r3, [r7, #15]

  return status;
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40022000 	.word	0x40022000
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	04c4b400 	.word	0x04c4b400
 8002bf8:	08005d74 	.word	0x08005d74
 8002bfc:	20040000 	.word	0x20040000
 8002c00:	20040004 	.word	0x20040004

08002c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b089      	sub	sp, #36	@ 0x24
 8002c08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c12:	4b3e      	ldr	r3, [pc, #248]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 030c 	and.w	r3, r3, #12
 8002c1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c1c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <HAL_RCC_GetSysClockFreq+0x34>
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	2b0c      	cmp	r3, #12
 8002c30:	d121      	bne.n	8002c76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d11e      	bne.n	8002c76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c38:	4b34      	ldr	r3, [pc, #208]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d107      	bne.n	8002c54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c44:	4b31      	ldr	r3, [pc, #196]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c4a:	0a1b      	lsrs	r3, r3, #8
 8002c4c:	f003 030f 	and.w	r3, r3, #15
 8002c50:	61fb      	str	r3, [r7, #28]
 8002c52:	e005      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c54:	4b2d      	ldr	r3, [pc, #180]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c60:	4a2b      	ldr	r2, [pc, #172]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10d      	bne.n	8002c8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c74:	e00a      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d102      	bne.n	8002c82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c7c:	4b25      	ldr	r3, [pc, #148]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c7e:	61bb      	str	r3, [r7, #24]
 8002c80:	e004      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d101      	bne.n	8002c8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c88:	4b23      	ldr	r3, [pc, #140]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	2b0c      	cmp	r3, #12
 8002c90:	d134      	bne.n	8002cfc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c92:	4b1e      	ldr	r3, [pc, #120]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d003      	beq.n	8002caa <HAL_RCC_GetSysClockFreq+0xa6>
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b03      	cmp	r3, #3
 8002ca6:	d003      	beq.n	8002cb0 <HAL_RCC_GetSysClockFreq+0xac>
 8002ca8:	e005      	b.n	8002cb6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002caa:	4b1a      	ldr	r3, [pc, #104]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cac:	617b      	str	r3, [r7, #20]
      break;
 8002cae:	e005      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cb0:	4b19      	ldr	r3, [pc, #100]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cb2:	617b      	str	r3, [r7, #20]
      break;
 8002cb4:	e002      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	617b      	str	r3, [r7, #20]
      break;
 8002cba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cbc:	4b13      	ldr	r3, [pc, #76]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	091b      	lsrs	r3, r3, #4
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cca:	4b10      	ldr	r3, [pc, #64]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	0a1b      	lsrs	r3, r3, #8
 8002cd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	fb03 f202 	mul.w	r2, r3, r2
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	0e5b      	lsrs	r3, r3, #25
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	3301      	adds	r3, #1
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cfc:	69bb      	ldr	r3, [r7, #24]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3724      	adds	r7, #36	@ 0x24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	08005d8c 	.word	0x08005d8c
 8002d14:	00f42400 	.word	0x00f42400
 8002d18:	007a1200 	.word	0x007a1200

08002d1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d20:	4b03      	ldr	r3, [pc, #12]	@ (8002d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d22:	681b      	ldr	r3, [r3, #0]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	20040000 	.word	0x20040000

08002d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d38:	f7ff fff0 	bl	8002d1c <HAL_RCC_GetHCLKFreq>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	4b06      	ldr	r3, [pc, #24]	@ (8002d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	0a1b      	lsrs	r3, r3, #8
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	4904      	ldr	r1, [pc, #16]	@ (8002d5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d4a:	5ccb      	ldrb	r3, [r1, r3]
 8002d4c:	f003 031f 	and.w	r3, r3, #31
 8002d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	08005d84 	.word	0x08005d84

08002d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d64:	f7ff ffda 	bl	8002d1c <HAL_RCC_GetHCLKFreq>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	4b06      	ldr	r3, [pc, #24]	@ (8002d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	0adb      	lsrs	r3, r3, #11
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	4904      	ldr	r1, [pc, #16]	@ (8002d88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d76:	5ccb      	ldrb	r3, [r1, r3]
 8002d78:	f003 031f 	and.w	r3, r3, #31
 8002d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40021000 	.word	0x40021000
 8002d88:	08005d84 	.word	0x08005d84

08002d8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d94:	2300      	movs	r3, #0
 8002d96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d98:	4b27      	ldr	r3, [pc, #156]	@ (8002e38 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002da4:	f7ff f8f6 	bl	8001f94 <HAL_PWREx_GetVoltageRange>
 8002da8:	6178      	str	r0, [r7, #20]
 8002daa:	e014      	b.n	8002dd6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dac:	4b22      	ldr	r3, [pc, #136]	@ (8002e38 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db0:	4a21      	ldr	r2, [pc, #132]	@ (8002e38 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002db2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002db6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002db8:	4b1f      	ldr	r3, [pc, #124]	@ (8002e38 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002dc4:	f7ff f8e6 	bl	8001f94 <HAL_PWREx_GetVoltageRange>
 8002dc8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002dca:	4b1b      	ldr	r3, [pc, #108]	@ (8002e38 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dce:	4a1a      	ldr	r2, [pc, #104]	@ (8002e38 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dd4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ddc:	d10b      	bne.n	8002df6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b80      	cmp	r3, #128	@ 0x80
 8002de2:	d913      	bls.n	8002e0c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2ba0      	cmp	r3, #160	@ 0xa0
 8002de8:	d902      	bls.n	8002df0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dea:	2302      	movs	r3, #2
 8002dec:	613b      	str	r3, [r7, #16]
 8002dee:	e00d      	b.n	8002e0c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002df0:	2301      	movs	r3, #1
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	e00a      	b.n	8002e0c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b7f      	cmp	r3, #127	@ 0x7f
 8002dfa:	d902      	bls.n	8002e02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	e004      	b.n	8002e0c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b70      	cmp	r3, #112	@ 0x70
 8002e06:	d101      	bne.n	8002e0c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e08:	2301      	movs	r3, #1
 8002e0a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e3c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f023 020f 	bic.w	r2, r3, #15
 8002e14:	4909      	ldr	r1, [pc, #36]	@ (8002e3c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e1c:	4b07      	ldr	r3, [pc, #28]	@ (8002e3c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 030f 	and.w	r3, r3, #15
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d001      	beq.n	8002e2e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	40022000 	.word	0x40022000

08002e40 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e46:	4b2d      	ldr	r3, [pc, #180]	@ (8002efc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d00b      	beq.n	8002e6e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d825      	bhi.n	8002ea8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d008      	beq.n	8002e74 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d11f      	bne.n	8002ea8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002e68:	4b25      	ldr	r3, [pc, #148]	@ (8002f00 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002e6a:	613b      	str	r3, [r7, #16]
    break;
 8002e6c:	e01f      	b.n	8002eae <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002e6e:	4b25      	ldr	r3, [pc, #148]	@ (8002f04 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002e70:	613b      	str	r3, [r7, #16]
    break;
 8002e72:	e01c      	b.n	8002eae <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e74:	4b21      	ldr	r3, [pc, #132]	@ (8002efc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d107      	bne.n	8002e90 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e80:	4b1e      	ldr	r3, [pc, #120]	@ (8002efc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e86:	0a1b      	lsrs	r3, r3, #8
 8002e88:	f003 030f 	and.w	r3, r3, #15
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	e005      	b.n	8002e9c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e90:	4b1a      	ldr	r3, [pc, #104]	@ (8002efc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002e9c:	4a1a      	ldr	r2, [pc, #104]	@ (8002f08 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea4:	613b      	str	r3, [r7, #16]
    break;
 8002ea6:	e002      	b.n	8002eae <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	613b      	str	r3, [r7, #16]
    break;
 8002eac:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002eae:	4b13      	ldr	r3, [pc, #76]	@ (8002efc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	091b      	lsrs	r3, r3, #4
 8002eb4:	f003 030f 	and.w	r3, r3, #15
 8002eb8:	3301      	adds	r3, #1
 8002eba:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8002efc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	0a1b      	lsrs	r3, r3, #8
 8002ec2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	fb03 f202 	mul.w	r2, r3, r2
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ed4:	4b09      	ldr	r3, [pc, #36]	@ (8002efc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	0e5b      	lsrs	r3, r3, #25
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	3301      	adds	r3, #1
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eec:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002eee:	683b      	ldr	r3, [r7, #0]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	371c      	adds	r7, #28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	40021000 	.word	0x40021000
 8002f00:	00f42400 	.word	0x00f42400
 8002f04:	007a1200 	.word	0x007a1200
 8002f08:	08005d8c 	.word	0x08005d8c

08002f0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f14:	2300      	movs	r3, #0
 8002f16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f18:	2300      	movs	r3, #0
 8002f1a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d040      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f2c:	2b80      	cmp	r3, #128	@ 0x80
 8002f2e:	d02a      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002f30:	2b80      	cmp	r3, #128	@ 0x80
 8002f32:	d825      	bhi.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f34:	2b60      	cmp	r3, #96	@ 0x60
 8002f36:	d026      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002f38:	2b60      	cmp	r3, #96	@ 0x60
 8002f3a:	d821      	bhi.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f3c:	2b40      	cmp	r3, #64	@ 0x40
 8002f3e:	d006      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002f40:	2b40      	cmp	r3, #64	@ 0x40
 8002f42:	d81d      	bhi.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d009      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002f48:	2b20      	cmp	r3, #32
 8002f4a:	d010      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002f4c:	e018      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f4e:	4b89      	ldr	r3, [pc, #548]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	4a88      	ldr	r2, [pc, #544]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f58:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f5a:	e015      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3304      	adds	r3, #4
 8002f60:	2100      	movs	r1, #0
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 fb02 	bl	800356c <RCCEx_PLLSAI1_Config>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f6c:	e00c      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3320      	adds	r3, #32
 8002f72:	2100      	movs	r1, #0
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 fbed 	bl	8003754 <RCCEx_PLLSAI2_Config>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f7e:	e003      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	74fb      	strb	r3, [r7, #19]
      break;
 8002f84:	e000      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002f86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f88:	7cfb      	ldrb	r3, [r7, #19]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10b      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f8e:	4b79      	ldr	r3, [pc, #484]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f94:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f9c:	4975      	ldr	r1, [pc, #468]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002fa4:	e001      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa6:	7cfb      	ldrb	r3, [r7, #19]
 8002fa8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d047      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fbe:	d030      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002fc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fc4:	d82a      	bhi.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002fc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fca:	d02a      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002fcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fd0:	d824      	bhi.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002fd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fd6:	d008      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002fd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fdc:	d81e      	bhi.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002fe2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fe6:	d010      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002fe8:	e018      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fea:	4b62      	ldr	r3, [pc, #392]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	4a61      	ldr	r2, [pc, #388]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ff4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ff6:	e015      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3304      	adds	r3, #4
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 fab4 	bl	800356c <RCCEx_PLLSAI1_Config>
 8003004:	4603      	mov	r3, r0
 8003006:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003008:	e00c      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3320      	adds	r3, #32
 800300e:	2100      	movs	r1, #0
 8003010:	4618      	mov	r0, r3
 8003012:	f000 fb9f 	bl	8003754 <RCCEx_PLLSAI2_Config>
 8003016:	4603      	mov	r3, r0
 8003018:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800301a:	e003      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	74fb      	strb	r3, [r7, #19]
      break;
 8003020:	e000      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003022:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003024:	7cfb      	ldrb	r3, [r7, #19]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10b      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800302a:	4b52      	ldr	r3, [pc, #328]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800302c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003030:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003038:	494e      	ldr	r1, [pc, #312]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003040:	e001      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003042:	7cfb      	ldrb	r3, [r7, #19]
 8003044:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 809f 	beq.w	8003192 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003054:	2300      	movs	r3, #0
 8003056:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003058:	4b46      	ldr	r3, [pc, #280]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800305a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003068:	2300      	movs	r3, #0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00d      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800306e:	4b41      	ldr	r3, [pc, #260]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003072:	4a40      	ldr	r2, [pc, #256]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003074:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003078:	6593      	str	r3, [r2, #88]	@ 0x58
 800307a:	4b3e      	ldr	r3, [pc, #248]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800307c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800307e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003082:	60bb      	str	r3, [r7, #8]
 8003084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003086:	2301      	movs	r3, #1
 8003088:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800308a:	4b3b      	ldr	r3, [pc, #236]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a3a      	ldr	r2, [pc, #232]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003094:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003096:	f7fe f8b7 	bl	8001208 <HAL_GetTick>
 800309a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800309c:	e009      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800309e:	f7fe f8b3 	bl	8001208 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d902      	bls.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	74fb      	strb	r3, [r7, #19]
        break;
 80030b0:	e005      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030b2:	4b31      	ldr	r3, [pc, #196]	@ (8003178 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0ef      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80030be:	7cfb      	ldrb	r3, [r7, #19]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d15b      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ce:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d01f      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d019      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030e2:	4b24      	ldr	r3, [pc, #144]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030ec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030ee:	4b21      	ldr	r3, [pc, #132]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030f4:	4a1f      	ldr	r2, [pc, #124]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003104:	4a1b      	ldr	r2, [pc, #108]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003106:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800310a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800310e:	4a19      	ldr	r2, [pc, #100]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d016      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003120:	f7fe f872 	bl	8001208 <HAL_GetTick>
 8003124:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003126:	e00b      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003128:	f7fe f86e 	bl	8001208 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003136:	4293      	cmp	r3, r2
 8003138:	d902      	bls.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	74fb      	strb	r3, [r7, #19]
            break;
 800313e:	e006      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003140:	4b0c      	ldr	r3, [pc, #48]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0ec      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800314e:	7cfb      	ldrb	r3, [r7, #19]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10c      	bne.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003154:	4b07      	ldr	r3, [pc, #28]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003164:	4903      	ldr	r1, [pc, #12]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003166:	4313      	orrs	r3, r2
 8003168:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800316c:	e008      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800316e:	7cfb      	ldrb	r3, [r7, #19]
 8003170:	74bb      	strb	r3, [r7, #18]
 8003172:	e005      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003174:	40021000 	.word	0x40021000
 8003178:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800317c:	7cfb      	ldrb	r3, [r7, #19]
 800317e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003180:	7c7b      	ldrb	r3, [r7, #17]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d105      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003186:	4ba0      	ldr	r3, [pc, #640]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318a:	4a9f      	ldr	r2, [pc, #636]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800318c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003190:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800319e:	4b9a      	ldr	r3, [pc, #616]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a4:	f023 0203 	bic.w	r2, r3, #3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ac:	4996      	ldr	r1, [pc, #600]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00a      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031c0:	4b91      	ldr	r3, [pc, #580]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c6:	f023 020c 	bic.w	r2, r3, #12
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ce:	498e      	ldr	r1, [pc, #568]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031e2:	4b89      	ldr	r3, [pc, #548]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f0:	4985      	ldr	r1, [pc, #532]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0308 	and.w	r3, r3, #8
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003204:	4b80      	ldr	r3, [pc, #512]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800320a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003212:	497d      	ldr	r1, [pc, #500]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0310 	and.w	r3, r3, #16
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003226:	4b78      	ldr	r3, [pc, #480]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003234:	4974      	ldr	r1, [pc, #464]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00a      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003248:	4b6f      	ldr	r3, [pc, #444]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800324a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800324e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003256:	496c      	ldr	r1, [pc, #432]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00a      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800326a:	4b67      	ldr	r3, [pc, #412]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800326c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003270:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003278:	4963      	ldr	r1, [pc, #396]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00a      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800328c:	4b5e      	ldr	r3, [pc, #376]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800328e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003292:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800329a:	495b      	ldr	r1, [pc, #364]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800329c:	4313      	orrs	r3, r2
 800329e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032ae:	4b56      	ldr	r3, [pc, #344]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032bc:	4952      	ldr	r1, [pc, #328]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00a      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032d0:	4b4d      	ldr	r3, [pc, #308]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032d6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032de:	494a      	ldr	r1, [pc, #296]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032f2:	4b45      	ldr	r3, [pc, #276]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003300:	4941      	ldr	r1, [pc, #260]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003302:	4313      	orrs	r3, r2
 8003304:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00a      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003314:	4b3c      	ldr	r3, [pc, #240]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003316:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800331a:	f023 0203 	bic.w	r2, r3, #3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003322:	4939      	ldr	r1, [pc, #228]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d028      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003336:	4b34      	ldr	r3, [pc, #208]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800333c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003344:	4930      	ldr	r1, [pc, #192]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003346:	4313      	orrs	r3, r2
 8003348:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003350:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003354:	d106      	bne.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003356:	4b2c      	ldr	r3, [pc, #176]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	4a2b      	ldr	r2, [pc, #172]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800335c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003360:	60d3      	str	r3, [r2, #12]
 8003362:	e011      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003368:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800336c:	d10c      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3304      	adds	r3, #4
 8003372:	2101      	movs	r1, #1
 8003374:	4618      	mov	r0, r3
 8003376:	f000 f8f9 	bl	800356c <RCCEx_PLLSAI1_Config>
 800337a:	4603      	mov	r3, r0
 800337c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800337e:	7cfb      	ldrb	r3, [r7, #19]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003384:	7cfb      	ldrb	r3, [r7, #19]
 8003386:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d04d      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003398:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800339c:	d108      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800339e:	4b1a      	ldr	r3, [pc, #104]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033a4:	4a18      	ldr	r2, [pc, #96]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033aa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80033ae:	e012      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80033b0:	4b15      	ldr	r3, [pc, #84]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033b6:	4a14      	ldr	r2, [pc, #80]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033bc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80033c0:	4b11      	ldr	r3, [pc, #68]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033ce:	490e      	ldr	r1, [pc, #56]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033de:	d106      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033e0:	4b09      	ldr	r3, [pc, #36]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	4a08      	ldr	r2, [pc, #32]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033ea:	60d3      	str	r3, [r2, #12]
 80033ec:	e020      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033f6:	d109      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033f8:	4b03      	ldr	r3, [pc, #12]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	4a02      	ldr	r2, [pc, #8]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003402:	60d3      	str	r3, [r2, #12]
 8003404:	e014      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003406:	bf00      	nop
 8003408:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003410:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003414:	d10c      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3304      	adds	r3, #4
 800341a:	2101      	movs	r1, #1
 800341c:	4618      	mov	r0, r3
 800341e:	f000 f8a5 	bl	800356c <RCCEx_PLLSAI1_Config>
 8003422:	4603      	mov	r3, r0
 8003424:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003426:	7cfb      	ldrb	r3, [r7, #19]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800342c:	7cfb      	ldrb	r3, [r7, #19]
 800342e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d028      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800343c:	4b4a      	ldr	r3, [pc, #296]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800343e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003442:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800344a:	4947      	ldr	r1, [pc, #284]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003456:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800345a:	d106      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800345c:	4b42      	ldr	r3, [pc, #264]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	4a41      	ldr	r2, [pc, #260]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003462:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003466:	60d3      	str	r3, [r2, #12]
 8003468:	e011      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800346e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003472:	d10c      	bne.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3304      	adds	r3, #4
 8003478:	2101      	movs	r1, #1
 800347a:	4618      	mov	r0, r3
 800347c:	f000 f876 	bl	800356c <RCCEx_PLLSAI1_Config>
 8003480:	4603      	mov	r3, r0
 8003482:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003484:	7cfb      	ldrb	r3, [r7, #19]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800348a:	7cfb      	ldrb	r3, [r7, #19]
 800348c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d01e      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800349a:	4b33      	ldr	r3, [pc, #204]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800349c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034aa:	492f      	ldr	r1, [pc, #188]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034bc:	d10c      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3304      	adds	r3, #4
 80034c2:	2102      	movs	r1, #2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 f851 	bl	800356c <RCCEx_PLLSAI1_Config>
 80034ca:	4603      	mov	r3, r0
 80034cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034ce:	7cfb      	ldrb	r3, [r7, #19]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80034d4:	7cfb      	ldrb	r3, [r7, #19]
 80034d6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00b      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034e4:	4b20      	ldr	r3, [pc, #128]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034ea:	f023 0204 	bic.w	r2, r3, #4
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034f4:	491c      	ldr	r1, [pc, #112]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00b      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003508:	4b17      	ldr	r3, [pc, #92]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800350a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800350e:	f023 0218 	bic.w	r2, r3, #24
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003518:	4913      	ldr	r1, [pc, #76]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d017      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800352c:	4b0e      	ldr	r3, [pc, #56]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800352e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003532:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800353c:	490a      	ldr	r1, [pc, #40]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800353e:	4313      	orrs	r3, r2
 8003540:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800354a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800354e:	d105      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003550:	4b05      	ldr	r3, [pc, #20]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4a04      	ldr	r2, [pc, #16]	@ (8003568 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003556:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800355a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800355c:	7cbb      	ldrb	r3, [r7, #18]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40021000 	.word	0x40021000

0800356c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800357a:	4b72      	ldr	r3, [pc, #456]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00e      	beq.n	80035a4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003586:	4b6f      	ldr	r3, [pc, #444]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f003 0203 	and.w	r2, r3, #3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d103      	bne.n	800359e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
       ||
 800359a:	2b00      	cmp	r3, #0
 800359c:	d142      	bne.n	8003624 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	73fb      	strb	r3, [r7, #15]
 80035a2:	e03f      	b.n	8003624 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d018      	beq.n	80035de <RCCEx_PLLSAI1_Config+0x72>
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d825      	bhi.n	80035fc <RCCEx_PLLSAI1_Config+0x90>
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d002      	beq.n	80035ba <RCCEx_PLLSAI1_Config+0x4e>
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d009      	beq.n	80035cc <RCCEx_PLLSAI1_Config+0x60>
 80035b8:	e020      	b.n	80035fc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035ba:	4b62      	ldr	r3, [pc, #392]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d11d      	bne.n	8003602 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035ca:	e01a      	b.n	8003602 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035cc:	4b5d      	ldr	r3, [pc, #372]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d116      	bne.n	8003606 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035dc:	e013      	b.n	8003606 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035de:	4b59      	ldr	r3, [pc, #356]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10f      	bne.n	800360a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035ea:	4b56      	ldr	r3, [pc, #344]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d109      	bne.n	800360a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035fa:	e006      	b.n	800360a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003600:	e004      	b.n	800360c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003602:	bf00      	nop
 8003604:	e002      	b.n	800360c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003606:	bf00      	nop
 8003608:	e000      	b.n	800360c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800360a:	bf00      	nop
    }

    if(status == HAL_OK)
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d108      	bne.n	8003624 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003612:	4b4c      	ldr	r3, [pc, #304]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f023 0203 	bic.w	r2, r3, #3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4949      	ldr	r1, [pc, #292]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003620:	4313      	orrs	r3, r2
 8003622:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003624:	7bfb      	ldrb	r3, [r7, #15]
 8003626:	2b00      	cmp	r3, #0
 8003628:	f040 8086 	bne.w	8003738 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800362c:	4b45      	ldr	r3, [pc, #276]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a44      	ldr	r2, [pc, #272]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003632:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003636:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003638:	f7fd fde6 	bl	8001208 <HAL_GetTick>
 800363c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800363e:	e009      	b.n	8003654 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003640:	f7fd fde2 	bl	8001208 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d902      	bls.n	8003654 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	73fb      	strb	r3, [r7, #15]
        break;
 8003652:	e005      	b.n	8003660 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003654:	4b3b      	ldr	r3, [pc, #236]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1ef      	bne.n	8003640 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d168      	bne.n	8003738 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d113      	bne.n	8003694 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800366c:	4b35      	ldr	r3, [pc, #212]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	4b35      	ldr	r3, [pc, #212]	@ (8003748 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003672:	4013      	ands	r3, r2
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6892      	ldr	r2, [r2, #8]
 8003678:	0211      	lsls	r1, r2, #8
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	68d2      	ldr	r2, [r2, #12]
 800367e:	06d2      	lsls	r2, r2, #27
 8003680:	4311      	orrs	r1, r2
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6852      	ldr	r2, [r2, #4]
 8003686:	3a01      	subs	r2, #1
 8003688:	0112      	lsls	r2, r2, #4
 800368a:	430a      	orrs	r2, r1
 800368c:	492d      	ldr	r1, [pc, #180]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 800368e:	4313      	orrs	r3, r2
 8003690:	610b      	str	r3, [r1, #16]
 8003692:	e02d      	b.n	80036f0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d115      	bne.n	80036c6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800369a:	4b2a      	ldr	r3, [pc, #168]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 800369c:	691a      	ldr	r2, [r3, #16]
 800369e:	4b2b      	ldr	r3, [pc, #172]	@ (800374c <RCCEx_PLLSAI1_Config+0x1e0>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6892      	ldr	r2, [r2, #8]
 80036a6:	0211      	lsls	r1, r2, #8
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6912      	ldr	r2, [r2, #16]
 80036ac:	0852      	lsrs	r2, r2, #1
 80036ae:	3a01      	subs	r2, #1
 80036b0:	0552      	lsls	r2, r2, #21
 80036b2:	4311      	orrs	r1, r2
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6852      	ldr	r2, [r2, #4]
 80036b8:	3a01      	subs	r2, #1
 80036ba:	0112      	lsls	r2, r2, #4
 80036bc:	430a      	orrs	r2, r1
 80036be:	4921      	ldr	r1, [pc, #132]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	610b      	str	r3, [r1, #16]
 80036c4:	e014      	b.n	80036f0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036c6:	4b1f      	ldr	r3, [pc, #124]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036c8:	691a      	ldr	r2, [r3, #16]
 80036ca:	4b21      	ldr	r3, [pc, #132]	@ (8003750 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036cc:	4013      	ands	r3, r2
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6892      	ldr	r2, [r2, #8]
 80036d2:	0211      	lsls	r1, r2, #8
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6952      	ldr	r2, [r2, #20]
 80036d8:	0852      	lsrs	r2, r2, #1
 80036da:	3a01      	subs	r2, #1
 80036dc:	0652      	lsls	r2, r2, #25
 80036de:	4311      	orrs	r1, r2
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6852      	ldr	r2, [r2, #4]
 80036e4:	3a01      	subs	r2, #1
 80036e6:	0112      	lsls	r2, r2, #4
 80036e8:	430a      	orrs	r2, r1
 80036ea:	4916      	ldr	r1, [pc, #88]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036f0:	4b14      	ldr	r3, [pc, #80]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a13      	ldr	r2, [pc, #76]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fc:	f7fd fd84 	bl	8001208 <HAL_GetTick>
 8003700:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003702:	e009      	b.n	8003718 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003704:	f7fd fd80 	bl	8001208 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d902      	bls.n	8003718 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	73fb      	strb	r3, [r7, #15]
          break;
 8003716:	e005      	b.n	8003724 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003718:	4b0a      	ldr	r3, [pc, #40]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0ef      	beq.n	8003704 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003724:	7bfb      	ldrb	r3, [r7, #15]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d106      	bne.n	8003738 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800372a:	4b06      	ldr	r3, [pc, #24]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	4904      	ldr	r1, [pc, #16]	@ (8003744 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003734:	4313      	orrs	r3, r2
 8003736:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003738:	7bfb      	ldrb	r3, [r7, #15]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40021000 	.word	0x40021000
 8003748:	07ff800f 	.word	0x07ff800f
 800374c:	ff9f800f 	.word	0xff9f800f
 8003750:	f9ff800f 	.word	0xf9ff800f

08003754 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003762:	4b72      	ldr	r3, [pc, #456]	@ (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00e      	beq.n	800378c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800376e:	4b6f      	ldr	r3, [pc, #444]	@ (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f003 0203 	and.w	r2, r3, #3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d103      	bne.n	8003786 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
       ||
 8003782:	2b00      	cmp	r3, #0
 8003784:	d142      	bne.n	800380c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	73fb      	strb	r3, [r7, #15]
 800378a:	e03f      	b.n	800380c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b03      	cmp	r3, #3
 8003792:	d018      	beq.n	80037c6 <RCCEx_PLLSAI2_Config+0x72>
 8003794:	2b03      	cmp	r3, #3
 8003796:	d825      	bhi.n	80037e4 <RCCEx_PLLSAI2_Config+0x90>
 8003798:	2b01      	cmp	r3, #1
 800379a:	d002      	beq.n	80037a2 <RCCEx_PLLSAI2_Config+0x4e>
 800379c:	2b02      	cmp	r3, #2
 800379e:	d009      	beq.n	80037b4 <RCCEx_PLLSAI2_Config+0x60>
 80037a0:	e020      	b.n	80037e4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037a2:	4b62      	ldr	r3, [pc, #392]	@ (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d11d      	bne.n	80037ea <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037b2:	e01a      	b.n	80037ea <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037b4:	4b5d      	ldr	r3, [pc, #372]	@ (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d116      	bne.n	80037ee <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c4:	e013      	b.n	80037ee <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037c6:	4b59      	ldr	r3, [pc, #356]	@ (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10f      	bne.n	80037f2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037d2:	4b56      	ldr	r3, [pc, #344]	@ (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037e2:	e006      	b.n	80037f2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	73fb      	strb	r3, [r7, #15]
      break;
 80037e8:	e004      	b.n	80037f4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80037ea:	bf00      	nop
 80037ec:	e002      	b.n	80037f4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80037ee:	bf00      	nop
 80037f0:	e000      	b.n	80037f4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80037f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d108      	bne.n	800380c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80037fa:	4b4c      	ldr	r3, [pc, #304]	@ (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f023 0203 	bic.w	r2, r3, #3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4949      	ldr	r1, [pc, #292]	@ (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003808:	4313      	orrs	r3, r2
 800380a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	2b00      	cmp	r3, #0
 8003810:	f040 8086 	bne.w	8003920 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003814:	4b45      	ldr	r3, [pc, #276]	@ (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a44      	ldr	r2, [pc, #272]	@ (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 800381a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800381e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003820:	f7fd fcf2 	bl	8001208 <HAL_GetTick>
 8003824:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003826:	e009      	b.n	800383c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003828:	f7fd fcee 	bl	8001208 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d902      	bls.n	800383c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	73fb      	strb	r3, [r7, #15]
        break;
 800383a:	e005      	b.n	8003848 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800383c:	4b3b      	ldr	r3, [pc, #236]	@ (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1ef      	bne.n	8003828 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003848:	7bfb      	ldrb	r3, [r7, #15]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d168      	bne.n	8003920 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d113      	bne.n	800387c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003854:	4b35      	ldr	r3, [pc, #212]	@ (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003856:	695a      	ldr	r2, [r3, #20]
 8003858:	4b35      	ldr	r3, [pc, #212]	@ (8003930 <RCCEx_PLLSAI2_Config+0x1dc>)
 800385a:	4013      	ands	r3, r2
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6892      	ldr	r2, [r2, #8]
 8003860:	0211      	lsls	r1, r2, #8
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	68d2      	ldr	r2, [r2, #12]
 8003866:	06d2      	lsls	r2, r2, #27
 8003868:	4311      	orrs	r1, r2
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6852      	ldr	r2, [r2, #4]
 800386e:	3a01      	subs	r2, #1
 8003870:	0112      	lsls	r2, r2, #4
 8003872:	430a      	orrs	r2, r1
 8003874:	492d      	ldr	r1, [pc, #180]	@ (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003876:	4313      	orrs	r3, r2
 8003878:	614b      	str	r3, [r1, #20]
 800387a:	e02d      	b.n	80038d8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d115      	bne.n	80038ae <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003882:	4b2a      	ldr	r3, [pc, #168]	@ (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003884:	695a      	ldr	r2, [r3, #20]
 8003886:	4b2b      	ldr	r3, [pc, #172]	@ (8003934 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003888:	4013      	ands	r3, r2
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6892      	ldr	r2, [r2, #8]
 800388e:	0211      	lsls	r1, r2, #8
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6912      	ldr	r2, [r2, #16]
 8003894:	0852      	lsrs	r2, r2, #1
 8003896:	3a01      	subs	r2, #1
 8003898:	0552      	lsls	r2, r2, #21
 800389a:	4311      	orrs	r1, r2
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6852      	ldr	r2, [r2, #4]
 80038a0:	3a01      	subs	r2, #1
 80038a2:	0112      	lsls	r2, r2, #4
 80038a4:	430a      	orrs	r2, r1
 80038a6:	4921      	ldr	r1, [pc, #132]	@ (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	614b      	str	r3, [r1, #20]
 80038ac:	e014      	b.n	80038d8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038ae:	4b1f      	ldr	r3, [pc, #124]	@ (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 80038b0:	695a      	ldr	r2, [r3, #20]
 80038b2:	4b21      	ldr	r3, [pc, #132]	@ (8003938 <RCCEx_PLLSAI2_Config+0x1e4>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6892      	ldr	r2, [r2, #8]
 80038ba:	0211      	lsls	r1, r2, #8
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6952      	ldr	r2, [r2, #20]
 80038c0:	0852      	lsrs	r2, r2, #1
 80038c2:	3a01      	subs	r2, #1
 80038c4:	0652      	lsls	r2, r2, #25
 80038c6:	4311      	orrs	r1, r2
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6852      	ldr	r2, [r2, #4]
 80038cc:	3a01      	subs	r2, #1
 80038ce:	0112      	lsls	r2, r2, #4
 80038d0:	430a      	orrs	r2, r1
 80038d2:	4916      	ldr	r1, [pc, #88]	@ (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038d8:	4b14      	ldr	r3, [pc, #80]	@ (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a13      	ldr	r2, [pc, #76]	@ (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 80038de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e4:	f7fd fc90 	bl	8001208 <HAL_GetTick>
 80038e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038ea:	e009      	b.n	8003900 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038ec:	f7fd fc8c 	bl	8001208 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d902      	bls.n	8003900 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	73fb      	strb	r3, [r7, #15]
          break;
 80038fe:	e005      	b.n	800390c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003900:	4b0a      	ldr	r3, [pc, #40]	@ (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0ef      	beq.n	80038ec <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d106      	bne.n	8003920 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003912:	4b06      	ldr	r3, [pc, #24]	@ (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 8003914:	695a      	ldr	r2, [r3, #20]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	4904      	ldr	r1, [pc, #16]	@ (800392c <RCCEx_PLLSAI2_Config+0x1d8>)
 800391c:	4313      	orrs	r3, r2
 800391e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003920:	7bfb      	ldrb	r3, [r7, #15]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40021000 	.word	0x40021000
 8003930:	07ff800f 	.word	0x07ff800f
 8003934:	ff9f800f 	.word	0xff9f800f
 8003938:	f9ff800f 	.word	0xf9ff800f

0800393c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e042      	b.n	80039d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003954:	2b00      	cmp	r3, #0
 8003956:	d106      	bne.n	8003966 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7fd f993 	bl	8000c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2224      	movs	r2, #36	@ 0x24
 800396a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0201 	bic.w	r2, r2, #1
 800397c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 ff0a 	bl	80047a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 fc0b 	bl	80041a8 <UART_SetConfig>
 8003992:	4603      	mov	r3, r0
 8003994:	2b01      	cmp	r3, #1
 8003996:	d101      	bne.n	800399c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e01b      	b.n	80039d4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689a      	ldr	r2, [r3, #8]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80039ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0201 	orr.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 ff89 	bl	80048e4 <UART_CheckIdleState>
 80039d2:	4603      	mov	r3, r0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08a      	sub	sp, #40	@ 0x28
 80039e0:	af02      	add	r7, sp, #8
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	4613      	mov	r3, r2
 80039ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f2:	2b20      	cmp	r3, #32
 80039f4:	d17b      	bne.n	8003aee <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d002      	beq.n	8003a02 <HAL_UART_Transmit+0x26>
 80039fc:	88fb      	ldrh	r3, [r7, #6]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e074      	b.n	8003af0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2221      	movs	r2, #33	@ 0x21
 8003a12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a16:	f7fd fbf7 	bl	8001208 <HAL_GetTick>
 8003a1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	88fa      	ldrh	r2, [r7, #6]
 8003a20:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	88fa      	ldrh	r2, [r7, #6]
 8003a28:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a34:	d108      	bne.n	8003a48 <HAL_UART_Transmit+0x6c>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d104      	bne.n	8003a48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	e003      	b.n	8003a50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a50:	e030      	b.n	8003ab4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	2180      	movs	r1, #128	@ 0x80
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 ffeb 	bl	8004a38 <UART_WaitOnFlagUntilTimeout>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e03d      	b.n	8003af0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10b      	bne.n	8003a92 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	881a      	ldrh	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a86:	b292      	uxth	r2, r2
 8003a88:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	3302      	adds	r3, #2
 8003a8e:	61bb      	str	r3, [r7, #24]
 8003a90:	e007      	b.n	8003aa2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	781a      	ldrb	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1c8      	bne.n	8003a52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	2140      	movs	r1, #64	@ 0x40
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 ffb4 	bl	8004a38 <UART_WaitOnFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d005      	beq.n	8003ae2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e006      	b.n	8003af0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	e000      	b.n	8003af0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003aee:	2302      	movs	r3, #2
  }
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3720      	adds	r7, #32
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b0ba      	sub	sp, #232	@ 0xe8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003b22:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003b26:	4013      	ands	r3, r2
 8003b28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003b2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d11b      	bne.n	8003b6c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b38:	f003 0320 	and.w	r3, r3, #32
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d015      	beq.n	8003b6c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b44:	f003 0320 	and.w	r3, r3, #32
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d105      	bne.n	8003b58 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d009      	beq.n	8003b6c <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 8300 	beq.w	8004162 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	4798      	blx	r3
      }
      return;
 8003b6a:	e2fa      	b.n	8004162 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8003b6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8123 	beq.w	8003dbc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003b76:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003b7a:	4b8d      	ldr	r3, [pc, #564]	@ (8003db0 <HAL_UART_IRQHandler+0x2b8>)
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d106      	bne.n	8003b90 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003b82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003b86:	4b8b      	ldr	r3, [pc, #556]	@ (8003db4 <HAL_UART_IRQHandler+0x2bc>)
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 8116 	beq.w	8003dbc <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d011      	beq.n	8003bc0 <HAL_UART_IRQHandler+0xc8>
 8003b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00b      	beq.n	8003bc0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2201      	movs	r2, #1
 8003bae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb6:	f043 0201 	orr.w	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d011      	beq.n	8003bf0 <HAL_UART_IRQHandler+0xf8>
 8003bcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00b      	beq.n	8003bf0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2202      	movs	r2, #2
 8003bde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be6:	f043 0204 	orr.w	r2, r3, #4
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d011      	beq.n	8003c20 <HAL_UART_IRQHandler+0x128>
 8003bfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00b      	beq.n	8003c20 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2204      	movs	r2, #4
 8003c0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c16:	f043 0202 	orr.w	r2, r3, #2
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d017      	beq.n	8003c5c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c30:	f003 0320 	and.w	r3, r3, #32
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d105      	bne.n	8003c44 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003c38:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003c3c:	4b5c      	ldr	r3, [pc, #368]	@ (8003db0 <HAL_UART_IRQHandler+0x2b8>)
 8003c3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00b      	beq.n	8003c5c <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2208      	movs	r2, #8
 8003c4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c52:	f043 0208 	orr.w	r2, r3, #8
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d012      	beq.n	8003c8e <HAL_UART_IRQHandler+0x196>
 8003c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00c      	beq.n	8003c8e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c84:	f043 0220 	orr.w	r2, r3, #32
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 8266 	beq.w	8004166 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d013      	beq.n	8003cce <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d105      	bne.n	8003cbe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d007      	beq.n	8003cce <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce2:	2b40      	cmp	r3, #64	@ 0x40
 8003ce4:	d005      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003ce6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d054      	beq.n	8003d9c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 ff0d 	bl	8004b12 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d02:	2b40      	cmp	r3, #64	@ 0x40
 8003d04:	d146      	bne.n	8003d94 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	3308      	adds	r3, #8
 8003d0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d14:	e853 3f00 	ldrex	r3, [r3]
 8003d18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003d1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d32:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003d36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003d3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003d42:	e841 2300 	strex	r3, r2, [r1]
 8003d46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003d4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1d9      	bne.n	8003d06 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d017      	beq.n	8003d8c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d62:	4a15      	ldr	r2, [pc, #84]	@ (8003db8 <HAL_UART_IRQHandler+0x2c0>)
 8003d64:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fd fc91 	bl	8001694 <HAL_DMA_Abort_IT>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d019      	beq.n	8003dac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8003d86:	4610      	mov	r0, r2
 8003d88:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d8a:	e00f      	b.n	8003dac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f9f5 	bl	800417c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d92:	e00b      	b.n	8003dac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f9f1 	bl	800417c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d9a:	e007      	b.n	8003dac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f9ed 	bl	800417c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8003daa:	e1dc      	b.n	8004166 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dac:	bf00      	nop
    return;
 8003dae:	e1da      	b.n	8004166 <HAL_UART_IRQHandler+0x66e>
 8003db0:	10000001 	.word	0x10000001
 8003db4:	04000120 	.word	0x04000120
 8003db8:	08004bdf 	.word	0x08004bdf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	f040 8170 	bne.w	80040a6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dca:	f003 0310 	and.w	r3, r3, #16
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 8169 	beq.w	80040a6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dd8:	f003 0310 	and.w	r3, r3, #16
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 8162 	beq.w	80040a6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2210      	movs	r2, #16
 8003de8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df4:	2b40      	cmp	r3, #64	@ 0x40
 8003df6:	f040 80d8 	bne.w	8003faa <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 80af 	beq.w	8003f70 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003e18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	f080 80a7 	bcs.w	8003f70 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0320 	and.w	r3, r3, #32
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f040 8087 	bne.w	8003f4e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e48:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e4c:	e853 3f00 	ldrex	r3, [r3]
 8003e50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003e54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	461a      	mov	r2, r3
 8003e66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003e6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003e6e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e72:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003e76:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e7a:	e841 2300 	strex	r3, r2, [r1]
 8003e7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1da      	bne.n	8003e40 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	3308      	adds	r3, #8
 8003e90:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e94:	e853 3f00 	ldrex	r3, [r3]
 8003e98:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003e9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e9c:	f023 0301 	bic.w	r3, r3, #1
 8003ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	3308      	adds	r3, #8
 8003eaa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003eae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003eb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003eb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003eba:	e841 2300 	strex	r3, r2, [r1]
 8003ebe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ec0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1e1      	bne.n	8003e8a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3308      	adds	r3, #8
 8003ecc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ece:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ed0:	e853 3f00 	ldrex	r3, [r3]
 8003ed4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ed6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ed8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003edc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3308      	adds	r3, #8
 8003ee6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003eea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003eec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003ef0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ef2:	e841 2300 	strex	r3, r2, [r1]
 8003ef6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003ef8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1e3      	bne.n	8003ec6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f14:	e853 3f00 	ldrex	r3, [r3]
 8003f18:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f1c:	f023 0310 	bic.w	r3, r3, #16
 8003f20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	461a      	mov	r2, r3
 8003f2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f30:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f36:	e841 2300 	strex	r3, r2, [r1]
 8003f3a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1e4      	bne.n	8003f0c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7fd fb47 	bl	80015dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2202      	movs	r2, #2
 8003f52:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	4619      	mov	r1, r3
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f911 	bl	8004190 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003f6e:	e0fc      	b.n	800416a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003f76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	f040 80f5 	bne.w	800416a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	f040 80eb 	bne.w	800416a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f8f4 	bl	8004190 <HAL_UARTEx_RxEventCallback>
      return;
 8003fa8:	e0df      	b.n	800416a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 80d1 	beq.w	800416e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8003fcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 80cc 	beq.w	800416e <HAL_UART_IRQHandler+0x676>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fde:	e853 3f00 	ldrex	r3, [r3]
 8003fe2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fe6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ffa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ffe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004000:	e841 2300 	strex	r3, r2, [r1]
 8004004:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e4      	bne.n	8003fd6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3308      	adds	r3, #8
 8004012:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004016:	e853 3f00 	ldrex	r3, [r3]
 800401a:	623b      	str	r3, [r7, #32]
   return(result);
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004022:	f023 0301 	bic.w	r3, r3, #1
 8004026:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	3308      	adds	r3, #8
 8004030:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004034:	633a      	str	r2, [r7, #48]	@ 0x30
 8004036:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004038:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800403a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800403c:	e841 2300 	strex	r3, r2, [r1]
 8004040:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1e1      	bne.n	800400c <HAL_UART_IRQHandler+0x514>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2220      	movs	r2, #32
 800404c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	e853 3f00 	ldrex	r3, [r3]
 8004068:	60fb      	str	r3, [r7, #12]
   return(result);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f023 0310 	bic.w	r3, r3, #16
 8004070:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	461a      	mov	r2, r3
 800407a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800407e:	61fb      	str	r3, [r7, #28]
 8004080:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004082:	69b9      	ldr	r1, [r7, #24]
 8004084:	69fa      	ldr	r2, [r7, #28]
 8004086:	e841 2300 	strex	r3, r2, [r1]
 800408a:	617b      	str	r3, [r7, #20]
   return(result);
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1e4      	bne.n	800405c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2202      	movs	r2, #2
 8004096:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004098:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800409c:	4619      	mov	r1, r3
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f876 	bl	8004190 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040a4:	e063      	b.n	800416e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80040a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00e      	beq.n	80040d0 <HAL_UART_IRQHandler+0x5d8>
 80040b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d008      	beq.n	80040d0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80040c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 fdc9 	bl	8004c60 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040ce:	e051      	b.n	8004174 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80040d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d014      	beq.n	8004106 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80040dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d105      	bne.n	80040f4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80040e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d008      	beq.n	8004106 <HAL_UART_IRQHandler+0x60e>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d03a      	beq.n	8004172 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	4798      	blx	r3
    }
    return;
 8004104:	e035      	b.n	8004172 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800410a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800410e:	2b00      	cmp	r3, #0
 8004110:	d009      	beq.n	8004126 <HAL_UART_IRQHandler+0x62e>
 8004112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800411a:	2b00      	cmp	r3, #0
 800411c:	d003      	beq.n	8004126 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fd73 	bl	8004c0a <UART_EndTransmit_IT>
    return;
 8004124:	e026      	b.n	8004174 <HAL_UART_IRQHandler+0x67c>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800412a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d009      	beq.n	8004146 <HAL_UART_IRQHandler+0x64e>
 8004132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004136:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 fda2 	bl	8004c88 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004144:	e016      	b.n	8004174 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800414a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d010      	beq.n	8004174 <HAL_UART_IRQHandler+0x67c>
 8004152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004156:	2b00      	cmp	r3, #0
 8004158:	da0c      	bge.n	8004174 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 fd8a 	bl	8004c74 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004160:	e008      	b.n	8004174 <HAL_UART_IRQHandler+0x67c>
      return;
 8004162:	bf00      	nop
 8004164:	e006      	b.n	8004174 <HAL_UART_IRQHandler+0x67c>
    return;
 8004166:	bf00      	nop
 8004168:	e004      	b.n	8004174 <HAL_UART_IRQHandler+0x67c>
      return;
 800416a:	bf00      	nop
 800416c:	e002      	b.n	8004174 <HAL_UART_IRQHandler+0x67c>
      return;
 800416e:	bf00      	nop
 8004170:	e000      	b.n	8004174 <HAL_UART_IRQHandler+0x67c>
    return;
 8004172:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8004174:	37e8      	adds	r7, #232	@ 0xe8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop

0800417c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041ac:	b08c      	sub	sp, #48	@ 0x30
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	431a      	orrs	r2, r3
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	431a      	orrs	r2, r3
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	4baa      	ldr	r3, [pc, #680]	@ (8004480 <UART_SetConfig+0x2d8>)
 80041d8:	4013      	ands	r3, r2
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	6812      	ldr	r2, [r2, #0]
 80041de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041e0:	430b      	orrs	r3, r1
 80041e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	68da      	ldr	r2, [r3, #12]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a9f      	ldr	r2, [pc, #636]	@ (8004484 <UART_SetConfig+0x2dc>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d004      	beq.n	8004214 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004210:	4313      	orrs	r3, r2
 8004212:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800421e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	6812      	ldr	r2, [r2, #0]
 8004226:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004228:	430b      	orrs	r3, r1
 800422a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004232:	f023 010f 	bic.w	r1, r3, #15
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a90      	ldr	r2, [pc, #576]	@ (8004488 <UART_SetConfig+0x2e0>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d125      	bne.n	8004298 <UART_SetConfig+0xf0>
 800424c:	4b8f      	ldr	r3, [pc, #572]	@ (800448c <UART_SetConfig+0x2e4>)
 800424e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	2b03      	cmp	r3, #3
 8004258:	d81a      	bhi.n	8004290 <UART_SetConfig+0xe8>
 800425a:	a201      	add	r2, pc, #4	@ (adr r2, 8004260 <UART_SetConfig+0xb8>)
 800425c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004260:	08004271 	.word	0x08004271
 8004264:	08004281 	.word	0x08004281
 8004268:	08004279 	.word	0x08004279
 800426c:	08004289 	.word	0x08004289
 8004270:	2301      	movs	r3, #1
 8004272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004276:	e116      	b.n	80044a6 <UART_SetConfig+0x2fe>
 8004278:	2302      	movs	r3, #2
 800427a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800427e:	e112      	b.n	80044a6 <UART_SetConfig+0x2fe>
 8004280:	2304      	movs	r3, #4
 8004282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004286:	e10e      	b.n	80044a6 <UART_SetConfig+0x2fe>
 8004288:	2308      	movs	r3, #8
 800428a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800428e:	e10a      	b.n	80044a6 <UART_SetConfig+0x2fe>
 8004290:	2310      	movs	r3, #16
 8004292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004296:	e106      	b.n	80044a6 <UART_SetConfig+0x2fe>
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a7c      	ldr	r2, [pc, #496]	@ (8004490 <UART_SetConfig+0x2e8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d138      	bne.n	8004314 <UART_SetConfig+0x16c>
 80042a2:	4b7a      	ldr	r3, [pc, #488]	@ (800448c <UART_SetConfig+0x2e4>)
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a8:	f003 030c 	and.w	r3, r3, #12
 80042ac:	2b0c      	cmp	r3, #12
 80042ae:	d82d      	bhi.n	800430c <UART_SetConfig+0x164>
 80042b0:	a201      	add	r2, pc, #4	@ (adr r2, 80042b8 <UART_SetConfig+0x110>)
 80042b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b6:	bf00      	nop
 80042b8:	080042ed 	.word	0x080042ed
 80042bc:	0800430d 	.word	0x0800430d
 80042c0:	0800430d 	.word	0x0800430d
 80042c4:	0800430d 	.word	0x0800430d
 80042c8:	080042fd 	.word	0x080042fd
 80042cc:	0800430d 	.word	0x0800430d
 80042d0:	0800430d 	.word	0x0800430d
 80042d4:	0800430d 	.word	0x0800430d
 80042d8:	080042f5 	.word	0x080042f5
 80042dc:	0800430d 	.word	0x0800430d
 80042e0:	0800430d 	.word	0x0800430d
 80042e4:	0800430d 	.word	0x0800430d
 80042e8:	08004305 	.word	0x08004305
 80042ec:	2300      	movs	r3, #0
 80042ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042f2:	e0d8      	b.n	80044a6 <UART_SetConfig+0x2fe>
 80042f4:	2302      	movs	r3, #2
 80042f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042fa:	e0d4      	b.n	80044a6 <UART_SetConfig+0x2fe>
 80042fc:	2304      	movs	r3, #4
 80042fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004302:	e0d0      	b.n	80044a6 <UART_SetConfig+0x2fe>
 8004304:	2308      	movs	r3, #8
 8004306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800430a:	e0cc      	b.n	80044a6 <UART_SetConfig+0x2fe>
 800430c:	2310      	movs	r3, #16
 800430e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004312:	e0c8      	b.n	80044a6 <UART_SetConfig+0x2fe>
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a5e      	ldr	r2, [pc, #376]	@ (8004494 <UART_SetConfig+0x2ec>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d125      	bne.n	800436a <UART_SetConfig+0x1c2>
 800431e:	4b5b      	ldr	r3, [pc, #364]	@ (800448c <UART_SetConfig+0x2e4>)
 8004320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004324:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004328:	2b30      	cmp	r3, #48	@ 0x30
 800432a:	d016      	beq.n	800435a <UART_SetConfig+0x1b2>
 800432c:	2b30      	cmp	r3, #48	@ 0x30
 800432e:	d818      	bhi.n	8004362 <UART_SetConfig+0x1ba>
 8004330:	2b20      	cmp	r3, #32
 8004332:	d00a      	beq.n	800434a <UART_SetConfig+0x1a2>
 8004334:	2b20      	cmp	r3, #32
 8004336:	d814      	bhi.n	8004362 <UART_SetConfig+0x1ba>
 8004338:	2b00      	cmp	r3, #0
 800433a:	d002      	beq.n	8004342 <UART_SetConfig+0x19a>
 800433c:	2b10      	cmp	r3, #16
 800433e:	d008      	beq.n	8004352 <UART_SetConfig+0x1aa>
 8004340:	e00f      	b.n	8004362 <UART_SetConfig+0x1ba>
 8004342:	2300      	movs	r3, #0
 8004344:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004348:	e0ad      	b.n	80044a6 <UART_SetConfig+0x2fe>
 800434a:	2302      	movs	r3, #2
 800434c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004350:	e0a9      	b.n	80044a6 <UART_SetConfig+0x2fe>
 8004352:	2304      	movs	r3, #4
 8004354:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004358:	e0a5      	b.n	80044a6 <UART_SetConfig+0x2fe>
 800435a:	2308      	movs	r3, #8
 800435c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004360:	e0a1      	b.n	80044a6 <UART_SetConfig+0x2fe>
 8004362:	2310      	movs	r3, #16
 8004364:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004368:	e09d      	b.n	80044a6 <UART_SetConfig+0x2fe>
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a4a      	ldr	r2, [pc, #296]	@ (8004498 <UART_SetConfig+0x2f0>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d125      	bne.n	80043c0 <UART_SetConfig+0x218>
 8004374:	4b45      	ldr	r3, [pc, #276]	@ (800448c <UART_SetConfig+0x2e4>)
 8004376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800437a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800437e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004380:	d016      	beq.n	80043b0 <UART_SetConfig+0x208>
 8004382:	2bc0      	cmp	r3, #192	@ 0xc0
 8004384:	d818      	bhi.n	80043b8 <UART_SetConfig+0x210>
 8004386:	2b80      	cmp	r3, #128	@ 0x80
 8004388:	d00a      	beq.n	80043a0 <UART_SetConfig+0x1f8>
 800438a:	2b80      	cmp	r3, #128	@ 0x80
 800438c:	d814      	bhi.n	80043b8 <UART_SetConfig+0x210>
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <UART_SetConfig+0x1f0>
 8004392:	2b40      	cmp	r3, #64	@ 0x40
 8004394:	d008      	beq.n	80043a8 <UART_SetConfig+0x200>
 8004396:	e00f      	b.n	80043b8 <UART_SetConfig+0x210>
 8004398:	2300      	movs	r3, #0
 800439a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800439e:	e082      	b.n	80044a6 <UART_SetConfig+0x2fe>
 80043a0:	2302      	movs	r3, #2
 80043a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043a6:	e07e      	b.n	80044a6 <UART_SetConfig+0x2fe>
 80043a8:	2304      	movs	r3, #4
 80043aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043ae:	e07a      	b.n	80044a6 <UART_SetConfig+0x2fe>
 80043b0:	2308      	movs	r3, #8
 80043b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043b6:	e076      	b.n	80044a6 <UART_SetConfig+0x2fe>
 80043b8:	2310      	movs	r3, #16
 80043ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043be:	e072      	b.n	80044a6 <UART_SetConfig+0x2fe>
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a35      	ldr	r2, [pc, #212]	@ (800449c <UART_SetConfig+0x2f4>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d12a      	bne.n	8004420 <UART_SetConfig+0x278>
 80043ca:	4b30      	ldr	r3, [pc, #192]	@ (800448c <UART_SetConfig+0x2e4>)
 80043cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043d8:	d01a      	beq.n	8004410 <UART_SetConfig+0x268>
 80043da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043de:	d81b      	bhi.n	8004418 <UART_SetConfig+0x270>
 80043e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043e4:	d00c      	beq.n	8004400 <UART_SetConfig+0x258>
 80043e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043ea:	d815      	bhi.n	8004418 <UART_SetConfig+0x270>
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <UART_SetConfig+0x250>
 80043f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043f4:	d008      	beq.n	8004408 <UART_SetConfig+0x260>
 80043f6:	e00f      	b.n	8004418 <UART_SetConfig+0x270>
 80043f8:	2300      	movs	r3, #0
 80043fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043fe:	e052      	b.n	80044a6 <UART_SetConfig+0x2fe>
 8004400:	2302      	movs	r3, #2
 8004402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004406:	e04e      	b.n	80044a6 <UART_SetConfig+0x2fe>
 8004408:	2304      	movs	r3, #4
 800440a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800440e:	e04a      	b.n	80044a6 <UART_SetConfig+0x2fe>
 8004410:	2308      	movs	r3, #8
 8004412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004416:	e046      	b.n	80044a6 <UART_SetConfig+0x2fe>
 8004418:	2310      	movs	r3, #16
 800441a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800441e:	e042      	b.n	80044a6 <UART_SetConfig+0x2fe>
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a17      	ldr	r2, [pc, #92]	@ (8004484 <UART_SetConfig+0x2dc>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d13a      	bne.n	80044a0 <UART_SetConfig+0x2f8>
 800442a:	4b18      	ldr	r3, [pc, #96]	@ (800448c <UART_SetConfig+0x2e4>)
 800442c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004430:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004434:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004438:	d01a      	beq.n	8004470 <UART_SetConfig+0x2c8>
 800443a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800443e:	d81b      	bhi.n	8004478 <UART_SetConfig+0x2d0>
 8004440:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004444:	d00c      	beq.n	8004460 <UART_SetConfig+0x2b8>
 8004446:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800444a:	d815      	bhi.n	8004478 <UART_SetConfig+0x2d0>
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <UART_SetConfig+0x2b0>
 8004450:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004454:	d008      	beq.n	8004468 <UART_SetConfig+0x2c0>
 8004456:	e00f      	b.n	8004478 <UART_SetConfig+0x2d0>
 8004458:	2300      	movs	r3, #0
 800445a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800445e:	e022      	b.n	80044a6 <UART_SetConfig+0x2fe>
 8004460:	2302      	movs	r3, #2
 8004462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004466:	e01e      	b.n	80044a6 <UART_SetConfig+0x2fe>
 8004468:	2304      	movs	r3, #4
 800446a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800446e:	e01a      	b.n	80044a6 <UART_SetConfig+0x2fe>
 8004470:	2308      	movs	r3, #8
 8004472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004476:	e016      	b.n	80044a6 <UART_SetConfig+0x2fe>
 8004478:	2310      	movs	r3, #16
 800447a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800447e:	e012      	b.n	80044a6 <UART_SetConfig+0x2fe>
 8004480:	cfff69f3 	.word	0xcfff69f3
 8004484:	40008000 	.word	0x40008000
 8004488:	40013800 	.word	0x40013800
 800448c:	40021000 	.word	0x40021000
 8004490:	40004400 	.word	0x40004400
 8004494:	40004800 	.word	0x40004800
 8004498:	40004c00 	.word	0x40004c00
 800449c:	40005000 	.word	0x40005000
 80044a0:	2310      	movs	r3, #16
 80044a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4aae      	ldr	r2, [pc, #696]	@ (8004764 <UART_SetConfig+0x5bc>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	f040 8097 	bne.w	80045e0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d823      	bhi.n	8004502 <UART_SetConfig+0x35a>
 80044ba:	a201      	add	r2, pc, #4	@ (adr r2, 80044c0 <UART_SetConfig+0x318>)
 80044bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c0:	080044e5 	.word	0x080044e5
 80044c4:	08004503 	.word	0x08004503
 80044c8:	080044ed 	.word	0x080044ed
 80044cc:	08004503 	.word	0x08004503
 80044d0:	080044f3 	.word	0x080044f3
 80044d4:	08004503 	.word	0x08004503
 80044d8:	08004503 	.word	0x08004503
 80044dc:	08004503 	.word	0x08004503
 80044e0:	080044fb 	.word	0x080044fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044e4:	f7fe fc26 	bl	8002d34 <HAL_RCC_GetPCLK1Freq>
 80044e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044ea:	e010      	b.n	800450e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044ec:	4b9e      	ldr	r3, [pc, #632]	@ (8004768 <UART_SetConfig+0x5c0>)
 80044ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80044f0:	e00d      	b.n	800450e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044f2:	f7fe fb87 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 80044f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044f8:	e009      	b.n	800450e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004500:	e005      	b.n	800450e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004502:	2300      	movs	r3, #0
 8004504:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800450c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800450e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 8130 	beq.w	8004776 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451a:	4a94      	ldr	r2, [pc, #592]	@ (800476c <UART_SetConfig+0x5c4>)
 800451c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004520:	461a      	mov	r2, r3
 8004522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004524:	fbb3 f3f2 	udiv	r3, r3, r2
 8004528:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	4613      	mov	r3, r2
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	4413      	add	r3, r2
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	429a      	cmp	r2, r3
 8004538:	d305      	bcc.n	8004546 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	429a      	cmp	r2, r3
 8004544:	d903      	bls.n	800454e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800454c:	e113      	b.n	8004776 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800454e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004550:	2200      	movs	r2, #0
 8004552:	60bb      	str	r3, [r7, #8]
 8004554:	60fa      	str	r2, [r7, #12]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455a:	4a84      	ldr	r2, [pc, #528]	@ (800476c <UART_SetConfig+0x5c4>)
 800455c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004560:	b29b      	uxth	r3, r3
 8004562:	2200      	movs	r2, #0
 8004564:	603b      	str	r3, [r7, #0]
 8004566:	607a      	str	r2, [r7, #4]
 8004568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800456c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004570:	f7fb fe9e 	bl	80002b0 <__aeabi_uldivmod>
 8004574:	4602      	mov	r2, r0
 8004576:	460b      	mov	r3, r1
 8004578:	4610      	mov	r0, r2
 800457a:	4619      	mov	r1, r3
 800457c:	f04f 0200 	mov.w	r2, #0
 8004580:	f04f 0300 	mov.w	r3, #0
 8004584:	020b      	lsls	r3, r1, #8
 8004586:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800458a:	0202      	lsls	r2, r0, #8
 800458c:	6979      	ldr	r1, [r7, #20]
 800458e:	6849      	ldr	r1, [r1, #4]
 8004590:	0849      	lsrs	r1, r1, #1
 8004592:	2000      	movs	r0, #0
 8004594:	460c      	mov	r4, r1
 8004596:	4605      	mov	r5, r0
 8004598:	eb12 0804 	adds.w	r8, r2, r4
 800459c:	eb43 0905 	adc.w	r9, r3, r5
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	469a      	mov	sl, r3
 80045a8:	4693      	mov	fp, r2
 80045aa:	4652      	mov	r2, sl
 80045ac:	465b      	mov	r3, fp
 80045ae:	4640      	mov	r0, r8
 80045b0:	4649      	mov	r1, r9
 80045b2:	f7fb fe7d 	bl	80002b0 <__aeabi_uldivmod>
 80045b6:	4602      	mov	r2, r0
 80045b8:	460b      	mov	r3, r1
 80045ba:	4613      	mov	r3, r2
 80045bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045be:	6a3b      	ldr	r3, [r7, #32]
 80045c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045c4:	d308      	bcc.n	80045d8 <UART_SetConfig+0x430>
 80045c6:	6a3b      	ldr	r3, [r7, #32]
 80045c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045cc:	d204      	bcs.n	80045d8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6a3a      	ldr	r2, [r7, #32]
 80045d4:	60da      	str	r2, [r3, #12]
 80045d6:	e0ce      	b.n	8004776 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80045de:	e0ca      	b.n	8004776 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045e8:	d166      	bne.n	80046b8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80045ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80045ee:	2b08      	cmp	r3, #8
 80045f0:	d827      	bhi.n	8004642 <UART_SetConfig+0x49a>
 80045f2:	a201      	add	r2, pc, #4	@ (adr r2, 80045f8 <UART_SetConfig+0x450>)
 80045f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f8:	0800461d 	.word	0x0800461d
 80045fc:	08004625 	.word	0x08004625
 8004600:	0800462d 	.word	0x0800462d
 8004604:	08004643 	.word	0x08004643
 8004608:	08004633 	.word	0x08004633
 800460c:	08004643 	.word	0x08004643
 8004610:	08004643 	.word	0x08004643
 8004614:	08004643 	.word	0x08004643
 8004618:	0800463b 	.word	0x0800463b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800461c:	f7fe fb8a 	bl	8002d34 <HAL_RCC_GetPCLK1Freq>
 8004620:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004622:	e014      	b.n	800464e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004624:	f7fe fb9c 	bl	8002d60 <HAL_RCC_GetPCLK2Freq>
 8004628:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800462a:	e010      	b.n	800464e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800462c:	4b4e      	ldr	r3, [pc, #312]	@ (8004768 <UART_SetConfig+0x5c0>)
 800462e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004630:	e00d      	b.n	800464e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004632:	f7fe fae7 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8004636:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004638:	e009      	b.n	800464e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800463a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800463e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004640:	e005      	b.n	800464e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800464c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800464e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 8090 	beq.w	8004776 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465a:	4a44      	ldr	r2, [pc, #272]	@ (800476c <UART_SetConfig+0x5c4>)
 800465c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004660:	461a      	mov	r2, r3
 8004662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004664:	fbb3 f3f2 	udiv	r3, r3, r2
 8004668:	005a      	lsls	r2, r3, #1
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	085b      	lsrs	r3, r3, #1
 8004670:	441a      	add	r2, r3
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	fbb2 f3f3 	udiv	r3, r2, r3
 800467a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	2b0f      	cmp	r3, #15
 8004680:	d916      	bls.n	80046b0 <UART_SetConfig+0x508>
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004688:	d212      	bcs.n	80046b0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	b29b      	uxth	r3, r3
 800468e:	f023 030f 	bic.w	r3, r3, #15
 8004692:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	085b      	lsrs	r3, r3, #1
 8004698:	b29b      	uxth	r3, r3
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	b29a      	uxth	r2, r3
 80046a0:	8bfb      	ldrh	r3, [r7, #30]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	8bfa      	ldrh	r2, [r7, #30]
 80046ac:	60da      	str	r2, [r3, #12]
 80046ae:	e062      	b.n	8004776 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80046b6:	e05e      	b.n	8004776 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d828      	bhi.n	8004712 <UART_SetConfig+0x56a>
 80046c0:	a201      	add	r2, pc, #4	@ (adr r2, 80046c8 <UART_SetConfig+0x520>)
 80046c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c6:	bf00      	nop
 80046c8:	080046ed 	.word	0x080046ed
 80046cc:	080046f5 	.word	0x080046f5
 80046d0:	080046fd 	.word	0x080046fd
 80046d4:	08004713 	.word	0x08004713
 80046d8:	08004703 	.word	0x08004703
 80046dc:	08004713 	.word	0x08004713
 80046e0:	08004713 	.word	0x08004713
 80046e4:	08004713 	.word	0x08004713
 80046e8:	0800470b 	.word	0x0800470b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046ec:	f7fe fb22 	bl	8002d34 <HAL_RCC_GetPCLK1Freq>
 80046f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046f2:	e014      	b.n	800471e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046f4:	f7fe fb34 	bl	8002d60 <HAL_RCC_GetPCLK2Freq>
 80046f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046fa:	e010      	b.n	800471e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004768 <UART_SetConfig+0x5c0>)
 80046fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004700:	e00d      	b.n	800471e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004702:	f7fe fa7f 	bl	8002c04 <HAL_RCC_GetSysClockFreq>
 8004706:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004708:	e009      	b.n	800471e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800470a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800470e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004710:	e005      	b.n	800471e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004712:	2300      	movs	r3, #0
 8004714:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800471c:	bf00      	nop
    }

    if (pclk != 0U)
 800471e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004720:	2b00      	cmp	r3, #0
 8004722:	d028      	beq.n	8004776 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004728:	4a10      	ldr	r2, [pc, #64]	@ (800476c <UART_SetConfig+0x5c4>)
 800472a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800472e:	461a      	mov	r2, r3
 8004730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004732:	fbb3 f2f2 	udiv	r2, r3, r2
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	085b      	lsrs	r3, r3, #1
 800473c:	441a      	add	r2, r3
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	fbb2 f3f3 	udiv	r3, r2, r3
 8004746:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	2b0f      	cmp	r3, #15
 800474c:	d910      	bls.n	8004770 <UART_SetConfig+0x5c8>
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004754:	d20c      	bcs.n	8004770 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	b29a      	uxth	r2, r3
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	60da      	str	r2, [r3, #12]
 8004760:	e009      	b.n	8004776 <UART_SetConfig+0x5ce>
 8004762:	bf00      	nop
 8004764:	40008000 	.word	0x40008000
 8004768:	00f42400 	.word	0x00f42400
 800476c:	08005dbc 	.word	0x08005dbc
      }
      else
      {
        ret = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2201      	movs	r2, #1
 800477a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2201      	movs	r2, #1
 8004782:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2200      	movs	r2, #0
 800478a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	2200      	movs	r2, #0
 8004790:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004792:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004796:	4618      	mov	r0, r3
 8004798:	3730      	adds	r7, #48	@ 0x30
 800479a:	46bd      	mov	sp, r7
 800479c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080047a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00a      	beq.n	80047ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00a      	beq.n	800480e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004812:	f003 0304 	and.w	r3, r3, #4
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004834:	f003 0310 	and.w	r3, r3, #16
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00a      	beq.n	8004852 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004856:	f003 0320 	and.w	r3, r3, #32
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800487c:	2b00      	cmp	r3, #0
 800487e:	d01a      	beq.n	80048b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800489a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800489e:	d10a      	bne.n	80048b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00a      	beq.n	80048d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	605a      	str	r2, [r3, #4]
  }
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b098      	sub	sp, #96	@ 0x60
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048f4:	f7fc fc88 	bl	8001208 <HAL_GetTick>
 80048f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0308 	and.w	r3, r3, #8
 8004904:	2b08      	cmp	r3, #8
 8004906:	d12f      	bne.n	8004968 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004908:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004910:	2200      	movs	r2, #0
 8004912:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f88e 	bl	8004a38 <UART_WaitOnFlagUntilTimeout>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d022      	beq.n	8004968 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800492a:	e853 3f00 	ldrex	r3, [r3]
 800492e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004932:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004936:	653b      	str	r3, [r7, #80]	@ 0x50
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	461a      	mov	r2, r3
 800493e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004940:	647b      	str	r3, [r7, #68]	@ 0x44
 8004942:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004944:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004946:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004948:	e841 2300 	strex	r3, r2, [r1]
 800494c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800494e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e6      	bne.n	8004922 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2220      	movs	r2, #32
 8004958:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e063      	b.n	8004a30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0304 	and.w	r3, r3, #4
 8004972:	2b04      	cmp	r3, #4
 8004974:	d149      	bne.n	8004a0a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004976:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800497e:	2200      	movs	r2, #0
 8004980:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f857 	bl	8004a38 <UART_WaitOnFlagUntilTimeout>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d03c      	beq.n	8004a0a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004998:	e853 3f00 	ldrex	r3, [r3]
 800499c:	623b      	str	r3, [r7, #32]
   return(result);
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	461a      	mov	r2, r3
 80049ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80049b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049b6:	e841 2300 	strex	r3, r2, [r1]
 80049ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1e6      	bne.n	8004990 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3308      	adds	r3, #8
 80049c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	e853 3f00 	ldrex	r3, [r3]
 80049d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f023 0301 	bic.w	r3, r3, #1
 80049d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	3308      	adds	r3, #8
 80049e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049e2:	61fa      	str	r2, [r7, #28]
 80049e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e6:	69b9      	ldr	r1, [r7, #24]
 80049e8:	69fa      	ldr	r2, [r7, #28]
 80049ea:	e841 2300 	strex	r3, r2, [r1]
 80049ee:	617b      	str	r3, [r7, #20]
   return(result);
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1e5      	bne.n	80049c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2220      	movs	r2, #32
 80049fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e012      	b.n	8004a30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3758      	adds	r7, #88	@ 0x58
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	603b      	str	r3, [r7, #0]
 8004a44:	4613      	mov	r3, r2
 8004a46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a48:	e04f      	b.n	8004aea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a50:	d04b      	beq.n	8004aea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a52:	f7fc fbd9 	bl	8001208 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d302      	bcc.n	8004a68 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e04e      	b.n	8004b0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0304 	and.w	r3, r3, #4
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d037      	beq.n	8004aea <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2b80      	cmp	r3, #128	@ 0x80
 8004a7e:	d034      	beq.n	8004aea <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2b40      	cmp	r3, #64	@ 0x40
 8004a84:	d031      	beq.n	8004aea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	f003 0308 	and.w	r3, r3, #8
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	d110      	bne.n	8004ab6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2208      	movs	r2, #8
 8004a9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 f838 	bl	8004b12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2208      	movs	r2, #8
 8004aa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e029      	b.n	8004b0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ac0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ac4:	d111      	bne.n	8004aea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ace:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 f81e 	bl	8004b12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e00f      	b.n	8004b0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69da      	ldr	r2, [r3, #28]
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	4013      	ands	r3, r2
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	bf0c      	ite	eq
 8004afa:	2301      	moveq	r3, #1
 8004afc:	2300      	movne	r3, #0
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	461a      	mov	r2, r3
 8004b02:	79fb      	ldrb	r3, [r7, #7]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d0a0      	beq.n	8004a4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b095      	sub	sp, #84	@ 0x54
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b22:	e853 3f00 	ldrex	r3, [r3]
 8004b26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	461a      	mov	r2, r3
 8004b36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b38:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b40:	e841 2300 	strex	r3, r2, [r1]
 8004b44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e6      	bne.n	8004b1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3308      	adds	r3, #8
 8004b52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	e853 3f00 	ldrex	r3, [r3]
 8004b5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b62:	f023 0301 	bic.w	r3, r3, #1
 8004b66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	3308      	adds	r3, #8
 8004b6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b78:	e841 2300 	strex	r3, r2, [r1]
 8004b7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1e3      	bne.n	8004b4c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d118      	bne.n	8004bbe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	e853 3f00 	ldrex	r3, [r3]
 8004b98:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	f023 0310 	bic.w	r3, r3, #16
 8004ba0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004baa:	61bb      	str	r3, [r7, #24]
 8004bac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bae:	6979      	ldr	r1, [r7, #20]
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	e841 2300 	strex	r3, r2, [r1]
 8004bb6:	613b      	str	r3, [r7, #16]
   return(result);
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1e6      	bne.n	8004b8c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004bd2:	bf00      	nop
 8004bd4:	3754      	adds	r7, #84	@ 0x54
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b084      	sub	sp, #16
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f7ff fabd 	bl	800417c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c02:	bf00      	nop
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b088      	sub	sp, #32
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	e853 3f00 	ldrex	r3, [r3]
 8004c1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c26:	61fb      	str	r3, [r7, #28]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	61bb      	str	r3, [r7, #24]
 8004c32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c34:	6979      	ldr	r1, [r7, #20]
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	e841 2300 	strex	r3, r2, [r1]
 8004c3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1e6      	bne.n	8004c12 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2220      	movs	r2, #32
 8004c48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7fb fca4 	bl	80005a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c58:	bf00      	nop
 8004c5a:	3720      	adds	r7, #32
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d101      	bne.n	8004cb2 <HAL_UARTEx_DisableFifoMode+0x16>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	e027      	b.n	8004d02 <HAL_UARTEx_DisableFifoMode+0x66>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2224      	movs	r2, #36	@ 0x24
 8004cbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 0201 	bic.w	r2, r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004ce0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b084      	sub	sp, #16
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e02d      	b.n	8004d82 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2224      	movs	r2, #36	@ 0x24
 8004d32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0201 	bic.w	r2, r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f850 	bl	8004e08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d101      	bne.n	8004da2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	e02d      	b.n	8004dfe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2224      	movs	r2, #36	@ 0x24
 8004dae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0201 	bic.w	r2, r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f812 	bl	8004e08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
	...

08004e08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d108      	bne.n	8004e2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e28:	e031      	b.n	8004e8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e2a:	2308      	movs	r3, #8
 8004e2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e2e:	2308      	movs	r3, #8
 8004e30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	0e5b      	lsrs	r3, r3, #25
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	0f5b      	lsrs	r3, r3, #29
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	f003 0307 	and.w	r3, r3, #7
 8004e50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e52:	7bbb      	ldrb	r3, [r7, #14]
 8004e54:	7b3a      	ldrb	r2, [r7, #12]
 8004e56:	4911      	ldr	r1, [pc, #68]	@ (8004e9c <UARTEx_SetNbDataToProcess+0x94>)
 8004e58:	5c8a      	ldrb	r2, [r1, r2]
 8004e5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004e5e:	7b3a      	ldrb	r2, [r7, #12]
 8004e60:	490f      	ldr	r1, [pc, #60]	@ (8004ea0 <UARTEx_SetNbDataToProcess+0x98>)
 8004e62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e64:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
 8004e72:	7b7a      	ldrb	r2, [r7, #13]
 8004e74:	4909      	ldr	r1, [pc, #36]	@ (8004e9c <UARTEx_SetNbDataToProcess+0x94>)
 8004e76:	5c8a      	ldrb	r2, [r1, r2]
 8004e78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004e7c:	7b7a      	ldrb	r2, [r7, #13]
 8004e7e:	4908      	ldr	r1, [pc, #32]	@ (8004ea0 <UARTEx_SetNbDataToProcess+0x98>)
 8004e80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e82:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004e8e:	bf00      	nop
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	08005dd4 	.word	0x08005dd4
 8004ea0:	08005ddc 	.word	0x08005ddc

08004ea4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ea4:	b084      	sub	sp, #16
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	f107 001c 	add.w	r0, r7, #28
 8004eb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fa68 	bl	8005398 <USB_CoreReset>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004ecc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d106      	bne.n	8004ee2 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	639a      	str	r2, [r3, #56]	@ 0x38
 8004ee0:	e005      	b.n	8004eee <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004efa:	b004      	add	sp, #16
 8004efc:	4770      	bx	lr

08004efe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f023 0201 	bic.w	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	460b      	mov	r3, r1
 8004f2a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f3c:	78fb      	ldrb	r3, [r7, #3]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d115      	bne.n	8004f6e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f4e:	200a      	movs	r0, #10
 8004f50:	f7fc f966 	bl	8001220 <HAL_Delay>
      ms += 10U;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	330a      	adds	r3, #10
 8004f58:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 fa0e 	bl	800537c <USB_GetMode>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d01e      	beq.n	8004fa4 <USB_SetCurrentMode+0x84>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f6a:	d9f0      	bls.n	8004f4e <USB_SetCurrentMode+0x2e>
 8004f6c:	e01a      	b.n	8004fa4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f6e:	78fb      	ldrb	r3, [r7, #3]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d115      	bne.n	8004fa0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f80:	200a      	movs	r0, #10
 8004f82:	f7fc f94d 	bl	8001220 <HAL_Delay>
      ms += 10U;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	330a      	adds	r3, #10
 8004f8a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f9f5 	bl	800537c <USB_GetMode>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d005      	beq.n	8004fa4 <USB_SetCurrentMode+0x84>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f9c:	d9f0      	bls.n	8004f80 <USB_SetCurrentMode+0x60>
 8004f9e:	e001      	b.n	8004fa4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e005      	b.n	8004fb0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2bc8      	cmp	r3, #200	@ 0xc8
 8004fa8:	d101      	bne.n	8004fae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e000      	b.n	8004fb0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fb8:	b084      	sub	sp, #16
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b086      	sub	sp, #24
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004fc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	613b      	str	r3, [r7, #16]
 8004fd6:	e009      	b.n	8004fec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	3340      	adds	r3, #64	@ 0x40
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	613b      	str	r3, [r7, #16]
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	2b0e      	cmp	r3, #14
 8004ff0:	d9f2      	bls.n	8004fd8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ff2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d11c      	bne.n	8005034 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005008:	f043 0302 	orr.w	r3, r3, #2
 800500c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005012:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	e005      	b.n	8005040 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005038:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005046:	461a      	mov	r2, r3
 8005048:	2300      	movs	r3, #0
 800504a:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800504c:	2103      	movs	r1, #3
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f95a 	bl	8005308 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005054:	2110      	movs	r1, #16
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f8f6 	bl	8005248 <USB_FlushTxFifo>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f920 	bl	80052ac <USB_FlushRxFifo>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800507c:	461a      	mov	r2, r3
 800507e:	2300      	movs	r3, #0
 8005080:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005088:	461a      	mov	r2, r3
 800508a:	2300      	movs	r3, #0
 800508c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005094:	461a      	mov	r2, r3
 8005096:	2300      	movs	r3, #0
 8005098:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800509a:	2300      	movs	r3, #0
 800509c:	613b      	str	r3, [r7, #16]
 800509e:	e043      	b.n	8005128 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050b6:	d118      	bne.n	80050ea <USB_DevInit+0x132>
    {
      if (i == 0U)
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10a      	bne.n	80050d4 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ca:	461a      	mov	r2, r3
 80050cc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	e013      	b.n	80050fc <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050e0:	461a      	mov	r2, r3
 80050e2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80050e6:	6013      	str	r3, [r2, #0]
 80050e8:	e008      	b.n	80050fc <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050f6:	461a      	mov	r2, r3
 80050f8:	2300      	movs	r3, #0
 80050fa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4413      	add	r3, r2
 8005104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005108:	461a      	mov	r2, r3
 800510a:	2300      	movs	r3, #0
 800510c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	015a      	lsls	r2, r3, #5
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	4413      	add	r3, r2
 8005116:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800511a:	461a      	mov	r2, r3
 800511c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005120:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	3301      	adds	r3, #1
 8005126:	613b      	str	r3, [r7, #16]
 8005128:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800512c:	461a      	mov	r2, r3
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	4293      	cmp	r3, r2
 8005132:	d3b5      	bcc.n	80050a0 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005134:	2300      	movs	r3, #0
 8005136:	613b      	str	r3, [r7, #16]
 8005138:	e043      	b.n	80051c2 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800514c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005150:	d118      	bne.n	8005184 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10a      	bne.n	800516e <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005164:	461a      	mov	r2, r3
 8005166:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	e013      	b.n	8005196 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	4413      	add	r3, r2
 8005176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800517a:	461a      	mov	r2, r3
 800517c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	e008      	b.n	8005196 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005190:	461a      	mov	r2, r3
 8005192:	2300      	movs	r3, #0
 8005194:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4413      	add	r3, r2
 800519e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051a2:	461a      	mov	r2, r3
 80051a4:	2300      	movs	r3, #0
 80051a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051b4:	461a      	mov	r2, r3
 80051b6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80051ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	3301      	adds	r3, #1
 80051c0:	613b      	str	r3, [r7, #16]
 80051c2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80051c6:	461a      	mov	r2, r3
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d3b5      	bcc.n	800513a <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051e0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80051ee:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	f043 0210 	orr.w	r2, r3, #16
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699a      	ldr	r2, [r3, #24]
 8005200:	4b10      	ldr	r3, [pc, #64]	@ (8005244 <USB_DevInit+0x28c>)
 8005202:	4313      	orrs	r3, r2
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005208:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800520c:	2b00      	cmp	r3, #0
 800520e:	d005      	beq.n	800521c <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	f043 0208 	orr.w	r2, r3, #8
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800521c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005220:	2b01      	cmp	r3, #1
 8005222:	d107      	bne.n	8005234 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800522c:	f043 0304 	orr.w	r3, r3, #4
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005234:	7dfb      	ldrb	r3, [r7, #23]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005240:	b004      	add	sp, #16
 8005242:	4770      	bx	lr
 8005244:	803c3800 	.word	0x803c3800

08005248 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005252:	2300      	movs	r3, #0
 8005254:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	3301      	adds	r3, #1
 800525a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005262:	d901      	bls.n	8005268 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e01b      	b.n	80052a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	daf2      	bge.n	8005256 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005270:	2300      	movs	r3, #0
 8005272:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	019b      	lsls	r3, r3, #6
 8005278:	f043 0220 	orr.w	r2, r3, #32
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	3301      	adds	r3, #1
 8005284:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800528c:	d901      	bls.n	8005292 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e006      	b.n	80052a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f003 0320 	and.w	r3, r3, #32
 800529a:	2b20      	cmp	r3, #32
 800529c:	d0f0      	beq.n	8005280 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	3301      	adds	r3, #1
 80052bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052c4:	d901      	bls.n	80052ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e018      	b.n	80052fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	daf2      	bge.n	80052b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2210      	movs	r2, #16
 80052da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	3301      	adds	r3, #1
 80052e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052e8:	d901      	bls.n	80052ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e006      	b.n	80052fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f003 0310 	and.w	r3, r3, #16
 80052f6:	2b10      	cmp	r3, #16
 80052f8:	d0f0      	beq.n	80052dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	460b      	mov	r3, r1
 8005312:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	78fb      	ldrb	r3, [r7, #3]
 8005322:	68f9      	ldr	r1, [r7, #12]
 8005324:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005328:	4313      	orrs	r3, r2
 800532a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800533a:	b480      	push	{r7}
 800533c:	b085      	sub	sp, #20
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005354:	f023 0303 	bic.w	r3, r3, #3
 8005358:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005368:	f043 0302 	orr.w	r3, r3, #2
 800536c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	f003 0301 	and.w	r3, r3, #1
}
 800538c:	4618      	mov	r0, r3
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053a0:	2300      	movs	r3, #0
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3301      	adds	r3, #1
 80053a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053b0:	d901      	bls.n	80053b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e01b      	b.n	80053ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	daf2      	bge.n	80053a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	f043 0201 	orr.w	r2, r3, #1
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	3301      	adds	r3, #1
 80053d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053da:	d901      	bls.n	80053e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e006      	b.n	80053ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d0f0      	beq.n	80053ce <USB_CoreReset+0x36>

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
	...

080053fc <siprintf>:
 80053fc:	b40e      	push	{r1, r2, r3}
 80053fe:	b500      	push	{lr}
 8005400:	b09c      	sub	sp, #112	@ 0x70
 8005402:	ab1d      	add	r3, sp, #116	@ 0x74
 8005404:	9002      	str	r0, [sp, #8]
 8005406:	9006      	str	r0, [sp, #24]
 8005408:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800540c:	4809      	ldr	r0, [pc, #36]	@ (8005434 <siprintf+0x38>)
 800540e:	9107      	str	r1, [sp, #28]
 8005410:	9104      	str	r1, [sp, #16]
 8005412:	4909      	ldr	r1, [pc, #36]	@ (8005438 <siprintf+0x3c>)
 8005414:	f853 2b04 	ldr.w	r2, [r3], #4
 8005418:	9105      	str	r1, [sp, #20]
 800541a:	6800      	ldr	r0, [r0, #0]
 800541c:	9301      	str	r3, [sp, #4]
 800541e:	a902      	add	r1, sp, #8
 8005420:	f000 f994 	bl	800574c <_svfiprintf_r>
 8005424:	9b02      	ldr	r3, [sp, #8]
 8005426:	2200      	movs	r2, #0
 8005428:	701a      	strb	r2, [r3, #0]
 800542a:	b01c      	add	sp, #112	@ 0x70
 800542c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005430:	b003      	add	sp, #12
 8005432:	4770      	bx	lr
 8005434:	2004000c 	.word	0x2004000c
 8005438:	ffff0208 	.word	0xffff0208

0800543c <memset>:
 800543c:	4402      	add	r2, r0
 800543e:	4603      	mov	r3, r0
 8005440:	4293      	cmp	r3, r2
 8005442:	d100      	bne.n	8005446 <memset+0xa>
 8005444:	4770      	bx	lr
 8005446:	f803 1b01 	strb.w	r1, [r3], #1
 800544a:	e7f9      	b.n	8005440 <memset+0x4>

0800544c <__errno>:
 800544c:	4b01      	ldr	r3, [pc, #4]	@ (8005454 <__errno+0x8>)
 800544e:	6818      	ldr	r0, [r3, #0]
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	2004000c 	.word	0x2004000c

08005458 <__libc_init_array>:
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	4d0d      	ldr	r5, [pc, #52]	@ (8005490 <__libc_init_array+0x38>)
 800545c:	4c0d      	ldr	r4, [pc, #52]	@ (8005494 <__libc_init_array+0x3c>)
 800545e:	1b64      	subs	r4, r4, r5
 8005460:	10a4      	asrs	r4, r4, #2
 8005462:	2600      	movs	r6, #0
 8005464:	42a6      	cmp	r6, r4
 8005466:	d109      	bne.n	800547c <__libc_init_array+0x24>
 8005468:	4d0b      	ldr	r5, [pc, #44]	@ (8005498 <__libc_init_array+0x40>)
 800546a:	4c0c      	ldr	r4, [pc, #48]	@ (800549c <__libc_init_array+0x44>)
 800546c:	f000 fc66 	bl	8005d3c <_init>
 8005470:	1b64      	subs	r4, r4, r5
 8005472:	10a4      	asrs	r4, r4, #2
 8005474:	2600      	movs	r6, #0
 8005476:	42a6      	cmp	r6, r4
 8005478:	d105      	bne.n	8005486 <__libc_init_array+0x2e>
 800547a:	bd70      	pop	{r4, r5, r6, pc}
 800547c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005480:	4798      	blx	r3
 8005482:	3601      	adds	r6, #1
 8005484:	e7ee      	b.n	8005464 <__libc_init_array+0xc>
 8005486:	f855 3b04 	ldr.w	r3, [r5], #4
 800548a:	4798      	blx	r3
 800548c:	3601      	adds	r6, #1
 800548e:	e7f2      	b.n	8005476 <__libc_init_array+0x1e>
 8005490:	08005e20 	.word	0x08005e20
 8005494:	08005e20 	.word	0x08005e20
 8005498:	08005e20 	.word	0x08005e20
 800549c:	08005e24 	.word	0x08005e24

080054a0 <__retarget_lock_acquire_recursive>:
 80054a0:	4770      	bx	lr

080054a2 <__retarget_lock_release_recursive>:
 80054a2:	4770      	bx	lr

080054a4 <_free_r>:
 80054a4:	b538      	push	{r3, r4, r5, lr}
 80054a6:	4605      	mov	r5, r0
 80054a8:	2900      	cmp	r1, #0
 80054aa:	d041      	beq.n	8005530 <_free_r+0x8c>
 80054ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054b0:	1f0c      	subs	r4, r1, #4
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	bfb8      	it	lt
 80054b6:	18e4      	addlt	r4, r4, r3
 80054b8:	f000 f8e0 	bl	800567c <__malloc_lock>
 80054bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005534 <_free_r+0x90>)
 80054be:	6813      	ldr	r3, [r2, #0]
 80054c0:	b933      	cbnz	r3, 80054d0 <_free_r+0x2c>
 80054c2:	6063      	str	r3, [r4, #4]
 80054c4:	6014      	str	r4, [r2, #0]
 80054c6:	4628      	mov	r0, r5
 80054c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054cc:	f000 b8dc 	b.w	8005688 <__malloc_unlock>
 80054d0:	42a3      	cmp	r3, r4
 80054d2:	d908      	bls.n	80054e6 <_free_r+0x42>
 80054d4:	6820      	ldr	r0, [r4, #0]
 80054d6:	1821      	adds	r1, r4, r0
 80054d8:	428b      	cmp	r3, r1
 80054da:	bf01      	itttt	eq
 80054dc:	6819      	ldreq	r1, [r3, #0]
 80054de:	685b      	ldreq	r3, [r3, #4]
 80054e0:	1809      	addeq	r1, r1, r0
 80054e2:	6021      	streq	r1, [r4, #0]
 80054e4:	e7ed      	b.n	80054c2 <_free_r+0x1e>
 80054e6:	461a      	mov	r2, r3
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	b10b      	cbz	r3, 80054f0 <_free_r+0x4c>
 80054ec:	42a3      	cmp	r3, r4
 80054ee:	d9fa      	bls.n	80054e6 <_free_r+0x42>
 80054f0:	6811      	ldr	r1, [r2, #0]
 80054f2:	1850      	adds	r0, r2, r1
 80054f4:	42a0      	cmp	r0, r4
 80054f6:	d10b      	bne.n	8005510 <_free_r+0x6c>
 80054f8:	6820      	ldr	r0, [r4, #0]
 80054fa:	4401      	add	r1, r0
 80054fc:	1850      	adds	r0, r2, r1
 80054fe:	4283      	cmp	r3, r0
 8005500:	6011      	str	r1, [r2, #0]
 8005502:	d1e0      	bne.n	80054c6 <_free_r+0x22>
 8005504:	6818      	ldr	r0, [r3, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	6053      	str	r3, [r2, #4]
 800550a:	4408      	add	r0, r1
 800550c:	6010      	str	r0, [r2, #0]
 800550e:	e7da      	b.n	80054c6 <_free_r+0x22>
 8005510:	d902      	bls.n	8005518 <_free_r+0x74>
 8005512:	230c      	movs	r3, #12
 8005514:	602b      	str	r3, [r5, #0]
 8005516:	e7d6      	b.n	80054c6 <_free_r+0x22>
 8005518:	6820      	ldr	r0, [r4, #0]
 800551a:	1821      	adds	r1, r4, r0
 800551c:	428b      	cmp	r3, r1
 800551e:	bf04      	itt	eq
 8005520:	6819      	ldreq	r1, [r3, #0]
 8005522:	685b      	ldreq	r3, [r3, #4]
 8005524:	6063      	str	r3, [r4, #4]
 8005526:	bf04      	itt	eq
 8005528:	1809      	addeq	r1, r1, r0
 800552a:	6021      	streq	r1, [r4, #0]
 800552c:	6054      	str	r4, [r2, #4]
 800552e:	e7ca      	b.n	80054c6 <_free_r+0x22>
 8005530:	bd38      	pop	{r3, r4, r5, pc}
 8005532:	bf00      	nop
 8005534:	20040894 	.word	0x20040894

08005538 <sbrk_aligned>:
 8005538:	b570      	push	{r4, r5, r6, lr}
 800553a:	4e0f      	ldr	r6, [pc, #60]	@ (8005578 <sbrk_aligned+0x40>)
 800553c:	460c      	mov	r4, r1
 800553e:	6831      	ldr	r1, [r6, #0]
 8005540:	4605      	mov	r5, r0
 8005542:	b911      	cbnz	r1, 800554a <sbrk_aligned+0x12>
 8005544:	f000 fba6 	bl	8005c94 <_sbrk_r>
 8005548:	6030      	str	r0, [r6, #0]
 800554a:	4621      	mov	r1, r4
 800554c:	4628      	mov	r0, r5
 800554e:	f000 fba1 	bl	8005c94 <_sbrk_r>
 8005552:	1c43      	adds	r3, r0, #1
 8005554:	d103      	bne.n	800555e <sbrk_aligned+0x26>
 8005556:	f04f 34ff 	mov.w	r4, #4294967295
 800555a:	4620      	mov	r0, r4
 800555c:	bd70      	pop	{r4, r5, r6, pc}
 800555e:	1cc4      	adds	r4, r0, #3
 8005560:	f024 0403 	bic.w	r4, r4, #3
 8005564:	42a0      	cmp	r0, r4
 8005566:	d0f8      	beq.n	800555a <sbrk_aligned+0x22>
 8005568:	1a21      	subs	r1, r4, r0
 800556a:	4628      	mov	r0, r5
 800556c:	f000 fb92 	bl	8005c94 <_sbrk_r>
 8005570:	3001      	adds	r0, #1
 8005572:	d1f2      	bne.n	800555a <sbrk_aligned+0x22>
 8005574:	e7ef      	b.n	8005556 <sbrk_aligned+0x1e>
 8005576:	bf00      	nop
 8005578:	20040890 	.word	0x20040890

0800557c <_malloc_r>:
 800557c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005580:	1ccd      	adds	r5, r1, #3
 8005582:	f025 0503 	bic.w	r5, r5, #3
 8005586:	3508      	adds	r5, #8
 8005588:	2d0c      	cmp	r5, #12
 800558a:	bf38      	it	cc
 800558c:	250c      	movcc	r5, #12
 800558e:	2d00      	cmp	r5, #0
 8005590:	4606      	mov	r6, r0
 8005592:	db01      	blt.n	8005598 <_malloc_r+0x1c>
 8005594:	42a9      	cmp	r1, r5
 8005596:	d904      	bls.n	80055a2 <_malloc_r+0x26>
 8005598:	230c      	movs	r3, #12
 800559a:	6033      	str	r3, [r6, #0]
 800559c:	2000      	movs	r0, #0
 800559e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005678 <_malloc_r+0xfc>
 80055a6:	f000 f869 	bl	800567c <__malloc_lock>
 80055aa:	f8d8 3000 	ldr.w	r3, [r8]
 80055ae:	461c      	mov	r4, r3
 80055b0:	bb44      	cbnz	r4, 8005604 <_malloc_r+0x88>
 80055b2:	4629      	mov	r1, r5
 80055b4:	4630      	mov	r0, r6
 80055b6:	f7ff ffbf 	bl	8005538 <sbrk_aligned>
 80055ba:	1c43      	adds	r3, r0, #1
 80055bc:	4604      	mov	r4, r0
 80055be:	d158      	bne.n	8005672 <_malloc_r+0xf6>
 80055c0:	f8d8 4000 	ldr.w	r4, [r8]
 80055c4:	4627      	mov	r7, r4
 80055c6:	2f00      	cmp	r7, #0
 80055c8:	d143      	bne.n	8005652 <_malloc_r+0xd6>
 80055ca:	2c00      	cmp	r4, #0
 80055cc:	d04b      	beq.n	8005666 <_malloc_r+0xea>
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	4639      	mov	r1, r7
 80055d2:	4630      	mov	r0, r6
 80055d4:	eb04 0903 	add.w	r9, r4, r3
 80055d8:	f000 fb5c 	bl	8005c94 <_sbrk_r>
 80055dc:	4581      	cmp	r9, r0
 80055de:	d142      	bne.n	8005666 <_malloc_r+0xea>
 80055e0:	6821      	ldr	r1, [r4, #0]
 80055e2:	1a6d      	subs	r5, r5, r1
 80055e4:	4629      	mov	r1, r5
 80055e6:	4630      	mov	r0, r6
 80055e8:	f7ff ffa6 	bl	8005538 <sbrk_aligned>
 80055ec:	3001      	adds	r0, #1
 80055ee:	d03a      	beq.n	8005666 <_malloc_r+0xea>
 80055f0:	6823      	ldr	r3, [r4, #0]
 80055f2:	442b      	add	r3, r5
 80055f4:	6023      	str	r3, [r4, #0]
 80055f6:	f8d8 3000 	ldr.w	r3, [r8]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	bb62      	cbnz	r2, 8005658 <_malloc_r+0xdc>
 80055fe:	f8c8 7000 	str.w	r7, [r8]
 8005602:	e00f      	b.n	8005624 <_malloc_r+0xa8>
 8005604:	6822      	ldr	r2, [r4, #0]
 8005606:	1b52      	subs	r2, r2, r5
 8005608:	d420      	bmi.n	800564c <_malloc_r+0xd0>
 800560a:	2a0b      	cmp	r2, #11
 800560c:	d917      	bls.n	800563e <_malloc_r+0xc2>
 800560e:	1961      	adds	r1, r4, r5
 8005610:	42a3      	cmp	r3, r4
 8005612:	6025      	str	r5, [r4, #0]
 8005614:	bf18      	it	ne
 8005616:	6059      	strne	r1, [r3, #4]
 8005618:	6863      	ldr	r3, [r4, #4]
 800561a:	bf08      	it	eq
 800561c:	f8c8 1000 	streq.w	r1, [r8]
 8005620:	5162      	str	r2, [r4, r5]
 8005622:	604b      	str	r3, [r1, #4]
 8005624:	4630      	mov	r0, r6
 8005626:	f000 f82f 	bl	8005688 <__malloc_unlock>
 800562a:	f104 000b 	add.w	r0, r4, #11
 800562e:	1d23      	adds	r3, r4, #4
 8005630:	f020 0007 	bic.w	r0, r0, #7
 8005634:	1ac2      	subs	r2, r0, r3
 8005636:	bf1c      	itt	ne
 8005638:	1a1b      	subne	r3, r3, r0
 800563a:	50a3      	strne	r3, [r4, r2]
 800563c:	e7af      	b.n	800559e <_malloc_r+0x22>
 800563e:	6862      	ldr	r2, [r4, #4]
 8005640:	42a3      	cmp	r3, r4
 8005642:	bf0c      	ite	eq
 8005644:	f8c8 2000 	streq.w	r2, [r8]
 8005648:	605a      	strne	r2, [r3, #4]
 800564a:	e7eb      	b.n	8005624 <_malloc_r+0xa8>
 800564c:	4623      	mov	r3, r4
 800564e:	6864      	ldr	r4, [r4, #4]
 8005650:	e7ae      	b.n	80055b0 <_malloc_r+0x34>
 8005652:	463c      	mov	r4, r7
 8005654:	687f      	ldr	r7, [r7, #4]
 8005656:	e7b6      	b.n	80055c6 <_malloc_r+0x4a>
 8005658:	461a      	mov	r2, r3
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	42a3      	cmp	r3, r4
 800565e:	d1fb      	bne.n	8005658 <_malloc_r+0xdc>
 8005660:	2300      	movs	r3, #0
 8005662:	6053      	str	r3, [r2, #4]
 8005664:	e7de      	b.n	8005624 <_malloc_r+0xa8>
 8005666:	230c      	movs	r3, #12
 8005668:	6033      	str	r3, [r6, #0]
 800566a:	4630      	mov	r0, r6
 800566c:	f000 f80c 	bl	8005688 <__malloc_unlock>
 8005670:	e794      	b.n	800559c <_malloc_r+0x20>
 8005672:	6005      	str	r5, [r0, #0]
 8005674:	e7d6      	b.n	8005624 <_malloc_r+0xa8>
 8005676:	bf00      	nop
 8005678:	20040894 	.word	0x20040894

0800567c <__malloc_lock>:
 800567c:	4801      	ldr	r0, [pc, #4]	@ (8005684 <__malloc_lock+0x8>)
 800567e:	f7ff bf0f 	b.w	80054a0 <__retarget_lock_acquire_recursive>
 8005682:	bf00      	nop
 8005684:	2004088c 	.word	0x2004088c

08005688 <__malloc_unlock>:
 8005688:	4801      	ldr	r0, [pc, #4]	@ (8005690 <__malloc_unlock+0x8>)
 800568a:	f7ff bf0a 	b.w	80054a2 <__retarget_lock_release_recursive>
 800568e:	bf00      	nop
 8005690:	2004088c 	.word	0x2004088c

08005694 <__ssputs_r>:
 8005694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005698:	688e      	ldr	r6, [r1, #8]
 800569a:	461f      	mov	r7, r3
 800569c:	42be      	cmp	r6, r7
 800569e:	680b      	ldr	r3, [r1, #0]
 80056a0:	4682      	mov	sl, r0
 80056a2:	460c      	mov	r4, r1
 80056a4:	4690      	mov	r8, r2
 80056a6:	d82d      	bhi.n	8005704 <__ssputs_r+0x70>
 80056a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80056ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80056b0:	d026      	beq.n	8005700 <__ssputs_r+0x6c>
 80056b2:	6965      	ldr	r5, [r4, #20]
 80056b4:	6909      	ldr	r1, [r1, #16]
 80056b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056ba:	eba3 0901 	sub.w	r9, r3, r1
 80056be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80056c2:	1c7b      	adds	r3, r7, #1
 80056c4:	444b      	add	r3, r9
 80056c6:	106d      	asrs	r5, r5, #1
 80056c8:	429d      	cmp	r5, r3
 80056ca:	bf38      	it	cc
 80056cc:	461d      	movcc	r5, r3
 80056ce:	0553      	lsls	r3, r2, #21
 80056d0:	d527      	bpl.n	8005722 <__ssputs_r+0x8e>
 80056d2:	4629      	mov	r1, r5
 80056d4:	f7ff ff52 	bl	800557c <_malloc_r>
 80056d8:	4606      	mov	r6, r0
 80056da:	b360      	cbz	r0, 8005736 <__ssputs_r+0xa2>
 80056dc:	6921      	ldr	r1, [r4, #16]
 80056de:	464a      	mov	r2, r9
 80056e0:	f000 fae8 	bl	8005cb4 <memcpy>
 80056e4:	89a3      	ldrh	r3, [r4, #12]
 80056e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80056ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056ee:	81a3      	strh	r3, [r4, #12]
 80056f0:	6126      	str	r6, [r4, #16]
 80056f2:	6165      	str	r5, [r4, #20]
 80056f4:	444e      	add	r6, r9
 80056f6:	eba5 0509 	sub.w	r5, r5, r9
 80056fa:	6026      	str	r6, [r4, #0]
 80056fc:	60a5      	str	r5, [r4, #8]
 80056fe:	463e      	mov	r6, r7
 8005700:	42be      	cmp	r6, r7
 8005702:	d900      	bls.n	8005706 <__ssputs_r+0x72>
 8005704:	463e      	mov	r6, r7
 8005706:	6820      	ldr	r0, [r4, #0]
 8005708:	4632      	mov	r2, r6
 800570a:	4641      	mov	r1, r8
 800570c:	f000 faa8 	bl	8005c60 <memmove>
 8005710:	68a3      	ldr	r3, [r4, #8]
 8005712:	1b9b      	subs	r3, r3, r6
 8005714:	60a3      	str	r3, [r4, #8]
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	4433      	add	r3, r6
 800571a:	6023      	str	r3, [r4, #0]
 800571c:	2000      	movs	r0, #0
 800571e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005722:	462a      	mov	r2, r5
 8005724:	f000 fad4 	bl	8005cd0 <_realloc_r>
 8005728:	4606      	mov	r6, r0
 800572a:	2800      	cmp	r0, #0
 800572c:	d1e0      	bne.n	80056f0 <__ssputs_r+0x5c>
 800572e:	6921      	ldr	r1, [r4, #16]
 8005730:	4650      	mov	r0, sl
 8005732:	f7ff feb7 	bl	80054a4 <_free_r>
 8005736:	230c      	movs	r3, #12
 8005738:	f8ca 3000 	str.w	r3, [sl]
 800573c:	89a3      	ldrh	r3, [r4, #12]
 800573e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005742:	81a3      	strh	r3, [r4, #12]
 8005744:	f04f 30ff 	mov.w	r0, #4294967295
 8005748:	e7e9      	b.n	800571e <__ssputs_r+0x8a>
	...

0800574c <_svfiprintf_r>:
 800574c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005750:	4698      	mov	r8, r3
 8005752:	898b      	ldrh	r3, [r1, #12]
 8005754:	061b      	lsls	r3, r3, #24
 8005756:	b09d      	sub	sp, #116	@ 0x74
 8005758:	4607      	mov	r7, r0
 800575a:	460d      	mov	r5, r1
 800575c:	4614      	mov	r4, r2
 800575e:	d510      	bpl.n	8005782 <_svfiprintf_r+0x36>
 8005760:	690b      	ldr	r3, [r1, #16]
 8005762:	b973      	cbnz	r3, 8005782 <_svfiprintf_r+0x36>
 8005764:	2140      	movs	r1, #64	@ 0x40
 8005766:	f7ff ff09 	bl	800557c <_malloc_r>
 800576a:	6028      	str	r0, [r5, #0]
 800576c:	6128      	str	r0, [r5, #16]
 800576e:	b930      	cbnz	r0, 800577e <_svfiprintf_r+0x32>
 8005770:	230c      	movs	r3, #12
 8005772:	603b      	str	r3, [r7, #0]
 8005774:	f04f 30ff 	mov.w	r0, #4294967295
 8005778:	b01d      	add	sp, #116	@ 0x74
 800577a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800577e:	2340      	movs	r3, #64	@ 0x40
 8005780:	616b      	str	r3, [r5, #20]
 8005782:	2300      	movs	r3, #0
 8005784:	9309      	str	r3, [sp, #36]	@ 0x24
 8005786:	2320      	movs	r3, #32
 8005788:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800578c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005790:	2330      	movs	r3, #48	@ 0x30
 8005792:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005930 <_svfiprintf_r+0x1e4>
 8005796:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800579a:	f04f 0901 	mov.w	r9, #1
 800579e:	4623      	mov	r3, r4
 80057a0:	469a      	mov	sl, r3
 80057a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057a6:	b10a      	cbz	r2, 80057ac <_svfiprintf_r+0x60>
 80057a8:	2a25      	cmp	r2, #37	@ 0x25
 80057aa:	d1f9      	bne.n	80057a0 <_svfiprintf_r+0x54>
 80057ac:	ebba 0b04 	subs.w	fp, sl, r4
 80057b0:	d00b      	beq.n	80057ca <_svfiprintf_r+0x7e>
 80057b2:	465b      	mov	r3, fp
 80057b4:	4622      	mov	r2, r4
 80057b6:	4629      	mov	r1, r5
 80057b8:	4638      	mov	r0, r7
 80057ba:	f7ff ff6b 	bl	8005694 <__ssputs_r>
 80057be:	3001      	adds	r0, #1
 80057c0:	f000 80a7 	beq.w	8005912 <_svfiprintf_r+0x1c6>
 80057c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057c6:	445a      	add	r2, fp
 80057c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80057ca:	f89a 3000 	ldrb.w	r3, [sl]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 809f 	beq.w	8005912 <_svfiprintf_r+0x1c6>
 80057d4:	2300      	movs	r3, #0
 80057d6:	f04f 32ff 	mov.w	r2, #4294967295
 80057da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057de:	f10a 0a01 	add.w	sl, sl, #1
 80057e2:	9304      	str	r3, [sp, #16]
 80057e4:	9307      	str	r3, [sp, #28]
 80057e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80057ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80057ec:	4654      	mov	r4, sl
 80057ee:	2205      	movs	r2, #5
 80057f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057f4:	484e      	ldr	r0, [pc, #312]	@ (8005930 <_svfiprintf_r+0x1e4>)
 80057f6:	f7fa fd0b 	bl	8000210 <memchr>
 80057fa:	9a04      	ldr	r2, [sp, #16]
 80057fc:	b9d8      	cbnz	r0, 8005836 <_svfiprintf_r+0xea>
 80057fe:	06d0      	lsls	r0, r2, #27
 8005800:	bf44      	itt	mi
 8005802:	2320      	movmi	r3, #32
 8005804:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005808:	0711      	lsls	r1, r2, #28
 800580a:	bf44      	itt	mi
 800580c:	232b      	movmi	r3, #43	@ 0x2b
 800580e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005812:	f89a 3000 	ldrb.w	r3, [sl]
 8005816:	2b2a      	cmp	r3, #42	@ 0x2a
 8005818:	d015      	beq.n	8005846 <_svfiprintf_r+0xfa>
 800581a:	9a07      	ldr	r2, [sp, #28]
 800581c:	4654      	mov	r4, sl
 800581e:	2000      	movs	r0, #0
 8005820:	f04f 0c0a 	mov.w	ip, #10
 8005824:	4621      	mov	r1, r4
 8005826:	f811 3b01 	ldrb.w	r3, [r1], #1
 800582a:	3b30      	subs	r3, #48	@ 0x30
 800582c:	2b09      	cmp	r3, #9
 800582e:	d94b      	bls.n	80058c8 <_svfiprintf_r+0x17c>
 8005830:	b1b0      	cbz	r0, 8005860 <_svfiprintf_r+0x114>
 8005832:	9207      	str	r2, [sp, #28]
 8005834:	e014      	b.n	8005860 <_svfiprintf_r+0x114>
 8005836:	eba0 0308 	sub.w	r3, r0, r8
 800583a:	fa09 f303 	lsl.w	r3, r9, r3
 800583e:	4313      	orrs	r3, r2
 8005840:	9304      	str	r3, [sp, #16]
 8005842:	46a2      	mov	sl, r4
 8005844:	e7d2      	b.n	80057ec <_svfiprintf_r+0xa0>
 8005846:	9b03      	ldr	r3, [sp, #12]
 8005848:	1d19      	adds	r1, r3, #4
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	9103      	str	r1, [sp, #12]
 800584e:	2b00      	cmp	r3, #0
 8005850:	bfbb      	ittet	lt
 8005852:	425b      	neglt	r3, r3
 8005854:	f042 0202 	orrlt.w	r2, r2, #2
 8005858:	9307      	strge	r3, [sp, #28]
 800585a:	9307      	strlt	r3, [sp, #28]
 800585c:	bfb8      	it	lt
 800585e:	9204      	strlt	r2, [sp, #16]
 8005860:	7823      	ldrb	r3, [r4, #0]
 8005862:	2b2e      	cmp	r3, #46	@ 0x2e
 8005864:	d10a      	bne.n	800587c <_svfiprintf_r+0x130>
 8005866:	7863      	ldrb	r3, [r4, #1]
 8005868:	2b2a      	cmp	r3, #42	@ 0x2a
 800586a:	d132      	bne.n	80058d2 <_svfiprintf_r+0x186>
 800586c:	9b03      	ldr	r3, [sp, #12]
 800586e:	1d1a      	adds	r2, r3, #4
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	9203      	str	r2, [sp, #12]
 8005874:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005878:	3402      	adds	r4, #2
 800587a:	9305      	str	r3, [sp, #20]
 800587c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005940 <_svfiprintf_r+0x1f4>
 8005880:	7821      	ldrb	r1, [r4, #0]
 8005882:	2203      	movs	r2, #3
 8005884:	4650      	mov	r0, sl
 8005886:	f7fa fcc3 	bl	8000210 <memchr>
 800588a:	b138      	cbz	r0, 800589c <_svfiprintf_r+0x150>
 800588c:	9b04      	ldr	r3, [sp, #16]
 800588e:	eba0 000a 	sub.w	r0, r0, sl
 8005892:	2240      	movs	r2, #64	@ 0x40
 8005894:	4082      	lsls	r2, r0
 8005896:	4313      	orrs	r3, r2
 8005898:	3401      	adds	r4, #1
 800589a:	9304      	str	r3, [sp, #16]
 800589c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058a0:	4824      	ldr	r0, [pc, #144]	@ (8005934 <_svfiprintf_r+0x1e8>)
 80058a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80058a6:	2206      	movs	r2, #6
 80058a8:	f7fa fcb2 	bl	8000210 <memchr>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	d036      	beq.n	800591e <_svfiprintf_r+0x1d2>
 80058b0:	4b21      	ldr	r3, [pc, #132]	@ (8005938 <_svfiprintf_r+0x1ec>)
 80058b2:	bb1b      	cbnz	r3, 80058fc <_svfiprintf_r+0x1b0>
 80058b4:	9b03      	ldr	r3, [sp, #12]
 80058b6:	3307      	adds	r3, #7
 80058b8:	f023 0307 	bic.w	r3, r3, #7
 80058bc:	3308      	adds	r3, #8
 80058be:	9303      	str	r3, [sp, #12]
 80058c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058c2:	4433      	add	r3, r6
 80058c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80058c6:	e76a      	b.n	800579e <_svfiprintf_r+0x52>
 80058c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80058cc:	460c      	mov	r4, r1
 80058ce:	2001      	movs	r0, #1
 80058d0:	e7a8      	b.n	8005824 <_svfiprintf_r+0xd8>
 80058d2:	2300      	movs	r3, #0
 80058d4:	3401      	adds	r4, #1
 80058d6:	9305      	str	r3, [sp, #20]
 80058d8:	4619      	mov	r1, r3
 80058da:	f04f 0c0a 	mov.w	ip, #10
 80058de:	4620      	mov	r0, r4
 80058e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058e4:	3a30      	subs	r2, #48	@ 0x30
 80058e6:	2a09      	cmp	r2, #9
 80058e8:	d903      	bls.n	80058f2 <_svfiprintf_r+0x1a6>
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0c6      	beq.n	800587c <_svfiprintf_r+0x130>
 80058ee:	9105      	str	r1, [sp, #20]
 80058f0:	e7c4      	b.n	800587c <_svfiprintf_r+0x130>
 80058f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80058f6:	4604      	mov	r4, r0
 80058f8:	2301      	movs	r3, #1
 80058fa:	e7f0      	b.n	80058de <_svfiprintf_r+0x192>
 80058fc:	ab03      	add	r3, sp, #12
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	462a      	mov	r2, r5
 8005902:	4b0e      	ldr	r3, [pc, #56]	@ (800593c <_svfiprintf_r+0x1f0>)
 8005904:	a904      	add	r1, sp, #16
 8005906:	4638      	mov	r0, r7
 8005908:	f3af 8000 	nop.w
 800590c:	1c42      	adds	r2, r0, #1
 800590e:	4606      	mov	r6, r0
 8005910:	d1d6      	bne.n	80058c0 <_svfiprintf_r+0x174>
 8005912:	89ab      	ldrh	r3, [r5, #12]
 8005914:	065b      	lsls	r3, r3, #25
 8005916:	f53f af2d 	bmi.w	8005774 <_svfiprintf_r+0x28>
 800591a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800591c:	e72c      	b.n	8005778 <_svfiprintf_r+0x2c>
 800591e:	ab03      	add	r3, sp, #12
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	462a      	mov	r2, r5
 8005924:	4b05      	ldr	r3, [pc, #20]	@ (800593c <_svfiprintf_r+0x1f0>)
 8005926:	a904      	add	r1, sp, #16
 8005928:	4638      	mov	r0, r7
 800592a:	f000 f879 	bl	8005a20 <_printf_i>
 800592e:	e7ed      	b.n	800590c <_svfiprintf_r+0x1c0>
 8005930:	08005de4 	.word	0x08005de4
 8005934:	08005dee 	.word	0x08005dee
 8005938:	00000000 	.word	0x00000000
 800593c:	08005695 	.word	0x08005695
 8005940:	08005dea 	.word	0x08005dea

08005944 <_printf_common>:
 8005944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005948:	4616      	mov	r6, r2
 800594a:	4698      	mov	r8, r3
 800594c:	688a      	ldr	r2, [r1, #8]
 800594e:	690b      	ldr	r3, [r1, #16]
 8005950:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005954:	4293      	cmp	r3, r2
 8005956:	bfb8      	it	lt
 8005958:	4613      	movlt	r3, r2
 800595a:	6033      	str	r3, [r6, #0]
 800595c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005960:	4607      	mov	r7, r0
 8005962:	460c      	mov	r4, r1
 8005964:	b10a      	cbz	r2, 800596a <_printf_common+0x26>
 8005966:	3301      	adds	r3, #1
 8005968:	6033      	str	r3, [r6, #0]
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	0699      	lsls	r1, r3, #26
 800596e:	bf42      	ittt	mi
 8005970:	6833      	ldrmi	r3, [r6, #0]
 8005972:	3302      	addmi	r3, #2
 8005974:	6033      	strmi	r3, [r6, #0]
 8005976:	6825      	ldr	r5, [r4, #0]
 8005978:	f015 0506 	ands.w	r5, r5, #6
 800597c:	d106      	bne.n	800598c <_printf_common+0x48>
 800597e:	f104 0a19 	add.w	sl, r4, #25
 8005982:	68e3      	ldr	r3, [r4, #12]
 8005984:	6832      	ldr	r2, [r6, #0]
 8005986:	1a9b      	subs	r3, r3, r2
 8005988:	42ab      	cmp	r3, r5
 800598a:	dc26      	bgt.n	80059da <_printf_common+0x96>
 800598c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005990:	6822      	ldr	r2, [r4, #0]
 8005992:	3b00      	subs	r3, #0
 8005994:	bf18      	it	ne
 8005996:	2301      	movne	r3, #1
 8005998:	0692      	lsls	r2, r2, #26
 800599a:	d42b      	bmi.n	80059f4 <_printf_common+0xb0>
 800599c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80059a0:	4641      	mov	r1, r8
 80059a2:	4638      	mov	r0, r7
 80059a4:	47c8      	blx	r9
 80059a6:	3001      	adds	r0, #1
 80059a8:	d01e      	beq.n	80059e8 <_printf_common+0xa4>
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	6922      	ldr	r2, [r4, #16]
 80059ae:	f003 0306 	and.w	r3, r3, #6
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	bf02      	ittt	eq
 80059b6:	68e5      	ldreq	r5, [r4, #12]
 80059b8:	6833      	ldreq	r3, [r6, #0]
 80059ba:	1aed      	subeq	r5, r5, r3
 80059bc:	68a3      	ldr	r3, [r4, #8]
 80059be:	bf0c      	ite	eq
 80059c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059c4:	2500      	movne	r5, #0
 80059c6:	4293      	cmp	r3, r2
 80059c8:	bfc4      	itt	gt
 80059ca:	1a9b      	subgt	r3, r3, r2
 80059cc:	18ed      	addgt	r5, r5, r3
 80059ce:	2600      	movs	r6, #0
 80059d0:	341a      	adds	r4, #26
 80059d2:	42b5      	cmp	r5, r6
 80059d4:	d11a      	bne.n	8005a0c <_printf_common+0xc8>
 80059d6:	2000      	movs	r0, #0
 80059d8:	e008      	b.n	80059ec <_printf_common+0xa8>
 80059da:	2301      	movs	r3, #1
 80059dc:	4652      	mov	r2, sl
 80059de:	4641      	mov	r1, r8
 80059e0:	4638      	mov	r0, r7
 80059e2:	47c8      	blx	r9
 80059e4:	3001      	adds	r0, #1
 80059e6:	d103      	bne.n	80059f0 <_printf_common+0xac>
 80059e8:	f04f 30ff 	mov.w	r0, #4294967295
 80059ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f0:	3501      	adds	r5, #1
 80059f2:	e7c6      	b.n	8005982 <_printf_common+0x3e>
 80059f4:	18e1      	adds	r1, r4, r3
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	2030      	movs	r0, #48	@ 0x30
 80059fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80059fe:	4422      	add	r2, r4
 8005a00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a08:	3302      	adds	r3, #2
 8005a0a:	e7c7      	b.n	800599c <_printf_common+0x58>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	4622      	mov	r2, r4
 8005a10:	4641      	mov	r1, r8
 8005a12:	4638      	mov	r0, r7
 8005a14:	47c8      	blx	r9
 8005a16:	3001      	adds	r0, #1
 8005a18:	d0e6      	beq.n	80059e8 <_printf_common+0xa4>
 8005a1a:	3601      	adds	r6, #1
 8005a1c:	e7d9      	b.n	80059d2 <_printf_common+0x8e>
	...

08005a20 <_printf_i>:
 8005a20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a24:	7e0f      	ldrb	r7, [r1, #24]
 8005a26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a28:	2f78      	cmp	r7, #120	@ 0x78
 8005a2a:	4691      	mov	r9, r2
 8005a2c:	4680      	mov	r8, r0
 8005a2e:	460c      	mov	r4, r1
 8005a30:	469a      	mov	sl, r3
 8005a32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a36:	d807      	bhi.n	8005a48 <_printf_i+0x28>
 8005a38:	2f62      	cmp	r7, #98	@ 0x62
 8005a3a:	d80a      	bhi.n	8005a52 <_printf_i+0x32>
 8005a3c:	2f00      	cmp	r7, #0
 8005a3e:	f000 80d2 	beq.w	8005be6 <_printf_i+0x1c6>
 8005a42:	2f58      	cmp	r7, #88	@ 0x58
 8005a44:	f000 80b9 	beq.w	8005bba <_printf_i+0x19a>
 8005a48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a50:	e03a      	b.n	8005ac8 <_printf_i+0xa8>
 8005a52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a56:	2b15      	cmp	r3, #21
 8005a58:	d8f6      	bhi.n	8005a48 <_printf_i+0x28>
 8005a5a:	a101      	add	r1, pc, #4	@ (adr r1, 8005a60 <_printf_i+0x40>)
 8005a5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a60:	08005ab9 	.word	0x08005ab9
 8005a64:	08005acd 	.word	0x08005acd
 8005a68:	08005a49 	.word	0x08005a49
 8005a6c:	08005a49 	.word	0x08005a49
 8005a70:	08005a49 	.word	0x08005a49
 8005a74:	08005a49 	.word	0x08005a49
 8005a78:	08005acd 	.word	0x08005acd
 8005a7c:	08005a49 	.word	0x08005a49
 8005a80:	08005a49 	.word	0x08005a49
 8005a84:	08005a49 	.word	0x08005a49
 8005a88:	08005a49 	.word	0x08005a49
 8005a8c:	08005bcd 	.word	0x08005bcd
 8005a90:	08005af7 	.word	0x08005af7
 8005a94:	08005b87 	.word	0x08005b87
 8005a98:	08005a49 	.word	0x08005a49
 8005a9c:	08005a49 	.word	0x08005a49
 8005aa0:	08005bef 	.word	0x08005bef
 8005aa4:	08005a49 	.word	0x08005a49
 8005aa8:	08005af7 	.word	0x08005af7
 8005aac:	08005a49 	.word	0x08005a49
 8005ab0:	08005a49 	.word	0x08005a49
 8005ab4:	08005b8f 	.word	0x08005b8f
 8005ab8:	6833      	ldr	r3, [r6, #0]
 8005aba:	1d1a      	adds	r2, r3, #4
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6032      	str	r2, [r6, #0]
 8005ac0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ac4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e09d      	b.n	8005c08 <_printf_i+0x1e8>
 8005acc:	6833      	ldr	r3, [r6, #0]
 8005ace:	6820      	ldr	r0, [r4, #0]
 8005ad0:	1d19      	adds	r1, r3, #4
 8005ad2:	6031      	str	r1, [r6, #0]
 8005ad4:	0606      	lsls	r6, r0, #24
 8005ad6:	d501      	bpl.n	8005adc <_printf_i+0xbc>
 8005ad8:	681d      	ldr	r5, [r3, #0]
 8005ada:	e003      	b.n	8005ae4 <_printf_i+0xc4>
 8005adc:	0645      	lsls	r5, r0, #25
 8005ade:	d5fb      	bpl.n	8005ad8 <_printf_i+0xb8>
 8005ae0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ae4:	2d00      	cmp	r5, #0
 8005ae6:	da03      	bge.n	8005af0 <_printf_i+0xd0>
 8005ae8:	232d      	movs	r3, #45	@ 0x2d
 8005aea:	426d      	negs	r5, r5
 8005aec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005af0:	4859      	ldr	r0, [pc, #356]	@ (8005c58 <_printf_i+0x238>)
 8005af2:	230a      	movs	r3, #10
 8005af4:	e011      	b.n	8005b1a <_printf_i+0xfa>
 8005af6:	6821      	ldr	r1, [r4, #0]
 8005af8:	6833      	ldr	r3, [r6, #0]
 8005afa:	0608      	lsls	r0, r1, #24
 8005afc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b00:	d402      	bmi.n	8005b08 <_printf_i+0xe8>
 8005b02:	0649      	lsls	r1, r1, #25
 8005b04:	bf48      	it	mi
 8005b06:	b2ad      	uxthmi	r5, r5
 8005b08:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b0a:	4853      	ldr	r0, [pc, #332]	@ (8005c58 <_printf_i+0x238>)
 8005b0c:	6033      	str	r3, [r6, #0]
 8005b0e:	bf14      	ite	ne
 8005b10:	230a      	movne	r3, #10
 8005b12:	2308      	moveq	r3, #8
 8005b14:	2100      	movs	r1, #0
 8005b16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b1a:	6866      	ldr	r6, [r4, #4]
 8005b1c:	60a6      	str	r6, [r4, #8]
 8005b1e:	2e00      	cmp	r6, #0
 8005b20:	bfa2      	ittt	ge
 8005b22:	6821      	ldrge	r1, [r4, #0]
 8005b24:	f021 0104 	bicge.w	r1, r1, #4
 8005b28:	6021      	strge	r1, [r4, #0]
 8005b2a:	b90d      	cbnz	r5, 8005b30 <_printf_i+0x110>
 8005b2c:	2e00      	cmp	r6, #0
 8005b2e:	d04b      	beq.n	8005bc8 <_printf_i+0x1a8>
 8005b30:	4616      	mov	r6, r2
 8005b32:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b36:	fb03 5711 	mls	r7, r3, r1, r5
 8005b3a:	5dc7      	ldrb	r7, [r0, r7]
 8005b3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b40:	462f      	mov	r7, r5
 8005b42:	42bb      	cmp	r3, r7
 8005b44:	460d      	mov	r5, r1
 8005b46:	d9f4      	bls.n	8005b32 <_printf_i+0x112>
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d10b      	bne.n	8005b64 <_printf_i+0x144>
 8005b4c:	6823      	ldr	r3, [r4, #0]
 8005b4e:	07df      	lsls	r7, r3, #31
 8005b50:	d508      	bpl.n	8005b64 <_printf_i+0x144>
 8005b52:	6923      	ldr	r3, [r4, #16]
 8005b54:	6861      	ldr	r1, [r4, #4]
 8005b56:	4299      	cmp	r1, r3
 8005b58:	bfde      	ittt	le
 8005b5a:	2330      	movle	r3, #48	@ 0x30
 8005b5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b60:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b64:	1b92      	subs	r2, r2, r6
 8005b66:	6122      	str	r2, [r4, #16]
 8005b68:	f8cd a000 	str.w	sl, [sp]
 8005b6c:	464b      	mov	r3, r9
 8005b6e:	aa03      	add	r2, sp, #12
 8005b70:	4621      	mov	r1, r4
 8005b72:	4640      	mov	r0, r8
 8005b74:	f7ff fee6 	bl	8005944 <_printf_common>
 8005b78:	3001      	adds	r0, #1
 8005b7a:	d14a      	bne.n	8005c12 <_printf_i+0x1f2>
 8005b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b80:	b004      	add	sp, #16
 8005b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b86:	6823      	ldr	r3, [r4, #0]
 8005b88:	f043 0320 	orr.w	r3, r3, #32
 8005b8c:	6023      	str	r3, [r4, #0]
 8005b8e:	4833      	ldr	r0, [pc, #204]	@ (8005c5c <_printf_i+0x23c>)
 8005b90:	2778      	movs	r7, #120	@ 0x78
 8005b92:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b96:	6823      	ldr	r3, [r4, #0]
 8005b98:	6831      	ldr	r1, [r6, #0]
 8005b9a:	061f      	lsls	r7, r3, #24
 8005b9c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ba0:	d402      	bmi.n	8005ba8 <_printf_i+0x188>
 8005ba2:	065f      	lsls	r7, r3, #25
 8005ba4:	bf48      	it	mi
 8005ba6:	b2ad      	uxthmi	r5, r5
 8005ba8:	6031      	str	r1, [r6, #0]
 8005baa:	07d9      	lsls	r1, r3, #31
 8005bac:	bf44      	itt	mi
 8005bae:	f043 0320 	orrmi.w	r3, r3, #32
 8005bb2:	6023      	strmi	r3, [r4, #0]
 8005bb4:	b11d      	cbz	r5, 8005bbe <_printf_i+0x19e>
 8005bb6:	2310      	movs	r3, #16
 8005bb8:	e7ac      	b.n	8005b14 <_printf_i+0xf4>
 8005bba:	4827      	ldr	r0, [pc, #156]	@ (8005c58 <_printf_i+0x238>)
 8005bbc:	e7e9      	b.n	8005b92 <_printf_i+0x172>
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	f023 0320 	bic.w	r3, r3, #32
 8005bc4:	6023      	str	r3, [r4, #0]
 8005bc6:	e7f6      	b.n	8005bb6 <_printf_i+0x196>
 8005bc8:	4616      	mov	r6, r2
 8005bca:	e7bd      	b.n	8005b48 <_printf_i+0x128>
 8005bcc:	6833      	ldr	r3, [r6, #0]
 8005bce:	6825      	ldr	r5, [r4, #0]
 8005bd0:	6961      	ldr	r1, [r4, #20]
 8005bd2:	1d18      	adds	r0, r3, #4
 8005bd4:	6030      	str	r0, [r6, #0]
 8005bd6:	062e      	lsls	r6, r5, #24
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	d501      	bpl.n	8005be0 <_printf_i+0x1c0>
 8005bdc:	6019      	str	r1, [r3, #0]
 8005bde:	e002      	b.n	8005be6 <_printf_i+0x1c6>
 8005be0:	0668      	lsls	r0, r5, #25
 8005be2:	d5fb      	bpl.n	8005bdc <_printf_i+0x1bc>
 8005be4:	8019      	strh	r1, [r3, #0]
 8005be6:	2300      	movs	r3, #0
 8005be8:	6123      	str	r3, [r4, #16]
 8005bea:	4616      	mov	r6, r2
 8005bec:	e7bc      	b.n	8005b68 <_printf_i+0x148>
 8005bee:	6833      	ldr	r3, [r6, #0]
 8005bf0:	1d1a      	adds	r2, r3, #4
 8005bf2:	6032      	str	r2, [r6, #0]
 8005bf4:	681e      	ldr	r6, [r3, #0]
 8005bf6:	6862      	ldr	r2, [r4, #4]
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	f7fa fb08 	bl	8000210 <memchr>
 8005c00:	b108      	cbz	r0, 8005c06 <_printf_i+0x1e6>
 8005c02:	1b80      	subs	r0, r0, r6
 8005c04:	6060      	str	r0, [r4, #4]
 8005c06:	6863      	ldr	r3, [r4, #4]
 8005c08:	6123      	str	r3, [r4, #16]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c10:	e7aa      	b.n	8005b68 <_printf_i+0x148>
 8005c12:	6923      	ldr	r3, [r4, #16]
 8005c14:	4632      	mov	r2, r6
 8005c16:	4649      	mov	r1, r9
 8005c18:	4640      	mov	r0, r8
 8005c1a:	47d0      	blx	sl
 8005c1c:	3001      	adds	r0, #1
 8005c1e:	d0ad      	beq.n	8005b7c <_printf_i+0x15c>
 8005c20:	6823      	ldr	r3, [r4, #0]
 8005c22:	079b      	lsls	r3, r3, #30
 8005c24:	d413      	bmi.n	8005c4e <_printf_i+0x22e>
 8005c26:	68e0      	ldr	r0, [r4, #12]
 8005c28:	9b03      	ldr	r3, [sp, #12]
 8005c2a:	4298      	cmp	r0, r3
 8005c2c:	bfb8      	it	lt
 8005c2e:	4618      	movlt	r0, r3
 8005c30:	e7a6      	b.n	8005b80 <_printf_i+0x160>
 8005c32:	2301      	movs	r3, #1
 8005c34:	4632      	mov	r2, r6
 8005c36:	4649      	mov	r1, r9
 8005c38:	4640      	mov	r0, r8
 8005c3a:	47d0      	blx	sl
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	d09d      	beq.n	8005b7c <_printf_i+0x15c>
 8005c40:	3501      	adds	r5, #1
 8005c42:	68e3      	ldr	r3, [r4, #12]
 8005c44:	9903      	ldr	r1, [sp, #12]
 8005c46:	1a5b      	subs	r3, r3, r1
 8005c48:	42ab      	cmp	r3, r5
 8005c4a:	dcf2      	bgt.n	8005c32 <_printf_i+0x212>
 8005c4c:	e7eb      	b.n	8005c26 <_printf_i+0x206>
 8005c4e:	2500      	movs	r5, #0
 8005c50:	f104 0619 	add.w	r6, r4, #25
 8005c54:	e7f5      	b.n	8005c42 <_printf_i+0x222>
 8005c56:	bf00      	nop
 8005c58:	08005df5 	.word	0x08005df5
 8005c5c:	08005e06 	.word	0x08005e06

08005c60 <memmove>:
 8005c60:	4288      	cmp	r0, r1
 8005c62:	b510      	push	{r4, lr}
 8005c64:	eb01 0402 	add.w	r4, r1, r2
 8005c68:	d902      	bls.n	8005c70 <memmove+0x10>
 8005c6a:	4284      	cmp	r4, r0
 8005c6c:	4623      	mov	r3, r4
 8005c6e:	d807      	bhi.n	8005c80 <memmove+0x20>
 8005c70:	1e43      	subs	r3, r0, #1
 8005c72:	42a1      	cmp	r1, r4
 8005c74:	d008      	beq.n	8005c88 <memmove+0x28>
 8005c76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c7e:	e7f8      	b.n	8005c72 <memmove+0x12>
 8005c80:	4402      	add	r2, r0
 8005c82:	4601      	mov	r1, r0
 8005c84:	428a      	cmp	r2, r1
 8005c86:	d100      	bne.n	8005c8a <memmove+0x2a>
 8005c88:	bd10      	pop	{r4, pc}
 8005c8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c92:	e7f7      	b.n	8005c84 <memmove+0x24>

08005c94 <_sbrk_r>:
 8005c94:	b538      	push	{r3, r4, r5, lr}
 8005c96:	4d06      	ldr	r5, [pc, #24]	@ (8005cb0 <_sbrk_r+0x1c>)
 8005c98:	2300      	movs	r3, #0
 8005c9a:	4604      	mov	r4, r0
 8005c9c:	4608      	mov	r0, r1
 8005c9e:	602b      	str	r3, [r5, #0]
 8005ca0:	f7fb f9d8 	bl	8001054 <_sbrk>
 8005ca4:	1c43      	adds	r3, r0, #1
 8005ca6:	d102      	bne.n	8005cae <_sbrk_r+0x1a>
 8005ca8:	682b      	ldr	r3, [r5, #0]
 8005caa:	b103      	cbz	r3, 8005cae <_sbrk_r+0x1a>
 8005cac:	6023      	str	r3, [r4, #0]
 8005cae:	bd38      	pop	{r3, r4, r5, pc}
 8005cb0:	20040888 	.word	0x20040888

08005cb4 <memcpy>:
 8005cb4:	440a      	add	r2, r1
 8005cb6:	4291      	cmp	r1, r2
 8005cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cbc:	d100      	bne.n	8005cc0 <memcpy+0xc>
 8005cbe:	4770      	bx	lr
 8005cc0:	b510      	push	{r4, lr}
 8005cc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cca:	4291      	cmp	r1, r2
 8005ccc:	d1f9      	bne.n	8005cc2 <memcpy+0xe>
 8005cce:	bd10      	pop	{r4, pc}

08005cd0 <_realloc_r>:
 8005cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cd4:	4680      	mov	r8, r0
 8005cd6:	4615      	mov	r5, r2
 8005cd8:	460c      	mov	r4, r1
 8005cda:	b921      	cbnz	r1, 8005ce6 <_realloc_r+0x16>
 8005cdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ce0:	4611      	mov	r1, r2
 8005ce2:	f7ff bc4b 	b.w	800557c <_malloc_r>
 8005ce6:	b92a      	cbnz	r2, 8005cf4 <_realloc_r+0x24>
 8005ce8:	f7ff fbdc 	bl	80054a4 <_free_r>
 8005cec:	2400      	movs	r4, #0
 8005cee:	4620      	mov	r0, r4
 8005cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cf4:	f000 f81a 	bl	8005d2c <_malloc_usable_size_r>
 8005cf8:	4285      	cmp	r5, r0
 8005cfa:	4606      	mov	r6, r0
 8005cfc:	d802      	bhi.n	8005d04 <_realloc_r+0x34>
 8005cfe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005d02:	d8f4      	bhi.n	8005cee <_realloc_r+0x1e>
 8005d04:	4629      	mov	r1, r5
 8005d06:	4640      	mov	r0, r8
 8005d08:	f7ff fc38 	bl	800557c <_malloc_r>
 8005d0c:	4607      	mov	r7, r0
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	d0ec      	beq.n	8005cec <_realloc_r+0x1c>
 8005d12:	42b5      	cmp	r5, r6
 8005d14:	462a      	mov	r2, r5
 8005d16:	4621      	mov	r1, r4
 8005d18:	bf28      	it	cs
 8005d1a:	4632      	movcs	r2, r6
 8005d1c:	f7ff ffca 	bl	8005cb4 <memcpy>
 8005d20:	4621      	mov	r1, r4
 8005d22:	4640      	mov	r0, r8
 8005d24:	f7ff fbbe 	bl	80054a4 <_free_r>
 8005d28:	463c      	mov	r4, r7
 8005d2a:	e7e0      	b.n	8005cee <_realloc_r+0x1e>

08005d2c <_malloc_usable_size_r>:
 8005d2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d30:	1f18      	subs	r0, r3, #4
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	bfbc      	itt	lt
 8005d36:	580b      	ldrlt	r3, [r1, r0]
 8005d38:	18c0      	addlt	r0, r0, r3
 8005d3a:	4770      	bx	lr

08005d3c <_init>:
 8005d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d3e:	bf00      	nop
 8005d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d42:	bc08      	pop	{r3}
 8005d44:	469e      	mov	lr, r3
 8005d46:	4770      	bx	lr

08005d48 <_fini>:
 8005d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4a:	bf00      	nop
 8005d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d4e:	bc08      	pop	{r3}
 8005d50:	469e      	mov	lr, r3
 8005d52:	4770      	bx	lr
