
cv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006140  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08006300  08006300  00007300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006548  08006548  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  08006548  08006548  00007548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006550  08006550  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006550  08006550  00007550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006554  08006554  00007554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20040000  08006558  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000894  2004005c  080065b4  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200408f0  080065b4  000088f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001239d  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002793  00000000  00000000  0001a429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  0001cbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000acf  00000000  00000000  0001d9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ea2  00000000  00000000  0001e49f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b0c  00000000  00000000  00048341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff3e1  00000000  00000000  00059e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015922e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004034  00000000  00000000  00159274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0015d2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2004005c 	.word	0x2004005c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080062e8 	.word	0x080062e8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20040060 	.word	0x20040060
 80001fc:	080062e8 	.word	0x080062e8

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_UART_TxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int tx_in_process;
uint32_t period = 0;
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	tx_in_process = 0;
 80005c8:	4b06      	ldr	r3, [pc, #24]	@ (80005e4 <HAL_UART_TxCpltCallback+0x24>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005d4:	4804      	ldr	r0, [pc, #16]	@ (80005e8 <HAL_UART_TxCpltCallback+0x28>)
 80005d6:	f001 fce9 	bl	8001fac <HAL_GPIO_WritePin>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20040798 	.word	0x20040798
 80005e8:	48000400 	.word	0x48000400

080005ec <inputCommand>:

void inputCommand(const char *rxbuffer) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
    if (strcmp(rxbuffer, "RON") == 0) {
 80005f4:	4960      	ldr	r1, [pc, #384]	@ (8000778 <inputCommand+0x18c>)
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f7ff fe02 	bl	8000200 <strcmp>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d109      	bne.n	8000616 <inputCommand+0x2a>
        state = 4;
 8000602:	4b5e      	ldr	r3, [pc, #376]	@ (800077c <inputCommand+0x190>)
 8000604:	2204      	movs	r2, #4
 8000606:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800060e:	485c      	ldr	r0, [pc, #368]	@ (8000780 <inputCommand+0x194>)
 8000610:	f001 fccc 	bl	8001fac <HAL_GPIO_WritePin>
    	sprintf(buffer, "%lu", period);
    	HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), 100);
    	HAL_UART_Transmit(&hlpuart1, (uint8_t *)"\r\n", 2, 100);
    	state=3;
    }
}
 8000614:	e0ac      	b.n	8000770 <inputCommand+0x184>
    } else if (strcmp(rxbuffer, "ROFF") == 0) {
 8000616:	495b      	ldr	r1, [pc, #364]	@ (8000784 <inputCommand+0x198>)
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f7ff fdf1 	bl	8000200 <strcmp>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d109      	bne.n	8000638 <inputCommand+0x4c>
    	state = 4;
 8000624:	4b55      	ldr	r3, [pc, #340]	@ (800077c <inputCommand+0x190>)
 8000626:	2204      	movs	r2, #4
 8000628:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000630:	4853      	ldr	r0, [pc, #332]	@ (8000780 <inputCommand+0x194>)
 8000632:	f001 fcbb 	bl	8001fac <HAL_GPIO_WritePin>
}
 8000636:	e09b      	b.n	8000770 <inputCommand+0x184>
    } else if (strcmp(rxbuffer, "BON") == 0) {
 8000638:	4953      	ldr	r1, [pc, #332]	@ (8000788 <inputCommand+0x19c>)
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f7ff fde0 	bl	8000200 <strcmp>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d108      	bne.n	8000658 <inputCommand+0x6c>
    	state = 4;
 8000646:	4b4d      	ldr	r3, [pc, #308]	@ (800077c <inputCommand+0x190>)
 8000648:	2204      	movs	r2, #4
 800064a:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	2180      	movs	r1, #128	@ 0x80
 8000650:	484b      	ldr	r0, [pc, #300]	@ (8000780 <inputCommand+0x194>)
 8000652:	f001 fcab 	bl	8001fac <HAL_GPIO_WritePin>
}
 8000656:	e08b      	b.n	8000770 <inputCommand+0x184>
    } else if (strcmp(rxbuffer, "BOFF") == 0) {
 8000658:	494c      	ldr	r1, [pc, #304]	@ (800078c <inputCommand+0x1a0>)
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f7ff fdd0 	bl	8000200 <strcmp>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d108      	bne.n	8000678 <inputCommand+0x8c>
    	state = 4;
 8000666:	4b45      	ldr	r3, [pc, #276]	@ (800077c <inputCommand+0x190>)
 8000668:	2204      	movs	r2, #4
 800066a:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	2180      	movs	r1, #128	@ 0x80
 8000670:	4843      	ldr	r0, [pc, #268]	@ (8000780 <inputCommand+0x194>)
 8000672:	f001 fc9b 	bl	8001fac <HAL_GPIO_WritePin>
}
 8000676:	e07b      	b.n	8000770 <inputCommand+0x184>
    } else if (strcmp(rxbuffer, "GON") == 0) {
 8000678:	4945      	ldr	r1, [pc, #276]	@ (8000790 <inputCommand+0x1a4>)
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f7ff fdc0 	bl	8000200 <strcmp>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d108      	bne.n	8000698 <inputCommand+0xac>
    	state = 4;
 8000686:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <inputCommand+0x190>)
 8000688:	2204      	movs	r2, #4
 800068a:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800068c:	2201      	movs	r2, #1
 800068e:	2180      	movs	r1, #128	@ 0x80
 8000690:	4840      	ldr	r0, [pc, #256]	@ (8000794 <inputCommand+0x1a8>)
 8000692:	f001 fc8b 	bl	8001fac <HAL_GPIO_WritePin>
}
 8000696:	e06b      	b.n	8000770 <inputCommand+0x184>
    } else if (strcmp(rxbuffer, "GOFF") == 0) {
 8000698:	493f      	ldr	r1, [pc, #252]	@ (8000798 <inputCommand+0x1ac>)
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f7ff fdb0 	bl	8000200 <strcmp>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d108      	bne.n	80006b8 <inputCommand+0xcc>
    	state = 4;
 80006a6:	4b35      	ldr	r3, [pc, #212]	@ (800077c <inputCommand+0x190>)
 80006a8:	2204      	movs	r2, #4
 80006aa:	701a      	strb	r2, [r3, #0]
    	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2180      	movs	r1, #128	@ 0x80
 80006b0:	4838      	ldr	r0, [pc, #224]	@ (8000794 <inputCommand+0x1a8>)
 80006b2:	f001 fc7b 	bl	8001fac <HAL_GPIO_WritePin>
}
 80006b6:	e05b      	b.n	8000770 <inputCommand+0x184>
    } else if (strcmp(rxbuffer, "RESET") == 0) {
 80006b8:	4938      	ldr	r1, [pc, #224]	@ (800079c <inputCommand+0x1b0>)
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f7ff fda0 	bl	8000200 <strcmp>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d113      	bne.n	80006ee <inputCommand+0x102>
    	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2180      	movs	r1, #128	@ 0x80
 80006ca:	4832      	ldr	r0, [pc, #200]	@ (8000794 <inputCommand+0x1a8>)
 80006cc:	f001 fc6e 	bl	8001fac <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2180      	movs	r1, #128	@ 0x80
 80006d4:	482a      	ldr	r0, [pc, #168]	@ (8000780 <inputCommand+0x194>)
 80006d6:	f001 fc69 	bl	8001fac <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006e0:	4827      	ldr	r0, [pc, #156]	@ (8000780 <inputCommand+0x194>)
 80006e2:	f001 fc63 	bl	8001fac <HAL_GPIO_WritePin>
        state=0;
 80006e6:	4b25      	ldr	r3, [pc, #148]	@ (800077c <inputCommand+0x190>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
}
 80006ec:	e040      	b.n	8000770 <inputCommand+0x184>
    } else if (strncmp(rxbuffer, "BLIK ", 5) == 0) {
 80006ee:	2205      	movs	r2, #5
 80006f0:	492b      	ldr	r1, [pc, #172]	@ (80007a0 <inputCommand+0x1b4>)
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f005 f96e 	bl	80059d4 <strncmp>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d138      	bne.n	8000770 <inputCommand+0x184>
    	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2180      	movs	r1, #128	@ 0x80
 8000702:	4824      	ldr	r0, [pc, #144]	@ (8000794 <inputCommand+0x1a8>)
 8000704:	f001 fc52 	bl	8001fac <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2180      	movs	r1, #128	@ 0x80
 800070c:	481c      	ldr	r0, [pc, #112]	@ (8000780 <inputCommand+0x194>)
 800070e:	f001 fc4d 	bl	8001fac <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000718:	4819      	ldr	r0, [pc, #100]	@ (8000780 <inputCommand+0x194>)
 800071a:	f001 fc47 	bl	8001fac <HAL_GPIO_WritePin>
    	period = atoi(rxbuffer + 5);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	3305      	adds	r3, #5
 8000722:	4618      	mov	r0, r3
 8000724:	f005 f8a5 	bl	8005872 <atoi>
 8000728:	4603      	mov	r3, r0
 800072a:	461a      	mov	r2, r3
 800072c:	4b1d      	ldr	r3, [pc, #116]	@ (80007a4 <inputCommand+0x1b8>)
 800072e:	601a      	str	r2, [r3, #0]
    	HAL_UART_Transmit(&hlpuart1, (uint8_t *)"\r\nBLIK: ", 8, 100);
 8000730:	2364      	movs	r3, #100	@ 0x64
 8000732:	2208      	movs	r2, #8
 8000734:	491c      	ldr	r1, [pc, #112]	@ (80007a8 <inputCommand+0x1bc>)
 8000736:	481d      	ldr	r0, [pc, #116]	@ (80007ac <inputCommand+0x1c0>)
 8000738:	f003 fac2 	bl	8003cc0 <HAL_UART_Transmit>
    	sprintf(buffer, "%lu", period);
 800073c:	4b19      	ldr	r3, [pc, #100]	@ (80007a4 <inputCommand+0x1b8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	461a      	mov	r2, r3
 8000742:	491b      	ldr	r1, [pc, #108]	@ (80007b0 <inputCommand+0x1c4>)
 8000744:	481b      	ldr	r0, [pc, #108]	@ (80007b4 <inputCommand+0x1c8>)
 8000746:	f005 f91d 	bl	8005984 <siprintf>
    	HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), 100);
 800074a:	481a      	ldr	r0, [pc, #104]	@ (80007b4 <inputCommand+0x1c8>)
 800074c:	f7ff fd62 	bl	8000214 <strlen>
 8000750:	4603      	mov	r3, r0
 8000752:	b29a      	uxth	r2, r3
 8000754:	2364      	movs	r3, #100	@ 0x64
 8000756:	4917      	ldr	r1, [pc, #92]	@ (80007b4 <inputCommand+0x1c8>)
 8000758:	4814      	ldr	r0, [pc, #80]	@ (80007ac <inputCommand+0x1c0>)
 800075a:	f003 fab1 	bl	8003cc0 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&hlpuart1, (uint8_t *)"\r\n", 2, 100);
 800075e:	2364      	movs	r3, #100	@ 0x64
 8000760:	2202      	movs	r2, #2
 8000762:	4915      	ldr	r1, [pc, #84]	@ (80007b8 <inputCommand+0x1cc>)
 8000764:	4811      	ldr	r0, [pc, #68]	@ (80007ac <inputCommand+0x1c0>)
 8000766:	f003 faab 	bl	8003cc0 <HAL_UART_Transmit>
    	state=3;
 800076a:	4b04      	ldr	r3, [pc, #16]	@ (800077c <inputCommand+0x190>)
 800076c:	2203      	movs	r2, #3
 800076e:	701a      	strb	r2, [r3, #0]
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	08006300 	.word	0x08006300
 800077c:	2004077a 	.word	0x2004077a
 8000780:	48000400 	.word	0x48000400
 8000784:	08006304 	.word	0x08006304
 8000788:	0800630c 	.word	0x0800630c
 800078c:	08006310 	.word	0x08006310
 8000790:	08006318 	.word	0x08006318
 8000794:	48000800 	.word	0x48000800
 8000798:	0800631c 	.word	0x0800631c
 800079c:	08006324 	.word	0x08006324
 80007a0:	0800632c 	.word	0x0800632c
 80007a4:	2004079c 	.word	0x2004079c
 80007a8:	08006334 	.word	0x08006334
 80007ac:	20040078 	.word	0x20040078
 80007b0:	08006340 	.word	0x08006340
 80007b4:	20040784 	.word	0x20040784
 80007b8:	08006344 	.word	0x08006344

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c2:	f000 fe2a 	bl	800141a <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2180      	movs	r1, #128	@ 0x80
 80007ca:	48a3      	ldr	r0, [pc, #652]	@ (8000a58 <main+0x29c>)
 80007cc:	f001 fbee 	bl	8001fac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2180      	movs	r1, #128	@ 0x80
 80007d4:	48a0      	ldr	r0, [pc, #640]	@ (8000a58 <main+0x29c>)
 80007d6:	f001 fbe9 	bl	8001fac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2180      	movs	r1, #128	@ 0x80
 80007de:	489f      	ldr	r0, [pc, #636]	@ (8000a5c <main+0x2a0>)
 80007e0:	f001 fbe4 	bl	8001fac <HAL_GPIO_WritePin>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f000 f998 	bl	8000b18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e8:	f000 fae2 	bl	8000db0 <MX_GPIO_Init>
  MX_DMA_Init();
 80007ec:	f000 faae 	bl	8000d4c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80007f0:	f000 f9e6 	bl	8000bc0 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 80007f4:	f000 fa30 	bl	8000c58 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007f8:	f000 fa7a 	bl	8000cf0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_StatusTypeDef err = HAL_UART_Transmit(&hlpuart1,(uint8_t *)"Start programu \r\n",16,100);
 80007fc:	2364      	movs	r3, #100	@ 0x64
 80007fe:	2210      	movs	r2, #16
 8000800:	4997      	ldr	r1, [pc, #604]	@ (8000a60 <main+0x2a4>)
 8000802:	4898      	ldr	r0, [pc, #608]	@ (8000a64 <main+0x2a8>)
 8000804:	f003 fa5c 	bl	8003cc0 <HAL_UART_Transmit>
 8000808:	4603      	mov	r3, r0
 800080a:	72fb      	strb	r3, [r7, #11]
  if (err != HAL_OK){
 800080c:	7afb      	ldrb	r3, [r7, #11]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <main+0x5a>
	  Error_Handler();
 8000812:	f000 fb83 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t tickLedB = HAL_GetTick();
 8000816:	f000 fe69 	bl	80014ec <HAL_GetTick>
 800081a:	61f8      	str	r0, [r7, #28]
  uint32_t tickLedR = HAL_GetTick();
 800081c:	f000 fe66 	bl	80014ec <HAL_GetTick>
 8000820:	61b8      	str	r0, [r7, #24]
  bool button_state = false;
 8000822:	2300      	movs	r3, #0
 8000824:	75fb      	strb	r3, [r7, #23]
  uint32_t tickButton = HAL_GetTick();
 8000826:	f000 fe61 	bl	80014ec <HAL_GetTick>
 800082a:	6138      	str	r0, [r7, #16]
  uint32_t tickButtonPress= 0;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
  uint32_t tick = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (HAL_UART_Receive(&hlpuart1, (uint8_t *)&rxbuffer[rxpos], 1, 0) == HAL_OK) {
 8000834:	4b8c      	ldr	r3, [pc, #560]	@ (8000a68 <main+0x2ac>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a8c      	ldr	r2, [pc, #560]	@ (8000a6c <main+0x2b0>)
 800083a:	1899      	adds	r1, r3, r2
 800083c:	2300      	movs	r3, #0
 800083e:	2201      	movs	r2, #1
 8000840:	4888      	ldr	r0, [pc, #544]	@ (8000a64 <main+0x2a8>)
 8000842:	f003 facb 	bl	8003ddc <HAL_UART_Receive>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d142      	bne.n	80008d2 <main+0x116>
		  if (rxbuffer[rxpos] == '\r' || rxbuffer[rxpos] == '\n') {
 800084c:	4b86      	ldr	r3, [pc, #536]	@ (8000a68 <main+0x2ac>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a86      	ldr	r2, [pc, #536]	@ (8000a6c <main+0x2b0>)
 8000852:	5cd3      	ldrb	r3, [r2, r3]
 8000854:	2b0d      	cmp	r3, #13
 8000856:	d005      	beq.n	8000864 <main+0xa8>
 8000858:	4b83      	ldr	r3, [pc, #524]	@ (8000a68 <main+0x2ac>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a83      	ldr	r2, [pc, #524]	@ (8000a6c <main+0x2b0>)
 800085e:	5cd3      	ldrb	r3, [r2, r3]
 8000860:	2b0a      	cmp	r3, #10
 8000862:	d123      	bne.n	80008ac <main+0xf0>
			  if (rxpos != 0) {
 8000864:	4b80      	ldr	r3, [pc, #512]	@ (8000a68 <main+0x2ac>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d01b      	beq.n	80008a4 <main+0xe8>
				  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"\r\nPrikaz: ", 10, 100);
 800086c:	2364      	movs	r3, #100	@ 0x64
 800086e:	220a      	movs	r2, #10
 8000870:	497f      	ldr	r1, [pc, #508]	@ (8000a70 <main+0x2b4>)
 8000872:	487c      	ldr	r0, [pc, #496]	@ (8000a64 <main+0x2a8>)
 8000874:	f003 fa24 	bl	8003cc0 <HAL_UART_Transmit>
				  HAL_UART_Transmit(&hlpuart1, (uint8_t *)rxbuffer, rxpos, 100);
 8000878:	4b7b      	ldr	r3, [pc, #492]	@ (8000a68 <main+0x2ac>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	b29a      	uxth	r2, r3
 800087e:	2364      	movs	r3, #100	@ 0x64
 8000880:	497a      	ldr	r1, [pc, #488]	@ (8000a6c <main+0x2b0>)
 8000882:	4878      	ldr	r0, [pc, #480]	@ (8000a64 <main+0x2a8>)
 8000884:	f003 fa1c 	bl	8003cc0 <HAL_UART_Transmit>
				  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"\r\n", 2, 100);
 8000888:	2364      	movs	r3, #100	@ 0x64
 800088a:	2202      	movs	r2, #2
 800088c:	4979      	ldr	r1, [pc, #484]	@ (8000a74 <main+0x2b8>)
 800088e:	4875      	ldr	r0, [pc, #468]	@ (8000a64 <main+0x2a8>)
 8000890:	f003 fa16 	bl	8003cc0 <HAL_UART_Transmit>
				  rxbuffer[rxpos] = '\0';
 8000894:	4b74      	ldr	r3, [pc, #464]	@ (8000a68 <main+0x2ac>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a74      	ldr	r2, [pc, #464]	@ (8000a6c <main+0x2b0>)
 800089a:	2100      	movs	r1, #0
 800089c:	54d1      	strb	r1, [r2, r3]
				  inputCommand(rxbuffer);
 800089e:	4873      	ldr	r0, [pc, #460]	@ (8000a6c <main+0x2b0>)
 80008a0:	f7ff fea4 	bl	80005ec <inputCommand>
			  }
			  rxpos = 0;
 80008a4:	4b70      	ldr	r3, [pc, #448]	@ (8000a68 <main+0x2ac>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	e012      	b.n	80008d2 <main+0x116>
		  } else if (rxpos + 1 < 50) {
 80008ac:	4b6e      	ldr	r3, [pc, #440]	@ (8000a68 <main+0x2ac>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	3301      	adds	r3, #1
 80008b2:	2b31      	cmp	r3, #49	@ 0x31
 80008b4:	d80d      	bhi.n	80008d2 <main+0x116>
			  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&rxbuffer[rxpos], 1, 10);
 80008b6:	4b6c      	ldr	r3, [pc, #432]	@ (8000a68 <main+0x2ac>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a6c      	ldr	r2, [pc, #432]	@ (8000a6c <main+0x2b0>)
 80008bc:	1899      	adds	r1, r3, r2
 80008be:	230a      	movs	r3, #10
 80008c0:	2201      	movs	r2, #1
 80008c2:	4868      	ldr	r0, [pc, #416]	@ (8000a64 <main+0x2a8>)
 80008c4:	f003 f9fc 	bl	8003cc0 <HAL_UART_Transmit>
			  rxpos++;
 80008c8:	4b67      	ldr	r3, [pc, #412]	@ (8000a68 <main+0x2ac>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	3301      	adds	r3, #1
 80008ce:	4a66      	ldr	r2, [pc, #408]	@ (8000a68 <main+0x2ac>)
 80008d0:	6013      	str	r3, [r2, #0]
		  }
	  }
	  tick = HAL_GetTick();
 80008d2:	f000 fe0b 	bl	80014ec <HAL_GetTick>
 80008d6:	6078      	str	r0, [r7, #4]
	  switch (state){
 80008d8:	4b67      	ldr	r3, [pc, #412]	@ (8000a78 <main+0x2bc>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b03      	cmp	r3, #3
 80008de:	f200 80e0 	bhi.w	8000aa2 <main+0x2e6>
 80008e2:	a201      	add	r2, pc, #4	@ (adr r2, 80008e8 <main+0x12c>)
 80008e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e8:	080008f9 	.word	0x080008f9
 80008ec:	08000949 	.word	0x08000949
 80008f0:	0800098f 	.word	0x0800098f
 80008f4:	08000a13 	.word	0x08000a13
	  case 0:
          if (tick - tickLedB >= 250) {
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	2bf9      	cmp	r3, #249	@ 0xf9
 8000900:	d906      	bls.n	8000910 <main+0x154>
			  tickLedB += 125;
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	337d      	adds	r3, #125	@ 0x7d
 8000906:	61fb      	str	r3, [r7, #28]
			  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000908:	2180      	movs	r1, #128	@ 0x80
 800090a:	4853      	ldr	r0, [pc, #332]	@ (8000a58 <main+0x29c>)
 800090c:	f001 fb66 	bl	8001fdc <HAL_GPIO_TogglePin>
		  }
          if (tick - tickLedR >= 500) {
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800091a:	d307      	bcc.n	800092c <main+0x170>
        	  tickLedR += 250;
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	33fa      	adds	r3, #250	@ 0xfa
 8000920:	61bb      	str	r3, [r7, #24]
        	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000922:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000926:	484c      	ldr	r0, [pc, #304]	@ (8000a58 <main+0x29c>)
 8000928:	f001 fb58 	bl	8001fdc <HAL_GPIO_TogglePin>
          }
          if (button_state){
 800092c:	7dfb      	ldrb	r3, [r7, #23]
 800092e:	2b00      	cmp	r3, #0
 8000930:	f000 808c 	beq.w	8000a4c <main+0x290>
        	  state = 1; //stav 2
 8000934:	4b50      	ldr	r3, [pc, #320]	@ (8000a78 <main+0x2bc>)
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"\r\n Zmena stavu na 1", 19, 100);
 800093a:	2364      	movs	r3, #100	@ 0x64
 800093c:	2213      	movs	r2, #19
 800093e:	494f      	ldr	r1, [pc, #316]	@ (8000a7c <main+0x2c0>)
 8000940:	4848      	ldr	r0, [pc, #288]	@ (8000a64 <main+0x2a8>)
 8000942:	f003 f9bd 	bl	8003cc0 <HAL_UART_Transmit>
          }
		  break;
 8000946:	e081      	b.n	8000a4c <main+0x290>
	  case 1:
		  if (tick - tickLedB >= 100)  {
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	2b63      	cmp	r3, #99	@ 0x63
 8000950:	d906      	bls.n	8000960 <main+0x1a4>
			  tickLedB += 50;
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	3332      	adds	r3, #50	@ 0x32
 8000956:	61fb      	str	r3, [r7, #28]
			  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000958:	2180      	movs	r1, #128	@ 0x80
 800095a:	483f      	ldr	r0, [pc, #252]	@ (8000a58 <main+0x29c>)
 800095c:	f001 fb3e 	bl	8001fdc <HAL_GPIO_TogglePin>
		  }
		  if (button_state){
 8000960:	7dfb      	ldrb	r3, [r7, #23]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d004      	beq.n	8000970 <main+0x1b4>
			  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000966:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800096a:	483b      	ldr	r0, [pc, #236]	@ (8000a58 <main+0x29c>)
 800096c:	f001 fb36 	bl	8001fdc <HAL_GPIO_TogglePin>
		  }
		  if (ButtonPressTime >= 1000){
 8000970:	4b43      	ldr	r3, [pc, #268]	@ (8000a80 <main+0x2c4>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000978:	d36a      	bcc.n	8000a50 <main+0x294>
			  state = 2; //stav 4
 800097a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a78 <main+0x2bc>)
 800097c:	2202      	movs	r2, #2
 800097e:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"\r\n Zmena stavu na 2", 19, 100);
 8000980:	2364      	movs	r3, #100	@ 0x64
 8000982:	2213      	movs	r2, #19
 8000984:	493f      	ldr	r1, [pc, #252]	@ (8000a84 <main+0x2c8>)
 8000986:	4837      	ldr	r0, [pc, #220]	@ (8000a64 <main+0x2a8>)
 8000988:	f003 f99a 	bl	8003cc0 <HAL_UART_Transmit>
		  }
		  break;
 800098c:	e060      	b.n	8000a50 <main+0x294>
	  case 2:
		  if (tick%500 < 100){
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	4b3d      	ldr	r3, [pc, #244]	@ (8000a88 <main+0x2cc>)
 8000992:	fba3 1302 	umull	r1, r3, r3, r2
 8000996:	095b      	lsrs	r3, r3, #5
 8000998:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800099c:	fb01 f303 	mul.w	r3, r1, r3
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	2b63      	cmp	r3, #99	@ 0x63
 80009a4:	d805      	bhi.n	80009b2 <main+0x1f6>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80009a6:	2201      	movs	r2, #1
 80009a8:	2180      	movs	r1, #128	@ 0x80
 80009aa:	482b      	ldr	r0, [pc, #172]	@ (8000a58 <main+0x29c>)
 80009ac:	f001 fafe 	bl	8001fac <HAL_GPIO_WritePin>
 80009b0:	e004      	b.n	80009bc <main+0x200>
		  }else {
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2180      	movs	r1, #128	@ 0x80
 80009b6:	4828      	ldr	r0, [pc, #160]	@ (8000a58 <main+0x29c>)
 80009b8:	f001 faf8 	bl	8001fac <HAL_GPIO_WritePin>
		  }
		  if (tick-tickLedR >= (ButtonPressTime/2))  {
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	69bb      	ldr	r3, [r7, #24]
 80009c0:	1ad2      	subs	r2, r2, r3
 80009c2:	4b2f      	ldr	r3, [pc, #188]	@ (8000a80 <main+0x2c4>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	085b      	lsrs	r3, r3, #1
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d343      	bcc.n	8000a54 <main+0x298>
			  tickLedR += ButtonPressTime/2;
 80009cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000a80 <main+0x2c4>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	69ba      	ldr	r2, [r7, #24]
 80009d4:	4413      	add	r3, r2
 80009d6:	61bb      	str	r3, [r7, #24]
			  HAL_UART_Transmit(&hlpuart1, (uint8_t *)"\r\n Perioda blikani ", 19, 100);
 80009d8:	2364      	movs	r3, #100	@ 0x64
 80009da:	2213      	movs	r2, #19
 80009dc:	492b      	ldr	r1, [pc, #172]	@ (8000a8c <main+0x2d0>)
 80009de:	4821      	ldr	r0, [pc, #132]	@ (8000a64 <main+0x2a8>)
 80009e0:	f003 f96e 	bl	8003cc0 <HAL_UART_Transmit>
			  sprintf(buffer, "%lu", ButtonPressTime);
 80009e4:	4b26      	ldr	r3, [pc, #152]	@ (8000a80 <main+0x2c4>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	461a      	mov	r2, r3
 80009ea:	4929      	ldr	r1, [pc, #164]	@ (8000a90 <main+0x2d4>)
 80009ec:	4829      	ldr	r0, [pc, #164]	@ (8000a94 <main+0x2d8>)
 80009ee:	f004 ffc9 	bl	8005984 <siprintf>
			  HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), 100);
 80009f2:	4828      	ldr	r0, [pc, #160]	@ (8000a94 <main+0x2d8>)
 80009f4:	f7ff fc0e 	bl	8000214 <strlen>
 80009f8:	4603      	mov	r3, r0
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	2364      	movs	r3, #100	@ 0x64
 80009fe:	4925      	ldr	r1, [pc, #148]	@ (8000a94 <main+0x2d8>)
 8000a00:	4818      	ldr	r0, [pc, #96]	@ (8000a64 <main+0x2a8>)
 8000a02:	f003 f95d 	bl	8003cc0 <HAL_UART_Transmit>
			  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000a06:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a0a:	4813      	ldr	r0, [pc, #76]	@ (8000a58 <main+0x29c>)
 8000a0c:	f001 fae6 	bl	8001fdc <HAL_GPIO_TogglePin>
		  }
		  break;
 8000a10:	e020      	b.n	8000a54 <main+0x298>
	  case 3:
    	  if(tick-tickAll>=period){
 8000a12:	4b21      	ldr	r3, [pc, #132]	@ (8000a98 <main+0x2dc>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	1ad2      	subs	r2, r2, r3
 8000a1a:	4b20      	ldr	r3, [pc, #128]	@ (8000a9c <main+0x2e0>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d33e      	bcc.n	8000aa0 <main+0x2e4>
    		  tickAll += period;
 8000a22:	4b1d      	ldr	r3, [pc, #116]	@ (8000a98 <main+0x2dc>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	4b1d      	ldr	r3, [pc, #116]	@ (8000a9c <main+0x2e0>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	4a1a      	ldr	r2, [pc, #104]	@ (8000a98 <main+0x2dc>)
 8000a2e:	6013      	str	r3, [r2, #0]
    		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000a30:	2180      	movs	r1, #128	@ 0x80
 8000a32:	480a      	ldr	r0, [pc, #40]	@ (8000a5c <main+0x2a0>)
 8000a34:	f001 fad2 	bl	8001fdc <HAL_GPIO_TogglePin>
    		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a38:	2180      	movs	r1, #128	@ 0x80
 8000a3a:	4807      	ldr	r0, [pc, #28]	@ (8000a58 <main+0x29c>)
 8000a3c:	f001 face 	bl	8001fdc <HAL_GPIO_TogglePin>
    		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000a40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a44:	4804      	ldr	r0, [pc, #16]	@ (8000a58 <main+0x29c>)
 8000a46:	f001 fac9 	bl	8001fdc <HAL_GPIO_TogglePin>
    	  }
    	  break;
 8000a4a:	e029      	b.n	8000aa0 <main+0x2e4>
		  break;
 8000a4c:	bf00      	nop
 8000a4e:	e028      	b.n	8000aa2 <main+0x2e6>
		  break;
 8000a50:	bf00      	nop
 8000a52:	e026      	b.n	8000aa2 <main+0x2e6>
		  break;
 8000a54:	bf00      	nop
 8000a56:	e024      	b.n	8000aa2 <main+0x2e6>
 8000a58:	48000400 	.word	0x48000400
 8000a5c:	48000800 	.word	0x48000800
 8000a60:	08006348 	.word	0x08006348
 8000a64:	20040078 	.word	0x20040078
 8000a68:	20040780 	.word	0x20040780
 8000a6c:	20040748 	.word	0x20040748
 8000a70:	0800635c 	.word	0x0800635c
 8000a74:	08006344 	.word	0x08006344
 8000a78:	2004077a 	.word	0x2004077a
 8000a7c:	08006368 	.word	0x08006368
 8000a80:	20040744 	.word	0x20040744
 8000a84:	0800637c 	.word	0x0800637c
 8000a88:	10624dd3 	.word	0x10624dd3
 8000a8c:	08006390 	.word	0x08006390
 8000a90:	08006340 	.word	0x08006340
 8000a94:	20040784 	.word	0x20040784
 8000a98:	2004077c 	.word	0x2004077c
 8000a9c:	2004079c 	.word	0x2004079c
    	  break;
 8000aa0:	bf00      	nop
	  }

	  bool button_now = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000aa2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aa6:	481a      	ldr	r0, [pc, #104]	@ (8000b10 <main+0x354>)
 8000aa8:	f001 fa68 	bl	8001f7c <HAL_GPIO_ReadPin>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	bf14      	ite	ne
 8000ab2:	2301      	movne	r3, #1
 8000ab4:	2300      	moveq	r3, #0
 8000ab6:	70fb      	strb	r3, [r7, #3]
	  if (button_state){
 8000ab8:	7dfb      	ldrb	r3, [r7, #23]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d013      	beq.n	8000ae6 <main+0x32a>
		  if (button_now)  {
 8000abe:	78fb      	ldrb	r3, [r7, #3]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d002      	beq.n	8000aca <main+0x30e>
			  tickButton = tick;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	e6b4      	b.n	8000834 <main+0x78>
		  }  else  { // tlacitko uvolneno
			  if (tick-tickButton > 20) { // platne pusteni tlacitka
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	2b14      	cmp	r3, #20
 8000ad2:	f67f aeaf 	bls.w	8000834 <main+0x78>
				  button_state = false;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	75fb      	strb	r3, [r7, #23]
				  ButtonPressTime = tick-tickButtonPress;
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	4a0c      	ldr	r2, [pc, #48]	@ (8000b14 <main+0x358>)
 8000ae2:	6013      	str	r3, [r2, #0]
 8000ae4:	e6a6      	b.n	8000834 <main+0x78>
			  }
		  }
	  } else {
		  if (!button_now)  {
 8000ae6:	78fb      	ldrb	r3, [r7, #3]
 8000ae8:	f083 0301 	eor.w	r3, r3, #1
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d002      	beq.n	8000af8 <main+0x33c>
			  tickButton = tick;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	e69d      	b.n	8000834 <main+0x78>
		  } else { // tlacitko stisknuto
			  if (tick-tickButton > 20) { // platne stisknuti tlacitka
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	2b14      	cmp	r3, #20
 8000b00:	f67f ae98 	bls.w	8000834 <main+0x78>
				  button_state = true;
 8000b04:	2301      	movs	r3, #1
 8000b06:	75fb      	strb	r3, [r7, #23]
				  tickButtonPress = tick;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	60fb      	str	r3, [r7, #12]
  {
 8000b0c:	e692      	b.n	8000834 <main+0x78>
 8000b0e:	bf00      	nop
 8000b10:	48000800 	.word	0x48000800
 8000b14:	20040744 	.word	0x20040744

08000b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b096      	sub	sp, #88	@ 0x58
 8000b1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	2244      	movs	r2, #68	@ 0x44
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f004 ff4c 	bl	80059c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f001 fbbc 	bl	80022b8 <HAL_PWREx_ControlVoltageScaling>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000b46:	f000 f9e9 	bl	8000f1c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000b4a:	2322      	movs	r3, #34	@ 0x22
 8000b4c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b54:	2301      	movs	r3, #1
 8000b56:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b58:	2340      	movs	r3, #64	@ 0x40
 8000b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b60:	2302      	movs	r3, #2
 8000b62:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b64:	2302      	movs	r3, #2
 8000b66:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000b68:	231e      	movs	r3, #30
 8000b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f001 fc5f 	bl	8002440 <HAL_RCC_OscConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000b88:	f000 f9c8 	bl	8000f1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b90:	2303      	movs	r3, #3
 8000b92:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	2105      	movs	r1, #5
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f002 f864 	bl	8002c74 <HAL_RCC_ClockConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000bb2:	f000 f9b3 	bl	8000f1c <Error_Handler>
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	3758      	adds	r7, #88	@ 0x58
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000bc4:	4b22      	ldr	r3, [pc, #136]	@ (8000c50 <MX_LPUART1_UART_Init+0x90>)
 8000bc6:	4a23      	ldr	r2, [pc, #140]	@ (8000c54 <MX_LPUART1_UART_Init+0x94>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000bca:	4b21      	ldr	r3, [pc, #132]	@ (8000c50 <MX_LPUART1_UART_Init+0x90>)
 8000bcc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bd0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <MX_LPUART1_UART_Init+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c50 <MX_LPUART1_UART_Init+0x90>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	@ (8000c50 <MX_LPUART1_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c50 <MX_LPUART1_UART_Init+0x90>)
 8000be6:	220c      	movs	r2, #12
 8000be8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bea:	4b19      	ldr	r3, [pc, #100]	@ (8000c50 <MX_LPUART1_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf0:	4b17      	ldr	r3, [pc, #92]	@ (8000c50 <MX_LPUART1_UART_Init+0x90>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bf6:	4b16      	ldr	r3, [pc, #88]	@ (8000c50 <MX_LPUART1_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bfc:	4b14      	ldr	r3, [pc, #80]	@ (8000c50 <MX_LPUART1_UART_Init+0x90>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000c02:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <MX_LPUART1_UART_Init+0x90>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000c08:	4811      	ldr	r0, [pc, #68]	@ (8000c50 <MX_LPUART1_UART_Init+0x90>)
 8000c0a:	f003 f809 	bl	8003c20 <HAL_UART_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c14:	f000 f982 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c18:	2100      	movs	r1, #0
 8000c1a:	480d      	ldr	r0, [pc, #52]	@ (8000c50 <MX_LPUART1_UART_Init+0x90>)
 8000c1c:	f004 fab3 	bl	8005186 <HAL_UARTEx_SetTxFifoThreshold>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c26:	f000 f979 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4808      	ldr	r0, [pc, #32]	@ (8000c50 <MX_LPUART1_UART_Init+0x90>)
 8000c2e:	f004 fae8 	bl	8005202 <HAL_UARTEx_SetRxFifoThreshold>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c38:	f000 f970 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000c3c:	4804      	ldr	r0, [pc, #16]	@ (8000c50 <MX_LPUART1_UART_Init+0x90>)
 8000c3e:	f004 fa69 	bl	8005114 <HAL_UARTEx_DisableFifoMode>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c48:	f000 f968 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20040078 	.word	0x20040078
 8000c54:	40008000 	.word	0x40008000

08000c58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c5c:	4b22      	ldr	r3, [pc, #136]	@ (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c5e:	4a23      	ldr	r2, [pc, #140]	@ (8000cec <MX_USART3_UART_Init+0x94>)
 8000c60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c62:	4b21      	ldr	r3, [pc, #132]	@ (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c70:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c7e:	220c      	movs	r2, #12
 8000c80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c82:	4b19      	ldr	r3, [pc, #100]	@ (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c88:	4b17      	ldr	r3, [pc, #92]	@ (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c94:	4b14      	ldr	r3, [pc, #80]	@ (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ca0:	4811      	ldr	r0, [pc, #68]	@ (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000ca2:	f002 ffbd 	bl	8003c20 <HAL_UART_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cac:	f000 f936 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	480d      	ldr	r0, [pc, #52]	@ (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000cb4:	f004 fa67 	bl	8005186 <HAL_UARTEx_SetTxFifoThreshold>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cbe:	f000 f92d 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4808      	ldr	r0, [pc, #32]	@ (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000cc6:	f004 fa9c 	bl	8005202 <HAL_UARTEx_SetRxFifoThreshold>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cd0:	f000 f924 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cd4:	4804      	ldr	r0, [pc, #16]	@ (8000ce8 <MX_USART3_UART_Init+0x90>)
 8000cd6:	f004 fa1d 	bl	8005114 <HAL_UARTEx_DisableFifoMode>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ce0:	f000 f91c 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	2004010c 	.word	0x2004010c
 8000cec:	40004800 	.word	0x40004800

08000cf0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	@ (8000d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cf6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000cfa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	@ (8000d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cfe:	2206      	movs	r2, #6
 8000d00:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d02:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d04:	2202      	movs	r2, #2
 8000d06:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	@ (8000d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000d20:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d26:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d34:	f001 f96c 	bl	8002010 <HAL_PCD_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d3e:	f000 f8ed 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20040260 	.word	0x20040260

08000d4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d52:	4b16      	ldr	r3, [pc, #88]	@ (8000dac <MX_DMA_Init+0x60>)
 8000d54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d56:	4a15      	ldr	r2, [pc, #84]	@ (8000dac <MX_DMA_Init+0x60>)
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d5e:	4b13      	ldr	r3, [pc, #76]	@ (8000dac <MX_DMA_Init+0x60>)
 8000d60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d6a:	4b10      	ldr	r3, [pc, #64]	@ (8000dac <MX_DMA_Init+0x60>)
 8000d6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000dac <MX_DMA_Init+0x60>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6493      	str	r3, [r2, #72]	@ 0x48
 8000d76:	4b0d      	ldr	r3, [pc, #52]	@ (8000dac <MX_DMA_Init+0x60>)
 8000d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2100      	movs	r1, #0
 8000d86:	200b      	movs	r0, #11
 8000d88:	f000 fcbb 	bl	8001702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d8c:	200b      	movs	r0, #11
 8000d8e:	f000 fcd4 	bl	800173a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2100      	movs	r1, #0
 8000d96:	200c      	movs	r0, #12
 8000d98:	f000 fcb3 	bl	8001702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000d9c:	200c      	movs	r0, #12
 8000d9e:	f000 fccc 	bl	800173a <HAL_NVIC_EnableIRQ>

}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40021000 	.word	0x40021000

08000db0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08c      	sub	sp, #48	@ 0x30
 8000db4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]
 8000dc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc6:	4b51      	ldr	r3, [pc, #324]	@ (8000f0c <MX_GPIO_Init+0x15c>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dca:	4a50      	ldr	r2, [pc, #320]	@ (8000f0c <MX_GPIO_Init+0x15c>)
 8000dcc:	f043 0304 	orr.w	r3, r3, #4
 8000dd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dd2:	4b4e      	ldr	r3, [pc, #312]	@ (8000f0c <MX_GPIO_Init+0x15c>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd6:	f003 0304 	and.w	r3, r3, #4
 8000dda:	61bb      	str	r3, [r7, #24]
 8000ddc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dde:	4b4b      	ldr	r3, [pc, #300]	@ (8000f0c <MX_GPIO_Init+0x15c>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de2:	4a4a      	ldr	r2, [pc, #296]	@ (8000f0c <MX_GPIO_Init+0x15c>)
 8000de4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000de8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dea:	4b48      	ldr	r3, [pc, #288]	@ (8000f0c <MX_GPIO_Init+0x15c>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	4b45      	ldr	r3, [pc, #276]	@ (8000f0c <MX_GPIO_Init+0x15c>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfa:	4a44      	ldr	r2, [pc, #272]	@ (8000f0c <MX_GPIO_Init+0x15c>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e02:	4b42      	ldr	r3, [pc, #264]	@ (8000f0c <MX_GPIO_Init+0x15c>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0e:	4b3f      	ldr	r3, [pc, #252]	@ (8000f0c <MX_GPIO_Init+0x15c>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e12:	4a3e      	ldr	r2, [pc, #248]	@ (8000f0c <MX_GPIO_Init+0x15c>)
 8000e14:	f043 0308 	orr.w	r3, r3, #8
 8000e18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e1a:	4b3c      	ldr	r3, [pc, #240]	@ (8000f0c <MX_GPIO_Init+0x15c>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1e:	f003 0308 	and.w	r3, r3, #8
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e26:	4b39      	ldr	r3, [pc, #228]	@ (8000f0c <MX_GPIO_Init+0x15c>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2a:	4a38      	ldr	r2, [pc, #224]	@ (8000f0c <MX_GPIO_Init+0x15c>)
 8000e2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e32:	4b36      	ldr	r3, [pc, #216]	@ (8000f0c <MX_GPIO_Init+0x15c>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000e3e:	f001 faef 	bl	8002420 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	4b32      	ldr	r3, [pc, #200]	@ (8000f0c <MX_GPIO_Init+0x15c>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e46:	4a31      	ldr	r2, [pc, #196]	@ (8000f0c <MX_GPIO_Init+0x15c>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e4e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f0c <MX_GPIO_Init+0x15c>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000e60:	482b      	ldr	r0, [pc, #172]	@ (8000f10 <MX_GPIO_Init+0x160>)
 8000e62:	f001 f8a3 	bl	8001fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2140      	movs	r1, #64	@ 0x40
 8000e6a:	482a      	ldr	r0, [pc, #168]	@ (8000f14 <MX_GPIO_Init+0x164>)
 8000e6c:	f001 f89e 	bl	8001fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2180      	movs	r1, #128	@ 0x80
 8000e74:	4828      	ldr	r0, [pc, #160]	@ (8000f18 <MX_GPIO_Init+0x168>)
 8000e76:	f001 f899 	bl	8001fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e80:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4821      	ldr	r0, [pc, #132]	@ (8000f18 <MX_GPIO_Init+0x168>)
 8000e92:	f000 fee1 	bl	8001c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000e96:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	4619      	mov	r1, r3
 8000eae:	4818      	ldr	r0, [pc, #96]	@ (8000f10 <MX_GPIO_Init+0x160>)
 8000eb0:	f000 fed2 	bl	8001c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000eb4:	2320      	movs	r3, #32
 8000eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 031c 	add.w	r3, r7, #28
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4813      	ldr	r0, [pc, #76]	@ (8000f14 <MX_GPIO_Init+0x164>)
 8000ec8:	f000 fec6 	bl	8001c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ecc:	2340      	movs	r3, #64	@ 0x40
 8000ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480c      	ldr	r0, [pc, #48]	@ (8000f14 <MX_GPIO_Init+0x164>)
 8000ee4:	f000 feb8 	bl	8001c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000ee8:	2380      	movs	r3, #128	@ 0x80
 8000eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000ef8:	f107 031c 	add.w	r3, r7, #28
 8000efc:	4619      	mov	r1, r3
 8000efe:	4806      	ldr	r0, [pc, #24]	@ (8000f18 <MX_GPIO_Init+0x168>)
 8000f00:	f000 feaa 	bl	8001c58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f04:	bf00      	nop
 8000f06:	3730      	adds	r7, #48	@ 0x30
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	48000400 	.word	0x48000400
 8000f14:	48001800 	.word	0x48001800
 8000f18:	48000800 	.word	0x48000800

08000f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f20:	b672      	cpsid	i
}
 8000f22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <Error_Handler+0x8>

08000f28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f6c <HAL_MspInit+0x44>)
 8000f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f32:	4a0e      	ldr	r2, [pc, #56]	@ (8000f6c <HAL_MspInit+0x44>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f6c <HAL_MspInit+0x44>)
 8000f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f46:	4b09      	ldr	r3, [pc, #36]	@ (8000f6c <HAL_MspInit+0x44>)
 8000f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f4a:	4a08      	ldr	r2, [pc, #32]	@ (8000f6c <HAL_MspInit+0x44>)
 8000f4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f50:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f52:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <HAL_MspInit+0x44>)
 8000f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000

08000f70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b0b0      	sub	sp, #192	@ 0xc0
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f88:	f107 0318 	add.w	r3, r7, #24
 8000f8c:	2294      	movs	r2, #148	@ 0x94
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f004 fd17 	bl	80059c4 <memset>
  if(huart->Instance==LPUART1)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a71      	ldr	r2, [pc, #452]	@ (8001160 <HAL_UART_MspInit+0x1f0>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	f040 809a 	bne.w	80010d6 <HAL_UART_MspInit+0x166>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000fa2:	2320      	movs	r3, #32
 8000fa4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000faa:	f107 0318 	add.w	r3, r7, #24
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f002 f91e 	bl	80031f0 <HAL_RCCEx_PeriphCLKConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fba:	f7ff ffaf 	bl	8000f1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000fbe:	4b69      	ldr	r3, [pc, #420]	@ (8001164 <HAL_UART_MspInit+0x1f4>)
 8000fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fc2:	4a68      	ldr	r2, [pc, #416]	@ (8001164 <HAL_UART_MspInit+0x1f4>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000fca:	4b66      	ldr	r3, [pc, #408]	@ (8001164 <HAL_UART_MspInit+0x1f4>)
 8000fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fd6:	4b63      	ldr	r3, [pc, #396]	@ (8001164 <HAL_UART_MspInit+0x1f4>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fda:	4a62      	ldr	r2, [pc, #392]	@ (8001164 <HAL_UART_MspInit+0x1f4>)
 8000fdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fe0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fe2:	4b60      	ldr	r3, [pc, #384]	@ (8001164 <HAL_UART_MspInit+0x1f4>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000fee:	f001 fa17 	bl	8002420 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000ff2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000ff6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800100c:	2308      	movs	r3, #8
 800100e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001012:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001016:	4619      	mov	r1, r3
 8001018:	4853      	ldr	r0, [pc, #332]	@ (8001168 <HAL_UART_MspInit+0x1f8>)
 800101a:	f000 fe1d 	bl	8001c58 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 800101e:	4b53      	ldr	r3, [pc, #332]	@ (800116c <HAL_UART_MspInit+0x1fc>)
 8001020:	4a53      	ldr	r2, [pc, #332]	@ (8001170 <HAL_UART_MspInit+0x200>)
 8001022:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001024:	4b51      	ldr	r3, [pc, #324]	@ (800116c <HAL_UART_MspInit+0x1fc>)
 8001026:	2222      	movs	r2, #34	@ 0x22
 8001028:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800102a:	4b50      	ldr	r3, [pc, #320]	@ (800116c <HAL_UART_MspInit+0x1fc>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001030:	4b4e      	ldr	r3, [pc, #312]	@ (800116c <HAL_UART_MspInit+0x1fc>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001036:	4b4d      	ldr	r3, [pc, #308]	@ (800116c <HAL_UART_MspInit+0x1fc>)
 8001038:	2280      	movs	r2, #128	@ 0x80
 800103a:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800103c:	4b4b      	ldr	r3, [pc, #300]	@ (800116c <HAL_UART_MspInit+0x1fc>)
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001042:	4b4a      	ldr	r3, [pc, #296]	@ (800116c <HAL_UART_MspInit+0x1fc>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8001048:	4b48      	ldr	r3, [pc, #288]	@ (800116c <HAL_UART_MspInit+0x1fc>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800104e:	4b47      	ldr	r3, [pc, #284]	@ (800116c <HAL_UART_MspInit+0x1fc>)
 8001050:	2200      	movs	r2, #0
 8001052:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001054:	4845      	ldr	r0, [pc, #276]	@ (800116c <HAL_UART_MspInit+0x1fc>)
 8001056:	f000 fb8b 	bl	8001770 <HAL_DMA_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8001060:	f7ff ff5c 	bl	8000f1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a41      	ldr	r2, [pc, #260]	@ (800116c <HAL_UART_MspInit+0x1fc>)
 8001068:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800106c:	4a3f      	ldr	r2, [pc, #252]	@ (800116c <HAL_UART_MspInit+0x1fc>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8001072:	4b40      	ldr	r3, [pc, #256]	@ (8001174 <HAL_UART_MspInit+0x204>)
 8001074:	4a40      	ldr	r2, [pc, #256]	@ (8001178 <HAL_UART_MspInit+0x208>)
 8001076:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001078:	4b3e      	ldr	r3, [pc, #248]	@ (8001174 <HAL_UART_MspInit+0x204>)
 800107a:	2223      	movs	r2, #35	@ 0x23
 800107c:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800107e:	4b3d      	ldr	r3, [pc, #244]	@ (8001174 <HAL_UART_MspInit+0x204>)
 8001080:	2210      	movs	r2, #16
 8001082:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001084:	4b3b      	ldr	r3, [pc, #236]	@ (8001174 <HAL_UART_MspInit+0x204>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800108a:	4b3a      	ldr	r3, [pc, #232]	@ (8001174 <HAL_UART_MspInit+0x204>)
 800108c:	2280      	movs	r2, #128	@ 0x80
 800108e:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001090:	4b38      	ldr	r3, [pc, #224]	@ (8001174 <HAL_UART_MspInit+0x204>)
 8001092:	2200      	movs	r2, #0
 8001094:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001096:	4b37      	ldr	r3, [pc, #220]	@ (8001174 <HAL_UART_MspInit+0x204>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800109c:	4b35      	ldr	r3, [pc, #212]	@ (8001174 <HAL_UART_MspInit+0x204>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010a2:	4b34      	ldr	r3, [pc, #208]	@ (8001174 <HAL_UART_MspInit+0x204>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80010a8:	4832      	ldr	r0, [pc, #200]	@ (8001174 <HAL_UART_MspInit+0x204>)
 80010aa:	f000 fb61 	bl	8001770 <HAL_DMA_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <HAL_UART_MspInit+0x148>
    {
      Error_Handler();
 80010b4:	f7ff ff32 	bl	8000f1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a2e      	ldr	r2, [pc, #184]	@ (8001174 <HAL_UART_MspInit+0x204>)
 80010bc:	67da      	str	r2, [r3, #124]	@ 0x7c
 80010be:	4a2d      	ldr	r2, [pc, #180]	@ (8001174 <HAL_UART_MspInit+0x204>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2100      	movs	r1, #0
 80010c8:	2046      	movs	r0, #70	@ 0x46
 80010ca:	f000 fb1a 	bl	8001702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80010ce:	2046      	movs	r0, #70	@ 0x46
 80010d0:	f000 fb33 	bl	800173a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010d4:	e040      	b.n	8001158 <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART3)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a28      	ldr	r2, [pc, #160]	@ (800117c <HAL_UART_MspInit+0x20c>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d13b      	bne.n	8001158 <HAL_UART_MspInit+0x1e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010e0:	2304      	movs	r3, #4
 80010e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010e4:	2300      	movs	r3, #0
 80010e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e8:	f107 0318 	add.w	r3, r7, #24
 80010ec:	4618      	mov	r0, r3
 80010ee:	f002 f87f 	bl	80031f0 <HAL_RCCEx_PeriphCLKConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <HAL_UART_MspInit+0x18c>
      Error_Handler();
 80010f8:	f7ff ff10 	bl	8000f1c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010fc:	4b19      	ldr	r3, [pc, #100]	@ (8001164 <HAL_UART_MspInit+0x1f4>)
 80010fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001100:	4a18      	ldr	r2, [pc, #96]	@ (8001164 <HAL_UART_MspInit+0x1f4>)
 8001102:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001106:	6593      	str	r3, [r2, #88]	@ 0x58
 8001108:	4b16      	ldr	r3, [pc, #88]	@ (8001164 <HAL_UART_MspInit+0x1f4>)
 800110a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800110c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001114:	4b13      	ldr	r3, [pc, #76]	@ (8001164 <HAL_UART_MspInit+0x1f4>)
 8001116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001118:	4a12      	ldr	r2, [pc, #72]	@ (8001164 <HAL_UART_MspInit+0x1f4>)
 800111a:	f043 0308 	orr.w	r3, r3, #8
 800111e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001120:	4b10      	ldr	r3, [pc, #64]	@ (8001164 <HAL_UART_MspInit+0x1f4>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001124:	f003 0308 	and.w	r3, r3, #8
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800112c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001130:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001146:	2307      	movs	r3, #7
 8001148:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800114c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001150:	4619      	mov	r1, r3
 8001152:	480b      	ldr	r0, [pc, #44]	@ (8001180 <HAL_UART_MspInit+0x210>)
 8001154:	f000 fd80 	bl	8001c58 <HAL_GPIO_Init>
}
 8001158:	bf00      	nop
 800115a:	37c0      	adds	r7, #192	@ 0xc0
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40008000 	.word	0x40008000
 8001164:	40021000 	.word	0x40021000
 8001168:	48001800 	.word	0x48001800
 800116c:	200401a0 	.word	0x200401a0
 8001170:	40020008 	.word	0x40020008
 8001174:	20040200 	.word	0x20040200
 8001178:	4002001c 	.word	0x4002001c
 800117c:	40004800 	.word	0x40004800
 8001180:	48000c00 	.word	0x48000c00

08001184 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b0b0      	sub	sp, #192	@ 0xc0
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800119c:	f107 0318 	add.w	r3, r7, #24
 80011a0:	2294      	movs	r2, #148	@ 0x94
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f004 fc0d 	bl	80059c4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011b2:	d16c      	bne.n	800128e <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80011b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80011ba:	2300      	movs	r3, #0
 80011bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c0:	f107 0318 	add.w	r3, r7, #24
 80011c4:	4618      	mov	r0, r3
 80011c6:	f002 f813 	bl	80031f0 <HAL_RCCEx_PeriphCLKConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80011d0:	f7ff fea4 	bl	8000f1c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d4:	4b30      	ldr	r3, [pc, #192]	@ (8001298 <HAL_PCD_MspInit+0x114>)
 80011d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d8:	4a2f      	ldr	r2, [pc, #188]	@ (8001298 <HAL_PCD_MspInit+0x114>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001298 <HAL_PCD_MspInit+0x114>)
 80011e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80011ec:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80011f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001200:	2303      	movs	r3, #3
 8001202:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001206:	230a      	movs	r3, #10
 8001208:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001216:	f000 fd1f 	bl	8001c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800121a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800121e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001222:	2300      	movs	r3, #0
 8001224:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800122e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001232:	4619      	mov	r1, r3
 8001234:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001238:	f000 fd0e 	bl	8001c58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800123c:	4b16      	ldr	r3, [pc, #88]	@ (8001298 <HAL_PCD_MspInit+0x114>)
 800123e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001240:	4a15      	ldr	r2, [pc, #84]	@ (8001298 <HAL_PCD_MspInit+0x114>)
 8001242:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001246:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001248:	4b13      	ldr	r3, [pc, #76]	@ (8001298 <HAL_PCD_MspInit+0x114>)
 800124a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001254:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <HAL_PCD_MspInit+0x114>)
 8001256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001258:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d114      	bne.n	800128a <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001260:	4b0d      	ldr	r3, [pc, #52]	@ (8001298 <HAL_PCD_MspInit+0x114>)
 8001262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001264:	4a0c      	ldr	r2, [pc, #48]	@ (8001298 <HAL_PCD_MspInit+0x114>)
 8001266:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800126a:	6593      	str	r3, [r2, #88]	@ 0x58
 800126c:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <HAL_PCD_MspInit+0x114>)
 800126e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001278:	f001 f8c2 	bl	8002400 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <HAL_PCD_MspInit+0x114>)
 800127e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001280:	4a05      	ldr	r2, [pc, #20]	@ (8001298 <HAL_PCD_MspInit+0x114>)
 8001282:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001286:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001288:	e001      	b.n	800128e <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 800128a:	f001 f8b9 	bl	8002400 <HAL_PWREx_EnableVddUSB>
}
 800128e:	bf00      	nop
 8001290:	37c0      	adds	r7, #192	@ 0xc0
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000

0800129c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <NMI_Handler+0x4>

080012a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <HardFault_Handler+0x4>

080012ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <MemManage_Handler+0x4>

080012b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <BusFault_Handler+0x4>

080012bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <UsageFault_Handler+0x4>

080012c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f2:	f000 f8e7 	bl	80014c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001300:	4802      	ldr	r0, [pc, #8]	@ (800130c <DMA1_Channel1_IRQHandler+0x10>)
 8001302:	f000 fb98 	bl	8001a36 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200401a0 	.word	0x200401a0

08001310 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001314:	4802      	ldr	r0, [pc, #8]	@ (8001320 <DMA1_Channel2_IRQHandler+0x10>)
 8001316:	f000 fb8e 	bl	8001a36 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20040200 	.word	0x20040200

08001324 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001328:	4802      	ldr	r0, [pc, #8]	@ (8001334 <LPUART1_IRQHandler+0x10>)
 800132a:	f002 fe21 	bl	8003f70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20040078 	.word	0x20040078

08001338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001340:	4a14      	ldr	r2, [pc, #80]	@ (8001394 <_sbrk+0x5c>)
 8001342:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <_sbrk+0x60>)
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800134c:	4b13      	ldr	r3, [pc, #76]	@ (800139c <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d102      	bne.n	800135a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001354:	4b11      	ldr	r3, [pc, #68]	@ (800139c <_sbrk+0x64>)
 8001356:	4a12      	ldr	r2, [pc, #72]	@ (80013a0 <_sbrk+0x68>)
 8001358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135a:	4b10      	ldr	r3, [pc, #64]	@ (800139c <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	429a      	cmp	r2, r3
 8001366:	d207      	bcs.n	8001378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001368:	f004 fb46 	bl	80059f8 <__errno>
 800136c:	4603      	mov	r3, r0
 800136e:	220c      	movs	r2, #12
 8001370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
 8001376:	e009      	b.n	800138c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001378:	4b08      	ldr	r3, [pc, #32]	@ (800139c <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137e:	4b07      	ldr	r3, [pc, #28]	@ (800139c <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	4a05      	ldr	r2, [pc, #20]	@ (800139c <_sbrk+0x64>)
 8001388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138a:	68fb      	ldr	r3, [r7, #12]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200a0000 	.word	0x200a0000
 8001398:	00000400 	.word	0x00000400
 800139c:	200407a0 	.word	0x200407a0
 80013a0:	200408f0 	.word	0x200408f0

080013a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013a8:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <SystemInit+0x20>)
 80013aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ae:	4a05      	ldr	r2, [pc, #20]	@ (80013c4 <SystemInit+0x20>)
 80013b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001400 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013cc:	f7ff ffea 	bl	80013a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d0:	480c      	ldr	r0, [pc, #48]	@ (8001404 <LoopForever+0x6>)
  ldr r1, =_edata
 80013d2:	490d      	ldr	r1, [pc, #52]	@ (8001408 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013d4:	4a0d      	ldr	r2, [pc, #52]	@ (800140c <LoopForever+0xe>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d8:	e002      	b.n	80013e0 <LoopCopyDataInit>

080013da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013de:	3304      	adds	r3, #4

080013e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e4:	d3f9      	bcc.n	80013da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001410 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001414 <LoopForever+0x16>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ec:	e001      	b.n	80013f2 <LoopFillZerobss>

080013ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f0:	3204      	adds	r2, #4

080013f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f4:	d3fb      	bcc.n	80013ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013f6:	f004 fb05 	bl	8005a04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013fa:	f7ff f9df 	bl	80007bc <main>

080013fe <LoopForever>:

LoopForever:
    b LoopForever
 80013fe:	e7fe      	b.n	80013fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001400:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001404:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8001408:	2004005c 	.word	0x2004005c
  ldr r2, =_sidata
 800140c:	08006558 	.word	0x08006558
  ldr r2, =_sbss
 8001410:	2004005c 	.word	0x2004005c
  ldr r4, =_ebss
 8001414:	200408f0 	.word	0x200408f0

08001418 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001418:	e7fe      	b.n	8001418 <ADC1_IRQHandler>

0800141a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001420:	2300      	movs	r3, #0
 8001422:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001424:	2003      	movs	r0, #3
 8001426:	f000 f961 	bl	80016ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800142a:	2000      	movs	r0, #0
 800142c:	f000 f80e 	bl	800144c <HAL_InitTick>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d002      	beq.n	800143c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	71fb      	strb	r3, [r7, #7]
 800143a:	e001      	b.n	8001440 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800143c:	f7ff fd74 	bl	8000f28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001440:	79fb      	ldrb	r3, [r7, #7]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001454:	2300      	movs	r3, #0
 8001456:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001458:	4b17      	ldr	r3, [pc, #92]	@ (80014b8 <HAL_InitTick+0x6c>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d023      	beq.n	80014a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001460:	4b16      	ldr	r3, [pc, #88]	@ (80014bc <HAL_InitTick+0x70>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <HAL_InitTick+0x6c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4619      	mov	r1, r3
 800146a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800146e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001472:	fbb2 f3f3 	udiv	r3, r2, r3
 8001476:	4618      	mov	r0, r3
 8001478:	f000 f96d 	bl	8001756 <HAL_SYSTICK_Config>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10f      	bne.n	80014a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b0f      	cmp	r3, #15
 8001486:	d809      	bhi.n	800149c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001488:	2200      	movs	r2, #0
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	f000 f937 	bl	8001702 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001494:	4a0a      	ldr	r2, [pc, #40]	@ (80014c0 <HAL_InitTick+0x74>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e007      	b.n	80014ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	73fb      	strb	r3, [r7, #15]
 80014a0:	e004      	b.n	80014ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	73fb      	strb	r3, [r7, #15]
 80014a6:	e001      	b.n	80014ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20040008 	.word	0x20040008
 80014bc:	20040000 	.word	0x20040000
 80014c0:	20040004 	.word	0x20040004

080014c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014c8:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <HAL_IncTick+0x20>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_IncTick+0x24>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	4a04      	ldr	r2, [pc, #16]	@ (80014e8 <HAL_IncTick+0x24>)
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20040008 	.word	0x20040008
 80014e8:	200407a4 	.word	0x200407a4

080014ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return uwTick;
 80014f0:	4b03      	ldr	r3, [pc, #12]	@ (8001500 <HAL_GetTick+0x14>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	200407a4 	.word	0x200407a4

08001504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800150c:	f7ff ffee 	bl	80014ec <HAL_GetTick>
 8001510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151c:	d005      	beq.n	800152a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800151e:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <HAL_Delay+0x44>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800152a:	bf00      	nop
 800152c:	f7ff ffde 	bl	80014ec <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	429a      	cmp	r2, r3
 800153a:	d8f7      	bhi.n	800152c <HAL_Delay+0x28>
  {
  }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20040008 	.word	0x20040008

0800154c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800155c:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001568:	4013      	ands	r3, r2
 800156a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001574:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001578:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800157c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157e:	4a04      	ldr	r2, [pc, #16]	@ (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	60d3      	str	r3, [r2, #12]
}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001598:	4b04      	ldr	r3, [pc, #16]	@ (80015ac <__NVIC_GetPriorityGrouping+0x18>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	f003 0307 	and.w	r3, r3, #7
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	db0b      	blt.n	80015da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	f003 021f 	and.w	r2, r3, #31
 80015c8:	4907      	ldr	r1, [pc, #28]	@ (80015e8 <__NVIC_EnableIRQ+0x38>)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	095b      	lsrs	r3, r3, #5
 80015d0:	2001      	movs	r0, #1
 80015d2:	fa00 f202 	lsl.w	r2, r0, r2
 80015d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000e100 	.word	0xe000e100

080015ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	db0a      	blt.n	8001616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	490c      	ldr	r1, [pc, #48]	@ (8001638 <__NVIC_SetPriority+0x4c>)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	0112      	lsls	r2, r2, #4
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	440b      	add	r3, r1
 8001610:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001614:	e00a      	b.n	800162c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4908      	ldr	r1, [pc, #32]	@ (800163c <__NVIC_SetPriority+0x50>)
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	3b04      	subs	r3, #4
 8001624:	0112      	lsls	r2, r2, #4
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	440b      	add	r3, r1
 800162a:	761a      	strb	r2, [r3, #24]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000e100 	.word	0xe000e100
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001640:	b480      	push	{r7}
 8001642:	b089      	sub	sp, #36	@ 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f1c3 0307 	rsb	r3, r3, #7
 800165a:	2b04      	cmp	r3, #4
 800165c:	bf28      	it	cs
 800165e:	2304      	movcs	r3, #4
 8001660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3304      	adds	r3, #4
 8001666:	2b06      	cmp	r3, #6
 8001668:	d902      	bls.n	8001670 <NVIC_EncodePriority+0x30>
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3b03      	subs	r3, #3
 800166e:	e000      	b.n	8001672 <NVIC_EncodePriority+0x32>
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	f04f 32ff 	mov.w	r2, #4294967295
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	401a      	ands	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001688:	f04f 31ff 	mov.w	r1, #4294967295
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	43d9      	mvns	r1, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	4313      	orrs	r3, r2
         );
}
 800169a:	4618      	mov	r0, r3
 800169c:	3724      	adds	r7, #36	@ 0x24
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016b8:	d301      	bcc.n	80016be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ba:	2301      	movs	r3, #1
 80016bc:	e00f      	b.n	80016de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016be:	4a0a      	ldr	r2, [pc, #40]	@ (80016e8 <SysTick_Config+0x40>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c6:	210f      	movs	r1, #15
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
 80016cc:	f7ff ff8e 	bl	80015ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d0:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <SysTick_Config+0x40>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d6:	4b04      	ldr	r3, [pc, #16]	@ (80016e8 <SysTick_Config+0x40>)
 80016d8:	2207      	movs	r2, #7
 80016da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	e000e010 	.word	0xe000e010

080016ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ff29 	bl	800154c <__NVIC_SetPriorityGrouping>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
 800170e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001714:	f7ff ff3e 	bl	8001594 <__NVIC_GetPriorityGrouping>
 8001718:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	68b9      	ldr	r1, [r7, #8]
 800171e:	6978      	ldr	r0, [r7, #20]
 8001720:	f7ff ff8e 	bl	8001640 <NVIC_EncodePriority>
 8001724:	4602      	mov	r2, r0
 8001726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff5d 	bl	80015ec <__NVIC_SetPriority>
}
 8001732:	bf00      	nop
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff31 	bl	80015b0 <__NVIC_EnableIRQ>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff ffa2 	bl	80016a8 <SysTick_Config>
 8001764:	4603      	mov	r3, r0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e08d      	b.n	800189e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	4b47      	ldr	r3, [pc, #284]	@ (80018a8 <HAL_DMA_Init+0x138>)
 800178a:	429a      	cmp	r2, r3
 800178c:	d80f      	bhi.n	80017ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	4b45      	ldr	r3, [pc, #276]	@ (80018ac <HAL_DMA_Init+0x13c>)
 8001796:	4413      	add	r3, r2
 8001798:	4a45      	ldr	r2, [pc, #276]	@ (80018b0 <HAL_DMA_Init+0x140>)
 800179a:	fba2 2303 	umull	r2, r3, r2, r3
 800179e:	091b      	lsrs	r3, r3, #4
 80017a0:	009a      	lsls	r2, r3, #2
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a42      	ldr	r2, [pc, #264]	@ (80018b4 <HAL_DMA_Init+0x144>)
 80017aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80017ac:	e00e      	b.n	80017cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	4b40      	ldr	r3, [pc, #256]	@ (80018b8 <HAL_DMA_Init+0x148>)
 80017b6:	4413      	add	r3, r2
 80017b8:	4a3d      	ldr	r2, [pc, #244]	@ (80018b0 <HAL_DMA_Init+0x140>)
 80017ba:	fba2 2303 	umull	r2, r3, r2, r3
 80017be:	091b      	lsrs	r3, r3, #4
 80017c0:	009a      	lsls	r2, r3, #2
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a3c      	ldr	r2, [pc, #240]	@ (80018bc <HAL_DMA_Init+0x14c>)
 80017ca:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2202      	movs	r2, #2
 80017d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80017e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80017e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80017f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001808:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	4313      	orrs	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 f9b8 	bl	8001b94 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800182c:	d102      	bne.n	8001834 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001848:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d010      	beq.n	8001874 <HAL_DMA_Init+0x104>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b04      	cmp	r3, #4
 8001858:	d80c      	bhi.n	8001874 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f9d8 	bl	8001c10 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	e008      	b.n	8001886 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40020407 	.word	0x40020407
 80018ac:	bffdfff8 	.word	0xbffdfff8
 80018b0:	cccccccd 	.word	0xcccccccd
 80018b4:	40020000 	.word	0x40020000
 80018b8:	bffdfbf8 	.word	0xbffdfbf8
 80018bc:	40020400 	.word	0x40020400

080018c0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018c8:	2300      	movs	r3, #0
 80018ca:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d008      	beq.n	80018ea <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2204      	movs	r2, #4
 80018dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e040      	b.n	800196c <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 020e 	bic.w	r2, r2, #14
 80018f8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001904:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001908:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0201 	bic.w	r2, r2, #1
 8001918:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191e:	f003 021c 	and.w	r2, r3, #28
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001926:	2101      	movs	r1, #1
 8001928:	fa01 f202 	lsl.w	r2, r1, r2
 800192c:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001936:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00c      	beq.n	800195a <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800194a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800194e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001958:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800196a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800196c:	4618      	mov	r0, r3
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001980:	2300      	movs	r3, #0
 8001982:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d005      	beq.n	800199c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2204      	movs	r2, #4
 8001994:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	73fb      	strb	r3, [r7, #15]
 800199a:	e047      	b.n	8001a2c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 020e 	bic.w	r2, r2, #14
 80019aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0201 	bic.w	r2, r2, #1
 80019ba:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d0:	f003 021c 	and.w	r2, r3, #28
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d8:	2101      	movs	r1, #1
 80019da:	fa01 f202 	lsl.w	r2, r1, r2
 80019de:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80019e8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00c      	beq.n	8001a0c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a00:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001a0a:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	4798      	blx	r3
    }
  }
  return status;
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a52:	f003 031c 	and.w	r3, r3, #28
 8001a56:	2204      	movs	r2, #4
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d026      	beq.n	8001ab0 <HAL_DMA_IRQHandler+0x7a>
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d021      	beq.n	8001ab0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0320 	and.w	r3, r3, #32
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d107      	bne.n	8001a8a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0204 	bic.w	r2, r2, #4
 8001a88:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8e:	f003 021c 	and.w	r2, r3, #28
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	2104      	movs	r1, #4
 8001a98:	fa01 f202 	lsl.w	r2, r1, r2
 8001a9c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d071      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001aae:	e06c      	b.n	8001b8a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab4:	f003 031c 	and.w	r3, r3, #28
 8001ab8:	2202      	movs	r2, #2
 8001aba:	409a      	lsls	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d02e      	beq.n	8001b22 <HAL_DMA_IRQHandler+0xec>
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d029      	beq.n	8001b22 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0320 	and.w	r3, r3, #32
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d10b      	bne.n	8001af4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 020a 	bic.w	r2, r2, #10
 8001aea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af8:	f003 021c 	and.w	r2, r3, #28
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b00:	2102      	movs	r1, #2
 8001b02:	fa01 f202 	lsl.w	r2, r1, r2
 8001b06:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d038      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001b20:	e033      	b.n	8001b8a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b26:	f003 031c 	and.w	r3, r3, #28
 8001b2a:	2208      	movs	r2, #8
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d02a      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x156>
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d025      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 020e 	bic.w	r2, r2, #14
 8001b4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b54:	f003 021c 	and.w	r2, r3, #28
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b62:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d004      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b8a:	bf00      	nop
 8001b8c:	bf00      	nop
}
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b17      	ldr	r3, [pc, #92]	@ (8001c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d80a      	bhi.n	8001bbe <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bac:	089b      	lsrs	r3, r3, #2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001bb4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6493      	str	r3, [r2, #72]	@ 0x48
 8001bbc:	e007      	b.n	8001bce <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc2:	089b      	lsrs	r3, r3, #2
 8001bc4:	009a      	lsls	r2, r3, #2
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001bc8:	4413      	add	r3, r2
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	3b08      	subs	r3, #8
 8001bd6:	4a0c      	ldr	r2, [pc, #48]	@ (8001c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a0a      	ldr	r2, [pc, #40]	@ (8001c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001be4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f003 031f 	and.w	r3, r3, #31
 8001bec:	2201      	movs	r2, #1
 8001bee:	409a      	lsls	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	40020407 	.word	0x40020407
 8001c04:	4002081c 	.word	0x4002081c
 8001c08:	cccccccd 	.word	0xcccccccd
 8001c0c:	40020880 	.word	0x40020880

08001c10 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001c24:	4413      	add	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	461a      	mov	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a08      	ldr	r2, [pc, #32]	@ (8001c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001c32:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001c44:	bf00      	nop
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	1000823f 	.word	0x1000823f
 8001c54:	40020940 	.word	0x40020940

08001c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b087      	sub	sp, #28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c66:	e166      	b.n	8001f36 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	fa01 f303 	lsl.w	r3, r1, r3
 8001c74:	4013      	ands	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 8158 	beq.w	8001f30 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d005      	beq.n	8001c98 <HAL_GPIO_Init+0x40>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d130      	bne.n	8001cfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	68da      	ldr	r2, [r3, #12]
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cce:	2201      	movs	r2, #1
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	091b      	lsrs	r3, r3, #4
 8001ce4:	f003 0201 	and.w	r2, r3, #1
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d017      	beq.n	8001d36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	2203      	movs	r2, #3
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d123      	bne.n	8001d8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	08da      	lsrs	r2, r3, #3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3208      	adds	r2, #8
 8001d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	220f      	movs	r2, #15
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4013      	ands	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	691a      	ldr	r2, [r3, #16]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	08da      	lsrs	r2, r3, #3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3208      	adds	r2, #8
 8001d84:	6939      	ldr	r1, [r7, #16]
 8001d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	2203      	movs	r2, #3
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 0203 	and.w	r2, r3, #3
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 80b2 	beq.w	8001f30 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dcc:	4b61      	ldr	r3, [pc, #388]	@ (8001f54 <HAL_GPIO_Init+0x2fc>)
 8001dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dd0:	4a60      	ldr	r2, [pc, #384]	@ (8001f54 <HAL_GPIO_Init+0x2fc>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dd8:	4b5e      	ldr	r3, [pc, #376]	@ (8001f54 <HAL_GPIO_Init+0x2fc>)
 8001dda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001de4:	4a5c      	ldr	r2, [pc, #368]	@ (8001f58 <HAL_GPIO_Init+0x300>)
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	089b      	lsrs	r3, r3, #2
 8001dea:	3302      	adds	r3, #2
 8001dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	220f      	movs	r2, #15
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e0e:	d02b      	beq.n	8001e68 <HAL_GPIO_Init+0x210>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a52      	ldr	r2, [pc, #328]	@ (8001f5c <HAL_GPIO_Init+0x304>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d025      	beq.n	8001e64 <HAL_GPIO_Init+0x20c>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a51      	ldr	r2, [pc, #324]	@ (8001f60 <HAL_GPIO_Init+0x308>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d01f      	beq.n	8001e60 <HAL_GPIO_Init+0x208>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a50      	ldr	r2, [pc, #320]	@ (8001f64 <HAL_GPIO_Init+0x30c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d019      	beq.n	8001e5c <HAL_GPIO_Init+0x204>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a4f      	ldr	r2, [pc, #316]	@ (8001f68 <HAL_GPIO_Init+0x310>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d013      	beq.n	8001e58 <HAL_GPIO_Init+0x200>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a4e      	ldr	r2, [pc, #312]	@ (8001f6c <HAL_GPIO_Init+0x314>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d00d      	beq.n	8001e54 <HAL_GPIO_Init+0x1fc>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a4d      	ldr	r2, [pc, #308]	@ (8001f70 <HAL_GPIO_Init+0x318>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d007      	beq.n	8001e50 <HAL_GPIO_Init+0x1f8>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a4c      	ldr	r2, [pc, #304]	@ (8001f74 <HAL_GPIO_Init+0x31c>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d101      	bne.n	8001e4c <HAL_GPIO_Init+0x1f4>
 8001e48:	2307      	movs	r3, #7
 8001e4a:	e00e      	b.n	8001e6a <HAL_GPIO_Init+0x212>
 8001e4c:	2308      	movs	r3, #8
 8001e4e:	e00c      	b.n	8001e6a <HAL_GPIO_Init+0x212>
 8001e50:	2306      	movs	r3, #6
 8001e52:	e00a      	b.n	8001e6a <HAL_GPIO_Init+0x212>
 8001e54:	2305      	movs	r3, #5
 8001e56:	e008      	b.n	8001e6a <HAL_GPIO_Init+0x212>
 8001e58:	2304      	movs	r3, #4
 8001e5a:	e006      	b.n	8001e6a <HAL_GPIO_Init+0x212>
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e004      	b.n	8001e6a <HAL_GPIO_Init+0x212>
 8001e60:	2302      	movs	r3, #2
 8001e62:	e002      	b.n	8001e6a <HAL_GPIO_Init+0x212>
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <HAL_GPIO_Init+0x212>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	f002 0203 	and.w	r2, r2, #3
 8001e70:	0092      	lsls	r2, r2, #2
 8001e72:	4093      	lsls	r3, r2
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e7a:	4937      	ldr	r1, [pc, #220]	@ (8001f58 <HAL_GPIO_Init+0x300>)
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	3302      	adds	r3, #2
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e88:	4b3b      	ldr	r3, [pc, #236]	@ (8001f78 <HAL_GPIO_Init+0x320>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	43db      	mvns	r3, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4013      	ands	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001eac:	4a32      	ldr	r2, [pc, #200]	@ (8001f78 <HAL_GPIO_Init+0x320>)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001eb2:	4b31      	ldr	r3, [pc, #196]	@ (8001f78 <HAL_GPIO_Init+0x320>)
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ed6:	4a28      	ldr	r2, [pc, #160]	@ (8001f78 <HAL_GPIO_Init+0x320>)
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001edc:	4b26      	ldr	r3, [pc, #152]	@ (8001f78 <HAL_GPIO_Init+0x320>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f00:	4a1d      	ldr	r2, [pc, #116]	@ (8001f78 <HAL_GPIO_Init+0x320>)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f06:	4b1c      	ldr	r3, [pc, #112]	@ (8001f78 <HAL_GPIO_Init+0x320>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f2a:	4a13      	ldr	r2, [pc, #76]	@ (8001f78 <HAL_GPIO_Init+0x320>)
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	3301      	adds	r3, #1
 8001f34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f47f ae91 	bne.w	8001c68 <HAL_GPIO_Init+0x10>
  }
}
 8001f46:	bf00      	nop
 8001f48:	bf00      	nop
 8001f4a:	371c      	adds	r7, #28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	40021000 	.word	0x40021000
 8001f58:	40010000 	.word	0x40010000
 8001f5c:	48000400 	.word	0x48000400
 8001f60:	48000800 	.word	0x48000800
 8001f64:	48000c00 	.word	0x48000c00
 8001f68:	48001000 	.word	0x48001000
 8001f6c:	48001400 	.word	0x48001400
 8001f70:	48001800 	.word	0x48001800
 8001f74:	48001c00 	.word	0x48001c00
 8001f78:	40010400 	.word	0x40010400

08001f7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	887b      	ldrh	r3, [r7, #2]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d002      	beq.n	8001f9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f94:	2301      	movs	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
 8001f98:	e001      	b.n	8001f9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	807b      	strh	r3, [r7, #2]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fbc:	787b      	ldrb	r3, [r7, #1]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fc2:	887a      	ldrh	r2, [r7, #2]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fc8:	e002      	b.n	8001fd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fca:	887a      	ldrh	r2, [r7, #2]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fee:	887a      	ldrh	r2, [r7, #2]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	041a      	lsls	r2, r3, #16
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	43d9      	mvns	r1, r3
 8001ffa:	887b      	ldrh	r3, [r7, #2]
 8001ffc:	400b      	ands	r3, r1
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	619a      	str	r2, [r3, #24]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af02      	add	r7, sp, #8
 8002016:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e101      	b.n	8002226 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d106      	bne.n	800203c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff f8a4 	bl	8001184 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2203      	movs	r2, #3
 8002040:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f003 f991 	bl	8005376 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	7c1a      	ldrb	r2, [r3, #16]
 800205c:	f88d 2000 	strb.w	r2, [sp]
 8002060:	3304      	adds	r3, #4
 8002062:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002064:	f003 f95a 	bl	800531c <USB_CoreInit>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d005      	beq.n	800207a <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2202      	movs	r2, #2
 8002072:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e0d5      	b.n	8002226 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2100      	movs	r1, #0
 8002080:	4618      	mov	r0, r3
 8002082:	f003 f989 	bl	8005398 <USB_SetCurrentMode>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2202      	movs	r2, #2
 8002090:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0c6      	b.n	8002226 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002098:	2300      	movs	r3, #0
 800209a:	73fb      	strb	r3, [r7, #15]
 800209c:	e04a      	b.n	8002134 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800209e:	7bfa      	ldrb	r2, [r7, #15]
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	3315      	adds	r3, #21
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020b2:	7bfa      	ldrb	r2, [r7, #15]
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4413      	add	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	3314      	adds	r3, #20
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020c6:	7bfa      	ldrb	r2, [r7, #15]
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
 80020ca:	b298      	uxth	r0, r3
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4413      	add	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	332e      	adds	r3, #46	@ 0x2e
 80020da:	4602      	mov	r2, r0
 80020dc:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020de:	7bfa      	ldrb	r2, [r7, #15]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	3318      	adds	r3, #24
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020f2:	7bfa      	ldrb	r2, [r7, #15]
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	331c      	adds	r3, #28
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002106:	7bfa      	ldrb	r2, [r7, #15]
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	3320      	adds	r3, #32
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	3324      	adds	r3, #36	@ 0x24
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	3301      	adds	r3, #1
 8002132:	73fb      	strb	r3, [r7, #15]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	791b      	ldrb	r3, [r3, #4]
 8002138:	7bfa      	ldrb	r2, [r7, #15]
 800213a:	429a      	cmp	r2, r3
 800213c:	d3af      	bcc.n	800209e <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800213e:	2300      	movs	r3, #0
 8002140:	73fb      	strb	r3, [r7, #15]
 8002142:	e044      	b.n	80021ce <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002144:	7bfa      	ldrb	r2, [r7, #15]
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800215a:	7bfa      	ldrb	r2, [r7, #15]
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4413      	add	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	440b      	add	r3, r1
 8002168:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800216c:	7bfa      	ldrb	r2, [r7, #15]
 800216e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002170:	7bfa      	ldrb	r2, [r7, #15]
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	4413      	add	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002186:	7bfa      	ldrb	r2, [r7, #15]
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	440b      	add	r3, r1
 8002194:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800219c:	7bfa      	ldrb	r2, [r7, #15]
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021b2:	7bfa      	ldrb	r2, [r7, #15]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4413      	add	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	3301      	adds	r3, #1
 80021cc:	73fb      	strb	r3, [r7, #15]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	791b      	ldrb	r3, [r3, #4]
 80021d2:	7bfa      	ldrb	r2, [r7, #15]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d3b5      	bcc.n	8002144 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	7c1a      	ldrb	r2, [r3, #16]
 80021e0:	f88d 2000 	strb.w	r2, [sp]
 80021e4:	3304      	adds	r3, #4
 80021e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021e8:	f003 f922 	bl	8005430 <USB_DevInit>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d005      	beq.n	80021fe <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2202      	movs	r2, #2
 80021f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e013      	b.n	8002226 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	7b1b      	ldrb	r3, [r3, #12]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d102      	bne.n	800221a <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f000 f80a 	bl	800222e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f003 fac7 	bl	80057b2 <USB_DevDisconnect>

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800222e:	b480      	push	{r7}
 8002230:	b085      	sub	sp, #20
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002260:	f043 0303 	orr.w	r3, r3, #3
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800227c:	4b0d      	ldr	r3, [pc, #52]	@ (80022b4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002288:	d102      	bne.n	8002290 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800228a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800228e:	e00b      	b.n	80022a8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002290:	4b08      	ldr	r3, [pc, #32]	@ (80022b4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800229a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800229e:	d102      	bne.n	80022a6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80022a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022a4:	e000      	b.n	80022a8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80022a6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40007000 	.word	0x40007000

080022b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d141      	bne.n	800234a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022c6:	4b4b      	ldr	r3, [pc, #300]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80022ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022d2:	d131      	bne.n	8002338 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022d4:	4b47      	ldr	r3, [pc, #284]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022da:	4a46      	ldr	r2, [pc, #280]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022e4:	4b43      	ldr	r3, [pc, #268]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022ec:	4a41      	ldr	r2, [pc, #260]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80022f4:	4b40      	ldr	r3, [pc, #256]	@ (80023f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2232      	movs	r2, #50	@ 0x32
 80022fa:	fb02 f303 	mul.w	r3, r2, r3
 80022fe:	4a3f      	ldr	r2, [pc, #252]	@ (80023fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002300:	fba2 2303 	umull	r2, r3, r2, r3
 8002304:	0c9b      	lsrs	r3, r3, #18
 8002306:	3301      	adds	r3, #1
 8002308:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800230a:	e002      	b.n	8002312 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	3b01      	subs	r3, #1
 8002310:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002312:	4b38      	ldr	r3, [pc, #224]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800231a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800231e:	d102      	bne.n	8002326 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f2      	bne.n	800230c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002326:	4b33      	ldr	r3, [pc, #204]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800232e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002332:	d158      	bne.n	80023e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e057      	b.n	80023e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002338:	4b2e      	ldr	r3, [pc, #184]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800233a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800233e:	4a2d      	ldr	r2, [pc, #180]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002340:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002344:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002348:	e04d      	b.n	80023e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002350:	d141      	bne.n	80023d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002352:	4b28      	ldr	r3, [pc, #160]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800235a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800235e:	d131      	bne.n	80023c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002360:	4b24      	ldr	r3, [pc, #144]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002362:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002366:	4a23      	ldr	r2, [pc, #140]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800236c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002370:	4b20      	ldr	r3, [pc, #128]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002378:	4a1e      	ldr	r2, [pc, #120]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800237a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800237e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002380:	4b1d      	ldr	r3, [pc, #116]	@ (80023f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2232      	movs	r2, #50	@ 0x32
 8002386:	fb02 f303 	mul.w	r3, r2, r3
 800238a:	4a1c      	ldr	r2, [pc, #112]	@ (80023fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800238c:	fba2 2303 	umull	r2, r3, r2, r3
 8002390:	0c9b      	lsrs	r3, r3, #18
 8002392:	3301      	adds	r3, #1
 8002394:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002396:	e002      	b.n	800239e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	3b01      	subs	r3, #1
 800239c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800239e:	4b15      	ldr	r3, [pc, #84]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023aa:	d102      	bne.n	80023b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f2      	bne.n	8002398 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023b2:	4b10      	ldr	r3, [pc, #64]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023be:	d112      	bne.n	80023e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e011      	b.n	80023e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023c4:	4b0b      	ldr	r3, [pc, #44]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023ca:	4a0a      	ldr	r2, [pc, #40]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80023d4:	e007      	b.n	80023e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023d6:	4b07      	ldr	r3, [pc, #28]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023de:	4a05      	ldr	r2, [pc, #20]	@ (80023f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023e4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	40007000 	.word	0x40007000
 80023f8:	20040000 	.word	0x20040000
 80023fc:	431bde83 	.word	0x431bde83

08002400 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002404:	4b05      	ldr	r3, [pc, #20]	@ (800241c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	4a04      	ldr	r2, [pc, #16]	@ (800241c <HAL_PWREx_EnableVddUSB+0x1c>)
 800240a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800240e:	6053      	str	r3, [r2, #4]
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40007000 	.word	0x40007000

08002420 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002424:	4b05      	ldr	r3, [pc, #20]	@ (800243c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	4a04      	ldr	r2, [pc, #16]	@ (800243c <HAL_PWREx_EnableVddIO2+0x1c>)
 800242a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800242e:	6053      	str	r3, [r2, #4]
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40007000 	.word	0x40007000

08002440 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d102      	bne.n	8002454 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	f000 bc08 	b.w	8002c64 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002454:	4b96      	ldr	r3, [pc, #600]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 030c 	and.w	r3, r3, #12
 800245c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800245e:	4b94      	ldr	r3, [pc, #592]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0310 	and.w	r3, r3, #16
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 80e4 	beq.w	800263e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d007      	beq.n	800248c <HAL_RCC_OscConfig+0x4c>
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	2b0c      	cmp	r3, #12
 8002480:	f040 808b 	bne.w	800259a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	2b01      	cmp	r3, #1
 8002488:	f040 8087 	bne.w	800259a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800248c:	4b88      	ldr	r3, [pc, #544]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_RCC_OscConfig+0x64>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e3df      	b.n	8002c64 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1a      	ldr	r2, [r3, #32]
 80024a8:	4b81      	ldr	r3, [pc, #516]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d004      	beq.n	80024be <HAL_RCC_OscConfig+0x7e>
 80024b4:	4b7e      	ldr	r3, [pc, #504]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024bc:	e005      	b.n	80024ca <HAL_RCC_OscConfig+0x8a>
 80024be:	4b7c      	ldr	r3, [pc, #496]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 80024c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024c4:	091b      	lsrs	r3, r3, #4
 80024c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d223      	bcs.n	8002516 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fdcc 	bl	8003070 <RCC_SetFlashLatencyFromMSIRange>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e3c0      	b.n	8002c64 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024e2:	4b73      	ldr	r3, [pc, #460]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a72      	ldr	r2, [pc, #456]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 80024e8:	f043 0308 	orr.w	r3, r3, #8
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	4b70      	ldr	r3, [pc, #448]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	496d      	ldr	r1, [pc, #436]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002500:	4b6b      	ldr	r3, [pc, #428]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	021b      	lsls	r3, r3, #8
 800250e:	4968      	ldr	r1, [pc, #416]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
 8002514:	e025      	b.n	8002562 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002516:	4b66      	ldr	r3, [pc, #408]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a65      	ldr	r2, [pc, #404]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 800251c:	f043 0308 	orr.w	r3, r3, #8
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	4b63      	ldr	r3, [pc, #396]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a1b      	ldr	r3, [r3, #32]
 800252e:	4960      	ldr	r1, [pc, #384]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 8002530:	4313      	orrs	r3, r2
 8002532:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002534:	4b5e      	ldr	r3, [pc, #376]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	021b      	lsls	r3, r3, #8
 8002542:	495b      	ldr	r1, [pc, #364]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 8002544:	4313      	orrs	r3, r2
 8002546:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d109      	bne.n	8002562 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fd8c 	bl	8003070 <RCC_SetFlashLatencyFromMSIRange>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e380      	b.n	8002c64 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002562:	f000 fcc1 	bl	8002ee8 <HAL_RCC_GetSysClockFreq>
 8002566:	4602      	mov	r2, r0
 8002568:	4b51      	ldr	r3, [pc, #324]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	4950      	ldr	r1, [pc, #320]	@ (80026b4 <HAL_RCC_OscConfig+0x274>)
 8002574:	5ccb      	ldrb	r3, [r1, r3]
 8002576:	f003 031f 	and.w	r3, r3, #31
 800257a:	fa22 f303 	lsr.w	r3, r2, r3
 800257e:	4a4e      	ldr	r2, [pc, #312]	@ (80026b8 <HAL_RCC_OscConfig+0x278>)
 8002580:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002582:	4b4e      	ldr	r3, [pc, #312]	@ (80026bc <HAL_RCC_OscConfig+0x27c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7fe ff60 	bl	800144c <HAL_InitTick>
 800258c:	4603      	mov	r3, r0
 800258e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002590:	7bfb      	ldrb	r3, [r7, #15]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d052      	beq.n	800263c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	e364      	b.n	8002c64 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d032      	beq.n	8002608 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025a2:	4b43      	ldr	r3, [pc, #268]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a42      	ldr	r2, [pc, #264]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025ae:	f7fe ff9d 	bl	80014ec <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025b6:	f7fe ff99 	bl	80014ec <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e34d      	b.n	8002c64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025c8:	4b39      	ldr	r3, [pc, #228]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025d4:	4b36      	ldr	r3, [pc, #216]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a35      	ldr	r2, [pc, #212]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 80025da:	f043 0308 	orr.w	r3, r3, #8
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	4b33      	ldr	r3, [pc, #204]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	4930      	ldr	r1, [pc, #192]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025f2:	4b2f      	ldr	r3, [pc, #188]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	021b      	lsls	r3, r3, #8
 8002600:	492b      	ldr	r1, [pc, #172]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 8002602:	4313      	orrs	r3, r2
 8002604:	604b      	str	r3, [r1, #4]
 8002606:	e01a      	b.n	800263e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002608:	4b29      	ldr	r3, [pc, #164]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a28      	ldr	r2, [pc, #160]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 800260e:	f023 0301 	bic.w	r3, r3, #1
 8002612:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002614:	f7fe ff6a 	bl	80014ec <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800261c:	f7fe ff66 	bl	80014ec <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e31a      	b.n	8002c64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800262e:	4b20      	ldr	r3, [pc, #128]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0x1dc>
 800263a:	e000      	b.n	800263e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800263c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d073      	beq.n	8002732 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	2b08      	cmp	r3, #8
 800264e:	d005      	beq.n	800265c <HAL_RCC_OscConfig+0x21c>
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	2b0c      	cmp	r3, #12
 8002654:	d10e      	bne.n	8002674 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	2b03      	cmp	r3, #3
 800265a:	d10b      	bne.n	8002674 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265c:	4b14      	ldr	r3, [pc, #80]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d063      	beq.n	8002730 <HAL_RCC_OscConfig+0x2f0>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d15f      	bne.n	8002730 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e2f7      	b.n	8002c64 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800267c:	d106      	bne.n	800268c <HAL_RCC_OscConfig+0x24c>
 800267e:	4b0c      	ldr	r3, [pc, #48]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a0b      	ldr	r2, [pc, #44]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 8002684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	e025      	b.n	80026d8 <HAL_RCC_OscConfig+0x298>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002694:	d114      	bne.n	80026c0 <HAL_RCC_OscConfig+0x280>
 8002696:	4b06      	ldr	r3, [pc, #24]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a05      	ldr	r2, [pc, #20]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 800269c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	4b03      	ldr	r3, [pc, #12]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a02      	ldr	r2, [pc, #8]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 80026a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e013      	b.n	80026d8 <HAL_RCC_OscConfig+0x298>
 80026b0:	40021000 	.word	0x40021000
 80026b4:	080063a4 	.word	0x080063a4
 80026b8:	20040000 	.word	0x20040000
 80026bc:	20040004 	.word	0x20040004
 80026c0:	4ba0      	ldr	r3, [pc, #640]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a9f      	ldr	r2, [pc, #636]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 80026c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	4b9d      	ldr	r3, [pc, #628]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a9c      	ldr	r2, [pc, #624]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 80026d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d013      	beq.n	8002708 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e0:	f7fe ff04 	bl	80014ec <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e8:	f7fe ff00 	bl	80014ec <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	@ 0x64
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e2b4      	b.n	8002c64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026fa:	4b92      	ldr	r3, [pc, #584]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0x2a8>
 8002706:	e014      	b.n	8002732 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002708:	f7fe fef0 	bl	80014ec <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002710:	f7fe feec 	bl	80014ec <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b64      	cmp	r3, #100	@ 0x64
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e2a0      	b.n	8002c64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002722:	4b88      	ldr	r3, [pc, #544]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0x2d0>
 800272e:	e000      	b.n	8002732 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d060      	beq.n	8002800 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	2b04      	cmp	r3, #4
 8002742:	d005      	beq.n	8002750 <HAL_RCC_OscConfig+0x310>
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	2b0c      	cmp	r3, #12
 8002748:	d119      	bne.n	800277e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d116      	bne.n	800277e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002750:	4b7c      	ldr	r3, [pc, #496]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <HAL_RCC_OscConfig+0x328>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e27d      	b.n	8002c64 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002768:	4b76      	ldr	r3, [pc, #472]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	061b      	lsls	r3, r3, #24
 8002776:	4973      	ldr	r1, [pc, #460]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 8002778:	4313      	orrs	r3, r2
 800277a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800277c:	e040      	b.n	8002800 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d023      	beq.n	80027ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002786:	4b6f      	ldr	r3, [pc, #444]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a6e      	ldr	r2, [pc, #440]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 800278c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002792:	f7fe feab 	bl	80014ec <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800279a:	f7fe fea7 	bl	80014ec <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e25b      	b.n	8002c64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ac:	4b65      	ldr	r3, [pc, #404]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0f0      	beq.n	800279a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b8:	4b62      	ldr	r3, [pc, #392]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	061b      	lsls	r3, r3, #24
 80027c6:	495f      	ldr	r1, [pc, #380]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	604b      	str	r3, [r1, #4]
 80027cc:	e018      	b.n	8002800 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ce:	4b5d      	ldr	r3, [pc, #372]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a5c      	ldr	r2, [pc, #368]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 80027d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027da:	f7fe fe87 	bl	80014ec <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e2:	f7fe fe83 	bl	80014ec <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e237      	b.n	8002c64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027f4:	4b53      	ldr	r3, [pc, #332]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f0      	bne.n	80027e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0308 	and.w	r3, r3, #8
 8002808:	2b00      	cmp	r3, #0
 800280a:	d03c      	beq.n	8002886 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d01c      	beq.n	800284e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002814:	4b4b      	ldr	r3, [pc, #300]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 8002816:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800281a:	4a4a      	ldr	r2, [pc, #296]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002824:	f7fe fe62 	bl	80014ec <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800282c:	f7fe fe5e 	bl	80014ec <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e212      	b.n	8002c64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800283e:	4b41      	ldr	r3, [pc, #260]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 8002840:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0ef      	beq.n	800282c <HAL_RCC_OscConfig+0x3ec>
 800284c:	e01b      	b.n	8002886 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800284e:	4b3d      	ldr	r3, [pc, #244]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 8002850:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002854:	4a3b      	ldr	r2, [pc, #236]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 8002856:	f023 0301 	bic.w	r3, r3, #1
 800285a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285e:	f7fe fe45 	bl	80014ec <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002866:	f7fe fe41 	bl	80014ec <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e1f5      	b.n	8002c64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002878:	4b32      	ldr	r3, [pc, #200]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 800287a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1ef      	bne.n	8002866 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 80a6 	beq.w	80029e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002894:	2300      	movs	r3, #0
 8002896:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002898:	4b2a      	ldr	r3, [pc, #168]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 800289a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800289c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10d      	bne.n	80028c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a4:	4b27      	ldr	r3, [pc, #156]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 80028a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a8:	4a26      	ldr	r2, [pc, #152]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 80028aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80028b0:	4b24      	ldr	r3, [pc, #144]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 80028b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028bc:	2301      	movs	r3, #1
 80028be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028c0:	4b21      	ldr	r3, [pc, #132]	@ (8002948 <HAL_RCC_OscConfig+0x508>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d118      	bne.n	80028fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002948 <HAL_RCC_OscConfig+0x508>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a1d      	ldr	r2, [pc, #116]	@ (8002948 <HAL_RCC_OscConfig+0x508>)
 80028d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028d8:	f7fe fe08 	bl	80014ec <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e0:	f7fe fe04 	bl	80014ec <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e1b8      	b.n	8002c64 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028f2:	4b15      	ldr	r3, [pc, #84]	@ (8002948 <HAL_RCC_OscConfig+0x508>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d108      	bne.n	8002918 <HAL_RCC_OscConfig+0x4d8>
 8002906:	4b0f      	ldr	r3, [pc, #60]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 8002908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800290c:	4a0d      	ldr	r2, [pc, #52]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002916:	e029      	b.n	800296c <HAL_RCC_OscConfig+0x52c>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b05      	cmp	r3, #5
 800291e:	d115      	bne.n	800294c <HAL_RCC_OscConfig+0x50c>
 8002920:	4b08      	ldr	r3, [pc, #32]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 8002922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002926:	4a07      	ldr	r2, [pc, #28]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 8002928:	f043 0304 	orr.w	r3, r3, #4
 800292c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002930:	4b04      	ldr	r3, [pc, #16]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 8002932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002936:	4a03      	ldr	r2, [pc, #12]	@ (8002944 <HAL_RCC_OscConfig+0x504>)
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002940:	e014      	b.n	800296c <HAL_RCC_OscConfig+0x52c>
 8002942:	bf00      	nop
 8002944:	40021000 	.word	0x40021000
 8002948:	40007000 	.word	0x40007000
 800294c:	4b9d      	ldr	r3, [pc, #628]	@ (8002bc4 <HAL_RCC_OscConfig+0x784>)
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002952:	4a9c      	ldr	r2, [pc, #624]	@ (8002bc4 <HAL_RCC_OscConfig+0x784>)
 8002954:	f023 0301 	bic.w	r3, r3, #1
 8002958:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800295c:	4b99      	ldr	r3, [pc, #612]	@ (8002bc4 <HAL_RCC_OscConfig+0x784>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002962:	4a98      	ldr	r2, [pc, #608]	@ (8002bc4 <HAL_RCC_OscConfig+0x784>)
 8002964:	f023 0304 	bic.w	r3, r3, #4
 8002968:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d016      	beq.n	80029a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002974:	f7fe fdba 	bl	80014ec <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800297a:	e00a      	b.n	8002992 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800297c:	f7fe fdb6 	bl	80014ec <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e168      	b.n	8002c64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002992:	4b8c      	ldr	r3, [pc, #560]	@ (8002bc4 <HAL_RCC_OscConfig+0x784>)
 8002994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0ed      	beq.n	800297c <HAL_RCC_OscConfig+0x53c>
 80029a0:	e015      	b.n	80029ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a2:	f7fe fda3 	bl	80014ec <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029a8:	e00a      	b.n	80029c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029aa:	f7fe fd9f 	bl	80014ec <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e151      	b.n	8002c64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029c0:	4b80      	ldr	r3, [pc, #512]	@ (8002bc4 <HAL_RCC_OscConfig+0x784>)
 80029c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1ed      	bne.n	80029aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029ce:	7ffb      	ldrb	r3, [r7, #31]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d105      	bne.n	80029e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d4:	4b7b      	ldr	r3, [pc, #492]	@ (8002bc4 <HAL_RCC_OscConfig+0x784>)
 80029d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d8:	4a7a      	ldr	r2, [pc, #488]	@ (8002bc4 <HAL_RCC_OscConfig+0x784>)
 80029da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029de:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0320 	and.w	r3, r3, #32
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d03c      	beq.n	8002a66 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d01c      	beq.n	8002a2e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029f4:	4b73      	ldr	r3, [pc, #460]	@ (8002bc4 <HAL_RCC_OscConfig+0x784>)
 80029f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029fa:	4a72      	ldr	r2, [pc, #456]	@ (8002bc4 <HAL_RCC_OscConfig+0x784>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a04:	f7fe fd72 	bl	80014ec <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a0c:	f7fe fd6e 	bl	80014ec <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e122      	b.n	8002c64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a1e:	4b69      	ldr	r3, [pc, #420]	@ (8002bc4 <HAL_RCC_OscConfig+0x784>)
 8002a20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0ef      	beq.n	8002a0c <HAL_RCC_OscConfig+0x5cc>
 8002a2c:	e01b      	b.n	8002a66 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a2e:	4b65      	ldr	r3, [pc, #404]	@ (8002bc4 <HAL_RCC_OscConfig+0x784>)
 8002a30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a34:	4a63      	ldr	r2, [pc, #396]	@ (8002bc4 <HAL_RCC_OscConfig+0x784>)
 8002a36:	f023 0301 	bic.w	r3, r3, #1
 8002a3a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3e:	f7fe fd55 	bl	80014ec <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a46:	f7fe fd51 	bl	80014ec <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e105      	b.n	8002c64 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a58:	4b5a      	ldr	r3, [pc, #360]	@ (8002bc4 <HAL_RCC_OscConfig+0x784>)
 8002a5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1ef      	bne.n	8002a46 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 80f9 	beq.w	8002c62 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	f040 80cf 	bne.w	8002c18 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a7a:	4b52      	ldr	r3, [pc, #328]	@ (8002bc4 <HAL_RCC_OscConfig+0x784>)
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f003 0203 	and.w	r2, r3, #3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d12c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d123      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aaa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d11b      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d113      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aca:	085b      	lsrs	r3, r3, #1
 8002acc:	3b01      	subs	r3, #1
 8002ace:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d109      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	085b      	lsrs	r3, r3, #1
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d071      	beq.n	8002bcc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	2b0c      	cmp	r3, #12
 8002aec:	d068      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002aee:	4b35      	ldr	r3, [pc, #212]	@ (8002bc4 <HAL_RCC_OscConfig+0x784>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d105      	bne.n	8002b06 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002afa:	4b32      	ldr	r3, [pc, #200]	@ (8002bc4 <HAL_RCC_OscConfig+0x784>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e0ac      	b.n	8002c64 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b0a:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <HAL_RCC_OscConfig+0x784>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a2d      	ldr	r2, [pc, #180]	@ (8002bc4 <HAL_RCC_OscConfig+0x784>)
 8002b10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b14:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b16:	f7fe fce9 	bl	80014ec <HAL_GetTick>
 8002b1a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b1c:	e008      	b.n	8002b30 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1e:	f7fe fce5 	bl	80014ec <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e099      	b.n	8002c64 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b30:	4b24      	ldr	r3, [pc, #144]	@ (8002bc4 <HAL_RCC_OscConfig+0x784>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f0      	bne.n	8002b1e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b3c:	4b21      	ldr	r3, [pc, #132]	@ (8002bc4 <HAL_RCC_OscConfig+0x784>)
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	4b21      	ldr	r3, [pc, #132]	@ (8002bc8 <HAL_RCC_OscConfig+0x788>)
 8002b42:	4013      	ands	r3, r2
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b4c:	3a01      	subs	r2, #1
 8002b4e:	0112      	lsls	r2, r2, #4
 8002b50:	4311      	orrs	r1, r2
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b56:	0212      	lsls	r2, r2, #8
 8002b58:	4311      	orrs	r1, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b5e:	0852      	lsrs	r2, r2, #1
 8002b60:	3a01      	subs	r2, #1
 8002b62:	0552      	lsls	r2, r2, #21
 8002b64:	4311      	orrs	r1, r2
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b6a:	0852      	lsrs	r2, r2, #1
 8002b6c:	3a01      	subs	r2, #1
 8002b6e:	0652      	lsls	r2, r2, #25
 8002b70:	4311      	orrs	r1, r2
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b76:	06d2      	lsls	r2, r2, #27
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	4912      	ldr	r1, [pc, #72]	@ (8002bc4 <HAL_RCC_OscConfig+0x784>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b80:	4b10      	ldr	r3, [pc, #64]	@ (8002bc4 <HAL_RCC_OscConfig+0x784>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a0f      	ldr	r2, [pc, #60]	@ (8002bc4 <HAL_RCC_OscConfig+0x784>)
 8002b86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc4 <HAL_RCC_OscConfig+0x784>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4a0c      	ldr	r2, [pc, #48]	@ (8002bc4 <HAL_RCC_OscConfig+0x784>)
 8002b92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b98:	f7fe fca8 	bl	80014ec <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba0:	f7fe fca4 	bl	80014ec <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e058      	b.n	8002c64 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bb2:	4b04      	ldr	r3, [pc, #16]	@ (8002bc4 <HAL_RCC_OscConfig+0x784>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0f0      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bbe:	e050      	b.n	8002c62 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e04f      	b.n	8002c64 <HAL_RCC_OscConfig+0x824>
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bcc:	4b27      	ldr	r3, [pc, #156]	@ (8002c6c <HAL_RCC_OscConfig+0x82c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d144      	bne.n	8002c62 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bd8:	4b24      	ldr	r3, [pc, #144]	@ (8002c6c <HAL_RCC_OscConfig+0x82c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a23      	ldr	r2, [pc, #140]	@ (8002c6c <HAL_RCC_OscConfig+0x82c>)
 8002bde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002be2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002be4:	4b21      	ldr	r3, [pc, #132]	@ (8002c6c <HAL_RCC_OscConfig+0x82c>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	4a20      	ldr	r2, [pc, #128]	@ (8002c6c <HAL_RCC_OscConfig+0x82c>)
 8002bea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bf0:	f7fe fc7c 	bl	80014ec <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf8:	f7fe fc78 	bl	80014ec <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e02c      	b.n	8002c64 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c0a:	4b18      	ldr	r3, [pc, #96]	@ (8002c6c <HAL_RCC_OscConfig+0x82c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x7b8>
 8002c16:	e024      	b.n	8002c62 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	2b0c      	cmp	r3, #12
 8002c1c:	d01f      	beq.n	8002c5e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1e:	4b13      	ldr	r3, [pc, #76]	@ (8002c6c <HAL_RCC_OscConfig+0x82c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a12      	ldr	r2, [pc, #72]	@ (8002c6c <HAL_RCC_OscConfig+0x82c>)
 8002c24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2a:	f7fe fc5f 	bl	80014ec <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c32:	f7fe fc5b 	bl	80014ec <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e00f      	b.n	8002c64 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c44:	4b09      	ldr	r3, [pc, #36]	@ (8002c6c <HAL_RCC_OscConfig+0x82c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f0      	bne.n	8002c32 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c50:	4b06      	ldr	r3, [pc, #24]	@ (8002c6c <HAL_RCC_OscConfig+0x82c>)
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	4905      	ldr	r1, [pc, #20]	@ (8002c6c <HAL_RCC_OscConfig+0x82c>)
 8002c56:	4b06      	ldr	r3, [pc, #24]	@ (8002c70 <HAL_RCC_OscConfig+0x830>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	60cb      	str	r3, [r1, #12]
 8002c5c:	e001      	b.n	8002c62 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3720      	adds	r7, #32
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	feeefffc 	.word	0xfeeefffc

08002c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e11d      	b.n	8002ec8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c8c:	4b90      	ldr	r3, [pc, #576]	@ (8002ed0 <HAL_RCC_ClockConfig+0x25c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 030f 	and.w	r3, r3, #15
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d910      	bls.n	8002cbc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9a:	4b8d      	ldr	r3, [pc, #564]	@ (8002ed0 <HAL_RCC_ClockConfig+0x25c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 020f 	bic.w	r2, r3, #15
 8002ca2:	498b      	ldr	r1, [pc, #556]	@ (8002ed0 <HAL_RCC_ClockConfig+0x25c>)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002caa:	4b89      	ldr	r3, [pc, #548]	@ (8002ed0 <HAL_RCC_ClockConfig+0x25c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e105      	b.n	8002ec8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d010      	beq.n	8002cea <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	4b81      	ldr	r3, [pc, #516]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d908      	bls.n	8002cea <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd8:	4b7e      	ldr	r3, [pc, #504]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	497b      	ldr	r1, [pc, #492]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d079      	beq.n	8002dea <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d11e      	bne.n	8002d3c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cfe:	4b75      	ldr	r3, [pc, #468]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e0dc      	b.n	8002ec8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002d0e:	f000 fa09 	bl	8003124 <RCC_GetSysClockFreqFromPLLSource>
 8002d12:	4603      	mov	r3, r0
 8002d14:	4a70      	ldr	r2, [pc, #448]	@ (8002ed8 <HAL_RCC_ClockConfig+0x264>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d946      	bls.n	8002da8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002d1a:	4b6e      	ldr	r3, [pc, #440]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d140      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d26:	4b6b      	ldr	r3, [pc, #428]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d2e:	4a69      	ldr	r2, [pc, #420]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d36:	2380      	movs	r3, #128	@ 0x80
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	e035      	b.n	8002da8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d107      	bne.n	8002d54 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d44:	4b63      	ldr	r3, [pc, #396]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d115      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0b9      	b.n	8002ec8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d107      	bne.n	8002d6c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d5c:	4b5d      	ldr	r3, [pc, #372]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d109      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0ad      	b.n	8002ec8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d6c:	4b59      	ldr	r3, [pc, #356]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0a5      	b.n	8002ec8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002d7c:	f000 f8b4 	bl	8002ee8 <HAL_RCC_GetSysClockFreq>
 8002d80:	4603      	mov	r3, r0
 8002d82:	4a55      	ldr	r2, [pc, #340]	@ (8002ed8 <HAL_RCC_ClockConfig+0x264>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d90f      	bls.n	8002da8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002d88:	4b52      	ldr	r3, [pc, #328]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d109      	bne.n	8002da8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d94:	4b4f      	ldr	r3, [pc, #316]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d9c:	4a4d      	ldr	r2, [pc, #308]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002d9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002da2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002da4:	2380      	movs	r3, #128	@ 0x80
 8002da6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002da8:	4b4a      	ldr	r3, [pc, #296]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f023 0203 	bic.w	r2, r3, #3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	4947      	ldr	r1, [pc, #284]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dba:	f7fe fb97 	bl	80014ec <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc0:	e00a      	b.n	8002dd8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc2:	f7fe fb93 	bl	80014ec <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e077      	b.n	8002ec8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd8:	4b3e      	ldr	r3, [pc, #248]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 020c 	and.w	r2, r3, #12
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d1eb      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2b80      	cmp	r3, #128	@ 0x80
 8002dee:	d105      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002df0:	4b38      	ldr	r3, [pc, #224]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	4a37      	ldr	r2, [pc, #220]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002df6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002dfa:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d010      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	4b31      	ldr	r3, [pc, #196]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d208      	bcs.n	8002e2a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e18:	4b2e      	ldr	r3, [pc, #184]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	492b      	ldr	r1, [pc, #172]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e2a:	4b29      	ldr	r3, [pc, #164]	@ (8002ed0 <HAL_RCC_ClockConfig+0x25c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d210      	bcs.n	8002e5a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e38:	4b25      	ldr	r3, [pc, #148]	@ (8002ed0 <HAL_RCC_ClockConfig+0x25c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f023 020f 	bic.w	r2, r3, #15
 8002e40:	4923      	ldr	r1, [pc, #140]	@ (8002ed0 <HAL_RCC_ClockConfig+0x25c>)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e48:	4b21      	ldr	r3, [pc, #132]	@ (8002ed0 <HAL_RCC_ClockConfig+0x25c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d001      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e036      	b.n	8002ec8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d008      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e66:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	4918      	ldr	r1, [pc, #96]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d009      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e84:	4b13      	ldr	r3, [pc, #76]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	4910      	ldr	r1, [pc, #64]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e98:	f000 f826 	bl	8002ee8 <HAL_RCC_GetSysClockFreq>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed4 <HAL_RCC_ClockConfig+0x260>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	091b      	lsrs	r3, r3, #4
 8002ea4:	f003 030f 	and.w	r3, r3, #15
 8002ea8:	490c      	ldr	r1, [pc, #48]	@ (8002edc <HAL_RCC_ClockConfig+0x268>)
 8002eaa:	5ccb      	ldrb	r3, [r1, r3]
 8002eac:	f003 031f 	and.w	r3, r3, #31
 8002eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee0 <HAL_RCC_ClockConfig+0x26c>)
 8002eb6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee4 <HAL_RCC_ClockConfig+0x270>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fe fac5 	bl	800144c <HAL_InitTick>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	73fb      	strb	r3, [r7, #15]

  return status;
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3718      	adds	r7, #24
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40022000 	.word	0x40022000
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	04c4b400 	.word	0x04c4b400
 8002edc:	080063a4 	.word	0x080063a4
 8002ee0:	20040000 	.word	0x20040000
 8002ee4:	20040004 	.word	0x20040004

08002ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b089      	sub	sp, #36	@ 0x24
 8002eec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ef6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 030c 	and.w	r3, r3, #12
 8002efe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f00:	4b3b      	ldr	r3, [pc, #236]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f003 0303 	and.w	r3, r3, #3
 8002f08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <HAL_RCC_GetSysClockFreq+0x34>
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	2b0c      	cmp	r3, #12
 8002f14:	d121      	bne.n	8002f5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d11e      	bne.n	8002f5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f1c:	4b34      	ldr	r3, [pc, #208]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d107      	bne.n	8002f38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f28:	4b31      	ldr	r3, [pc, #196]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f2e:	0a1b      	lsrs	r3, r3, #8
 8002f30:	f003 030f 	and.w	r3, r3, #15
 8002f34:	61fb      	str	r3, [r7, #28]
 8002f36:	e005      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f38:	4b2d      	ldr	r3, [pc, #180]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f44:	4a2b      	ldr	r2, [pc, #172]	@ (8002ff4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10d      	bne.n	8002f70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f58:	e00a      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d102      	bne.n	8002f66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f60:	4b25      	ldr	r3, [pc, #148]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f62:	61bb      	str	r3, [r7, #24]
 8002f64:	e004      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d101      	bne.n	8002f70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f6c:	4b23      	ldr	r3, [pc, #140]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x114>)
 8002f6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	2b0c      	cmp	r3, #12
 8002f74:	d134      	bne.n	8002fe0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f76:	4b1e      	ldr	r3, [pc, #120]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d003      	beq.n	8002f8e <HAL_RCC_GetSysClockFreq+0xa6>
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	d003      	beq.n	8002f94 <HAL_RCC_GetSysClockFreq+0xac>
 8002f8c:	e005      	b.n	8002f9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f90:	617b      	str	r3, [r7, #20]
      break;
 8002f92:	e005      	b.n	8002fa0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f94:	4b19      	ldr	r3, [pc, #100]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x114>)
 8002f96:	617b      	str	r3, [r7, #20]
      break;
 8002f98:	e002      	b.n	8002fa0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	617b      	str	r3, [r7, #20]
      break;
 8002f9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fa0:	4b13      	ldr	r3, [pc, #76]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	091b      	lsrs	r3, r3, #4
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	3301      	adds	r3, #1
 8002fac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002fae:	4b10      	ldr	r3, [pc, #64]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	0a1b      	lsrs	r3, r3, #8
 8002fb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	fb03 f202 	mul.w	r2, r3, r2
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	0e5b      	lsrs	r3, r3, #25
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fde:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fe0:	69bb      	ldr	r3, [r7, #24]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3724      	adds	r7, #36	@ 0x24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	080063bc 	.word	0x080063bc
 8002ff8:	00f42400 	.word	0x00f42400
 8002ffc:	007a1200 	.word	0x007a1200

08003000 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003004:	4b03      	ldr	r3, [pc, #12]	@ (8003014 <HAL_RCC_GetHCLKFreq+0x14>)
 8003006:	681b      	ldr	r3, [r3, #0]
}
 8003008:	4618      	mov	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	20040000 	.word	0x20040000

08003018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800301c:	f7ff fff0 	bl	8003000 <HAL_RCC_GetHCLKFreq>
 8003020:	4602      	mov	r2, r0
 8003022:	4b06      	ldr	r3, [pc, #24]	@ (800303c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	0a1b      	lsrs	r3, r3, #8
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	4904      	ldr	r1, [pc, #16]	@ (8003040 <HAL_RCC_GetPCLK1Freq+0x28>)
 800302e:	5ccb      	ldrb	r3, [r1, r3]
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003038:	4618      	mov	r0, r3
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40021000 	.word	0x40021000
 8003040:	080063b4 	.word	0x080063b4

08003044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003048:	f7ff ffda 	bl	8003000 <HAL_RCC_GetHCLKFreq>
 800304c:	4602      	mov	r2, r0
 800304e:	4b06      	ldr	r3, [pc, #24]	@ (8003068 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	0adb      	lsrs	r3, r3, #11
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	4904      	ldr	r1, [pc, #16]	@ (800306c <HAL_RCC_GetPCLK2Freq+0x28>)
 800305a:	5ccb      	ldrb	r3, [r1, r3]
 800305c:	f003 031f 	and.w	r3, r3, #31
 8003060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003064:	4618      	mov	r0, r3
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40021000 	.word	0x40021000
 800306c:	080063b4 	.word	0x080063b4

08003070 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003078:	2300      	movs	r3, #0
 800307a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800307c:	4b27      	ldr	r3, [pc, #156]	@ (800311c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800307e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003088:	f7ff f8f6 	bl	8002278 <HAL_PWREx_GetVoltageRange>
 800308c:	6178      	str	r0, [r7, #20]
 800308e:	e014      	b.n	80030ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003090:	4b22      	ldr	r3, [pc, #136]	@ (800311c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003094:	4a21      	ldr	r2, [pc, #132]	@ (800311c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003096:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800309a:	6593      	str	r3, [r2, #88]	@ 0x58
 800309c:	4b1f      	ldr	r3, [pc, #124]	@ (800311c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800309e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030a8:	f7ff f8e6 	bl	8002278 <HAL_PWREx_GetVoltageRange>
 80030ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030ae:	4b1b      	ldr	r3, [pc, #108]	@ (800311c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b2:	4a1a      	ldr	r2, [pc, #104]	@ (800311c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030c0:	d10b      	bne.n	80030da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b80      	cmp	r3, #128	@ 0x80
 80030c6:	d913      	bls.n	80030f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80030cc:	d902      	bls.n	80030d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030ce:	2302      	movs	r3, #2
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	e00d      	b.n	80030f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030d4:	2301      	movs	r3, #1
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	e00a      	b.n	80030f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80030de:	d902      	bls.n	80030e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80030e0:	2302      	movs	r3, #2
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	e004      	b.n	80030f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b70      	cmp	r3, #112	@ 0x70
 80030ea:	d101      	bne.n	80030f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030ec:	2301      	movs	r3, #1
 80030ee:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003120 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f023 020f 	bic.w	r2, r3, #15
 80030f8:	4909      	ldr	r1, [pc, #36]	@ (8003120 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003100:	4b07      	ldr	r3, [pc, #28]	@ (8003120 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 030f 	and.w	r3, r3, #15
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	429a      	cmp	r2, r3
 800310c:	d001      	beq.n	8003112 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40021000 	.word	0x40021000
 8003120:	40022000 	.word	0x40022000

08003124 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800312a:	4b2d      	ldr	r3, [pc, #180]	@ (80031e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2b03      	cmp	r3, #3
 8003138:	d00b      	beq.n	8003152 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2b03      	cmp	r3, #3
 800313e:	d825      	bhi.n	800318c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d008      	beq.n	8003158 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d11f      	bne.n	800318c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800314c:	4b25      	ldr	r3, [pc, #148]	@ (80031e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800314e:	613b      	str	r3, [r7, #16]
    break;
 8003150:	e01f      	b.n	8003192 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003152:	4b25      	ldr	r3, [pc, #148]	@ (80031e8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003154:	613b      	str	r3, [r7, #16]
    break;
 8003156:	e01c      	b.n	8003192 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003158:	4b21      	ldr	r3, [pc, #132]	@ (80031e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d107      	bne.n	8003174 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003164:	4b1e      	ldr	r3, [pc, #120]	@ (80031e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003166:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800316a:	0a1b      	lsrs	r3, r3, #8
 800316c:	f003 030f 	and.w	r3, r3, #15
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	e005      	b.n	8003180 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003174:	4b1a      	ldr	r3, [pc, #104]	@ (80031e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003180:	4a1a      	ldr	r2, [pc, #104]	@ (80031ec <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003188:	613b      	str	r3, [r7, #16]
    break;
 800318a:	e002      	b.n	8003192 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800318c:	2300      	movs	r3, #0
 800318e:	613b      	str	r3, [r7, #16]
    break;
 8003190:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003192:	4b13      	ldr	r3, [pc, #76]	@ (80031e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	091b      	lsrs	r3, r3, #4
 8003198:	f003 030f 	and.w	r3, r3, #15
 800319c:	3301      	adds	r3, #1
 800319e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031a0:	4b0f      	ldr	r3, [pc, #60]	@ (80031e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	0a1b      	lsrs	r3, r3, #8
 80031a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	fb03 f202 	mul.w	r2, r3, r2
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031b8:	4b09      	ldr	r3, [pc, #36]	@ (80031e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	0e5b      	lsrs	r3, r3, #25
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	3301      	adds	r3, #1
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80031d2:	683b      	ldr	r3, [r7, #0]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	371c      	adds	r7, #28
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	40021000 	.word	0x40021000
 80031e4:	00f42400 	.word	0x00f42400
 80031e8:	007a1200 	.word	0x007a1200
 80031ec:	080063bc 	.word	0x080063bc

080031f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031f8:	2300      	movs	r3, #0
 80031fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031fc:	2300      	movs	r3, #0
 80031fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003208:	2b00      	cmp	r3, #0
 800320a:	d040      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003210:	2b80      	cmp	r3, #128	@ 0x80
 8003212:	d02a      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003214:	2b80      	cmp	r3, #128	@ 0x80
 8003216:	d825      	bhi.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003218:	2b60      	cmp	r3, #96	@ 0x60
 800321a:	d026      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800321c:	2b60      	cmp	r3, #96	@ 0x60
 800321e:	d821      	bhi.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003220:	2b40      	cmp	r3, #64	@ 0x40
 8003222:	d006      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003224:	2b40      	cmp	r3, #64	@ 0x40
 8003226:	d81d      	bhi.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003228:	2b00      	cmp	r3, #0
 800322a:	d009      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800322c:	2b20      	cmp	r3, #32
 800322e:	d010      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003230:	e018      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003232:	4b89      	ldr	r3, [pc, #548]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	4a88      	ldr	r2, [pc, #544]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800323c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800323e:	e015      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3304      	adds	r3, #4
 8003244:	2100      	movs	r1, #0
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fb02 	bl	8003850 <RCCEx_PLLSAI1_Config>
 800324c:	4603      	mov	r3, r0
 800324e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003250:	e00c      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	3320      	adds	r3, #32
 8003256:	2100      	movs	r1, #0
 8003258:	4618      	mov	r0, r3
 800325a:	f000 fbed 	bl	8003a38 <RCCEx_PLLSAI2_Config>
 800325e:	4603      	mov	r3, r0
 8003260:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003262:	e003      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	74fb      	strb	r3, [r7, #19]
      break;
 8003268:	e000      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800326a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800326c:	7cfb      	ldrb	r3, [r7, #19]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10b      	bne.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003272:	4b79      	ldr	r3, [pc, #484]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003274:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003278:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003280:	4975      	ldr	r1, [pc, #468]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003288:	e001      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800328a:	7cfb      	ldrb	r3, [r7, #19]
 800328c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d047      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800329e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032a2:	d030      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80032a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032a8:	d82a      	bhi.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80032aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032ae:	d02a      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80032b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032b4:	d824      	bhi.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80032b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032ba:	d008      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xde>
 80032bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032c0:	d81e      	bhi.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80032c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032ca:	d010      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80032cc:	e018      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032ce:	4b62      	ldr	r3, [pc, #392]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	4a61      	ldr	r2, [pc, #388]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032d8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032da:	e015      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3304      	adds	r3, #4
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fab4 	bl	8003850 <RCCEx_PLLSAI1_Config>
 80032e8:	4603      	mov	r3, r0
 80032ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032ec:	e00c      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3320      	adds	r3, #32
 80032f2:	2100      	movs	r1, #0
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 fb9f 	bl	8003a38 <RCCEx_PLLSAI2_Config>
 80032fa:	4603      	mov	r3, r0
 80032fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032fe:	e003      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	74fb      	strb	r3, [r7, #19]
      break;
 8003304:	e000      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003306:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003308:	7cfb      	ldrb	r3, [r7, #19]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10b      	bne.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800330e:	4b52      	ldr	r3, [pc, #328]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003310:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003314:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800331c:	494e      	ldr	r1, [pc, #312]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800331e:	4313      	orrs	r3, r2
 8003320:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003324:	e001      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003326:	7cfb      	ldrb	r3, [r7, #19]
 8003328:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 809f 	beq.w	8003476 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003338:	2300      	movs	r3, #0
 800333a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800333c:	4b46      	ldr	r3, [pc, #280]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800333e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003348:	2301      	movs	r3, #1
 800334a:	e000      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800334c:	2300      	movs	r3, #0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00d      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003352:	4b41      	ldr	r3, [pc, #260]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003356:	4a40      	ldr	r2, [pc, #256]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800335c:	6593      	str	r3, [r2, #88]	@ 0x58
 800335e:	4b3e      	ldr	r3, [pc, #248]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003366:	60bb      	str	r3, [r7, #8]
 8003368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800336a:	2301      	movs	r3, #1
 800336c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800336e:	4b3b      	ldr	r3, [pc, #236]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a3a      	ldr	r2, [pc, #232]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003378:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800337a:	f7fe f8b7 	bl	80014ec <HAL_GetTick>
 800337e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003380:	e009      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003382:	f7fe f8b3 	bl	80014ec <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d902      	bls.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	74fb      	strb	r3, [r7, #19]
        break;
 8003394:	e005      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003396:	4b31      	ldr	r3, [pc, #196]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d0ef      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80033a2:	7cfb      	ldrb	r3, [r7, #19]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d15b      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033b2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d01f      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d019      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033c6:	4b24      	ldr	r3, [pc, #144]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033d2:	4b21      	ldr	r3, [pc, #132]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033f2:	4a19      	ldr	r2, [pc, #100]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d016      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7fe f872 	bl	80014ec <HAL_GetTick>
 8003408:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800340a:	e00b      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340c:	f7fe f86e 	bl	80014ec <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341a:	4293      	cmp	r3, r2
 800341c:	d902      	bls.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	74fb      	strb	r3, [r7, #19]
            break;
 8003422:	e006      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003424:	4b0c      	ldr	r3, [pc, #48]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0ec      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003432:	7cfb      	ldrb	r3, [r7, #19]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10c      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003438:	4b07      	ldr	r3, [pc, #28]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800343e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003448:	4903      	ldr	r1, [pc, #12]	@ (8003458 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003450:	e008      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003452:	7cfb      	ldrb	r3, [r7, #19]
 8003454:	74bb      	strb	r3, [r7, #18]
 8003456:	e005      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003458:	40021000 	.word	0x40021000
 800345c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003460:	7cfb      	ldrb	r3, [r7, #19]
 8003462:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003464:	7c7b      	ldrb	r3, [r7, #17]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d105      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800346a:	4ba0      	ldr	r3, [pc, #640]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800346c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800346e:	4a9f      	ldr	r2, [pc, #636]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003470:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003474:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003482:	4b9a      	ldr	r3, [pc, #616]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003488:	f023 0203 	bic.w	r2, r3, #3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003490:	4996      	ldr	r1, [pc, #600]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034a4:	4b91      	ldr	r3, [pc, #580]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034aa:	f023 020c 	bic.w	r2, r3, #12
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b2:	498e      	ldr	r1, [pc, #568]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034c6:	4b89      	ldr	r3, [pc, #548]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d4:	4985      	ldr	r1, [pc, #532]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00a      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034e8:	4b80      	ldr	r3, [pc, #512]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034f6:	497d      	ldr	r1, [pc, #500]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0310 	and.w	r3, r3, #16
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800350a:	4b78      	ldr	r3, [pc, #480]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800350c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003510:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003518:	4974      	ldr	r1, [pc, #464]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800352c:	4b6f      	ldr	r3, [pc, #444]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003532:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800353a:	496c      	ldr	r1, [pc, #432]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800354e:	4b67      	ldr	r3, [pc, #412]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003554:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800355c:	4963      	ldr	r1, [pc, #396]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003570:	4b5e      	ldr	r3, [pc, #376]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003576:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800357e:	495b      	ldr	r1, [pc, #364]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003592:	4b56      	ldr	r3, [pc, #344]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003598:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a0:	4952      	ldr	r1, [pc, #328]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035b4:	4b4d      	ldr	r3, [pc, #308]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c2:	494a      	ldr	r1, [pc, #296]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035d6:	4b45      	ldr	r3, [pc, #276]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035e4:	4941      	ldr	r1, [pc, #260]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00a      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035f8:	4b3c      	ldr	r3, [pc, #240]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80035fe:	f023 0203 	bic.w	r2, r3, #3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003606:	4939      	ldr	r1, [pc, #228]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d028      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800361a:	4b34      	ldr	r3, [pc, #208]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800361c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003620:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003628:	4930      	ldr	r1, [pc, #192]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003634:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003638:	d106      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800363a:	4b2c      	ldr	r3, [pc, #176]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	4a2b      	ldr	r2, [pc, #172]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003640:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003644:	60d3      	str	r3, [r2, #12]
 8003646:	e011      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800364c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003650:	d10c      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3304      	adds	r3, #4
 8003656:	2101      	movs	r1, #1
 8003658:	4618      	mov	r0, r3
 800365a:	f000 f8f9 	bl	8003850 <RCCEx_PLLSAI1_Config>
 800365e:	4603      	mov	r3, r0
 8003660:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003662:	7cfb      	ldrb	r3, [r7, #19]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003668:	7cfb      	ldrb	r3, [r7, #19]
 800366a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d04d      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800367c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003680:	d108      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003682:	4b1a      	ldr	r3, [pc, #104]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003684:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003688:	4a18      	ldr	r2, [pc, #96]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800368a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800368e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003692:	e012      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003694:	4b15      	ldr	r3, [pc, #84]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003696:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800369a:	4a14      	ldr	r2, [pc, #80]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800369c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036a0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80036a4:	4b11      	ldr	r3, [pc, #68]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036b2:	490e      	ldr	r1, [pc, #56]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036c2:	d106      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036c4:	4b09      	ldr	r3, [pc, #36]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	4a08      	ldr	r2, [pc, #32]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036ce:	60d3      	str	r3, [r2, #12]
 80036d0:	e020      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036da:	d109      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036dc:	4b03      	ldr	r3, [pc, #12]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	4a02      	ldr	r2, [pc, #8]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036e6:	60d3      	str	r3, [r2, #12]
 80036e8:	e014      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80036ea:	bf00      	nop
 80036ec:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036f8:	d10c      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3304      	adds	r3, #4
 80036fe:	2101      	movs	r1, #1
 8003700:	4618      	mov	r0, r3
 8003702:	f000 f8a5 	bl	8003850 <RCCEx_PLLSAI1_Config>
 8003706:	4603      	mov	r3, r0
 8003708:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800370a:	7cfb      	ldrb	r3, [r7, #19]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003710:	7cfb      	ldrb	r3, [r7, #19]
 8003712:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d028      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003720:	4b4a      	ldr	r3, [pc, #296]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003726:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800372e:	4947      	ldr	r1, [pc, #284]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800373a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800373e:	d106      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003740:	4b42      	ldr	r3, [pc, #264]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	4a41      	ldr	r2, [pc, #260]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003746:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800374a:	60d3      	str	r3, [r2, #12]
 800374c:	e011      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003752:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003756:	d10c      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3304      	adds	r3, #4
 800375c:	2101      	movs	r1, #1
 800375e:	4618      	mov	r0, r3
 8003760:	f000 f876 	bl	8003850 <RCCEx_PLLSAI1_Config>
 8003764:	4603      	mov	r3, r0
 8003766:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003768:	7cfb      	ldrb	r3, [r7, #19]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800376e:	7cfb      	ldrb	r3, [r7, #19]
 8003770:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d01e      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800377e:	4b33      	ldr	r3, [pc, #204]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003784:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800378e:	492f      	ldr	r1, [pc, #188]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003790:	4313      	orrs	r3, r2
 8003792:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800379c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037a0:	d10c      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3304      	adds	r3, #4
 80037a6:	2102      	movs	r1, #2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 f851 	bl	8003850 <RCCEx_PLLSAI1_Config>
 80037ae:	4603      	mov	r3, r0
 80037b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037b2:	7cfb      	ldrb	r3, [r7, #19]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80037b8:	7cfb      	ldrb	r3, [r7, #19]
 80037ba:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00b      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037c8:	4b20      	ldr	r3, [pc, #128]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037ce:	f023 0204 	bic.w	r2, r3, #4
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037d8:	491c      	ldr	r1, [pc, #112]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00b      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80037ec:	4b17      	ldr	r3, [pc, #92]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037f2:	f023 0218 	bic.w	r2, r3, #24
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037fc:	4913      	ldr	r1, [pc, #76]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d017      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003810:	4b0e      	ldr	r3, [pc, #56]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003812:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003816:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003820:	490a      	ldr	r1, [pc, #40]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003822:	4313      	orrs	r3, r2
 8003824:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800382e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003832:	d105      	bne.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003834:	4b05      	ldr	r3, [pc, #20]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	4a04      	ldr	r2, [pc, #16]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800383a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800383e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003840:	7cbb      	ldrb	r3, [r7, #18]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40021000 	.word	0x40021000

08003850 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800385a:	2300      	movs	r3, #0
 800385c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800385e:	4b72      	ldr	r3, [pc, #456]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00e      	beq.n	8003888 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800386a:	4b6f      	ldr	r3, [pc, #444]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f003 0203 	and.w	r2, r3, #3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d103      	bne.n	8003882 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
       ||
 800387e:	2b00      	cmp	r3, #0
 8003880:	d142      	bne.n	8003908 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	73fb      	strb	r3, [r7, #15]
 8003886:	e03f      	b.n	8003908 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b03      	cmp	r3, #3
 800388e:	d018      	beq.n	80038c2 <RCCEx_PLLSAI1_Config+0x72>
 8003890:	2b03      	cmp	r3, #3
 8003892:	d825      	bhi.n	80038e0 <RCCEx_PLLSAI1_Config+0x90>
 8003894:	2b01      	cmp	r3, #1
 8003896:	d002      	beq.n	800389e <RCCEx_PLLSAI1_Config+0x4e>
 8003898:	2b02      	cmp	r3, #2
 800389a:	d009      	beq.n	80038b0 <RCCEx_PLLSAI1_Config+0x60>
 800389c:	e020      	b.n	80038e0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800389e:	4b62      	ldr	r3, [pc, #392]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d11d      	bne.n	80038e6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ae:	e01a      	b.n	80038e6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038b0:	4b5d      	ldr	r3, [pc, #372]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d116      	bne.n	80038ea <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038c0:	e013      	b.n	80038ea <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038c2:	4b59      	ldr	r3, [pc, #356]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10f      	bne.n	80038ee <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038ce:	4b56      	ldr	r3, [pc, #344]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038de:	e006      	b.n	80038ee <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
      break;
 80038e4:	e004      	b.n	80038f0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80038e6:	bf00      	nop
 80038e8:	e002      	b.n	80038f0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80038ea:	bf00      	nop
 80038ec:	e000      	b.n	80038f0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80038ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d108      	bne.n	8003908 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80038f6:	4b4c      	ldr	r3, [pc, #304]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f023 0203 	bic.w	r2, r3, #3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4949      	ldr	r1, [pc, #292]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003904:	4313      	orrs	r3, r2
 8003906:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003908:	7bfb      	ldrb	r3, [r7, #15]
 800390a:	2b00      	cmp	r3, #0
 800390c:	f040 8086 	bne.w	8003a1c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003910:	4b45      	ldr	r3, [pc, #276]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a44      	ldr	r2, [pc, #272]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003916:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800391a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800391c:	f7fd fde6 	bl	80014ec <HAL_GetTick>
 8003920:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003922:	e009      	b.n	8003938 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003924:	f7fd fde2 	bl	80014ec <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d902      	bls.n	8003938 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	73fb      	strb	r3, [r7, #15]
        break;
 8003936:	e005      	b.n	8003944 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003938:	4b3b      	ldr	r3, [pc, #236]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1ef      	bne.n	8003924 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d168      	bne.n	8003a1c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d113      	bne.n	8003978 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003950:	4b35      	ldr	r3, [pc, #212]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	4b35      	ldr	r3, [pc, #212]	@ (8003a2c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003956:	4013      	ands	r3, r2
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6892      	ldr	r2, [r2, #8]
 800395c:	0211      	lsls	r1, r2, #8
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68d2      	ldr	r2, [r2, #12]
 8003962:	06d2      	lsls	r2, r2, #27
 8003964:	4311      	orrs	r1, r2
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6852      	ldr	r2, [r2, #4]
 800396a:	3a01      	subs	r2, #1
 800396c:	0112      	lsls	r2, r2, #4
 800396e:	430a      	orrs	r2, r1
 8003970:	492d      	ldr	r1, [pc, #180]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003972:	4313      	orrs	r3, r2
 8003974:	610b      	str	r3, [r1, #16]
 8003976:	e02d      	b.n	80039d4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d115      	bne.n	80039aa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800397e:	4b2a      	ldr	r3, [pc, #168]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	4b2b      	ldr	r3, [pc, #172]	@ (8003a30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003984:	4013      	ands	r3, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6892      	ldr	r2, [r2, #8]
 800398a:	0211      	lsls	r1, r2, #8
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6912      	ldr	r2, [r2, #16]
 8003990:	0852      	lsrs	r2, r2, #1
 8003992:	3a01      	subs	r2, #1
 8003994:	0552      	lsls	r2, r2, #21
 8003996:	4311      	orrs	r1, r2
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6852      	ldr	r2, [r2, #4]
 800399c:	3a01      	subs	r2, #1
 800399e:	0112      	lsls	r2, r2, #4
 80039a0:	430a      	orrs	r2, r1
 80039a2:	4921      	ldr	r1, [pc, #132]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	610b      	str	r3, [r1, #16]
 80039a8:	e014      	b.n	80039d4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039aa:	4b1f      	ldr	r3, [pc, #124]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039ac:	691a      	ldr	r2, [r3, #16]
 80039ae:	4b21      	ldr	r3, [pc, #132]	@ (8003a34 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6892      	ldr	r2, [r2, #8]
 80039b6:	0211      	lsls	r1, r2, #8
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6952      	ldr	r2, [r2, #20]
 80039bc:	0852      	lsrs	r2, r2, #1
 80039be:	3a01      	subs	r2, #1
 80039c0:	0652      	lsls	r2, r2, #25
 80039c2:	4311      	orrs	r1, r2
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6852      	ldr	r2, [r2, #4]
 80039c8:	3a01      	subs	r2, #1
 80039ca:	0112      	lsls	r2, r2, #4
 80039cc:	430a      	orrs	r2, r1
 80039ce:	4916      	ldr	r1, [pc, #88]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039d4:	4b14      	ldr	r3, [pc, #80]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a13      	ldr	r2, [pc, #76]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80039de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e0:	f7fd fd84 	bl	80014ec <HAL_GetTick>
 80039e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039e6:	e009      	b.n	80039fc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039e8:	f7fd fd80 	bl	80014ec <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d902      	bls.n	80039fc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	73fb      	strb	r3, [r7, #15]
          break;
 80039fa:	e005      	b.n	8003a08 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0ef      	beq.n	80039e8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d106      	bne.n	8003a1c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a0e:	4b06      	ldr	r3, [pc, #24]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a10:	691a      	ldr	r2, [r3, #16]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	4904      	ldr	r1, [pc, #16]	@ (8003a28 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	07ff800f 	.word	0x07ff800f
 8003a30:	ff9f800f 	.word	0xff9f800f
 8003a34:	f9ff800f 	.word	0xf9ff800f

08003a38 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a46:	4b72      	ldr	r3, [pc, #456]	@ (8003c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00e      	beq.n	8003a70 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a52:	4b6f      	ldr	r3, [pc, #444]	@ (8003c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f003 0203 	and.w	r2, r3, #3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d103      	bne.n	8003a6a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
       ||
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d142      	bne.n	8003af0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	73fb      	strb	r3, [r7, #15]
 8003a6e:	e03f      	b.n	8003af0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d018      	beq.n	8003aaa <RCCEx_PLLSAI2_Config+0x72>
 8003a78:	2b03      	cmp	r3, #3
 8003a7a:	d825      	bhi.n	8003ac8 <RCCEx_PLLSAI2_Config+0x90>
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d002      	beq.n	8003a86 <RCCEx_PLLSAI2_Config+0x4e>
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d009      	beq.n	8003a98 <RCCEx_PLLSAI2_Config+0x60>
 8003a84:	e020      	b.n	8003ac8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a86:	4b62      	ldr	r3, [pc, #392]	@ (8003c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d11d      	bne.n	8003ace <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a96:	e01a      	b.n	8003ace <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a98:	4b5d      	ldr	r3, [pc, #372]	@ (8003c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d116      	bne.n	8003ad2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aa8:	e013      	b.n	8003ad2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003aaa:	4b59      	ldr	r3, [pc, #356]	@ (8003c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10f      	bne.n	8003ad6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ab6:	4b56      	ldr	r3, [pc, #344]	@ (8003c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d109      	bne.n	8003ad6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ac6:	e006      	b.n	8003ad6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	73fb      	strb	r3, [r7, #15]
      break;
 8003acc:	e004      	b.n	8003ad8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003ace:	bf00      	nop
 8003ad0:	e002      	b.n	8003ad8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003ad2:	bf00      	nop
 8003ad4:	e000      	b.n	8003ad8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003ad6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d108      	bne.n	8003af0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003ade:	4b4c      	ldr	r3, [pc, #304]	@ (8003c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f023 0203 	bic.w	r2, r3, #3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4949      	ldr	r1, [pc, #292]	@ (8003c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f040 8086 	bne.w	8003c04 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003af8:	4b45      	ldr	r3, [pc, #276]	@ (8003c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a44      	ldr	r2, [pc, #272]	@ (8003c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003afe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b04:	f7fd fcf2 	bl	80014ec <HAL_GetTick>
 8003b08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b0a:	e009      	b.n	8003b20 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b0c:	f7fd fcee 	bl	80014ec <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d902      	bls.n	8003b20 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	73fb      	strb	r3, [r7, #15]
        break;
 8003b1e:	e005      	b.n	8003b2c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b20:	4b3b      	ldr	r3, [pc, #236]	@ (8003c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1ef      	bne.n	8003b0c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d168      	bne.n	8003c04 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d113      	bne.n	8003b60 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b38:	4b35      	ldr	r3, [pc, #212]	@ (8003c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b3a:	695a      	ldr	r2, [r3, #20]
 8003b3c:	4b35      	ldr	r3, [pc, #212]	@ (8003c14 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003b3e:	4013      	ands	r3, r2
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6892      	ldr	r2, [r2, #8]
 8003b44:	0211      	lsls	r1, r2, #8
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	68d2      	ldr	r2, [r2, #12]
 8003b4a:	06d2      	lsls	r2, r2, #27
 8003b4c:	4311      	orrs	r1, r2
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6852      	ldr	r2, [r2, #4]
 8003b52:	3a01      	subs	r2, #1
 8003b54:	0112      	lsls	r2, r2, #4
 8003b56:	430a      	orrs	r2, r1
 8003b58:	492d      	ldr	r1, [pc, #180]	@ (8003c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	614b      	str	r3, [r1, #20]
 8003b5e:	e02d      	b.n	8003bbc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d115      	bne.n	8003b92 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b66:	4b2a      	ldr	r3, [pc, #168]	@ (8003c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	4b2b      	ldr	r3, [pc, #172]	@ (8003c18 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6892      	ldr	r2, [r2, #8]
 8003b72:	0211      	lsls	r1, r2, #8
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6912      	ldr	r2, [r2, #16]
 8003b78:	0852      	lsrs	r2, r2, #1
 8003b7a:	3a01      	subs	r2, #1
 8003b7c:	0552      	lsls	r2, r2, #21
 8003b7e:	4311      	orrs	r1, r2
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6852      	ldr	r2, [r2, #4]
 8003b84:	3a01      	subs	r2, #1
 8003b86:	0112      	lsls	r2, r2, #4
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	4921      	ldr	r1, [pc, #132]	@ (8003c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	614b      	str	r3, [r1, #20]
 8003b90:	e014      	b.n	8003bbc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b92:	4b1f      	ldr	r3, [pc, #124]	@ (8003c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b94:	695a      	ldr	r2, [r3, #20]
 8003b96:	4b21      	ldr	r3, [pc, #132]	@ (8003c1c <RCCEx_PLLSAI2_Config+0x1e4>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6892      	ldr	r2, [r2, #8]
 8003b9e:	0211      	lsls	r1, r2, #8
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6952      	ldr	r2, [r2, #20]
 8003ba4:	0852      	lsrs	r2, r2, #1
 8003ba6:	3a01      	subs	r2, #1
 8003ba8:	0652      	lsls	r2, r2, #25
 8003baa:	4311      	orrs	r1, r2
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6852      	ldr	r2, [r2, #4]
 8003bb0:	3a01      	subs	r2, #1
 8003bb2:	0112      	lsls	r2, r2, #4
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	4916      	ldr	r1, [pc, #88]	@ (8003c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003bbc:	4b14      	ldr	r3, [pc, #80]	@ (8003c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a13      	ldr	r2, [pc, #76]	@ (8003c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc8:	f7fd fc90 	bl	80014ec <HAL_GetTick>
 8003bcc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bce:	e009      	b.n	8003be4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bd0:	f7fd fc8c 	bl	80014ec <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d902      	bls.n	8003be4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	73fb      	strb	r3, [r7, #15]
          break;
 8003be2:	e005      	b.n	8003bf0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003be4:	4b0a      	ldr	r3, [pc, #40]	@ (8003c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d0ef      	beq.n	8003bd0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d106      	bne.n	8003c04 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003bf6:	4b06      	ldr	r3, [pc, #24]	@ (8003c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bf8:	695a      	ldr	r2, [r3, #20]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	4904      	ldr	r1, [pc, #16]	@ (8003c10 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40021000 	.word	0x40021000
 8003c14:	07ff800f 	.word	0x07ff800f
 8003c18:	ff9f800f 	.word	0xff9f800f
 8003c1c:	f9ff800f 	.word	0xf9ff800f

08003c20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e042      	b.n	8003cb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d106      	bne.n	8003c4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7fd f993 	bl	8000f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2224      	movs	r2, #36	@ 0x24
 8003c4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0201 	bic.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 ffd4 	bl	8004c18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 fcd5 	bl	8004620 <UART_SetConfig>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e01b      	b.n	8003cb8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689a      	ldr	r2, [r3, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f001 f853 	bl	8004d5c <UART_CheckIdleState>
 8003cb6:	4603      	mov	r3, r0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3708      	adds	r7, #8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08a      	sub	sp, #40	@ 0x28
 8003cc4:	af02      	add	r7, sp, #8
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd6:	2b20      	cmp	r3, #32
 8003cd8:	d17b      	bne.n	8003dd2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <HAL_UART_Transmit+0x26>
 8003ce0:	88fb      	ldrh	r3, [r7, #6]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e074      	b.n	8003dd4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2221      	movs	r2, #33	@ 0x21
 8003cf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cfa:	f7fd fbf7 	bl	80014ec <HAL_GetTick>
 8003cfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	88fa      	ldrh	r2, [r7, #6]
 8003d04:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	88fa      	ldrh	r2, [r7, #6]
 8003d0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d18:	d108      	bne.n	8003d2c <HAL_UART_Transmit+0x6c>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d104      	bne.n	8003d2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	61bb      	str	r3, [r7, #24]
 8003d2a:	e003      	b.n	8003d34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d34:	e030      	b.n	8003d98 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2180      	movs	r1, #128	@ 0x80
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f001 f8b5 	bl	8004eb0 <UART_WaitOnFlagUntilTimeout>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e03d      	b.n	8003dd4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10b      	bne.n	8003d76 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	881a      	ldrh	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d6a:	b292      	uxth	r2, r2
 8003d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	3302      	adds	r3, #2
 8003d72:	61bb      	str	r3, [r7, #24]
 8003d74:	e007      	b.n	8003d86 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	781a      	ldrb	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	3301      	adds	r3, #1
 8003d84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1c8      	bne.n	8003d36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	2200      	movs	r2, #0
 8003dac:	2140      	movs	r1, #64	@ 0x40
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f001 f87e 	bl	8004eb0 <UART_WaitOnFlagUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d005      	beq.n	8003dc6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e006      	b.n	8003dd4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	e000      	b.n	8003dd4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003dd2:	2302      	movs	r3, #2
  }
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3720      	adds	r7, #32
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08a      	sub	sp, #40	@ 0x28
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	603b      	str	r3, [r7, #0]
 8003de8:	4613      	mov	r3, r2
 8003dea:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003df2:	2b20      	cmp	r3, #32
 8003df4:	f040 80b6 	bne.w	8003f64 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <HAL_UART_Receive+0x28>
 8003dfe:	88fb      	ldrh	r3, [r7, #6]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0ae      	b.n	8003f66 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2222      	movs	r2, #34	@ 0x22
 8003e14:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e1e:	f7fd fb65 	bl	80014ec <HAL_GetTick>
 8003e22:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	88fa      	ldrh	r2, [r7, #6]
 8003e28:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	88fa      	ldrh	r2, [r7, #6]
 8003e30:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e3c:	d10e      	bne.n	8003e5c <HAL_UART_Receive+0x80>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d105      	bne.n	8003e52 <HAL_UART_Receive+0x76>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003e4c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003e50:	e02d      	b.n	8003eae <HAL_UART_Receive+0xd2>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	22ff      	movs	r2, #255	@ 0xff
 8003e56:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003e5a:	e028      	b.n	8003eae <HAL_UART_Receive+0xd2>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10d      	bne.n	8003e80 <HAL_UART_Receive+0xa4>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d104      	bne.n	8003e76 <HAL_UART_Receive+0x9a>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	22ff      	movs	r2, #255	@ 0xff
 8003e70:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003e74:	e01b      	b.n	8003eae <HAL_UART_Receive+0xd2>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	227f      	movs	r2, #127	@ 0x7f
 8003e7a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003e7e:	e016      	b.n	8003eae <HAL_UART_Receive+0xd2>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e88:	d10d      	bne.n	8003ea6 <HAL_UART_Receive+0xca>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d104      	bne.n	8003e9c <HAL_UART_Receive+0xc0>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	227f      	movs	r2, #127	@ 0x7f
 8003e96:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003e9a:	e008      	b.n	8003eae <HAL_UART_Receive+0xd2>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	223f      	movs	r2, #63	@ 0x3f
 8003ea0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003ea4:	e003      	b.n	8003eae <HAL_UART_Receive+0xd2>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003eb4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ebe:	d108      	bne.n	8003ed2 <HAL_UART_Receive+0xf6>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d104      	bne.n	8003ed2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	61bb      	str	r3, [r7, #24]
 8003ed0:	e003      	b.n	8003eda <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003eda:	e037      	b.n	8003f4c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	2120      	movs	r1, #32
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 ffe2 	bl	8004eb0 <UART_WaitOnFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d005      	beq.n	8003efe <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e033      	b.n	8003f66 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10c      	bne.n	8003f1e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	8a7b      	ldrh	r3, [r7, #18]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	3302      	adds	r3, #2
 8003f1a:	61bb      	str	r3, [r7, #24]
 8003f1c:	e00d      	b.n	8003f3a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	8a7b      	ldrh	r3, [r7, #18]
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	3301      	adds	r3, #1
 8003f38:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1c1      	bne.n	8003edc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8003f60:	2300      	movs	r3, #0
 8003f62:	e000      	b.n	8003f66 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003f64:	2302      	movs	r3, #2
  }
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3720      	adds	r7, #32
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
	...

08003f70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b0ba      	sub	sp, #232	@ 0xe8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003f9a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003fa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d11b      	bne.n	8003fe4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fb0:	f003 0320 	and.w	r3, r3, #32
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d015      	beq.n	8003fe4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fbc:	f003 0320 	and.w	r3, r3, #32
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d105      	bne.n	8003fd0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d009      	beq.n	8003fe4 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 8300 	beq.w	80045da <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	4798      	blx	r3
      }
      return;
 8003fe2:	e2fa      	b.n	80045da <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8003fe4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 8123 	beq.w	8004234 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003fee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003ff2:	4b8d      	ldr	r3, [pc, #564]	@ (8004228 <HAL_UART_IRQHandler+0x2b8>)
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d106      	bne.n	8004008 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003ffa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003ffe:	4b8b      	ldr	r3, [pc, #556]	@ (800422c <HAL_UART_IRQHandler+0x2bc>)
 8004000:	4013      	ands	r3, r2
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 8116 	beq.w	8004234 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d011      	beq.n	8004038 <HAL_UART_IRQHandler+0xc8>
 8004014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00b      	beq.n	8004038 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2201      	movs	r2, #1
 8004026:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800402e:	f043 0201 	orr.w	r2, r3, #1
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d011      	beq.n	8004068 <HAL_UART_IRQHandler+0xf8>
 8004044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00b      	beq.n	8004068 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2202      	movs	r2, #2
 8004056:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800405e:	f043 0204 	orr.w	r2, r3, #4
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	2b00      	cmp	r3, #0
 8004072:	d011      	beq.n	8004098 <HAL_UART_IRQHandler+0x128>
 8004074:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00b      	beq.n	8004098 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2204      	movs	r2, #4
 8004086:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800408e:	f043 0202 	orr.w	r2, r3, #2
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800409c:	f003 0308 	and.w	r3, r3, #8
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d017      	beq.n	80040d4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80040a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040a8:	f003 0320 	and.w	r3, r3, #32
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d105      	bne.n	80040bc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80040b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80040b4:	4b5c      	ldr	r3, [pc, #368]	@ (8004228 <HAL_UART_IRQHandler+0x2b8>)
 80040b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00b      	beq.n	80040d4 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2208      	movs	r2, #8
 80040c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ca:	f043 0208 	orr.w	r2, r3, #8
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80040d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d012      	beq.n	8004106 <HAL_UART_IRQHandler+0x196>
 80040e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00c      	beq.n	8004106 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040fc:	f043 0220 	orr.w	r2, r3, #32
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 8266 	beq.w	80045de <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	d013      	beq.n	8004146 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800411e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b00      	cmp	r3, #0
 8004128:	d105      	bne.n	8004136 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800412a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800412e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d007      	beq.n	8004146 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800414c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800415a:	2b40      	cmp	r3, #64	@ 0x40
 800415c:	d005      	beq.n	800416a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800415e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004162:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004166:	2b00      	cmp	r3, #0
 8004168:	d054      	beq.n	8004214 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 ff0d 	bl	8004f8a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800417a:	2b40      	cmp	r3, #64	@ 0x40
 800417c:	d146      	bne.n	800420c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3308      	adds	r3, #8
 8004184:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004188:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004194:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004198:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800419c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	3308      	adds	r3, #8
 80041a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80041aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80041ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80041b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80041c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1d9      	bne.n	800417e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d017      	beq.n	8004204 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041da:	4a15      	ldr	r2, [pc, #84]	@ (8004230 <HAL_UART_IRQHandler+0x2c0>)
 80041dc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fd fbc7 	bl	8001978 <HAL_DMA_Abort_IT>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d019      	beq.n	8004224 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80041fe:	4610      	mov	r0, r2
 8004200:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004202:	e00f      	b.n	8004224 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f9f5 	bl	80045f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800420a:	e00b      	b.n	8004224 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 f9f1 	bl	80045f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004212:	e007      	b.n	8004224 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f9ed 	bl	80045f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004222:	e1dc      	b.n	80045de <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004224:	bf00      	nop
    return;
 8004226:	e1da      	b.n	80045de <HAL_UART_IRQHandler+0x66e>
 8004228:	10000001 	.word	0x10000001
 800422c:	04000120 	.word	0x04000120
 8004230:	08005057 	.word	0x08005057

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004238:	2b01      	cmp	r3, #1
 800423a:	f040 8170 	bne.w	800451e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800423e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004242:	f003 0310 	and.w	r3, r3, #16
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 8169 	beq.w	800451e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800424c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004250:	f003 0310 	and.w	r3, r3, #16
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 8162 	beq.w	800451e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2210      	movs	r2, #16
 8004260:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800426c:	2b40      	cmp	r3, #64	@ 0x40
 800426e:	f040 80d8 	bne.w	8004422 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004280:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 80af 	beq.w	80043e8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004290:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004294:	429a      	cmp	r2, r3
 8004296:	f080 80a7 	bcs.w	80043e8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0320 	and.w	r3, r3, #32
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f040 8087 	bne.w	80043c6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042c4:	e853 3f00 	ldrex	r3, [r3]
 80042c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80042cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	461a      	mov	r2, r3
 80042de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80042e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80042e6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80042ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80042f2:	e841 2300 	strex	r3, r2, [r1]
 80042f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80042fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1da      	bne.n	80042b8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	3308      	adds	r3, #8
 8004308:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800430c:	e853 3f00 	ldrex	r3, [r3]
 8004310:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004312:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004314:	f023 0301 	bic.w	r3, r3, #1
 8004318:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	3308      	adds	r3, #8
 8004322:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004326:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800432a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800432e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004332:	e841 2300 	strex	r3, r2, [r1]
 8004336:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004338:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1e1      	bne.n	8004302 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3308      	adds	r3, #8
 8004344:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004346:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004348:	e853 3f00 	ldrex	r3, [r3]
 800434c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800434e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004350:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004354:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	3308      	adds	r3, #8
 800435e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004362:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004364:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004366:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004368:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800436a:	e841 2300 	strex	r3, r2, [r1]
 800436e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004370:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1e3      	bne.n	800433e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2220      	movs	r2, #32
 800437a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800438c:	e853 3f00 	ldrex	r3, [r3]
 8004390:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004392:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004394:	f023 0310 	bic.w	r3, r3, #16
 8004398:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	461a      	mov	r2, r3
 80043a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043ae:	e841 2300 	strex	r3, r2, [r1]
 80043b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80043b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1e4      	bne.n	8004384 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7fd fa7d 	bl	80018c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2202      	movs	r2, #2
 80043ca:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80043d8:	b29b      	uxth	r3, r3
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	b29b      	uxth	r3, r3
 80043de:	4619      	mov	r1, r3
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f911 	bl	8004608 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80043e6:	e0fc      	b.n	80045e2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80043ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043f2:	429a      	cmp	r2, r3
 80043f4:	f040 80f5 	bne.w	80045e2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0320 	and.w	r3, r3, #32
 8004406:	2b20      	cmp	r3, #32
 8004408:	f040 80eb 	bne.w	80045e2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004418:	4619      	mov	r1, r3
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f8f4 	bl	8004608 <HAL_UARTEx_RxEventCallback>
      return;
 8004420:	e0df      	b.n	80045e2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800442e:	b29b      	uxth	r3, r3
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800443c:	b29b      	uxth	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 80d1 	beq.w	80045e6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004444:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 80cc 	beq.w	80045e6 <HAL_UART_IRQHandler+0x676>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004456:	e853 3f00 	ldrex	r3, [r3]
 800445a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800445c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800445e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004462:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	461a      	mov	r2, r3
 800446c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004470:	647b      	str	r3, [r7, #68]	@ 0x44
 8004472:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004474:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004476:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004478:	e841 2300 	strex	r3, r2, [r1]
 800447c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800447e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1e4      	bne.n	800444e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	3308      	adds	r3, #8
 800448a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448e:	e853 3f00 	ldrex	r3, [r3]
 8004492:	623b      	str	r3, [r7, #32]
   return(result);
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800449a:	f023 0301 	bic.w	r3, r3, #1
 800449e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3308      	adds	r3, #8
 80044a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80044ac:	633a      	str	r2, [r7, #48]	@ 0x30
 80044ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044b4:	e841 2300 	strex	r3, r2, [r1]
 80044b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e1      	bne.n	8004484 <HAL_UART_IRQHandler+0x514>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	e853 3f00 	ldrex	r3, [r3]
 80044e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f023 0310 	bic.w	r3, r3, #16
 80044e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	461a      	mov	r2, r3
 80044f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80044f6:	61fb      	str	r3, [r7, #28]
 80044f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	69b9      	ldr	r1, [r7, #24]
 80044fc:	69fa      	ldr	r2, [r7, #28]
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	617b      	str	r3, [r7, #20]
   return(result);
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e4      	bne.n	80044d4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2202      	movs	r2, #2
 800450e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004510:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004514:	4619      	mov	r1, r3
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f876 	bl	8004608 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800451c:	e063      	b.n	80045e6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800451e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004522:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00e      	beq.n	8004548 <HAL_UART_IRQHandler+0x5d8>
 800452a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800452e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d008      	beq.n	8004548 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800453e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 fdc9 	bl	80050d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004546:	e051      	b.n	80045ec <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800454c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004550:	2b00      	cmp	r3, #0
 8004552:	d014      	beq.n	800457e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800455c:	2b00      	cmp	r3, #0
 800455e:	d105      	bne.n	800456c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004564:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d008      	beq.n	800457e <HAL_UART_IRQHandler+0x60e>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004570:	2b00      	cmp	r3, #0
 8004572:	d03a      	beq.n	80045ea <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	4798      	blx	r3
    }
    return;
 800457c:	e035      	b.n	80045ea <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800457e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004586:	2b00      	cmp	r3, #0
 8004588:	d009      	beq.n	800459e <HAL_UART_IRQHandler+0x62e>
 800458a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800458e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fd73 	bl	8005082 <UART_EndTransmit_IT>
    return;
 800459c:	e026      	b.n	80045ec <HAL_UART_IRQHandler+0x67c>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800459e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d009      	beq.n	80045be <HAL_UART_IRQHandler+0x64e>
 80045aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045ae:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fda2 	bl	8005100 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045bc:	e016      	b.n	80045ec <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80045be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d010      	beq.n	80045ec <HAL_UART_IRQHandler+0x67c>
 80045ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	da0c      	bge.n	80045ec <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fd8a 	bl	80050ec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045d8:	e008      	b.n	80045ec <HAL_UART_IRQHandler+0x67c>
      return;
 80045da:	bf00      	nop
 80045dc:	e006      	b.n	80045ec <HAL_UART_IRQHandler+0x67c>
    return;
 80045de:	bf00      	nop
 80045e0:	e004      	b.n	80045ec <HAL_UART_IRQHandler+0x67c>
      return;
 80045e2:	bf00      	nop
 80045e4:	e002      	b.n	80045ec <HAL_UART_IRQHandler+0x67c>
      return;
 80045e6:	bf00      	nop
 80045e8:	e000      	b.n	80045ec <HAL_UART_IRQHandler+0x67c>
    return;
 80045ea:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80045ec:	37e8      	adds	r7, #232	@ 0xe8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop

080045f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	460b      	mov	r3, r1
 8004612:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004624:	b08c      	sub	sp, #48	@ 0x30
 8004626:	af00      	add	r7, sp, #0
 8004628:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	431a      	orrs	r2, r3
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	431a      	orrs	r2, r3
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	4313      	orrs	r3, r2
 8004646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	4baa      	ldr	r3, [pc, #680]	@ (80048f8 <UART_SetConfig+0x2d8>)
 8004650:	4013      	ands	r3, r2
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	6812      	ldr	r2, [r2, #0]
 8004656:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004658:	430b      	orrs	r3, r1
 800465a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	68da      	ldr	r2, [r3, #12]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a9f      	ldr	r2, [pc, #636]	@ (80048fc <UART_SetConfig+0x2dc>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d004      	beq.n	800468c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004688:	4313      	orrs	r3, r2
 800468a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004696:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	6812      	ldr	r2, [r2, #0]
 800469e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046a0:	430b      	orrs	r3, r1
 80046a2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046aa:	f023 010f 	bic.w	r1, r3, #15
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a90      	ldr	r2, [pc, #576]	@ (8004900 <UART_SetConfig+0x2e0>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d125      	bne.n	8004710 <UART_SetConfig+0xf0>
 80046c4:	4b8f      	ldr	r3, [pc, #572]	@ (8004904 <UART_SetConfig+0x2e4>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	d81a      	bhi.n	8004708 <UART_SetConfig+0xe8>
 80046d2:	a201      	add	r2, pc, #4	@ (adr r2, 80046d8 <UART_SetConfig+0xb8>)
 80046d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d8:	080046e9 	.word	0x080046e9
 80046dc:	080046f9 	.word	0x080046f9
 80046e0:	080046f1 	.word	0x080046f1
 80046e4:	08004701 	.word	0x08004701
 80046e8:	2301      	movs	r3, #1
 80046ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046ee:	e116      	b.n	800491e <UART_SetConfig+0x2fe>
 80046f0:	2302      	movs	r3, #2
 80046f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046f6:	e112      	b.n	800491e <UART_SetConfig+0x2fe>
 80046f8:	2304      	movs	r3, #4
 80046fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046fe:	e10e      	b.n	800491e <UART_SetConfig+0x2fe>
 8004700:	2308      	movs	r3, #8
 8004702:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004706:	e10a      	b.n	800491e <UART_SetConfig+0x2fe>
 8004708:	2310      	movs	r3, #16
 800470a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800470e:	e106      	b.n	800491e <UART_SetConfig+0x2fe>
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a7c      	ldr	r2, [pc, #496]	@ (8004908 <UART_SetConfig+0x2e8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d138      	bne.n	800478c <UART_SetConfig+0x16c>
 800471a:	4b7a      	ldr	r3, [pc, #488]	@ (8004904 <UART_SetConfig+0x2e4>)
 800471c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004720:	f003 030c 	and.w	r3, r3, #12
 8004724:	2b0c      	cmp	r3, #12
 8004726:	d82d      	bhi.n	8004784 <UART_SetConfig+0x164>
 8004728:	a201      	add	r2, pc, #4	@ (adr r2, 8004730 <UART_SetConfig+0x110>)
 800472a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472e:	bf00      	nop
 8004730:	08004765 	.word	0x08004765
 8004734:	08004785 	.word	0x08004785
 8004738:	08004785 	.word	0x08004785
 800473c:	08004785 	.word	0x08004785
 8004740:	08004775 	.word	0x08004775
 8004744:	08004785 	.word	0x08004785
 8004748:	08004785 	.word	0x08004785
 800474c:	08004785 	.word	0x08004785
 8004750:	0800476d 	.word	0x0800476d
 8004754:	08004785 	.word	0x08004785
 8004758:	08004785 	.word	0x08004785
 800475c:	08004785 	.word	0x08004785
 8004760:	0800477d 	.word	0x0800477d
 8004764:	2300      	movs	r3, #0
 8004766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800476a:	e0d8      	b.n	800491e <UART_SetConfig+0x2fe>
 800476c:	2302      	movs	r3, #2
 800476e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004772:	e0d4      	b.n	800491e <UART_SetConfig+0x2fe>
 8004774:	2304      	movs	r3, #4
 8004776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800477a:	e0d0      	b.n	800491e <UART_SetConfig+0x2fe>
 800477c:	2308      	movs	r3, #8
 800477e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004782:	e0cc      	b.n	800491e <UART_SetConfig+0x2fe>
 8004784:	2310      	movs	r3, #16
 8004786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800478a:	e0c8      	b.n	800491e <UART_SetConfig+0x2fe>
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a5e      	ldr	r2, [pc, #376]	@ (800490c <UART_SetConfig+0x2ec>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d125      	bne.n	80047e2 <UART_SetConfig+0x1c2>
 8004796:	4b5b      	ldr	r3, [pc, #364]	@ (8004904 <UART_SetConfig+0x2e4>)
 8004798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800479c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80047a0:	2b30      	cmp	r3, #48	@ 0x30
 80047a2:	d016      	beq.n	80047d2 <UART_SetConfig+0x1b2>
 80047a4:	2b30      	cmp	r3, #48	@ 0x30
 80047a6:	d818      	bhi.n	80047da <UART_SetConfig+0x1ba>
 80047a8:	2b20      	cmp	r3, #32
 80047aa:	d00a      	beq.n	80047c2 <UART_SetConfig+0x1a2>
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d814      	bhi.n	80047da <UART_SetConfig+0x1ba>
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d002      	beq.n	80047ba <UART_SetConfig+0x19a>
 80047b4:	2b10      	cmp	r3, #16
 80047b6:	d008      	beq.n	80047ca <UART_SetConfig+0x1aa>
 80047b8:	e00f      	b.n	80047da <UART_SetConfig+0x1ba>
 80047ba:	2300      	movs	r3, #0
 80047bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047c0:	e0ad      	b.n	800491e <UART_SetConfig+0x2fe>
 80047c2:	2302      	movs	r3, #2
 80047c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047c8:	e0a9      	b.n	800491e <UART_SetConfig+0x2fe>
 80047ca:	2304      	movs	r3, #4
 80047cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047d0:	e0a5      	b.n	800491e <UART_SetConfig+0x2fe>
 80047d2:	2308      	movs	r3, #8
 80047d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047d8:	e0a1      	b.n	800491e <UART_SetConfig+0x2fe>
 80047da:	2310      	movs	r3, #16
 80047dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047e0:	e09d      	b.n	800491e <UART_SetConfig+0x2fe>
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a4a      	ldr	r2, [pc, #296]	@ (8004910 <UART_SetConfig+0x2f0>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d125      	bne.n	8004838 <UART_SetConfig+0x218>
 80047ec:	4b45      	ldr	r3, [pc, #276]	@ (8004904 <UART_SetConfig+0x2e4>)
 80047ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80047f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80047f8:	d016      	beq.n	8004828 <UART_SetConfig+0x208>
 80047fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80047fc:	d818      	bhi.n	8004830 <UART_SetConfig+0x210>
 80047fe:	2b80      	cmp	r3, #128	@ 0x80
 8004800:	d00a      	beq.n	8004818 <UART_SetConfig+0x1f8>
 8004802:	2b80      	cmp	r3, #128	@ 0x80
 8004804:	d814      	bhi.n	8004830 <UART_SetConfig+0x210>
 8004806:	2b00      	cmp	r3, #0
 8004808:	d002      	beq.n	8004810 <UART_SetConfig+0x1f0>
 800480a:	2b40      	cmp	r3, #64	@ 0x40
 800480c:	d008      	beq.n	8004820 <UART_SetConfig+0x200>
 800480e:	e00f      	b.n	8004830 <UART_SetConfig+0x210>
 8004810:	2300      	movs	r3, #0
 8004812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004816:	e082      	b.n	800491e <UART_SetConfig+0x2fe>
 8004818:	2302      	movs	r3, #2
 800481a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800481e:	e07e      	b.n	800491e <UART_SetConfig+0x2fe>
 8004820:	2304      	movs	r3, #4
 8004822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004826:	e07a      	b.n	800491e <UART_SetConfig+0x2fe>
 8004828:	2308      	movs	r3, #8
 800482a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800482e:	e076      	b.n	800491e <UART_SetConfig+0x2fe>
 8004830:	2310      	movs	r3, #16
 8004832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004836:	e072      	b.n	800491e <UART_SetConfig+0x2fe>
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a35      	ldr	r2, [pc, #212]	@ (8004914 <UART_SetConfig+0x2f4>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d12a      	bne.n	8004898 <UART_SetConfig+0x278>
 8004842:	4b30      	ldr	r3, [pc, #192]	@ (8004904 <UART_SetConfig+0x2e4>)
 8004844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004848:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800484c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004850:	d01a      	beq.n	8004888 <UART_SetConfig+0x268>
 8004852:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004856:	d81b      	bhi.n	8004890 <UART_SetConfig+0x270>
 8004858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800485c:	d00c      	beq.n	8004878 <UART_SetConfig+0x258>
 800485e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004862:	d815      	bhi.n	8004890 <UART_SetConfig+0x270>
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <UART_SetConfig+0x250>
 8004868:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800486c:	d008      	beq.n	8004880 <UART_SetConfig+0x260>
 800486e:	e00f      	b.n	8004890 <UART_SetConfig+0x270>
 8004870:	2300      	movs	r3, #0
 8004872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004876:	e052      	b.n	800491e <UART_SetConfig+0x2fe>
 8004878:	2302      	movs	r3, #2
 800487a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800487e:	e04e      	b.n	800491e <UART_SetConfig+0x2fe>
 8004880:	2304      	movs	r3, #4
 8004882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004886:	e04a      	b.n	800491e <UART_SetConfig+0x2fe>
 8004888:	2308      	movs	r3, #8
 800488a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800488e:	e046      	b.n	800491e <UART_SetConfig+0x2fe>
 8004890:	2310      	movs	r3, #16
 8004892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004896:	e042      	b.n	800491e <UART_SetConfig+0x2fe>
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a17      	ldr	r2, [pc, #92]	@ (80048fc <UART_SetConfig+0x2dc>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d13a      	bne.n	8004918 <UART_SetConfig+0x2f8>
 80048a2:	4b18      	ldr	r3, [pc, #96]	@ (8004904 <UART_SetConfig+0x2e4>)
 80048a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80048ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048b0:	d01a      	beq.n	80048e8 <UART_SetConfig+0x2c8>
 80048b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048b6:	d81b      	bhi.n	80048f0 <UART_SetConfig+0x2d0>
 80048b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048bc:	d00c      	beq.n	80048d8 <UART_SetConfig+0x2b8>
 80048be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048c2:	d815      	bhi.n	80048f0 <UART_SetConfig+0x2d0>
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <UART_SetConfig+0x2b0>
 80048c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048cc:	d008      	beq.n	80048e0 <UART_SetConfig+0x2c0>
 80048ce:	e00f      	b.n	80048f0 <UART_SetConfig+0x2d0>
 80048d0:	2300      	movs	r3, #0
 80048d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048d6:	e022      	b.n	800491e <UART_SetConfig+0x2fe>
 80048d8:	2302      	movs	r3, #2
 80048da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048de:	e01e      	b.n	800491e <UART_SetConfig+0x2fe>
 80048e0:	2304      	movs	r3, #4
 80048e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048e6:	e01a      	b.n	800491e <UART_SetConfig+0x2fe>
 80048e8:	2308      	movs	r3, #8
 80048ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ee:	e016      	b.n	800491e <UART_SetConfig+0x2fe>
 80048f0:	2310      	movs	r3, #16
 80048f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048f6:	e012      	b.n	800491e <UART_SetConfig+0x2fe>
 80048f8:	cfff69f3 	.word	0xcfff69f3
 80048fc:	40008000 	.word	0x40008000
 8004900:	40013800 	.word	0x40013800
 8004904:	40021000 	.word	0x40021000
 8004908:	40004400 	.word	0x40004400
 800490c:	40004800 	.word	0x40004800
 8004910:	40004c00 	.word	0x40004c00
 8004914:	40005000 	.word	0x40005000
 8004918:	2310      	movs	r3, #16
 800491a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4aae      	ldr	r2, [pc, #696]	@ (8004bdc <UART_SetConfig+0x5bc>)
 8004924:	4293      	cmp	r3, r2
 8004926:	f040 8097 	bne.w	8004a58 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800492a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800492e:	2b08      	cmp	r3, #8
 8004930:	d823      	bhi.n	800497a <UART_SetConfig+0x35a>
 8004932:	a201      	add	r2, pc, #4	@ (adr r2, 8004938 <UART_SetConfig+0x318>)
 8004934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004938:	0800495d 	.word	0x0800495d
 800493c:	0800497b 	.word	0x0800497b
 8004940:	08004965 	.word	0x08004965
 8004944:	0800497b 	.word	0x0800497b
 8004948:	0800496b 	.word	0x0800496b
 800494c:	0800497b 	.word	0x0800497b
 8004950:	0800497b 	.word	0x0800497b
 8004954:	0800497b 	.word	0x0800497b
 8004958:	08004973 	.word	0x08004973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800495c:	f7fe fb5c 	bl	8003018 <HAL_RCC_GetPCLK1Freq>
 8004960:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004962:	e010      	b.n	8004986 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004964:	4b9e      	ldr	r3, [pc, #632]	@ (8004be0 <UART_SetConfig+0x5c0>)
 8004966:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004968:	e00d      	b.n	8004986 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800496a:	f7fe fabd 	bl	8002ee8 <HAL_RCC_GetSysClockFreq>
 800496e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004970:	e009      	b.n	8004986 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004972:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004976:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004978:	e005      	b.n	8004986 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004984:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 8130 	beq.w	8004bee <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004992:	4a94      	ldr	r2, [pc, #592]	@ (8004be4 <UART_SetConfig+0x5c4>)
 8004994:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004998:	461a      	mov	r2, r3
 800499a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499c:	fbb3 f3f2 	udiv	r3, r3, r2
 80049a0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	4613      	mov	r3, r2
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	4413      	add	r3, r2
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d305      	bcc.n	80049be <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d903      	bls.n	80049c6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80049c4:	e113      	b.n	8004bee <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c8:	2200      	movs	r2, #0
 80049ca:	60bb      	str	r3, [r7, #8]
 80049cc:	60fa      	str	r2, [r7, #12]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d2:	4a84      	ldr	r2, [pc, #528]	@ (8004be4 <UART_SetConfig+0x5c4>)
 80049d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049d8:	b29b      	uxth	r3, r3
 80049da:	2200      	movs	r2, #0
 80049dc:	603b      	str	r3, [r7, #0]
 80049de:	607a      	str	r2, [r7, #4]
 80049e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049e8:	f7fb fc72 	bl	80002d0 <__aeabi_uldivmod>
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	4610      	mov	r0, r2
 80049f2:	4619      	mov	r1, r3
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	f04f 0300 	mov.w	r3, #0
 80049fc:	020b      	lsls	r3, r1, #8
 80049fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a02:	0202      	lsls	r2, r0, #8
 8004a04:	6979      	ldr	r1, [r7, #20]
 8004a06:	6849      	ldr	r1, [r1, #4]
 8004a08:	0849      	lsrs	r1, r1, #1
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	460c      	mov	r4, r1
 8004a0e:	4605      	mov	r5, r0
 8004a10:	eb12 0804 	adds.w	r8, r2, r4
 8004a14:	eb43 0905 	adc.w	r9, r3, r5
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	469a      	mov	sl, r3
 8004a20:	4693      	mov	fp, r2
 8004a22:	4652      	mov	r2, sl
 8004a24:	465b      	mov	r3, fp
 8004a26:	4640      	mov	r0, r8
 8004a28:	4649      	mov	r1, r9
 8004a2a:	f7fb fc51 	bl	80002d0 <__aeabi_uldivmod>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	460b      	mov	r3, r1
 8004a32:	4613      	mov	r3, r2
 8004a34:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a36:	6a3b      	ldr	r3, [r7, #32]
 8004a38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a3c:	d308      	bcc.n	8004a50 <UART_SetConfig+0x430>
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a44:	d204      	bcs.n	8004a50 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6a3a      	ldr	r2, [r7, #32]
 8004a4c:	60da      	str	r2, [r3, #12]
 8004a4e:	e0ce      	b.n	8004bee <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004a56:	e0ca      	b.n	8004bee <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a60:	d166      	bne.n	8004b30 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004a62:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d827      	bhi.n	8004aba <UART_SetConfig+0x49a>
 8004a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a70 <UART_SetConfig+0x450>)
 8004a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a70:	08004a95 	.word	0x08004a95
 8004a74:	08004a9d 	.word	0x08004a9d
 8004a78:	08004aa5 	.word	0x08004aa5
 8004a7c:	08004abb 	.word	0x08004abb
 8004a80:	08004aab 	.word	0x08004aab
 8004a84:	08004abb 	.word	0x08004abb
 8004a88:	08004abb 	.word	0x08004abb
 8004a8c:	08004abb 	.word	0x08004abb
 8004a90:	08004ab3 	.word	0x08004ab3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a94:	f7fe fac0 	bl	8003018 <HAL_RCC_GetPCLK1Freq>
 8004a98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a9a:	e014      	b.n	8004ac6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a9c:	f7fe fad2 	bl	8003044 <HAL_RCC_GetPCLK2Freq>
 8004aa0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004aa2:	e010      	b.n	8004ac6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aa4:	4b4e      	ldr	r3, [pc, #312]	@ (8004be0 <UART_SetConfig+0x5c0>)
 8004aa6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004aa8:	e00d      	b.n	8004ac6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aaa:	f7fe fa1d 	bl	8002ee8 <HAL_RCC_GetSysClockFreq>
 8004aae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ab0:	e009      	b.n	8004ac6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ab2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ab6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ab8:	e005      	b.n	8004ac6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004aba:	2300      	movs	r3, #0
 8004abc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004ac4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 8090 	beq.w	8004bee <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad2:	4a44      	ldr	r2, [pc, #272]	@ (8004be4 <UART_SetConfig+0x5c4>)
 8004ad4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004adc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ae0:	005a      	lsls	r2, r3, #1
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	085b      	lsrs	r3, r3, #1
 8004ae8:	441a      	add	r2, r3
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004af4:	6a3b      	ldr	r3, [r7, #32]
 8004af6:	2b0f      	cmp	r3, #15
 8004af8:	d916      	bls.n	8004b28 <UART_SetConfig+0x508>
 8004afa:	6a3b      	ldr	r3, [r7, #32]
 8004afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b00:	d212      	bcs.n	8004b28 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b02:	6a3b      	ldr	r3, [r7, #32]
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	f023 030f 	bic.w	r3, r3, #15
 8004b0a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
 8004b0e:	085b      	lsrs	r3, r3, #1
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	8bfb      	ldrh	r3, [r7, #30]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	8bfa      	ldrh	r2, [r7, #30]
 8004b24:	60da      	str	r2, [r3, #12]
 8004b26:	e062      	b.n	8004bee <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004b2e:	e05e      	b.n	8004bee <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b30:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	d828      	bhi.n	8004b8a <UART_SetConfig+0x56a>
 8004b38:	a201      	add	r2, pc, #4	@ (adr r2, 8004b40 <UART_SetConfig+0x520>)
 8004b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3e:	bf00      	nop
 8004b40:	08004b65 	.word	0x08004b65
 8004b44:	08004b6d 	.word	0x08004b6d
 8004b48:	08004b75 	.word	0x08004b75
 8004b4c:	08004b8b 	.word	0x08004b8b
 8004b50:	08004b7b 	.word	0x08004b7b
 8004b54:	08004b8b 	.word	0x08004b8b
 8004b58:	08004b8b 	.word	0x08004b8b
 8004b5c:	08004b8b 	.word	0x08004b8b
 8004b60:	08004b83 	.word	0x08004b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b64:	f7fe fa58 	bl	8003018 <HAL_RCC_GetPCLK1Freq>
 8004b68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b6a:	e014      	b.n	8004b96 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b6c:	f7fe fa6a 	bl	8003044 <HAL_RCC_GetPCLK2Freq>
 8004b70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b72:	e010      	b.n	8004b96 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b74:	4b1a      	ldr	r3, [pc, #104]	@ (8004be0 <UART_SetConfig+0x5c0>)
 8004b76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b78:	e00d      	b.n	8004b96 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b7a:	f7fe f9b5 	bl	8002ee8 <HAL_RCC_GetSysClockFreq>
 8004b7e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b80:	e009      	b.n	8004b96 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b88:	e005      	b.n	8004b96 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004b94:	bf00      	nop
    }

    if (pclk != 0U)
 8004b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d028      	beq.n	8004bee <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba0:	4a10      	ldr	r2, [pc, #64]	@ (8004be4 <UART_SetConfig+0x5c4>)
 8004ba2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004baa:	fbb3 f2f2 	udiv	r2, r3, r2
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	085b      	lsrs	r3, r3, #1
 8004bb4:	441a      	add	r2, r3
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbe:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	2b0f      	cmp	r3, #15
 8004bc4:	d910      	bls.n	8004be8 <UART_SetConfig+0x5c8>
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bcc:	d20c      	bcs.n	8004be8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	60da      	str	r2, [r3, #12]
 8004bd8:	e009      	b.n	8004bee <UART_SetConfig+0x5ce>
 8004bda:	bf00      	nop
 8004bdc:	40008000 	.word	0x40008000
 8004be0:	00f42400 	.word	0x00f42400
 8004be4:	080063ec 	.word	0x080063ec
      }
      else
      {
        ret = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2200      	movs	r2, #0
 8004c02:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	2200      	movs	r2, #0
 8004c08:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004c0a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3730      	adds	r7, #48	@ 0x30
 8004c12:	46bd      	mov	sp, r7
 8004c14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004c18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00a      	beq.n	8004c42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00a      	beq.n	8004c64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00a      	beq.n	8004c86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8a:	f003 0304 	and.w	r3, r3, #4
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cac:	f003 0310 	and.w	r3, r3, #16
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00a      	beq.n	8004cca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d01a      	beq.n	8004d2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d16:	d10a      	bne.n	8004d2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	605a      	str	r2, [r3, #4]
  }
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b098      	sub	sp, #96	@ 0x60
 8004d60:	af02      	add	r7, sp, #8
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d6c:	f7fc fbbe 	bl	80014ec <HAL_GetTick>
 8004d70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0308 	and.w	r3, r3, #8
 8004d7c:	2b08      	cmp	r3, #8
 8004d7e:	d12f      	bne.n	8004de0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f88e 	bl	8004eb0 <UART_WaitOnFlagUntilTimeout>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d022      	beq.n	8004de0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da2:	e853 3f00 	ldrex	r3, [r3]
 8004da6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004daa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dae:	653b      	str	r3, [r7, #80]	@ 0x50
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	461a      	mov	r2, r3
 8004db6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004db8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004dbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dc0:	e841 2300 	strex	r3, r2, [r1]
 8004dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1e6      	bne.n	8004d9a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e063      	b.n	8004ea8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0304 	and.w	r3, r3, #4
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	d149      	bne.n	8004e82 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004df6:	2200      	movs	r2, #0
 8004df8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f857 	bl	8004eb0 <UART_WaitOnFlagUntilTimeout>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d03c      	beq.n	8004e82 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e10:	e853 3f00 	ldrex	r3, [r3]
 8004e14:	623b      	str	r3, [r7, #32]
   return(result);
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e26:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e28:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e2e:	e841 2300 	strex	r3, r2, [r1]
 8004e32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1e6      	bne.n	8004e08 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	3308      	adds	r3, #8
 8004e40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	e853 3f00 	ldrex	r3, [r3]
 8004e48:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f023 0301 	bic.w	r3, r3, #1
 8004e50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3308      	adds	r3, #8
 8004e58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e5a:	61fa      	str	r2, [r7, #28]
 8004e5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5e:	69b9      	ldr	r1, [r7, #24]
 8004e60:	69fa      	ldr	r2, [r7, #28]
 8004e62:	e841 2300 	strex	r3, r2, [r1]
 8004e66:	617b      	str	r3, [r7, #20]
   return(result);
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1e5      	bne.n	8004e3a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2220      	movs	r2, #32
 8004e72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e012      	b.n	8004ea8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3758      	adds	r7, #88	@ 0x58
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	603b      	str	r3, [r7, #0]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ec0:	e04f      	b.n	8004f62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d04b      	beq.n	8004f62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eca:	f7fc fb0f 	bl	80014ec <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d302      	bcc.n	8004ee0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e04e      	b.n	8004f82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0304 	and.w	r3, r3, #4
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d037      	beq.n	8004f62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2b80      	cmp	r3, #128	@ 0x80
 8004ef6:	d034      	beq.n	8004f62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	2b40      	cmp	r3, #64	@ 0x40
 8004efc:	d031      	beq.n	8004f62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	f003 0308 	and.w	r3, r3, #8
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	d110      	bne.n	8004f2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2208      	movs	r2, #8
 8004f12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f14:	68f8      	ldr	r0, [r7, #12]
 8004f16:	f000 f838 	bl	8004f8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2208      	movs	r2, #8
 8004f1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e029      	b.n	8004f82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	69db      	ldr	r3, [r3, #28]
 8004f34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f3c:	d111      	bne.n	8004f62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 f81e 	bl	8004f8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e00f      	b.n	8004f82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69da      	ldr	r2, [r3, #28]
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	bf0c      	ite	eq
 8004f72:	2301      	moveq	r3, #1
 8004f74:	2300      	movne	r3, #0
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	461a      	mov	r2, r3
 8004f7a:	79fb      	ldrb	r3, [r7, #7]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d0a0      	beq.n	8004ec2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b095      	sub	sp, #84	@ 0x54
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f9a:	e853 3f00 	ldrex	r3, [r3]
 8004f9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	461a      	mov	r2, r3
 8004fae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fb2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004fb6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004fb8:	e841 2300 	strex	r3, r2, [r1]
 8004fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e6      	bne.n	8004f92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	3308      	adds	r3, #8
 8004fca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	e853 3f00 	ldrex	r3, [r3]
 8004fd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fda:	f023 0301 	bic.w	r3, r3, #1
 8004fde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3308      	adds	r3, #8
 8004fe6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fe8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ff0:	e841 2300 	strex	r3, r2, [r1]
 8004ff4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1e3      	bne.n	8004fc4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005000:	2b01      	cmp	r3, #1
 8005002:	d118      	bne.n	8005036 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	e853 3f00 	ldrex	r3, [r3]
 8005010:	60bb      	str	r3, [r7, #8]
   return(result);
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	f023 0310 	bic.w	r3, r3, #16
 8005018:	647b      	str	r3, [r7, #68]	@ 0x44
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005022:	61bb      	str	r3, [r7, #24]
 8005024:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005026:	6979      	ldr	r1, [r7, #20]
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	e841 2300 	strex	r3, r2, [r1]
 800502e:	613b      	str	r3, [r7, #16]
   return(result);
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1e6      	bne.n	8005004 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2220      	movs	r2, #32
 800503a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800504a:	bf00      	nop
 800504c:	3754      	adds	r7, #84	@ 0x54
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b084      	sub	sp, #16
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005062:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f7ff fabd 	bl	80045f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800507a:	bf00      	nop
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b088      	sub	sp, #32
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	e853 3f00 	ldrex	r3, [r3]
 8005096:	60bb      	str	r3, [r7, #8]
   return(result);
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800509e:	61fb      	str	r3, [r7, #28]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	461a      	mov	r2, r3
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	61bb      	str	r3, [r7, #24]
 80050aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ac:	6979      	ldr	r1, [r7, #20]
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	e841 2300 	strex	r3, r2, [r1]
 80050b4:	613b      	str	r3, [r7, #16]
   return(result);
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1e6      	bne.n	800508a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2220      	movs	r2, #32
 80050c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7fb fa78 	bl	80005c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050d0:	bf00      	nop
 80050d2:	3720      	adds	r7, #32
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005122:	2b01      	cmp	r3, #1
 8005124:	d101      	bne.n	800512a <HAL_UARTEx_DisableFifoMode+0x16>
 8005126:	2302      	movs	r3, #2
 8005128:	e027      	b.n	800517a <HAL_UARTEx_DisableFifoMode+0x66>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2224      	movs	r2, #36	@ 0x24
 8005136:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0201 	bic.w	r2, r2, #1
 8005150:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005158:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2220      	movs	r2, #32
 800516c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b084      	sub	sp, #16
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005196:	2b01      	cmp	r3, #1
 8005198:	d101      	bne.n	800519e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800519a:	2302      	movs	r3, #2
 800519c:	e02d      	b.n	80051fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2224      	movs	r2, #36	@ 0x24
 80051aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0201 	bic.w	r2, r2, #1
 80051c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f850 	bl	8005280 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	b084      	sub	sp, #16
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
 800520a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005212:	2b01      	cmp	r3, #1
 8005214:	d101      	bne.n	800521a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005216:	2302      	movs	r3, #2
 8005218:	e02d      	b.n	8005276 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2224      	movs	r2, #36	@ 0x24
 8005226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0201 	bic.w	r2, r2, #1
 8005240:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f812 	bl	8005280 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2220      	movs	r2, #32
 8005268:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800528c:	2b00      	cmp	r3, #0
 800528e:	d108      	bne.n	80052a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80052a0:	e031      	b.n	8005306 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80052a2:	2308      	movs	r3, #8
 80052a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80052a6:	2308      	movs	r3, #8
 80052a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	0e5b      	lsrs	r3, r3, #25
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	f003 0307 	and.w	r3, r3, #7
 80052b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	0f5b      	lsrs	r3, r3, #29
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	f003 0307 	and.w	r3, r3, #7
 80052c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052ca:	7bbb      	ldrb	r3, [r7, #14]
 80052cc:	7b3a      	ldrb	r2, [r7, #12]
 80052ce:	4911      	ldr	r1, [pc, #68]	@ (8005314 <UARTEx_SetNbDataToProcess+0x94>)
 80052d0:	5c8a      	ldrb	r2, [r1, r2]
 80052d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80052d6:	7b3a      	ldrb	r2, [r7, #12]
 80052d8:	490f      	ldr	r1, [pc, #60]	@ (8005318 <UARTEx_SetNbDataToProcess+0x98>)
 80052da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052e8:	7bfb      	ldrb	r3, [r7, #15]
 80052ea:	7b7a      	ldrb	r2, [r7, #13]
 80052ec:	4909      	ldr	r1, [pc, #36]	@ (8005314 <UARTEx_SetNbDataToProcess+0x94>)
 80052ee:	5c8a      	ldrb	r2, [r1, r2]
 80052f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80052f4:	7b7a      	ldrb	r2, [r7, #13]
 80052f6:	4908      	ldr	r1, [pc, #32]	@ (8005318 <UARTEx_SetNbDataToProcess+0x98>)
 80052f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80052fe:	b29a      	uxth	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005306:	bf00      	nop
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	08006404 	.word	0x08006404
 8005318:	0800640c 	.word	0x0800640c

0800531c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800531c:	b084      	sub	sp, #16
 800531e:	b580      	push	{r7, lr}
 8005320:	b084      	sub	sp, #16
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	f107 001c 	add.w	r0, r7, #28
 800532a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fa68 	bl	8005810 <USB_CoreReset>
 8005340:	4603      	mov	r3, r0
 8005342:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005344:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005348:	2b00      	cmp	r3, #0
 800534a:	d106      	bne.n	800535a <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005350:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	639a      	str	r2, [r3, #56]	@ 0x38
 8005358:	e005      	b.n	8005366 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8005366:	7bfb      	ldrb	r3, [r7, #15]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005372:	b004      	add	sp, #16
 8005374:	4770      	bx	lr

08005376 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f023 0201 	bic.w	r2, r3, #1
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	460b      	mov	r3, r1
 80053a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80053b4:	78fb      	ldrb	r3, [r7, #3]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d115      	bne.n	80053e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80053c6:	200a      	movs	r0, #10
 80053c8:	f7fc f89c 	bl	8001504 <HAL_Delay>
      ms += 10U;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	330a      	adds	r3, #10
 80053d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fa0e 	bl	80057f4 <USB_GetMode>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d01e      	beq.n	800541c <USB_SetCurrentMode+0x84>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2bc7      	cmp	r3, #199	@ 0xc7
 80053e2:	d9f0      	bls.n	80053c6 <USB_SetCurrentMode+0x2e>
 80053e4:	e01a      	b.n	800541c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80053e6:	78fb      	ldrb	r3, [r7, #3]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d115      	bne.n	8005418 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80053f8:	200a      	movs	r0, #10
 80053fa:	f7fc f883 	bl	8001504 <HAL_Delay>
      ms += 10U;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	330a      	adds	r3, #10
 8005402:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 f9f5 	bl	80057f4 <USB_GetMode>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d005      	beq.n	800541c <USB_SetCurrentMode+0x84>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2bc7      	cmp	r3, #199	@ 0xc7
 8005414:	d9f0      	bls.n	80053f8 <USB_SetCurrentMode+0x60>
 8005416:	e001      	b.n	800541c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e005      	b.n	8005428 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2bc8      	cmp	r3, #200	@ 0xc8
 8005420:	d101      	bne.n	8005426 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e000      	b.n	8005428 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005430:	b084      	sub	sp, #16
 8005432:	b580      	push	{r7, lr}
 8005434:	b086      	sub	sp, #24
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
 800543a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800543e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800544a:	2300      	movs	r3, #0
 800544c:	613b      	str	r3, [r7, #16]
 800544e:	e009      	b.n	8005464 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	3340      	adds	r3, #64	@ 0x40
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	2200      	movs	r2, #0
 800545c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	3301      	adds	r3, #1
 8005462:	613b      	str	r3, [r7, #16]
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	2b0e      	cmp	r3, #14
 8005468:	d9f2      	bls.n	8005450 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800546a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800546e:	2b00      	cmp	r3, #0
 8005470:	d11c      	bne.n	80054ac <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005480:	f043 0302 	orr.w	r3, r3, #2
 8005484:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800548a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	e005      	b.n	80054b8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80054be:	461a      	mov	r2, r3
 80054c0:	2300      	movs	r3, #0
 80054c2:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80054c4:	2103      	movs	r1, #3
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f95a 	bl	8005780 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054cc:	2110      	movs	r1, #16
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f8f6 	bl	80056c0 <USB_FlushTxFifo>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f920 	bl	8005724 <USB_FlushRxFifo>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054f4:	461a      	mov	r2, r3
 80054f6:	2300      	movs	r3, #0
 80054f8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005500:	461a      	mov	r2, r3
 8005502:	2300      	movs	r3, #0
 8005504:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800550c:	461a      	mov	r2, r3
 800550e:	2300      	movs	r3, #0
 8005510:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005512:	2300      	movs	r3, #0
 8005514:	613b      	str	r3, [r7, #16]
 8005516:	e043      	b.n	80055a0 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800552a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800552e:	d118      	bne.n	8005562 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10a      	bne.n	800554c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	4413      	add	r3, r2
 800553e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005542:	461a      	mov	r2, r3
 8005544:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005548:	6013      	str	r3, [r2, #0]
 800554a:	e013      	b.n	8005574 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005558:	461a      	mov	r2, r3
 800555a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800555e:	6013      	str	r3, [r2, #0]
 8005560:	e008      	b.n	8005574 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	4413      	add	r3, r2
 800556a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800556e:	461a      	mov	r2, r3
 8005570:	2300      	movs	r3, #0
 8005572:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005580:	461a      	mov	r2, r3
 8005582:	2300      	movs	r3, #0
 8005584:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4413      	add	r3, r2
 800558e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005592:	461a      	mov	r2, r3
 8005594:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005598:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	3301      	adds	r3, #1
 800559e:	613b      	str	r3, [r7, #16]
 80055a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80055a4:	461a      	mov	r2, r3
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d3b5      	bcc.n	8005518 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055ac:	2300      	movs	r3, #0
 80055ae:	613b      	str	r3, [r7, #16]
 80055b0:	e043      	b.n	800563a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	015a      	lsls	r2, r3, #5
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055c8:	d118      	bne.n	80055fc <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10a      	bne.n	80055e6 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055dc:	461a      	mov	r2, r3
 80055de:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80055e2:	6013      	str	r3, [r2, #0]
 80055e4:	e013      	b.n	800560e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055f2:	461a      	mov	r2, r3
 80055f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80055f8:	6013      	str	r3, [r2, #0]
 80055fa:	e008      	b.n	800560e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005608:	461a      	mov	r2, r3
 800560a:	2300      	movs	r3, #0
 800560c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	4413      	add	r3, r2
 8005616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800561a:	461a      	mov	r2, r3
 800561c:	2300      	movs	r3, #0
 800561e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800562c:	461a      	mov	r2, r3
 800562e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005632:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	3301      	adds	r3, #1
 8005638:	613b      	str	r3, [r7, #16]
 800563a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800563e:	461a      	mov	r2, r3
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	4293      	cmp	r3, r2
 8005644:	d3b5      	bcc.n	80055b2 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005654:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005658:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005666:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	f043 0210 	orr.w	r2, r3, #16
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	699a      	ldr	r2, [r3, #24]
 8005678:	4b10      	ldr	r3, [pc, #64]	@ (80056bc <USB_DevInit+0x28c>)
 800567a:	4313      	orrs	r3, r2
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005680:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005684:	2b00      	cmp	r3, #0
 8005686:	d005      	beq.n	8005694 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	f043 0208 	orr.w	r2, r3, #8
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005694:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005698:	2b01      	cmp	r3, #1
 800569a:	d107      	bne.n	80056ac <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80056a4:	f043 0304 	orr.w	r3, r3, #4
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80056ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3718      	adds	r7, #24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056b8:	b004      	add	sp, #16
 80056ba:	4770      	bx	lr
 80056bc:	803c3800 	.word	0x803c3800

080056c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3301      	adds	r3, #1
 80056d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056da:	d901      	bls.n	80056e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e01b      	b.n	8005718 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	daf2      	bge.n	80056ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	019b      	lsls	r3, r3, #6
 80056f0:	f043 0220 	orr.w	r2, r3, #32
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	3301      	adds	r3, #1
 80056fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005704:	d901      	bls.n	800570a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e006      	b.n	8005718 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	f003 0320 	and.w	r3, r3, #32
 8005712:	2b20      	cmp	r3, #32
 8005714:	d0f0      	beq.n	80056f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	3301      	adds	r3, #1
 8005734:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800573c:	d901      	bls.n	8005742 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e018      	b.n	8005774 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	2b00      	cmp	r3, #0
 8005748:	daf2      	bge.n	8005730 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800574a:	2300      	movs	r3, #0
 800574c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2210      	movs	r2, #16
 8005752:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	3301      	adds	r3, #1
 8005758:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005760:	d901      	bls.n	8005766 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e006      	b.n	8005774 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	f003 0310 	and.w	r3, r3, #16
 800576e:	2b10      	cmp	r3, #16
 8005770:	d0f0      	beq.n	8005754 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	460b      	mov	r3, r1
 800578a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	78fb      	ldrb	r3, [r7, #3]
 800579a:	68f9      	ldr	r1, [r7, #12]
 800579c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057a0:	4313      	orrs	r3, r2
 80057a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b085      	sub	sp, #20
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80057cc:	f023 0303 	bic.w	r3, r3, #3
 80057d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057e0:	f043 0302 	orr.w	r3, r3, #2
 80057e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	f003 0301 	and.w	r3, r3, #1
}
 8005804:	4618      	mov	r0, r3
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3301      	adds	r3, #1
 8005820:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005828:	d901      	bls.n	800582e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e01b      	b.n	8005866 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	2b00      	cmp	r3, #0
 8005834:	daf2      	bge.n	800581c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005836:	2300      	movs	r3, #0
 8005838:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f043 0201 	orr.w	r2, r3, #1
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3301      	adds	r3, #1
 800584a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005852:	d901      	bls.n	8005858 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e006      	b.n	8005866 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b01      	cmp	r3, #1
 8005862:	d0f0      	beq.n	8005846 <USB_CoreReset+0x36>

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <atoi>:
 8005872:	220a      	movs	r2, #10
 8005874:	2100      	movs	r1, #0
 8005876:	f000 b87b 	b.w	8005970 <strtol>
	...

0800587c <_strtol_l.constprop.0>:
 800587c:	2b24      	cmp	r3, #36	@ 0x24
 800587e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005882:	4686      	mov	lr, r0
 8005884:	4690      	mov	r8, r2
 8005886:	d801      	bhi.n	800588c <_strtol_l.constprop.0+0x10>
 8005888:	2b01      	cmp	r3, #1
 800588a:	d106      	bne.n	800589a <_strtol_l.constprop.0+0x1e>
 800588c:	f000 f8b4 	bl	80059f8 <__errno>
 8005890:	2316      	movs	r3, #22
 8005892:	6003      	str	r3, [r0, #0]
 8005894:	2000      	movs	r0, #0
 8005896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800589a:	4834      	ldr	r0, [pc, #208]	@ (800596c <_strtol_l.constprop.0+0xf0>)
 800589c:	460d      	mov	r5, r1
 800589e:	462a      	mov	r2, r5
 80058a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058a4:	5d06      	ldrb	r6, [r0, r4]
 80058a6:	f016 0608 	ands.w	r6, r6, #8
 80058aa:	d1f8      	bne.n	800589e <_strtol_l.constprop.0+0x22>
 80058ac:	2c2d      	cmp	r4, #45	@ 0x2d
 80058ae:	d12d      	bne.n	800590c <_strtol_l.constprop.0+0x90>
 80058b0:	782c      	ldrb	r4, [r5, #0]
 80058b2:	2601      	movs	r6, #1
 80058b4:	1c95      	adds	r5, r2, #2
 80058b6:	f033 0210 	bics.w	r2, r3, #16
 80058ba:	d109      	bne.n	80058d0 <_strtol_l.constprop.0+0x54>
 80058bc:	2c30      	cmp	r4, #48	@ 0x30
 80058be:	d12a      	bne.n	8005916 <_strtol_l.constprop.0+0x9a>
 80058c0:	782a      	ldrb	r2, [r5, #0]
 80058c2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80058c6:	2a58      	cmp	r2, #88	@ 0x58
 80058c8:	d125      	bne.n	8005916 <_strtol_l.constprop.0+0x9a>
 80058ca:	786c      	ldrb	r4, [r5, #1]
 80058cc:	2310      	movs	r3, #16
 80058ce:	3502      	adds	r5, #2
 80058d0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80058d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80058d8:	2200      	movs	r2, #0
 80058da:	fbbc f9f3 	udiv	r9, ip, r3
 80058de:	4610      	mov	r0, r2
 80058e0:	fb03 ca19 	mls	sl, r3, r9, ip
 80058e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80058e8:	2f09      	cmp	r7, #9
 80058ea:	d81b      	bhi.n	8005924 <_strtol_l.constprop.0+0xa8>
 80058ec:	463c      	mov	r4, r7
 80058ee:	42a3      	cmp	r3, r4
 80058f0:	dd27      	ble.n	8005942 <_strtol_l.constprop.0+0xc6>
 80058f2:	1c57      	adds	r7, r2, #1
 80058f4:	d007      	beq.n	8005906 <_strtol_l.constprop.0+0x8a>
 80058f6:	4581      	cmp	r9, r0
 80058f8:	d320      	bcc.n	800593c <_strtol_l.constprop.0+0xc0>
 80058fa:	d101      	bne.n	8005900 <_strtol_l.constprop.0+0x84>
 80058fc:	45a2      	cmp	sl, r4
 80058fe:	db1d      	blt.n	800593c <_strtol_l.constprop.0+0xc0>
 8005900:	fb00 4003 	mla	r0, r0, r3, r4
 8005904:	2201      	movs	r2, #1
 8005906:	f815 4b01 	ldrb.w	r4, [r5], #1
 800590a:	e7eb      	b.n	80058e4 <_strtol_l.constprop.0+0x68>
 800590c:	2c2b      	cmp	r4, #43	@ 0x2b
 800590e:	bf04      	itt	eq
 8005910:	782c      	ldrbeq	r4, [r5, #0]
 8005912:	1c95      	addeq	r5, r2, #2
 8005914:	e7cf      	b.n	80058b6 <_strtol_l.constprop.0+0x3a>
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1da      	bne.n	80058d0 <_strtol_l.constprop.0+0x54>
 800591a:	2c30      	cmp	r4, #48	@ 0x30
 800591c:	bf0c      	ite	eq
 800591e:	2308      	moveq	r3, #8
 8005920:	230a      	movne	r3, #10
 8005922:	e7d5      	b.n	80058d0 <_strtol_l.constprop.0+0x54>
 8005924:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005928:	2f19      	cmp	r7, #25
 800592a:	d801      	bhi.n	8005930 <_strtol_l.constprop.0+0xb4>
 800592c:	3c37      	subs	r4, #55	@ 0x37
 800592e:	e7de      	b.n	80058ee <_strtol_l.constprop.0+0x72>
 8005930:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005934:	2f19      	cmp	r7, #25
 8005936:	d804      	bhi.n	8005942 <_strtol_l.constprop.0+0xc6>
 8005938:	3c57      	subs	r4, #87	@ 0x57
 800593a:	e7d8      	b.n	80058ee <_strtol_l.constprop.0+0x72>
 800593c:	f04f 32ff 	mov.w	r2, #4294967295
 8005940:	e7e1      	b.n	8005906 <_strtol_l.constprop.0+0x8a>
 8005942:	1c53      	adds	r3, r2, #1
 8005944:	d108      	bne.n	8005958 <_strtol_l.constprop.0+0xdc>
 8005946:	2322      	movs	r3, #34	@ 0x22
 8005948:	f8ce 3000 	str.w	r3, [lr]
 800594c:	4660      	mov	r0, ip
 800594e:	f1b8 0f00 	cmp.w	r8, #0
 8005952:	d0a0      	beq.n	8005896 <_strtol_l.constprop.0+0x1a>
 8005954:	1e69      	subs	r1, r5, #1
 8005956:	e006      	b.n	8005966 <_strtol_l.constprop.0+0xea>
 8005958:	b106      	cbz	r6, 800595c <_strtol_l.constprop.0+0xe0>
 800595a:	4240      	negs	r0, r0
 800595c:	f1b8 0f00 	cmp.w	r8, #0
 8005960:	d099      	beq.n	8005896 <_strtol_l.constprop.0+0x1a>
 8005962:	2a00      	cmp	r2, #0
 8005964:	d1f6      	bne.n	8005954 <_strtol_l.constprop.0+0xd8>
 8005966:	f8c8 1000 	str.w	r1, [r8]
 800596a:	e794      	b.n	8005896 <_strtol_l.constprop.0+0x1a>
 800596c:	08006415 	.word	0x08006415

08005970 <strtol>:
 8005970:	4613      	mov	r3, r2
 8005972:	460a      	mov	r2, r1
 8005974:	4601      	mov	r1, r0
 8005976:	4802      	ldr	r0, [pc, #8]	@ (8005980 <strtol+0x10>)
 8005978:	6800      	ldr	r0, [r0, #0]
 800597a:	f7ff bf7f 	b.w	800587c <_strtol_l.constprop.0>
 800597e:	bf00      	nop
 8005980:	2004000c 	.word	0x2004000c

08005984 <siprintf>:
 8005984:	b40e      	push	{r1, r2, r3}
 8005986:	b500      	push	{lr}
 8005988:	b09c      	sub	sp, #112	@ 0x70
 800598a:	ab1d      	add	r3, sp, #116	@ 0x74
 800598c:	9002      	str	r0, [sp, #8]
 800598e:	9006      	str	r0, [sp, #24]
 8005990:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005994:	4809      	ldr	r0, [pc, #36]	@ (80059bc <siprintf+0x38>)
 8005996:	9107      	str	r1, [sp, #28]
 8005998:	9104      	str	r1, [sp, #16]
 800599a:	4909      	ldr	r1, [pc, #36]	@ (80059c0 <siprintf+0x3c>)
 800599c:	f853 2b04 	ldr.w	r2, [r3], #4
 80059a0:	9105      	str	r1, [sp, #20]
 80059a2:	6800      	ldr	r0, [r0, #0]
 80059a4:	9301      	str	r3, [sp, #4]
 80059a6:	a902      	add	r1, sp, #8
 80059a8:	f000 f9a6 	bl	8005cf8 <_svfiprintf_r>
 80059ac:	9b02      	ldr	r3, [sp, #8]
 80059ae:	2200      	movs	r2, #0
 80059b0:	701a      	strb	r2, [r3, #0]
 80059b2:	b01c      	add	sp, #112	@ 0x70
 80059b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80059b8:	b003      	add	sp, #12
 80059ba:	4770      	bx	lr
 80059bc:	2004000c 	.word	0x2004000c
 80059c0:	ffff0208 	.word	0xffff0208

080059c4 <memset>:
 80059c4:	4402      	add	r2, r0
 80059c6:	4603      	mov	r3, r0
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d100      	bne.n	80059ce <memset+0xa>
 80059cc:	4770      	bx	lr
 80059ce:	f803 1b01 	strb.w	r1, [r3], #1
 80059d2:	e7f9      	b.n	80059c8 <memset+0x4>

080059d4 <strncmp>:
 80059d4:	b510      	push	{r4, lr}
 80059d6:	b16a      	cbz	r2, 80059f4 <strncmp+0x20>
 80059d8:	3901      	subs	r1, #1
 80059da:	1884      	adds	r4, r0, r2
 80059dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059e0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d103      	bne.n	80059f0 <strncmp+0x1c>
 80059e8:	42a0      	cmp	r0, r4
 80059ea:	d001      	beq.n	80059f0 <strncmp+0x1c>
 80059ec:	2a00      	cmp	r2, #0
 80059ee:	d1f5      	bne.n	80059dc <strncmp+0x8>
 80059f0:	1ad0      	subs	r0, r2, r3
 80059f2:	bd10      	pop	{r4, pc}
 80059f4:	4610      	mov	r0, r2
 80059f6:	e7fc      	b.n	80059f2 <strncmp+0x1e>

080059f8 <__errno>:
 80059f8:	4b01      	ldr	r3, [pc, #4]	@ (8005a00 <__errno+0x8>)
 80059fa:	6818      	ldr	r0, [r3, #0]
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	2004000c 	.word	0x2004000c

08005a04 <__libc_init_array>:
 8005a04:	b570      	push	{r4, r5, r6, lr}
 8005a06:	4d0d      	ldr	r5, [pc, #52]	@ (8005a3c <__libc_init_array+0x38>)
 8005a08:	4c0d      	ldr	r4, [pc, #52]	@ (8005a40 <__libc_init_array+0x3c>)
 8005a0a:	1b64      	subs	r4, r4, r5
 8005a0c:	10a4      	asrs	r4, r4, #2
 8005a0e:	2600      	movs	r6, #0
 8005a10:	42a6      	cmp	r6, r4
 8005a12:	d109      	bne.n	8005a28 <__libc_init_array+0x24>
 8005a14:	4d0b      	ldr	r5, [pc, #44]	@ (8005a44 <__libc_init_array+0x40>)
 8005a16:	4c0c      	ldr	r4, [pc, #48]	@ (8005a48 <__libc_init_array+0x44>)
 8005a18:	f000 fc66 	bl	80062e8 <_init>
 8005a1c:	1b64      	subs	r4, r4, r5
 8005a1e:	10a4      	asrs	r4, r4, #2
 8005a20:	2600      	movs	r6, #0
 8005a22:	42a6      	cmp	r6, r4
 8005a24:	d105      	bne.n	8005a32 <__libc_init_array+0x2e>
 8005a26:	bd70      	pop	{r4, r5, r6, pc}
 8005a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a2c:	4798      	blx	r3
 8005a2e:	3601      	adds	r6, #1
 8005a30:	e7ee      	b.n	8005a10 <__libc_init_array+0xc>
 8005a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a36:	4798      	blx	r3
 8005a38:	3601      	adds	r6, #1
 8005a3a:	e7f2      	b.n	8005a22 <__libc_init_array+0x1e>
 8005a3c:	08006550 	.word	0x08006550
 8005a40:	08006550 	.word	0x08006550
 8005a44:	08006550 	.word	0x08006550
 8005a48:	08006554 	.word	0x08006554

08005a4c <__retarget_lock_acquire_recursive>:
 8005a4c:	4770      	bx	lr

08005a4e <__retarget_lock_release_recursive>:
 8005a4e:	4770      	bx	lr

08005a50 <_free_r>:
 8005a50:	b538      	push	{r3, r4, r5, lr}
 8005a52:	4605      	mov	r5, r0
 8005a54:	2900      	cmp	r1, #0
 8005a56:	d041      	beq.n	8005adc <_free_r+0x8c>
 8005a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a5c:	1f0c      	subs	r4, r1, #4
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	bfb8      	it	lt
 8005a62:	18e4      	addlt	r4, r4, r3
 8005a64:	f000 f8e0 	bl	8005c28 <__malloc_lock>
 8005a68:	4a1d      	ldr	r2, [pc, #116]	@ (8005ae0 <_free_r+0x90>)
 8005a6a:	6813      	ldr	r3, [r2, #0]
 8005a6c:	b933      	cbnz	r3, 8005a7c <_free_r+0x2c>
 8005a6e:	6063      	str	r3, [r4, #4]
 8005a70:	6014      	str	r4, [r2, #0]
 8005a72:	4628      	mov	r0, r5
 8005a74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a78:	f000 b8dc 	b.w	8005c34 <__malloc_unlock>
 8005a7c:	42a3      	cmp	r3, r4
 8005a7e:	d908      	bls.n	8005a92 <_free_r+0x42>
 8005a80:	6820      	ldr	r0, [r4, #0]
 8005a82:	1821      	adds	r1, r4, r0
 8005a84:	428b      	cmp	r3, r1
 8005a86:	bf01      	itttt	eq
 8005a88:	6819      	ldreq	r1, [r3, #0]
 8005a8a:	685b      	ldreq	r3, [r3, #4]
 8005a8c:	1809      	addeq	r1, r1, r0
 8005a8e:	6021      	streq	r1, [r4, #0]
 8005a90:	e7ed      	b.n	8005a6e <_free_r+0x1e>
 8005a92:	461a      	mov	r2, r3
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	b10b      	cbz	r3, 8005a9c <_free_r+0x4c>
 8005a98:	42a3      	cmp	r3, r4
 8005a9a:	d9fa      	bls.n	8005a92 <_free_r+0x42>
 8005a9c:	6811      	ldr	r1, [r2, #0]
 8005a9e:	1850      	adds	r0, r2, r1
 8005aa0:	42a0      	cmp	r0, r4
 8005aa2:	d10b      	bne.n	8005abc <_free_r+0x6c>
 8005aa4:	6820      	ldr	r0, [r4, #0]
 8005aa6:	4401      	add	r1, r0
 8005aa8:	1850      	adds	r0, r2, r1
 8005aaa:	4283      	cmp	r3, r0
 8005aac:	6011      	str	r1, [r2, #0]
 8005aae:	d1e0      	bne.n	8005a72 <_free_r+0x22>
 8005ab0:	6818      	ldr	r0, [r3, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	6053      	str	r3, [r2, #4]
 8005ab6:	4408      	add	r0, r1
 8005ab8:	6010      	str	r0, [r2, #0]
 8005aba:	e7da      	b.n	8005a72 <_free_r+0x22>
 8005abc:	d902      	bls.n	8005ac4 <_free_r+0x74>
 8005abe:	230c      	movs	r3, #12
 8005ac0:	602b      	str	r3, [r5, #0]
 8005ac2:	e7d6      	b.n	8005a72 <_free_r+0x22>
 8005ac4:	6820      	ldr	r0, [r4, #0]
 8005ac6:	1821      	adds	r1, r4, r0
 8005ac8:	428b      	cmp	r3, r1
 8005aca:	bf04      	itt	eq
 8005acc:	6819      	ldreq	r1, [r3, #0]
 8005ace:	685b      	ldreq	r3, [r3, #4]
 8005ad0:	6063      	str	r3, [r4, #4]
 8005ad2:	bf04      	itt	eq
 8005ad4:	1809      	addeq	r1, r1, r0
 8005ad6:	6021      	streq	r1, [r4, #0]
 8005ad8:	6054      	str	r4, [r2, #4]
 8005ada:	e7ca      	b.n	8005a72 <_free_r+0x22>
 8005adc:	bd38      	pop	{r3, r4, r5, pc}
 8005ade:	bf00      	nop
 8005ae0:	200408ec 	.word	0x200408ec

08005ae4 <sbrk_aligned>:
 8005ae4:	b570      	push	{r4, r5, r6, lr}
 8005ae6:	4e0f      	ldr	r6, [pc, #60]	@ (8005b24 <sbrk_aligned+0x40>)
 8005ae8:	460c      	mov	r4, r1
 8005aea:	6831      	ldr	r1, [r6, #0]
 8005aec:	4605      	mov	r5, r0
 8005aee:	b911      	cbnz	r1, 8005af6 <sbrk_aligned+0x12>
 8005af0:	f000 fba6 	bl	8006240 <_sbrk_r>
 8005af4:	6030      	str	r0, [r6, #0]
 8005af6:	4621      	mov	r1, r4
 8005af8:	4628      	mov	r0, r5
 8005afa:	f000 fba1 	bl	8006240 <_sbrk_r>
 8005afe:	1c43      	adds	r3, r0, #1
 8005b00:	d103      	bne.n	8005b0a <sbrk_aligned+0x26>
 8005b02:	f04f 34ff 	mov.w	r4, #4294967295
 8005b06:	4620      	mov	r0, r4
 8005b08:	bd70      	pop	{r4, r5, r6, pc}
 8005b0a:	1cc4      	adds	r4, r0, #3
 8005b0c:	f024 0403 	bic.w	r4, r4, #3
 8005b10:	42a0      	cmp	r0, r4
 8005b12:	d0f8      	beq.n	8005b06 <sbrk_aligned+0x22>
 8005b14:	1a21      	subs	r1, r4, r0
 8005b16:	4628      	mov	r0, r5
 8005b18:	f000 fb92 	bl	8006240 <_sbrk_r>
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	d1f2      	bne.n	8005b06 <sbrk_aligned+0x22>
 8005b20:	e7ef      	b.n	8005b02 <sbrk_aligned+0x1e>
 8005b22:	bf00      	nop
 8005b24:	200408e8 	.word	0x200408e8

08005b28 <_malloc_r>:
 8005b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b2c:	1ccd      	adds	r5, r1, #3
 8005b2e:	f025 0503 	bic.w	r5, r5, #3
 8005b32:	3508      	adds	r5, #8
 8005b34:	2d0c      	cmp	r5, #12
 8005b36:	bf38      	it	cc
 8005b38:	250c      	movcc	r5, #12
 8005b3a:	2d00      	cmp	r5, #0
 8005b3c:	4606      	mov	r6, r0
 8005b3e:	db01      	blt.n	8005b44 <_malloc_r+0x1c>
 8005b40:	42a9      	cmp	r1, r5
 8005b42:	d904      	bls.n	8005b4e <_malloc_r+0x26>
 8005b44:	230c      	movs	r3, #12
 8005b46:	6033      	str	r3, [r6, #0]
 8005b48:	2000      	movs	r0, #0
 8005b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c24 <_malloc_r+0xfc>
 8005b52:	f000 f869 	bl	8005c28 <__malloc_lock>
 8005b56:	f8d8 3000 	ldr.w	r3, [r8]
 8005b5a:	461c      	mov	r4, r3
 8005b5c:	bb44      	cbnz	r4, 8005bb0 <_malloc_r+0x88>
 8005b5e:	4629      	mov	r1, r5
 8005b60:	4630      	mov	r0, r6
 8005b62:	f7ff ffbf 	bl	8005ae4 <sbrk_aligned>
 8005b66:	1c43      	adds	r3, r0, #1
 8005b68:	4604      	mov	r4, r0
 8005b6a:	d158      	bne.n	8005c1e <_malloc_r+0xf6>
 8005b6c:	f8d8 4000 	ldr.w	r4, [r8]
 8005b70:	4627      	mov	r7, r4
 8005b72:	2f00      	cmp	r7, #0
 8005b74:	d143      	bne.n	8005bfe <_malloc_r+0xd6>
 8005b76:	2c00      	cmp	r4, #0
 8005b78:	d04b      	beq.n	8005c12 <_malloc_r+0xea>
 8005b7a:	6823      	ldr	r3, [r4, #0]
 8005b7c:	4639      	mov	r1, r7
 8005b7e:	4630      	mov	r0, r6
 8005b80:	eb04 0903 	add.w	r9, r4, r3
 8005b84:	f000 fb5c 	bl	8006240 <_sbrk_r>
 8005b88:	4581      	cmp	r9, r0
 8005b8a:	d142      	bne.n	8005c12 <_malloc_r+0xea>
 8005b8c:	6821      	ldr	r1, [r4, #0]
 8005b8e:	1a6d      	subs	r5, r5, r1
 8005b90:	4629      	mov	r1, r5
 8005b92:	4630      	mov	r0, r6
 8005b94:	f7ff ffa6 	bl	8005ae4 <sbrk_aligned>
 8005b98:	3001      	adds	r0, #1
 8005b9a:	d03a      	beq.n	8005c12 <_malloc_r+0xea>
 8005b9c:	6823      	ldr	r3, [r4, #0]
 8005b9e:	442b      	add	r3, r5
 8005ba0:	6023      	str	r3, [r4, #0]
 8005ba2:	f8d8 3000 	ldr.w	r3, [r8]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	bb62      	cbnz	r2, 8005c04 <_malloc_r+0xdc>
 8005baa:	f8c8 7000 	str.w	r7, [r8]
 8005bae:	e00f      	b.n	8005bd0 <_malloc_r+0xa8>
 8005bb0:	6822      	ldr	r2, [r4, #0]
 8005bb2:	1b52      	subs	r2, r2, r5
 8005bb4:	d420      	bmi.n	8005bf8 <_malloc_r+0xd0>
 8005bb6:	2a0b      	cmp	r2, #11
 8005bb8:	d917      	bls.n	8005bea <_malloc_r+0xc2>
 8005bba:	1961      	adds	r1, r4, r5
 8005bbc:	42a3      	cmp	r3, r4
 8005bbe:	6025      	str	r5, [r4, #0]
 8005bc0:	bf18      	it	ne
 8005bc2:	6059      	strne	r1, [r3, #4]
 8005bc4:	6863      	ldr	r3, [r4, #4]
 8005bc6:	bf08      	it	eq
 8005bc8:	f8c8 1000 	streq.w	r1, [r8]
 8005bcc:	5162      	str	r2, [r4, r5]
 8005bce:	604b      	str	r3, [r1, #4]
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	f000 f82f 	bl	8005c34 <__malloc_unlock>
 8005bd6:	f104 000b 	add.w	r0, r4, #11
 8005bda:	1d23      	adds	r3, r4, #4
 8005bdc:	f020 0007 	bic.w	r0, r0, #7
 8005be0:	1ac2      	subs	r2, r0, r3
 8005be2:	bf1c      	itt	ne
 8005be4:	1a1b      	subne	r3, r3, r0
 8005be6:	50a3      	strne	r3, [r4, r2]
 8005be8:	e7af      	b.n	8005b4a <_malloc_r+0x22>
 8005bea:	6862      	ldr	r2, [r4, #4]
 8005bec:	42a3      	cmp	r3, r4
 8005bee:	bf0c      	ite	eq
 8005bf0:	f8c8 2000 	streq.w	r2, [r8]
 8005bf4:	605a      	strne	r2, [r3, #4]
 8005bf6:	e7eb      	b.n	8005bd0 <_malloc_r+0xa8>
 8005bf8:	4623      	mov	r3, r4
 8005bfa:	6864      	ldr	r4, [r4, #4]
 8005bfc:	e7ae      	b.n	8005b5c <_malloc_r+0x34>
 8005bfe:	463c      	mov	r4, r7
 8005c00:	687f      	ldr	r7, [r7, #4]
 8005c02:	e7b6      	b.n	8005b72 <_malloc_r+0x4a>
 8005c04:	461a      	mov	r2, r3
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	42a3      	cmp	r3, r4
 8005c0a:	d1fb      	bne.n	8005c04 <_malloc_r+0xdc>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	6053      	str	r3, [r2, #4]
 8005c10:	e7de      	b.n	8005bd0 <_malloc_r+0xa8>
 8005c12:	230c      	movs	r3, #12
 8005c14:	6033      	str	r3, [r6, #0]
 8005c16:	4630      	mov	r0, r6
 8005c18:	f000 f80c 	bl	8005c34 <__malloc_unlock>
 8005c1c:	e794      	b.n	8005b48 <_malloc_r+0x20>
 8005c1e:	6005      	str	r5, [r0, #0]
 8005c20:	e7d6      	b.n	8005bd0 <_malloc_r+0xa8>
 8005c22:	bf00      	nop
 8005c24:	200408ec 	.word	0x200408ec

08005c28 <__malloc_lock>:
 8005c28:	4801      	ldr	r0, [pc, #4]	@ (8005c30 <__malloc_lock+0x8>)
 8005c2a:	f7ff bf0f 	b.w	8005a4c <__retarget_lock_acquire_recursive>
 8005c2e:	bf00      	nop
 8005c30:	200408e4 	.word	0x200408e4

08005c34 <__malloc_unlock>:
 8005c34:	4801      	ldr	r0, [pc, #4]	@ (8005c3c <__malloc_unlock+0x8>)
 8005c36:	f7ff bf0a 	b.w	8005a4e <__retarget_lock_release_recursive>
 8005c3a:	bf00      	nop
 8005c3c:	200408e4 	.word	0x200408e4

08005c40 <__ssputs_r>:
 8005c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c44:	688e      	ldr	r6, [r1, #8]
 8005c46:	461f      	mov	r7, r3
 8005c48:	42be      	cmp	r6, r7
 8005c4a:	680b      	ldr	r3, [r1, #0]
 8005c4c:	4682      	mov	sl, r0
 8005c4e:	460c      	mov	r4, r1
 8005c50:	4690      	mov	r8, r2
 8005c52:	d82d      	bhi.n	8005cb0 <__ssputs_r+0x70>
 8005c54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c58:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005c5c:	d026      	beq.n	8005cac <__ssputs_r+0x6c>
 8005c5e:	6965      	ldr	r5, [r4, #20]
 8005c60:	6909      	ldr	r1, [r1, #16]
 8005c62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c66:	eba3 0901 	sub.w	r9, r3, r1
 8005c6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c6e:	1c7b      	adds	r3, r7, #1
 8005c70:	444b      	add	r3, r9
 8005c72:	106d      	asrs	r5, r5, #1
 8005c74:	429d      	cmp	r5, r3
 8005c76:	bf38      	it	cc
 8005c78:	461d      	movcc	r5, r3
 8005c7a:	0553      	lsls	r3, r2, #21
 8005c7c:	d527      	bpl.n	8005cce <__ssputs_r+0x8e>
 8005c7e:	4629      	mov	r1, r5
 8005c80:	f7ff ff52 	bl	8005b28 <_malloc_r>
 8005c84:	4606      	mov	r6, r0
 8005c86:	b360      	cbz	r0, 8005ce2 <__ssputs_r+0xa2>
 8005c88:	6921      	ldr	r1, [r4, #16]
 8005c8a:	464a      	mov	r2, r9
 8005c8c:	f000 fae8 	bl	8006260 <memcpy>
 8005c90:	89a3      	ldrh	r3, [r4, #12]
 8005c92:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005c96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c9a:	81a3      	strh	r3, [r4, #12]
 8005c9c:	6126      	str	r6, [r4, #16]
 8005c9e:	6165      	str	r5, [r4, #20]
 8005ca0:	444e      	add	r6, r9
 8005ca2:	eba5 0509 	sub.w	r5, r5, r9
 8005ca6:	6026      	str	r6, [r4, #0]
 8005ca8:	60a5      	str	r5, [r4, #8]
 8005caa:	463e      	mov	r6, r7
 8005cac:	42be      	cmp	r6, r7
 8005cae:	d900      	bls.n	8005cb2 <__ssputs_r+0x72>
 8005cb0:	463e      	mov	r6, r7
 8005cb2:	6820      	ldr	r0, [r4, #0]
 8005cb4:	4632      	mov	r2, r6
 8005cb6:	4641      	mov	r1, r8
 8005cb8:	f000 faa8 	bl	800620c <memmove>
 8005cbc:	68a3      	ldr	r3, [r4, #8]
 8005cbe:	1b9b      	subs	r3, r3, r6
 8005cc0:	60a3      	str	r3, [r4, #8]
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	4433      	add	r3, r6
 8005cc6:	6023      	str	r3, [r4, #0]
 8005cc8:	2000      	movs	r0, #0
 8005cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cce:	462a      	mov	r2, r5
 8005cd0:	f000 fad4 	bl	800627c <_realloc_r>
 8005cd4:	4606      	mov	r6, r0
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	d1e0      	bne.n	8005c9c <__ssputs_r+0x5c>
 8005cda:	6921      	ldr	r1, [r4, #16]
 8005cdc:	4650      	mov	r0, sl
 8005cde:	f7ff feb7 	bl	8005a50 <_free_r>
 8005ce2:	230c      	movs	r3, #12
 8005ce4:	f8ca 3000 	str.w	r3, [sl]
 8005ce8:	89a3      	ldrh	r3, [r4, #12]
 8005cea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cee:	81a3      	strh	r3, [r4, #12]
 8005cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf4:	e7e9      	b.n	8005cca <__ssputs_r+0x8a>
	...

08005cf8 <_svfiprintf_r>:
 8005cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfc:	4698      	mov	r8, r3
 8005cfe:	898b      	ldrh	r3, [r1, #12]
 8005d00:	061b      	lsls	r3, r3, #24
 8005d02:	b09d      	sub	sp, #116	@ 0x74
 8005d04:	4607      	mov	r7, r0
 8005d06:	460d      	mov	r5, r1
 8005d08:	4614      	mov	r4, r2
 8005d0a:	d510      	bpl.n	8005d2e <_svfiprintf_r+0x36>
 8005d0c:	690b      	ldr	r3, [r1, #16]
 8005d0e:	b973      	cbnz	r3, 8005d2e <_svfiprintf_r+0x36>
 8005d10:	2140      	movs	r1, #64	@ 0x40
 8005d12:	f7ff ff09 	bl	8005b28 <_malloc_r>
 8005d16:	6028      	str	r0, [r5, #0]
 8005d18:	6128      	str	r0, [r5, #16]
 8005d1a:	b930      	cbnz	r0, 8005d2a <_svfiprintf_r+0x32>
 8005d1c:	230c      	movs	r3, #12
 8005d1e:	603b      	str	r3, [r7, #0]
 8005d20:	f04f 30ff 	mov.w	r0, #4294967295
 8005d24:	b01d      	add	sp, #116	@ 0x74
 8005d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d2a:	2340      	movs	r3, #64	@ 0x40
 8005d2c:	616b      	str	r3, [r5, #20]
 8005d2e:	2300      	movs	r3, #0
 8005d30:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d32:	2320      	movs	r3, #32
 8005d34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d38:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d3c:	2330      	movs	r3, #48	@ 0x30
 8005d3e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005edc <_svfiprintf_r+0x1e4>
 8005d42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d46:	f04f 0901 	mov.w	r9, #1
 8005d4a:	4623      	mov	r3, r4
 8005d4c:	469a      	mov	sl, r3
 8005d4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d52:	b10a      	cbz	r2, 8005d58 <_svfiprintf_r+0x60>
 8005d54:	2a25      	cmp	r2, #37	@ 0x25
 8005d56:	d1f9      	bne.n	8005d4c <_svfiprintf_r+0x54>
 8005d58:	ebba 0b04 	subs.w	fp, sl, r4
 8005d5c:	d00b      	beq.n	8005d76 <_svfiprintf_r+0x7e>
 8005d5e:	465b      	mov	r3, fp
 8005d60:	4622      	mov	r2, r4
 8005d62:	4629      	mov	r1, r5
 8005d64:	4638      	mov	r0, r7
 8005d66:	f7ff ff6b 	bl	8005c40 <__ssputs_r>
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	f000 80a7 	beq.w	8005ebe <_svfiprintf_r+0x1c6>
 8005d70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d72:	445a      	add	r2, fp
 8005d74:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d76:	f89a 3000 	ldrb.w	r3, [sl]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f000 809f 	beq.w	8005ebe <_svfiprintf_r+0x1c6>
 8005d80:	2300      	movs	r3, #0
 8005d82:	f04f 32ff 	mov.w	r2, #4294967295
 8005d86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d8a:	f10a 0a01 	add.w	sl, sl, #1
 8005d8e:	9304      	str	r3, [sp, #16]
 8005d90:	9307      	str	r3, [sp, #28]
 8005d92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d96:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d98:	4654      	mov	r4, sl
 8005d9a:	2205      	movs	r2, #5
 8005d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005da0:	484e      	ldr	r0, [pc, #312]	@ (8005edc <_svfiprintf_r+0x1e4>)
 8005da2:	f7fa fa45 	bl	8000230 <memchr>
 8005da6:	9a04      	ldr	r2, [sp, #16]
 8005da8:	b9d8      	cbnz	r0, 8005de2 <_svfiprintf_r+0xea>
 8005daa:	06d0      	lsls	r0, r2, #27
 8005dac:	bf44      	itt	mi
 8005dae:	2320      	movmi	r3, #32
 8005db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005db4:	0711      	lsls	r1, r2, #28
 8005db6:	bf44      	itt	mi
 8005db8:	232b      	movmi	r3, #43	@ 0x2b
 8005dba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8005dc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dc4:	d015      	beq.n	8005df2 <_svfiprintf_r+0xfa>
 8005dc6:	9a07      	ldr	r2, [sp, #28]
 8005dc8:	4654      	mov	r4, sl
 8005dca:	2000      	movs	r0, #0
 8005dcc:	f04f 0c0a 	mov.w	ip, #10
 8005dd0:	4621      	mov	r1, r4
 8005dd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dd6:	3b30      	subs	r3, #48	@ 0x30
 8005dd8:	2b09      	cmp	r3, #9
 8005dda:	d94b      	bls.n	8005e74 <_svfiprintf_r+0x17c>
 8005ddc:	b1b0      	cbz	r0, 8005e0c <_svfiprintf_r+0x114>
 8005dde:	9207      	str	r2, [sp, #28]
 8005de0:	e014      	b.n	8005e0c <_svfiprintf_r+0x114>
 8005de2:	eba0 0308 	sub.w	r3, r0, r8
 8005de6:	fa09 f303 	lsl.w	r3, r9, r3
 8005dea:	4313      	orrs	r3, r2
 8005dec:	9304      	str	r3, [sp, #16]
 8005dee:	46a2      	mov	sl, r4
 8005df0:	e7d2      	b.n	8005d98 <_svfiprintf_r+0xa0>
 8005df2:	9b03      	ldr	r3, [sp, #12]
 8005df4:	1d19      	adds	r1, r3, #4
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	9103      	str	r1, [sp, #12]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	bfbb      	ittet	lt
 8005dfe:	425b      	neglt	r3, r3
 8005e00:	f042 0202 	orrlt.w	r2, r2, #2
 8005e04:	9307      	strge	r3, [sp, #28]
 8005e06:	9307      	strlt	r3, [sp, #28]
 8005e08:	bfb8      	it	lt
 8005e0a:	9204      	strlt	r2, [sp, #16]
 8005e0c:	7823      	ldrb	r3, [r4, #0]
 8005e0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e10:	d10a      	bne.n	8005e28 <_svfiprintf_r+0x130>
 8005e12:	7863      	ldrb	r3, [r4, #1]
 8005e14:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e16:	d132      	bne.n	8005e7e <_svfiprintf_r+0x186>
 8005e18:	9b03      	ldr	r3, [sp, #12]
 8005e1a:	1d1a      	adds	r2, r3, #4
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	9203      	str	r2, [sp, #12]
 8005e20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e24:	3402      	adds	r4, #2
 8005e26:	9305      	str	r3, [sp, #20]
 8005e28:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005eec <_svfiprintf_r+0x1f4>
 8005e2c:	7821      	ldrb	r1, [r4, #0]
 8005e2e:	2203      	movs	r2, #3
 8005e30:	4650      	mov	r0, sl
 8005e32:	f7fa f9fd 	bl	8000230 <memchr>
 8005e36:	b138      	cbz	r0, 8005e48 <_svfiprintf_r+0x150>
 8005e38:	9b04      	ldr	r3, [sp, #16]
 8005e3a:	eba0 000a 	sub.w	r0, r0, sl
 8005e3e:	2240      	movs	r2, #64	@ 0x40
 8005e40:	4082      	lsls	r2, r0
 8005e42:	4313      	orrs	r3, r2
 8005e44:	3401      	adds	r4, #1
 8005e46:	9304      	str	r3, [sp, #16]
 8005e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e4c:	4824      	ldr	r0, [pc, #144]	@ (8005ee0 <_svfiprintf_r+0x1e8>)
 8005e4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e52:	2206      	movs	r2, #6
 8005e54:	f7fa f9ec 	bl	8000230 <memchr>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	d036      	beq.n	8005eca <_svfiprintf_r+0x1d2>
 8005e5c:	4b21      	ldr	r3, [pc, #132]	@ (8005ee4 <_svfiprintf_r+0x1ec>)
 8005e5e:	bb1b      	cbnz	r3, 8005ea8 <_svfiprintf_r+0x1b0>
 8005e60:	9b03      	ldr	r3, [sp, #12]
 8005e62:	3307      	adds	r3, #7
 8005e64:	f023 0307 	bic.w	r3, r3, #7
 8005e68:	3308      	adds	r3, #8
 8005e6a:	9303      	str	r3, [sp, #12]
 8005e6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e6e:	4433      	add	r3, r6
 8005e70:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e72:	e76a      	b.n	8005d4a <_svfiprintf_r+0x52>
 8005e74:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e78:	460c      	mov	r4, r1
 8005e7a:	2001      	movs	r0, #1
 8005e7c:	e7a8      	b.n	8005dd0 <_svfiprintf_r+0xd8>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	3401      	adds	r4, #1
 8005e82:	9305      	str	r3, [sp, #20]
 8005e84:	4619      	mov	r1, r3
 8005e86:	f04f 0c0a 	mov.w	ip, #10
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e90:	3a30      	subs	r2, #48	@ 0x30
 8005e92:	2a09      	cmp	r2, #9
 8005e94:	d903      	bls.n	8005e9e <_svfiprintf_r+0x1a6>
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d0c6      	beq.n	8005e28 <_svfiprintf_r+0x130>
 8005e9a:	9105      	str	r1, [sp, #20]
 8005e9c:	e7c4      	b.n	8005e28 <_svfiprintf_r+0x130>
 8005e9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ea2:	4604      	mov	r4, r0
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e7f0      	b.n	8005e8a <_svfiprintf_r+0x192>
 8005ea8:	ab03      	add	r3, sp, #12
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	462a      	mov	r2, r5
 8005eae:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee8 <_svfiprintf_r+0x1f0>)
 8005eb0:	a904      	add	r1, sp, #16
 8005eb2:	4638      	mov	r0, r7
 8005eb4:	f3af 8000 	nop.w
 8005eb8:	1c42      	adds	r2, r0, #1
 8005eba:	4606      	mov	r6, r0
 8005ebc:	d1d6      	bne.n	8005e6c <_svfiprintf_r+0x174>
 8005ebe:	89ab      	ldrh	r3, [r5, #12]
 8005ec0:	065b      	lsls	r3, r3, #25
 8005ec2:	f53f af2d 	bmi.w	8005d20 <_svfiprintf_r+0x28>
 8005ec6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ec8:	e72c      	b.n	8005d24 <_svfiprintf_r+0x2c>
 8005eca:	ab03      	add	r3, sp, #12
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	462a      	mov	r2, r5
 8005ed0:	4b05      	ldr	r3, [pc, #20]	@ (8005ee8 <_svfiprintf_r+0x1f0>)
 8005ed2:	a904      	add	r1, sp, #16
 8005ed4:	4638      	mov	r0, r7
 8005ed6:	f000 f879 	bl	8005fcc <_printf_i>
 8005eda:	e7ed      	b.n	8005eb8 <_svfiprintf_r+0x1c0>
 8005edc:	08006515 	.word	0x08006515
 8005ee0:	0800651f 	.word	0x0800651f
 8005ee4:	00000000 	.word	0x00000000
 8005ee8:	08005c41 	.word	0x08005c41
 8005eec:	0800651b 	.word	0x0800651b

08005ef0 <_printf_common>:
 8005ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef4:	4616      	mov	r6, r2
 8005ef6:	4698      	mov	r8, r3
 8005ef8:	688a      	ldr	r2, [r1, #8]
 8005efa:	690b      	ldr	r3, [r1, #16]
 8005efc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f00:	4293      	cmp	r3, r2
 8005f02:	bfb8      	it	lt
 8005f04:	4613      	movlt	r3, r2
 8005f06:	6033      	str	r3, [r6, #0]
 8005f08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f0c:	4607      	mov	r7, r0
 8005f0e:	460c      	mov	r4, r1
 8005f10:	b10a      	cbz	r2, 8005f16 <_printf_common+0x26>
 8005f12:	3301      	adds	r3, #1
 8005f14:	6033      	str	r3, [r6, #0]
 8005f16:	6823      	ldr	r3, [r4, #0]
 8005f18:	0699      	lsls	r1, r3, #26
 8005f1a:	bf42      	ittt	mi
 8005f1c:	6833      	ldrmi	r3, [r6, #0]
 8005f1e:	3302      	addmi	r3, #2
 8005f20:	6033      	strmi	r3, [r6, #0]
 8005f22:	6825      	ldr	r5, [r4, #0]
 8005f24:	f015 0506 	ands.w	r5, r5, #6
 8005f28:	d106      	bne.n	8005f38 <_printf_common+0x48>
 8005f2a:	f104 0a19 	add.w	sl, r4, #25
 8005f2e:	68e3      	ldr	r3, [r4, #12]
 8005f30:	6832      	ldr	r2, [r6, #0]
 8005f32:	1a9b      	subs	r3, r3, r2
 8005f34:	42ab      	cmp	r3, r5
 8005f36:	dc26      	bgt.n	8005f86 <_printf_common+0x96>
 8005f38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f3c:	6822      	ldr	r2, [r4, #0]
 8005f3e:	3b00      	subs	r3, #0
 8005f40:	bf18      	it	ne
 8005f42:	2301      	movne	r3, #1
 8005f44:	0692      	lsls	r2, r2, #26
 8005f46:	d42b      	bmi.n	8005fa0 <_printf_common+0xb0>
 8005f48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f4c:	4641      	mov	r1, r8
 8005f4e:	4638      	mov	r0, r7
 8005f50:	47c8      	blx	r9
 8005f52:	3001      	adds	r0, #1
 8005f54:	d01e      	beq.n	8005f94 <_printf_common+0xa4>
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	6922      	ldr	r2, [r4, #16]
 8005f5a:	f003 0306 	and.w	r3, r3, #6
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	bf02      	ittt	eq
 8005f62:	68e5      	ldreq	r5, [r4, #12]
 8005f64:	6833      	ldreq	r3, [r6, #0]
 8005f66:	1aed      	subeq	r5, r5, r3
 8005f68:	68a3      	ldr	r3, [r4, #8]
 8005f6a:	bf0c      	ite	eq
 8005f6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f70:	2500      	movne	r5, #0
 8005f72:	4293      	cmp	r3, r2
 8005f74:	bfc4      	itt	gt
 8005f76:	1a9b      	subgt	r3, r3, r2
 8005f78:	18ed      	addgt	r5, r5, r3
 8005f7a:	2600      	movs	r6, #0
 8005f7c:	341a      	adds	r4, #26
 8005f7e:	42b5      	cmp	r5, r6
 8005f80:	d11a      	bne.n	8005fb8 <_printf_common+0xc8>
 8005f82:	2000      	movs	r0, #0
 8005f84:	e008      	b.n	8005f98 <_printf_common+0xa8>
 8005f86:	2301      	movs	r3, #1
 8005f88:	4652      	mov	r2, sl
 8005f8a:	4641      	mov	r1, r8
 8005f8c:	4638      	mov	r0, r7
 8005f8e:	47c8      	blx	r9
 8005f90:	3001      	adds	r0, #1
 8005f92:	d103      	bne.n	8005f9c <_printf_common+0xac>
 8005f94:	f04f 30ff 	mov.w	r0, #4294967295
 8005f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f9c:	3501      	adds	r5, #1
 8005f9e:	e7c6      	b.n	8005f2e <_printf_common+0x3e>
 8005fa0:	18e1      	adds	r1, r4, r3
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	2030      	movs	r0, #48	@ 0x30
 8005fa6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005faa:	4422      	add	r2, r4
 8005fac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005fb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005fb4:	3302      	adds	r3, #2
 8005fb6:	e7c7      	b.n	8005f48 <_printf_common+0x58>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	4622      	mov	r2, r4
 8005fbc:	4641      	mov	r1, r8
 8005fbe:	4638      	mov	r0, r7
 8005fc0:	47c8      	blx	r9
 8005fc2:	3001      	adds	r0, #1
 8005fc4:	d0e6      	beq.n	8005f94 <_printf_common+0xa4>
 8005fc6:	3601      	adds	r6, #1
 8005fc8:	e7d9      	b.n	8005f7e <_printf_common+0x8e>
	...

08005fcc <_printf_i>:
 8005fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd0:	7e0f      	ldrb	r7, [r1, #24]
 8005fd2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005fd4:	2f78      	cmp	r7, #120	@ 0x78
 8005fd6:	4691      	mov	r9, r2
 8005fd8:	4680      	mov	r8, r0
 8005fda:	460c      	mov	r4, r1
 8005fdc:	469a      	mov	sl, r3
 8005fde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005fe2:	d807      	bhi.n	8005ff4 <_printf_i+0x28>
 8005fe4:	2f62      	cmp	r7, #98	@ 0x62
 8005fe6:	d80a      	bhi.n	8005ffe <_printf_i+0x32>
 8005fe8:	2f00      	cmp	r7, #0
 8005fea:	f000 80d2 	beq.w	8006192 <_printf_i+0x1c6>
 8005fee:	2f58      	cmp	r7, #88	@ 0x58
 8005ff0:	f000 80b9 	beq.w	8006166 <_printf_i+0x19a>
 8005ff4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ff8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ffc:	e03a      	b.n	8006074 <_printf_i+0xa8>
 8005ffe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006002:	2b15      	cmp	r3, #21
 8006004:	d8f6      	bhi.n	8005ff4 <_printf_i+0x28>
 8006006:	a101      	add	r1, pc, #4	@ (adr r1, 800600c <_printf_i+0x40>)
 8006008:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800600c:	08006065 	.word	0x08006065
 8006010:	08006079 	.word	0x08006079
 8006014:	08005ff5 	.word	0x08005ff5
 8006018:	08005ff5 	.word	0x08005ff5
 800601c:	08005ff5 	.word	0x08005ff5
 8006020:	08005ff5 	.word	0x08005ff5
 8006024:	08006079 	.word	0x08006079
 8006028:	08005ff5 	.word	0x08005ff5
 800602c:	08005ff5 	.word	0x08005ff5
 8006030:	08005ff5 	.word	0x08005ff5
 8006034:	08005ff5 	.word	0x08005ff5
 8006038:	08006179 	.word	0x08006179
 800603c:	080060a3 	.word	0x080060a3
 8006040:	08006133 	.word	0x08006133
 8006044:	08005ff5 	.word	0x08005ff5
 8006048:	08005ff5 	.word	0x08005ff5
 800604c:	0800619b 	.word	0x0800619b
 8006050:	08005ff5 	.word	0x08005ff5
 8006054:	080060a3 	.word	0x080060a3
 8006058:	08005ff5 	.word	0x08005ff5
 800605c:	08005ff5 	.word	0x08005ff5
 8006060:	0800613b 	.word	0x0800613b
 8006064:	6833      	ldr	r3, [r6, #0]
 8006066:	1d1a      	adds	r2, r3, #4
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6032      	str	r2, [r6, #0]
 800606c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006070:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006074:	2301      	movs	r3, #1
 8006076:	e09d      	b.n	80061b4 <_printf_i+0x1e8>
 8006078:	6833      	ldr	r3, [r6, #0]
 800607a:	6820      	ldr	r0, [r4, #0]
 800607c:	1d19      	adds	r1, r3, #4
 800607e:	6031      	str	r1, [r6, #0]
 8006080:	0606      	lsls	r6, r0, #24
 8006082:	d501      	bpl.n	8006088 <_printf_i+0xbc>
 8006084:	681d      	ldr	r5, [r3, #0]
 8006086:	e003      	b.n	8006090 <_printf_i+0xc4>
 8006088:	0645      	lsls	r5, r0, #25
 800608a:	d5fb      	bpl.n	8006084 <_printf_i+0xb8>
 800608c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006090:	2d00      	cmp	r5, #0
 8006092:	da03      	bge.n	800609c <_printf_i+0xd0>
 8006094:	232d      	movs	r3, #45	@ 0x2d
 8006096:	426d      	negs	r5, r5
 8006098:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800609c:	4859      	ldr	r0, [pc, #356]	@ (8006204 <_printf_i+0x238>)
 800609e:	230a      	movs	r3, #10
 80060a0:	e011      	b.n	80060c6 <_printf_i+0xfa>
 80060a2:	6821      	ldr	r1, [r4, #0]
 80060a4:	6833      	ldr	r3, [r6, #0]
 80060a6:	0608      	lsls	r0, r1, #24
 80060a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80060ac:	d402      	bmi.n	80060b4 <_printf_i+0xe8>
 80060ae:	0649      	lsls	r1, r1, #25
 80060b0:	bf48      	it	mi
 80060b2:	b2ad      	uxthmi	r5, r5
 80060b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80060b6:	4853      	ldr	r0, [pc, #332]	@ (8006204 <_printf_i+0x238>)
 80060b8:	6033      	str	r3, [r6, #0]
 80060ba:	bf14      	ite	ne
 80060bc:	230a      	movne	r3, #10
 80060be:	2308      	moveq	r3, #8
 80060c0:	2100      	movs	r1, #0
 80060c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80060c6:	6866      	ldr	r6, [r4, #4]
 80060c8:	60a6      	str	r6, [r4, #8]
 80060ca:	2e00      	cmp	r6, #0
 80060cc:	bfa2      	ittt	ge
 80060ce:	6821      	ldrge	r1, [r4, #0]
 80060d0:	f021 0104 	bicge.w	r1, r1, #4
 80060d4:	6021      	strge	r1, [r4, #0]
 80060d6:	b90d      	cbnz	r5, 80060dc <_printf_i+0x110>
 80060d8:	2e00      	cmp	r6, #0
 80060da:	d04b      	beq.n	8006174 <_printf_i+0x1a8>
 80060dc:	4616      	mov	r6, r2
 80060de:	fbb5 f1f3 	udiv	r1, r5, r3
 80060e2:	fb03 5711 	mls	r7, r3, r1, r5
 80060e6:	5dc7      	ldrb	r7, [r0, r7]
 80060e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060ec:	462f      	mov	r7, r5
 80060ee:	42bb      	cmp	r3, r7
 80060f0:	460d      	mov	r5, r1
 80060f2:	d9f4      	bls.n	80060de <_printf_i+0x112>
 80060f4:	2b08      	cmp	r3, #8
 80060f6:	d10b      	bne.n	8006110 <_printf_i+0x144>
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	07df      	lsls	r7, r3, #31
 80060fc:	d508      	bpl.n	8006110 <_printf_i+0x144>
 80060fe:	6923      	ldr	r3, [r4, #16]
 8006100:	6861      	ldr	r1, [r4, #4]
 8006102:	4299      	cmp	r1, r3
 8006104:	bfde      	ittt	le
 8006106:	2330      	movle	r3, #48	@ 0x30
 8006108:	f806 3c01 	strble.w	r3, [r6, #-1]
 800610c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006110:	1b92      	subs	r2, r2, r6
 8006112:	6122      	str	r2, [r4, #16]
 8006114:	f8cd a000 	str.w	sl, [sp]
 8006118:	464b      	mov	r3, r9
 800611a:	aa03      	add	r2, sp, #12
 800611c:	4621      	mov	r1, r4
 800611e:	4640      	mov	r0, r8
 8006120:	f7ff fee6 	bl	8005ef0 <_printf_common>
 8006124:	3001      	adds	r0, #1
 8006126:	d14a      	bne.n	80061be <_printf_i+0x1f2>
 8006128:	f04f 30ff 	mov.w	r0, #4294967295
 800612c:	b004      	add	sp, #16
 800612e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006132:	6823      	ldr	r3, [r4, #0]
 8006134:	f043 0320 	orr.w	r3, r3, #32
 8006138:	6023      	str	r3, [r4, #0]
 800613a:	4833      	ldr	r0, [pc, #204]	@ (8006208 <_printf_i+0x23c>)
 800613c:	2778      	movs	r7, #120	@ 0x78
 800613e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	6831      	ldr	r1, [r6, #0]
 8006146:	061f      	lsls	r7, r3, #24
 8006148:	f851 5b04 	ldr.w	r5, [r1], #4
 800614c:	d402      	bmi.n	8006154 <_printf_i+0x188>
 800614e:	065f      	lsls	r7, r3, #25
 8006150:	bf48      	it	mi
 8006152:	b2ad      	uxthmi	r5, r5
 8006154:	6031      	str	r1, [r6, #0]
 8006156:	07d9      	lsls	r1, r3, #31
 8006158:	bf44      	itt	mi
 800615a:	f043 0320 	orrmi.w	r3, r3, #32
 800615e:	6023      	strmi	r3, [r4, #0]
 8006160:	b11d      	cbz	r5, 800616a <_printf_i+0x19e>
 8006162:	2310      	movs	r3, #16
 8006164:	e7ac      	b.n	80060c0 <_printf_i+0xf4>
 8006166:	4827      	ldr	r0, [pc, #156]	@ (8006204 <_printf_i+0x238>)
 8006168:	e7e9      	b.n	800613e <_printf_i+0x172>
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	f023 0320 	bic.w	r3, r3, #32
 8006170:	6023      	str	r3, [r4, #0]
 8006172:	e7f6      	b.n	8006162 <_printf_i+0x196>
 8006174:	4616      	mov	r6, r2
 8006176:	e7bd      	b.n	80060f4 <_printf_i+0x128>
 8006178:	6833      	ldr	r3, [r6, #0]
 800617a:	6825      	ldr	r5, [r4, #0]
 800617c:	6961      	ldr	r1, [r4, #20]
 800617e:	1d18      	adds	r0, r3, #4
 8006180:	6030      	str	r0, [r6, #0]
 8006182:	062e      	lsls	r6, r5, #24
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	d501      	bpl.n	800618c <_printf_i+0x1c0>
 8006188:	6019      	str	r1, [r3, #0]
 800618a:	e002      	b.n	8006192 <_printf_i+0x1c6>
 800618c:	0668      	lsls	r0, r5, #25
 800618e:	d5fb      	bpl.n	8006188 <_printf_i+0x1bc>
 8006190:	8019      	strh	r1, [r3, #0]
 8006192:	2300      	movs	r3, #0
 8006194:	6123      	str	r3, [r4, #16]
 8006196:	4616      	mov	r6, r2
 8006198:	e7bc      	b.n	8006114 <_printf_i+0x148>
 800619a:	6833      	ldr	r3, [r6, #0]
 800619c:	1d1a      	adds	r2, r3, #4
 800619e:	6032      	str	r2, [r6, #0]
 80061a0:	681e      	ldr	r6, [r3, #0]
 80061a2:	6862      	ldr	r2, [r4, #4]
 80061a4:	2100      	movs	r1, #0
 80061a6:	4630      	mov	r0, r6
 80061a8:	f7fa f842 	bl	8000230 <memchr>
 80061ac:	b108      	cbz	r0, 80061b2 <_printf_i+0x1e6>
 80061ae:	1b80      	subs	r0, r0, r6
 80061b0:	6060      	str	r0, [r4, #4]
 80061b2:	6863      	ldr	r3, [r4, #4]
 80061b4:	6123      	str	r3, [r4, #16]
 80061b6:	2300      	movs	r3, #0
 80061b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061bc:	e7aa      	b.n	8006114 <_printf_i+0x148>
 80061be:	6923      	ldr	r3, [r4, #16]
 80061c0:	4632      	mov	r2, r6
 80061c2:	4649      	mov	r1, r9
 80061c4:	4640      	mov	r0, r8
 80061c6:	47d0      	blx	sl
 80061c8:	3001      	adds	r0, #1
 80061ca:	d0ad      	beq.n	8006128 <_printf_i+0x15c>
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	079b      	lsls	r3, r3, #30
 80061d0:	d413      	bmi.n	80061fa <_printf_i+0x22e>
 80061d2:	68e0      	ldr	r0, [r4, #12]
 80061d4:	9b03      	ldr	r3, [sp, #12]
 80061d6:	4298      	cmp	r0, r3
 80061d8:	bfb8      	it	lt
 80061da:	4618      	movlt	r0, r3
 80061dc:	e7a6      	b.n	800612c <_printf_i+0x160>
 80061de:	2301      	movs	r3, #1
 80061e0:	4632      	mov	r2, r6
 80061e2:	4649      	mov	r1, r9
 80061e4:	4640      	mov	r0, r8
 80061e6:	47d0      	blx	sl
 80061e8:	3001      	adds	r0, #1
 80061ea:	d09d      	beq.n	8006128 <_printf_i+0x15c>
 80061ec:	3501      	adds	r5, #1
 80061ee:	68e3      	ldr	r3, [r4, #12]
 80061f0:	9903      	ldr	r1, [sp, #12]
 80061f2:	1a5b      	subs	r3, r3, r1
 80061f4:	42ab      	cmp	r3, r5
 80061f6:	dcf2      	bgt.n	80061de <_printf_i+0x212>
 80061f8:	e7eb      	b.n	80061d2 <_printf_i+0x206>
 80061fa:	2500      	movs	r5, #0
 80061fc:	f104 0619 	add.w	r6, r4, #25
 8006200:	e7f5      	b.n	80061ee <_printf_i+0x222>
 8006202:	bf00      	nop
 8006204:	08006526 	.word	0x08006526
 8006208:	08006537 	.word	0x08006537

0800620c <memmove>:
 800620c:	4288      	cmp	r0, r1
 800620e:	b510      	push	{r4, lr}
 8006210:	eb01 0402 	add.w	r4, r1, r2
 8006214:	d902      	bls.n	800621c <memmove+0x10>
 8006216:	4284      	cmp	r4, r0
 8006218:	4623      	mov	r3, r4
 800621a:	d807      	bhi.n	800622c <memmove+0x20>
 800621c:	1e43      	subs	r3, r0, #1
 800621e:	42a1      	cmp	r1, r4
 8006220:	d008      	beq.n	8006234 <memmove+0x28>
 8006222:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006226:	f803 2f01 	strb.w	r2, [r3, #1]!
 800622a:	e7f8      	b.n	800621e <memmove+0x12>
 800622c:	4402      	add	r2, r0
 800622e:	4601      	mov	r1, r0
 8006230:	428a      	cmp	r2, r1
 8006232:	d100      	bne.n	8006236 <memmove+0x2a>
 8006234:	bd10      	pop	{r4, pc}
 8006236:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800623a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800623e:	e7f7      	b.n	8006230 <memmove+0x24>

08006240 <_sbrk_r>:
 8006240:	b538      	push	{r3, r4, r5, lr}
 8006242:	4d06      	ldr	r5, [pc, #24]	@ (800625c <_sbrk_r+0x1c>)
 8006244:	2300      	movs	r3, #0
 8006246:	4604      	mov	r4, r0
 8006248:	4608      	mov	r0, r1
 800624a:	602b      	str	r3, [r5, #0]
 800624c:	f7fb f874 	bl	8001338 <_sbrk>
 8006250:	1c43      	adds	r3, r0, #1
 8006252:	d102      	bne.n	800625a <_sbrk_r+0x1a>
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	b103      	cbz	r3, 800625a <_sbrk_r+0x1a>
 8006258:	6023      	str	r3, [r4, #0]
 800625a:	bd38      	pop	{r3, r4, r5, pc}
 800625c:	200408e0 	.word	0x200408e0

08006260 <memcpy>:
 8006260:	440a      	add	r2, r1
 8006262:	4291      	cmp	r1, r2
 8006264:	f100 33ff 	add.w	r3, r0, #4294967295
 8006268:	d100      	bne.n	800626c <memcpy+0xc>
 800626a:	4770      	bx	lr
 800626c:	b510      	push	{r4, lr}
 800626e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006272:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006276:	4291      	cmp	r1, r2
 8006278:	d1f9      	bne.n	800626e <memcpy+0xe>
 800627a:	bd10      	pop	{r4, pc}

0800627c <_realloc_r>:
 800627c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006280:	4680      	mov	r8, r0
 8006282:	4615      	mov	r5, r2
 8006284:	460c      	mov	r4, r1
 8006286:	b921      	cbnz	r1, 8006292 <_realloc_r+0x16>
 8006288:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800628c:	4611      	mov	r1, r2
 800628e:	f7ff bc4b 	b.w	8005b28 <_malloc_r>
 8006292:	b92a      	cbnz	r2, 80062a0 <_realloc_r+0x24>
 8006294:	f7ff fbdc 	bl	8005a50 <_free_r>
 8006298:	2400      	movs	r4, #0
 800629a:	4620      	mov	r0, r4
 800629c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062a0:	f000 f81a 	bl	80062d8 <_malloc_usable_size_r>
 80062a4:	4285      	cmp	r5, r0
 80062a6:	4606      	mov	r6, r0
 80062a8:	d802      	bhi.n	80062b0 <_realloc_r+0x34>
 80062aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80062ae:	d8f4      	bhi.n	800629a <_realloc_r+0x1e>
 80062b0:	4629      	mov	r1, r5
 80062b2:	4640      	mov	r0, r8
 80062b4:	f7ff fc38 	bl	8005b28 <_malloc_r>
 80062b8:	4607      	mov	r7, r0
 80062ba:	2800      	cmp	r0, #0
 80062bc:	d0ec      	beq.n	8006298 <_realloc_r+0x1c>
 80062be:	42b5      	cmp	r5, r6
 80062c0:	462a      	mov	r2, r5
 80062c2:	4621      	mov	r1, r4
 80062c4:	bf28      	it	cs
 80062c6:	4632      	movcs	r2, r6
 80062c8:	f7ff ffca 	bl	8006260 <memcpy>
 80062cc:	4621      	mov	r1, r4
 80062ce:	4640      	mov	r0, r8
 80062d0:	f7ff fbbe 	bl	8005a50 <_free_r>
 80062d4:	463c      	mov	r4, r7
 80062d6:	e7e0      	b.n	800629a <_realloc_r+0x1e>

080062d8 <_malloc_usable_size_r>:
 80062d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062dc:	1f18      	subs	r0, r3, #4
 80062de:	2b00      	cmp	r3, #0
 80062e0:	bfbc      	itt	lt
 80062e2:	580b      	ldrlt	r3, [r1, r0]
 80062e4:	18c0      	addlt	r0, r0, r3
 80062e6:	4770      	bx	lr

080062e8 <_init>:
 80062e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ea:	bf00      	nop
 80062ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ee:	bc08      	pop	{r3}
 80062f0:	469e      	mov	lr, r3
 80062f2:	4770      	bx	lr

080062f4 <_fini>:
 80062f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f6:	bf00      	nop
 80062f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062fa:	bc08      	pop	{r3}
 80062fc:	469e      	mov	lr, r3
 80062fe:	4770      	bx	lr
